using ClosedXML.Excel; // Enables working with Excel files without Microsoft Office installed.
using CopyThatProgram.Models;
using ModernProgress;
using DocumentFormat.OpenXml.Drawing;
using DocumentFormat.OpenXml.Drawing.Diagrams;
using DocumentFormat.OpenXml.EMMA;
using DocumentFormat.OpenXml.Vml;
using DocumentFormat.OpenXml.Wordprocessing;
using Microsoft.Win32;
using Newtonsoft.Json; // Provides a framework for serializing and deserializing JSON objects.
using SHDocVw; // Offers access to the Shell's Document View (e.g., Internet Explorer).
using Shell32;
using System.Collections.Concurrent; // Includes thread-safe collection classes for multi-threaded access.
using System.Collections.Specialized; // Provides specialized collections like NameValueCollection.
using System.ComponentModel; // Supports components, data binding, and licensing.
using System.Data; // Provides classes for managing data from various sources (e.g., DataTables).
using System.Diagnostics; // Allows interaction with system processes, event logs, and performance counters.
using System.DirectoryServices.ActiveDirectory;
using System.Drawing;
using System.Globalization; // Provides culture-specific information like date and number formatting.
using System.IO.Compression;
using System.Linq; // Offers LINQ for querying data sources with a syntax similar to SQL.
using System.Linq.Expressions;
using System.Media; // Enables playing system sounds.
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices; // Provides a collection of services for interacting with COM objects, native APIs, and other system components.
using System.Runtime.Versioning; // Contains attributes for specifying the target operating system version.
using System.Security; // Provides the underlying structure of the Common Language Runtime (CLR) security system.
using System.Security.Cryptography;
using System.Text; // Contains classes for character encodings (e.g., ASCII, UTF-8).
using System.Text.Json; // Provides functionality to serialize objects to and deserialize objects from JSON.
using System.Threading.Tasks.Dataflow; // Offers a library for creating dataflow pipelines, useful for asynchronous data processing.
using System.Windows.Forms;
using System.Xml; // Provides a framework for working with XML data.
using System.Xml.Linq; // Offers LINQ for XML, a convenient way to manipulate XML documents.
using Twilio.TwiML.Messaging;
using Color = System.Drawing.Color;
using FastFileSystemEntry = CopyThatProgram.FastEnumerator.Entry; // Alias for a file system entry class, likely for performance.
using Label = System.Windows.Forms.Label; // Explicitly specifies the Label control from Windows Forms.
using String = System.String; // Explicitly specifies the String class.
using TextBox = System.Windows.Forms.TextBox; // Explicitly specifies the TextBox control from Windows Forms.
using Timer = System.Windows.Forms.Timer; // Explicitly specifies the Timer control from Windows Forms.
namespace CopyThatProgram
{
    public partial class mainForm : Form
    {
        // =====================
        // 🔢 Integers
        // =====================
        private int _walkCounter = 0; // Counts the number of directory walk operations performed.
        private int _processedFolders = 0; // Tracks the number of folders that have been processed.
        private int _totalFolders = 0; // Stores the total number of folders to be processed.
        private int _totalFileCount = 0; // Holds the total number of files in the source directory.
        private int _processedFiles = 0; // Counts the number of files that have been processed (copied, moved, or deleted).
        private int _totalFilesCopied = 0; // Total count of files successfully copied.
        private int _totalFilesCopiedMulti = 0; // Total count of files successfully copied.
        private int _totalFilesMoved = 0; // Total count of files successfully moved.
        private int _totalFilesDeleted = 0; // Total count of files successfully deleted.
        private int _totalFilesSkipped = 0; // Total count of files skipped during an operation.
        private int _totalFilesFailed = 0; // Total count of files that failed to process.
        private int _multiThreadProcessedFiles = 0; // Count of files processed in a multi-threaded operation.
        private int _currentFileIndex = 0; // The index of the file currently being processed.
        private int _roundRobinTargetIndex = 0; // Used for distributing files among multiple target directories.
        private int _retryCount = 0; // The number of times a file operation has been retried.
        private int _filesProcessed = 0; // Another counter for files processed, likely for a different scope.
        private int _totalFilesToProcess = 0; // Stores the total number of files in the current job.
        private int _totalFoldersToProcess = 0; // Stores the total number of folders in the current job.
        private int scrollSpeed = 4; // Defines the speed of scrolling for UI elements.
        private int animationStep = 10; // Speed of animation (pixels per tick).
        private int targetHeight; // The height the form should reach during an animation.
        private int animationDirection; // +1 for expand, -1 for collapse.
        int progressPercentageFile = 0; // The percentage of progress for the current file.
        private int bufferSize; // The size of the buffer used for file operations (copying, etc.).
        private const int MAX_RETRIES = 3; // The maximum number of retries for a failed operation.                
        private int _currentIndex = 0; // An integer to track the current index in a list.
        private int _totalDirs;// An interger for the total directories.
        // =====================
        // 🧮 Longs
        // =====================
        private long filesLeft; // Number of files remaining to be processed.
        private long _totalBytesProcessed = 0; // The number of bytes that have been processed in the current operation.
        private long _lastProcessedBytesForSpeed = 0; // Used to calculate the transfer speed.
        private long _copiedBytes; // Total bytes copied.
        long totalBytesProcessed = 0; // Total bytes processed, likely for a specific operation.
        long totalBytesProcessed2 = 0; // A second total bytes processed variable, likely for a different scope.
        long bytesCopied = 0; // Total bytes copied in the current job.
        long totalBytes = 0; // Another total bytes counter.
        long totalFolderBytes = 0; // Total bytes of all files within a folder.
        long totalBytesProcessedFile = 0; // Total bytes processed for a single file.
        private long _lastSpeedBytes = 0; // Stores the last number of bytes processed for speed calculation.
        private long _totalBytesToProcess = 0; // Overall total bytes of the entire job.
        private long _currentAddSize; // The size of the file or folder currently being added.
        private long _filesToProcess; // Another counter for the number of files to process.
        long _grandTotalFileCount = 0; // The total number of files to process across all selected items.
        long _grandTotalBytesToProcess = 0; // The total size of all files in the job, in bytes.
        private long _startTick; // The system tick count at the start of an operation, used for timing.            
        long fileCount = 0;// A field to keep track of the file count.
        long totalBytesCopied = 0;// A field to keep track of the total bytes copied.
        // =====================
        // 💯 Doubles
        // =====================
        double totalPercentDouble = 0; // The overall progress percentage as a double.
        double pct = 0; // A temporary variable for storing a percentage value.
        double opacity = Properties.Settings.Default.Opacity; // The opacity setting for the form, loaded from user settings.

        // =====================
        // 📅 DateTimes
        // =====================
        private DateTime _lastSpeedTime = DateTime.MinValue; // The last time the speed was calculated.
        private DateTime _lastSpeedCalcTime = DateTime.MinValue; // The last time the speed was calculated, likely a different variable for a different scope.

        // =====================
        // 🔠 Strings
        // =====================
        private string _cachedCustomTargetPath = null; // Stores the path for a custom target directory.
        private String folderPath = ""; // Stores the path to a folder.
        string overwriteOption = ""; // Stores the user's selected overwrite option.
        string path = ""; // A general-purpose string for storing a file or folder path.
        string originalSourcePath = "Select Files/Directory"; // The default text for the source path label.
        string originalTargetPath = "Select Directory"; // The default text for the target path label.
        private string _currentAddFolder; // The path to the folder currently being added.
        private string _customDirectoryName; // The name for a user-created custom directory.
        string priority = Properties.Settings.Default.Priority; // The process priority setting loaded from user settings.
        string status = "";
        public static String globalMODE = "";
        string pathNow;// A string to hold the current path.
        private const string RUN_KEY = @"SOFTWARE\Microsoft\Windows\CurrentVersion\Run";//A string for the registry entry input.
        private string APP_Name = "";//A string to hold the application's name to perform registry changes.
        // A private field to store the root path of the current scan.
        private string _currentSourceRootPath = "";//A string to hold the current source directories root directory.


        // =====================
        // ✅ Booleans - State Flags
        // =====================
        bool copied = false; // A flag to indicate if a copy operation is complete.
        private bool _isMultiThreaded = false; // A flag to indicate if the current operation is multi-threaded.
        bool alreadySet = false; // A general-purpose flag to check if a value has been set.
        private bool isAnimating = false; // A flag to indicate if a UI animation is in progress.
        private bool isRolledUp = false; // A flag to indicate if the form is in its "rolled up" state.
        private bool _isPaused = false; // A flag to indicate if the current operation is paused.
        private bool _isCanceled = false; // A flag to indicate if the operation has been cancelled.
        private bool cancelled = false; // Another flag for cancellation status.
        private bool isInitialized = false; // A flag to indicate if the form has been initialized.
        private volatile bool _finishCurrentFileAndQuit; // A flag to signal the operation to finish the current file and then quit.
        private bool _overwriteAll; // A flag for the "overwrite all" option.
        private bool _doNotOverwrite; // A flag for the "do not overwrite" option.
        private bool _overwriteIfNewer; // A flag for the "overwrite if newer" option.
        private bool _createCustomDirectory; // A flag for the "create custom directory" option.

        // ✅ Booleans - UI/Behavior Options
        private bool sortAscendingBytes = true; // Sorting preference for file size.
        private bool sortAscending = true; // Sorting preference for other columns.
        bool noDragDrop = false; // A flag to disable drag-and-drop functionality.
        private bool _keepDirectoryStructure; // A flag for the "keep directory structure" option.
        private bool _copyFilesOnly; // A flag for the "copy files only" option.
        private bool _keepEmptyFolders; // A flag for the "keep empty folders" option.
        private bool _keepOnlyFiles; // A flag for the "keep only files" option.
        private bool _elapsedTimerRunning = false; // A private boolean variable to track if the elapsed timer is running.
        private bool allowTabChanges = true;

        // ✅ Booleans - User Preferences (Settings)

        bool multiThread = Properties.Settings.Default.Multithreading; // Multi-threading preference from user settings.
        bool proVersion = Properties.Settings.Default.VersionPro; // Pro version status from user settings.
        bool updateAuto = Properties.Settings.Default.UpdateAuto; // Automatic update preference from user settings.
        bool updateManually = Properties.Settings.Default.UpdateManually; // Manual update preference from user settings.
        bool updateBeta = Properties.Settings.Default.UpdateBeta; // Beta update preference from user settings.
        bool onlyNames = Properties.Settings.Default.FileOnlyNames; // Flag to export/list only file names from user settings.
        bool fullPaths = Properties.Settings.Default.FileFullPaths; // Flag to export/list full paths from user settings.
        bool zipT = Properties.Settings.Default.ZipSeparately; // Zip files separately preference from user settings.
        bool zipS = Properties.Settings.Default.ZipTogether; // Zip files together preference from user settings.
        bool undermb = Properties.Settings.Default.CopyFilesUnder; // Preference to copy files under a certain size from user settings.
        bool overmb = Properties.Settings.Default.CopyFilesOver; // Preference to copy files over a certain size from user settings.
        bool emailFull = Properties.Settings.Default.EmailFullPaths; // Email full paths preference from user settings.
        bool emailDirNames = Properties.Settings.Default.EmailOnlyNames; // Email only directory names preference from user settings.
        bool restartProgram = Properties.Settings.Default.RestartOnError; // Restart program on error preference from user settings.
        bool closeProgram = Properties.Settings.Default.CloseOnError; // Close program on error preference from user settings.

        // =====================
        // ⏱ Stopwatches
        // =====================
        private Stopwatch _copyStopwatch = new Stopwatch(); // A stopwatch to measure the duration of a copy operation.
        private Stopwatch _stopwatch = new Stopwatch(); // A general-purpose stopwatch for timing.
        private Stopwatch _globalStopwatch = new Stopwatch(); // A stopwatch to time the entire operation.
        private Stopwatch _operationTimer = new Stopwatch(); // A stopwatch specifically for timing a file operation.

        // =====================
        // 🗂 Collections
        // =====================
        private readonly HashSet<int> _currentlyCopyingIndicesSingle = new(); // A set to track indices of files being copied in a single-threaded operation.
        private readonly HashSet<int> _currentlyCopyingIndices = new(); // A set to track indices of files being copied in a multi-threaded operation.
        private readonly ConcurrentDictionary<string, int> _fileRetryCounter = new(); // A thread-safe dictionary to count retries for each file.
        private ConcurrentDictionary<int, FileProgressInfo> _currentOperations = new ConcurrentDictionary<int, FileProgressInfo>(); // A thread-safe dictionary to store progress info for concurrent operations.
        private List<string> targetPaths = new List<string>(); // A list of target directories.
        private List<string> _sourceDirectories = new List<string>(); // A list of source directories to process.
        private List<string> _targetDirectories = new List<string>(); // A list of target directories.
        private List<string> _currentTargetPaths = new List<string>(); // A list of the currently selected target paths.
        private List<BackgroundWorker> _workers = new List<BackgroundWorker>(); // A list of background workers for multi-threading.
        private BindingList<FileInfoWrapper> _fileList = new BindingList<FileInfoWrapper>(); // A data-bindable list to hold file information for the UI.
        private readonly SortableBindingList<FileInfoWrapper> _exportList = new SortableBindingList<FileInfoWrapper>(); // A data-bindable, sortable list for files to be exported.
        private BindingList<SkippedFileInfo> _skippedFilesList = new BindingList<SkippedFileInfo>(); // A data-bindable list for skipped files.
        private Task[] _multiThreadTasks = new Task[4]; // An array of tasks for multi-threaded operations.
        private List<TabPage> allTabs = new List<TabPage>();//A list to hold all tab pages.
        private readonly HashSet<string> _seenPaths = new(StringComparer.OrdinalIgnoreCase);//A hash set to hold seen paths for a directory.

        // =====================
        // 🎛 UI Controls
        // =====================
        private NumericUpDown bufferNumUpDown; // The UI control for setting the buffer size.
        private System.Windows.Forms.CheckBox keepDirStructCheckBox; // UI control for the "keep directory structure" option.
        private System.Windows.Forms.CheckBox leaveEmptyFoldersCheckBox; // UI control for the "keep empty folders" option.
        private System.Windows.Forms.CheckBox verifyCheckBox; // UI control for the "verify" option.
        private Label totalHDSpaceLeftLabel; // UI label to display the total hard disk space left.
        private Label fileCountOnLabel; // UI label to display the file count progress.
        private System.Windows.Forms.CheckBox createCustomDirCheckBox; // UI control for creating a custom directory.
        private System.Windows.Forms.CheckBox keepOnlyFilesCheckBox; // UI control for the "keep only files" option.
        private System.Windows.Forms.CheckBox copyFilesDirsCheckBox; // UI control for the "copy files and directories" option.
        private Label fileProcessedLabel; // UI label to show the number of files processed.
        private Label totalCopiedProgressLabel; // UI label to show the total progress in bytes.
        private Label speedLabel; // UI label to display the transfer speed.
        private NotifyIcon _systemTrayIcon; // The system tray icon.
        private Size originalSize; // The original size of the form, used for animations.
        private mainForm main; // An instance of the main form.
        private System.Windows.Forms.Timer _timer; // A UI timer.
        private BindingSource _bindingSource = new BindingSource(); // The binding source for the file list data grid view.
        private BindingSource _bindingSourceExport = new BindingSource(); // The binding source for the export list data grid view.
        private System.Windows.Forms.ToolTip toolTip1; // The tool tip control for UI elements.                       
        private System.Windows.Forms.Timer _updateTimer;// A timer object for UI updates.

        // =====================
        // ⚙️ Workers / Background Tasks
        // =====================
        private BackgroundWorker _copyWorker; // The background worker for copy operations.
        private BackgroundWorker _moveWorker; // The background worker for move operations.
        private BackgroundWorker _deleteWorker; // The background worker for delete operations.

        // =====================
        // 🔒 Threading / Sync
        // =====================
        private readonly ManualResetEvent _cancelDialogEvent = new ManualResetEvent(true); // An event to signal that a cancellation dialog has been closed.
        private ManualResetEvent _pauseEvent = new ManualResetEvent(true); // An event to signal that the operation is paused or unpaused.
        private readonly object _lockObject = new object(); // A lock object for thread synchronization.
        private readonly object _progressLock = new object(); // A lock object for updating progress variables.
        private object _syncLock = new object(); // A general-purpose lock object.
        private CancellationTokenSource _cancellationTokenSource; // Used to manage cancellation of tasks.

        // Fields for progress reporting and cancellation.
        private Progress<ProgressReport> progress;
        private CancellationTokenSource _cts;
        private readonly object _batchLock = new();

        // =====================
        // 📦 Other Objects
        // =====================
        private FileOperation _currentOperation; // An enum to represent the current file operation (Copy, Move, Secure Delete).
        private readonly ControlStateManager stateManager = new(); // A class to manage the enabled/disabled state of UI controls.

        // Defines the size of the form when rolled up and rolled down.
        private readonly Size rolledUpSize = new(1594, 22);
        private readonly Size rolledDownSize = new(1594, 665);


        // =====================
        // ⚙️ Configurations For Updating Copy That
        // =====================
        private const string GITHUB_PAGES_BASE =
            "https://mikesruthless12.github.io/CopyThat-Releases/files"; // Base URL for update files
                                                                         // =================================
                                                                         // Current local version (e.g. "1.0")
        private readonly string _localVersion;

        // Local ZIP name (e.g. "CTv1.0.zip")
        private readonly string _localZip;

        // Remote ZIP name if a newer version is found (e.g. "CTv1.1.zip")
        private string? _remoteZip;






        private static string GetAppName()
        {
            try
            {
                // Try to get from assembly product attribute first
                var productName = Assembly.GetEntryAssembly()?.GetCustomAttribute<AssemblyProductAttribute>()?.Product;
                if (!string.IsNullOrEmpty(productName))
                    return productName;

                // Fall back to application name
                if (!string.IsNullOrEmpty(Application.ProductName))
                    return Application.ProductName;

                // Final fallback to executable name
                return System.IO.Path.GetFileNameWithoutExtension(Application.ExecutablePath);
            }
            catch
            {
                // Ultimate fallback
                return "CopyThat";
            }
        }

        // Usage:
        private void GetMyAppsName()
        {
            APP_Name = GetAppName();
            // Use appName with RUN_KEY
        }


        //private CustomControls.ModernCircularProgressBar modernFile;
        //private CustomControls.ModernCircularProgressBar modernTotal;
        public class ControlStateManager
        {
            // A dictionary to store the original `Enabled` state of each control.
            private readonly Dictionary<System.Windows.Forms.Control, bool> controlStates = new();

            /// <summary>
            /// Stores the current state of all controls on the form and disables them.
            /// This is useful for preventing user interaction during an operation.
            /// </summary>
            /// <param name="parent">The parent control (usually the main form) to start from.</param>
            public void DisableAllControls(System.Windows.Forms.Control parent)
            {
                try
                {
                    controlStates.Clear(); // Clear any previously stored states.
                    StoreAndDisableControls(parent); // Start the recursive process.
                }
                catch { } // Catches and ignores any errors that occur while disabling controls.
            }

            /// <summary>
            /// Restores all controls to their state before `DisableAllControls` was called.
            /// </summary>
            public void RestoreControlStates()
            {
                foreach (var kvp in controlStates)
                {
                    // Set the control's Enabled property back to its original value.
                    kvp.Key.Enabled = kvp.Value;
                }
            }

            /// <summary>
            /// A recursive helper method that stores the state and disables all controls and their children.
            /// </summary>
            /// <param name="parent">The parent control to process.</param>
            private void StoreAndDisableControls(System.Windows.Forms.Control parent)
            {
                foreach (System.Windows.Forms.Control ctrl in parent.Controls)
                {
                    // Store the original state of the control.
                    controlStates[ctrl] = ctrl.Enabled;

                    // Disable the control.
                    ctrl.Enabled = false;

                    // If the control has child controls, call this method recursively.
                    if (ctrl.HasChildren)
                    {
                        StoreAndDisableControls(ctrl);
                    }
                }
            }
        }

        /// <summary>
        /// Defines the type of UI update being sent to the main form from a background process.
        /// </summary>
        public enum UIUpdateType
        {
            InitialScanStarted,   // The initial scan of files has begun.
            InitialScanProgress,  // Progress update for the initial scan.
            InitialScanCompleted, // The initial scan is complete.
            Progress,             // General progress update for an ongoing operation (copy, move, etc.).
            OperationCanceled,    // The operation has been cancelled.
            OperationCompleted,   // The operation has completed successfully.
            Error,                // An error has occurred.
            StatusMessage         // A general status message to be displayed.
        }

        /// <summary>
        /// A class to hold information about a file that was skipped during an operation.
        /// </summary>
        public class SkippedFileInfo
        {
            public string Reason { get; set; }          // The reason why the file was skipped.
            public string FileName { get; set; }        // The name of the file.
            public string FileSize { get; set; }        // The size of the file as a formatted string.
            public string SourceFilePath { get; set; }  // The source path of the file.
            public string DestinationFilePath { get; set; } // The destination path of the file.
            public string ErrorMessage { get; set; }    // A detailed error message if applicable.
        }

        /// <summary>
        /// A class to hold progress information for a file operation.
        /// </summary>
        public class FileProgressInfo
        {
            public int FileIndex { get; set; }                          // The index of the file in the list.
            public long BytesTransferredCurrentFile { get; set; }       // Bytes transferred for the current file.
            public long TotalBytesCurrentFile { get; set; }             // Total bytes of the current file.
            public long OverallBytesProcessed { get; set; }             // Total bytes processed across the entire operation.
            public long OverallTotalBytes { get; set; }                 // Total bytes for the entire operation.
            public string CurrentFileName { get; set; }                 // The name of the file being processed.
            public string CurrentStatus { get; set; }                   // The current status (e.g., "Copying...").
            public int OverallPercent { get; set; }                     // The overall percentage of the operation completed.
        }

        /// <summary>
        /// A wrapper class for file information, used for display in the UI.
        /// </summary>
        public class FileInfoWrapper
        {
            public string FileName { get; set; }      // The name of the file.
            public string FilePath { get; set; }      // The full path of the file.
            public string FileSize { get; set; }      // The size of the file as a formatted string.
            public long BytesRaw { get; set; }        // The raw size of the file in bytes.
            public string Status { get; set; }        // The current status of the file (e.g., "Pending").
            public bool IsDirectory { get; set; }     // A flag to indicate if the item is a directory.
            public string SourceRoot { get; set; }    // The root source directory of the file.

            /// <summary>
            /// A read-only property that returns a user-friendly description of the item type.
            /// </summary>
            /// 



            private Dictionary<string, Dictionary<string, string>> _languageMaps = new()
{
    {
        "en", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
        {
            // ── Microsoft / Office ---------------------------------------------
            { ".docx", "Word Document" },  { ".doc", "Word 97-2003" },
            { ".xlsx", "Excel Workbook" }, { ".xls", "Excel 97-2003" },
            { ".pptx", "PowerPoint" },     { ".ppt", "PowerPoint 97-2003" },
            { ".vsdx", "Visio Drawing" },  { ".pub", "Publisher Document" },
            { ".one",  "OneNote Notebook" },
            { ".ost", "Outlook Offline" }, { ".pst", "Outlook Personal" },
            { ".msg", "Outlook Message" }, { ".eml", "Email Message" },

            // ── Web / Mark-up ---------------------------------------------------
            { ".html", "HTML Document" },  { ".htm", "HTML Document" },
            { ".css",  "CSS Style Sheet" }, { ".scss", "Sass (SCSS)" },
            { ".sass", "Sass (Indented)" }, { ".less", "Less Style" },
            { ".js",   "JavaScript" },      { ".jsx", "React JSX" },
            { ".ts",   "TypeScript" },      { ".tsx", "React TSX" },
            { ".json", "JSON Data" },       { ".xml", "XML Document" },
            { ".yml",  "YAML Config" },

            // ── Microsoft / .NET ----------------------------------------------
            { ".cs", "C# Source" },         { ".csx", "C# Script" },
            { ".fs", "F# Source" },         { ".vb", "VB.NET Source" },
            { ".il", "IL Assembly" },       { ".resx", "Resource XML" },
            { ".xaml", "XAML Mark-up" },    { ".sln", "Visual Studio Solution" },
            { ".vbproj", "VB Project" },
            { ".vcxproj", "C++ Project" },  { ".props", "MSBuild Props" },
            { ".targets", "MSBuild Targets" },

            // ── C / C++ --------------------------------------------------------
            { ".cpp", "C++ Source" },       { ".cc", "C++ Source" },
            { ".cxx", "C++ Source" },       { ".c", "C Source" },
            { ".hpp", "C++ Header" },       { ".h", "C/C++ Header" },
            { ".inl", "Inline C++" },       { ".idl", "Interface Definition" },
            { ".rc", "Resource Script" },   { ".manifest", "Application Manifest" },

            // ── Java / JVM ------------------------------------------------------
            { ".java", "Java Source" },     { ".class", "Java Class" },
            { ".jar", "Java Archive" },     { ".war", "Java Web Archive" },
            { ".ear", "Enterprise Archive" }, { ".scala", "Scala Source" },
            { ".groovy", "Groovy Source" }, { ".clj", "Clojure Source" },

            // ── Python ----------------------------------------------------------
            { ".py", "Python Script" },     { ".pyw", "Python (No Console)" },
            { ".pyi", "Python Stub" },      { ".pyc", "Python Bytecode" },
            { ".pyo", "Python Optimised" }, { ".pyd", "Python Extension" },
            { ".whl", "Python Wheel" },     { ".ipynb", "Jupyter Notebook" },

            // ── Mobile ----------------------------------------------------------
            { ".swift", "Swift Source" },   { ".dart", "Dart Source" },
            { ".kt", "Kotlin Source" },     { ".kts", "Kotlin Script" },
            { ".gradle", "Gradle Script" }, { ".aar", "Android Archive" },
            { ".apk", "Android Package" },  { ".aab", "Android App Bundle" },
            { ".ipa", "iOS Package" },

            // ── Game Dev / 3D ---------------------------------------------------
            { ".unity", "Unity Scene" },    { ".prefab", "Unity Prefab" },
            { ".uasset", "Unreal Asset" },  { ".umap", "Unreal Map" },
            { ".fbx", "FBX 3D Model" },     { ".obj", "Wavefront 3D" },
            { ".gltf", "glTF 3D Model" },   { ".blend", "Blender Project" },
            { ".dae", "Collada Model" },    { ".3ds", "3D Studio Model" },
            { ".stl", "STL Model" },        { ".dxf", "AutoCAD DXF" },

            // ── Creative / Adobe ----------------------------------------------
            { ".psd", "Photoshop Document" }, { ".psb", "Photoshop Large" },
            { ".ai",  "Illustrator Art" },   { ".indd", "InDesign Document" },
            { ".prproj", "Premiere Project" }, { ".aep", "After Effects" },
            { ".xd",  "Adobe XD Prototype" }, { ".sketch", "Sketch Document" },
            { ".fig", "Figma Document" },

            // ── Audio -----------------------------------------------------------
            { ".mp3", "MP3 Audio" },        { ".wav", "Wave Audio" },
            { ".flac", "FLAC Audio" },      { ".aac", "AAC Audio" },
            { ".ogg", "OGG Vorbis" },       { ".wma", "Windows Audio" },
            { ".opus", "Opus Audio" },      { ".m4a", "MPEG-4 Audio" },
            { ".midi", "MIDI Sequence" },   { ".aiff", "AIFF Audio" },

            // ── Video -----------------------------------------------------------
            { ".mp4", "MP4 Video" },        { ".mkv", "Matroska Video" },
            { ".avi", "AVI Video" },        { ".mov", "QuickTime Video" },
            { ".wmv", "Windows Video" },    { ".webm", "WebM Video" },
            { ".flv", "Flash Video" },      { ".m4v", "M4V Video" },
            { ".m3u8", "HLS Playlist" },
            { ".ogv", "OGG Video" },        { ".3gp", "3GP Video" },

            // ── Images ----------------------------------------------------------
            { ".jpg", "JPEG Image" },       { ".jpeg", "JPEG Image" },
            { ".png", "PNG Image" },        { ".gif", "GIF Image" },
            { ".bmp", "BMP Image" },        { ".tiff", "TIFF Image" },
            { ".webp", "WebP Image" },      { ".ico", "Icon" },
            { ".svg", "SVG Vector" },       { ".eps", "Encapsulated PostScript" },
            { ".raw", "RAW Image" },
            { ".cr2", "Canon RAW" },        { ".nef", "Nikon RAW" },
            { ".arw", "Sony RAW" },         { ".dng", "Digital Negative" },

            // ── Archives --------------------------------------------------------
            { ".zip", "ZIP Archive" },      { ".rar", "RAR Archive" },
            { ".7z",  "7-Zip Archive" },    { ".tar", "Tar Archive" },
            { ".gz",  "GZip Archive" },     { ".bz2", "BZip2 Archive" },
            { ".xz",  "XZ Archive" },       { ".zst", "Zstd Archive" },
            { ".lz4", "LZ4 Archive" },      { ".cab", "Cabinet Archive" },
            { ".iso", "Disc Image" },       { ".dmg", "macOS Disk Image" },
            { ".img", "Raw Disk Image" },   { ".vhd", "Virtual Hard Disk" },
            { ".vhdx","Hyper-V Disk" },     { ".wim", "Windows Image" },

            // ── Database --------------------------------------------------------
            { ".sql", "SQL Script" },       { ".db",  "Database" },
            { ".sqlite", "SQLite DB" },     { ".mdb", "Access DB" },
            { ".accdb", "Access Database" }, { ".mdf", "SQL Server DB" },
            { ".ndf", "SQL Server NDF" },   { ".ldf", "SQL Server Log" },
            { ".bak", "SQL Backup" },       { ".dmp", "Database Dump" },

            // ── Scientific / Math ---------------------------------------------
            { ".mat", "MATLAB Data" },      { ".m", "MATLAB Script" },
            { ".r", "R Script" },           { ".rdata", "R Dataset" },
            { ".csv", "CSV Data" },         { ".tsv", "TSV Data" },
            { ".sas", "SAS Program" },      { ".sav", "SPSS Dataset" },
            { ".por", "SPSS Portable" },

            // ── Crypto / Blockchain -------------------------------------------
            { ".gpg", "GPG Encrypted" },    { ".pgp", "PGP Encrypted" },
            { ".asc", "PGP Signature" },    { ".sig", "Detached Signature" },
            { ".wallet", "Crypto Wallet" }, { ".key", "Key File" },
            { ".pem", "PEM Certificate" },  { ".crt", "Certificate" },
            { ".p12", "PKCS#12 Keystore" }, { ".pfx", "Windows Keystore" },

            // ── Emulation / ROMs ----------------------------------------------
            { ".gba", "Game Boy ROM" },     { ".nds", "Nintendo DS ROM" },
            { ".wbfs", "Wii Backup" },
            { ".cia", "3DS Installer" },    { ".nsp", "Switch Package" },
            { ".xci", "Switch Cartridge" }, { ".wad", "Wii Channel" },

            // ── Misc ------------------------------------------------------------
            { ".exe", "Windows Executable" }, { ".msi", "Windows Installer" },
            { ".com", "DOS Command" },      { ".bat", "Batch Script" },
            { ".ps1", "PowerShell Script" }, { ".cmd", "Command Script" },
            { ".reg", "Registry Entry" },
            { ".url", "Internet Shortcut" }, { ".torrent", "BitTorrent" },
            { ".log", "Log File" },         { ".ini", "INI Configuration" },
            { ".cfg", "Config File" },      { ".conf", "Configuration" },
            { ".yaml", "YAML Config" },     { ".toml", "TOML Config" },
            { ".env", "Environment File" }, { ".gitignore", "Git Ignore" },
            { ".dockerfile", "Dockerfile" }, { ".md", "Markdown" },
            { ".tex", "LaTeX Source" },     { ".bib", "BibTeX Library" },

            // ── Additional / Misc ---------------------------------------------
            { ".dwp", "SharePoint Web Part" },
            { ".fxp", "FoxPro Compiled" },
            { ".asd", "Word AutoSave" },
            { ".fsc", "Windows Search Cache" },
            { ".mid", "MIDI Sequence" },
            { ".fst", "FL Studio State" },
            { ".txt", "Plain Text File" },
            { ".pdb", "Program Database" },
            { ".dll", "Dynamic-Link Library" },
            { ".resources", ".NET Resources" },
            { ".cache", "Cache File" },
            { ".settings", "Settings XML" },
            { ".csproj", "C# Project" },
            { ".editorconfig", "EditorConfig" },
            { ".kdbx", "KeePass File" },
            { ".nupkg", "NuGet Package" },
            { ".p7s", "PKCS #7 Signature" },
            { ".map", "Source-Map File" },
            { ".flow", "Flow Type Declaration" },
            { ".mjs", "ES Module (JavaScript)" },
            { ".cjs", "CommonJS (JavaScript)" },
            { ".cts", "TypeScript CommonJS" },
            { ".mts", "TypeScript ES Module" },
            { ".jst", "JavaScript Template" },
            { ".markdown", "Markdown Document" },
            { ".applescript", "AppleScript" },
            { ".ch1", "Nintendo Character Data" },
            { ".vital", "Vital Synthesizer Preset" },
            { ".ds_store", "macOS Desktop Services Store" },
            { ".zpw", "ZippedWeb Package" },
            { ".flp", "FL Studio Project" },
            { ".flstheme", "FL Studio Theme" },
            { ".nmsv", "Native Instruments NMSV Preset" },
            { ".wav.256", "256-bit WAV Variant" },
            { ".pdf", "Portable Document Format" },
            { ".config", "Configuration XML/JSON" },
            { ".user", "User Settings" },
            { ".uptodate", "Up2Date Cache Flag" },
            { ".rtf", "Rich Text Format" },
            { ".buildwithskipanalyzers", "MSBuild Skip-Analyzers Flag" },
            { ".node", "Node.js Binary Module" },
            { ".snap", "Snapcraft Package" },
            { ".def", "Module-Definition File" },
            { ".bsd", "BSD Licence/Configuration" },
            { ".babelrc", "Babel Configuration" },
            { ".prettierrc", "Prettier Configuration" },
            { ".npignore", "NuGet Ignore Rules" },
            { ".php", "PHP Script" },
            { ".eslintignore", "ESLint Ignore" },
            { ".lic", "License File" },
            { ".nib", "NeXT Interface Builder" },
            { ".plist", "macOS Property List" },
            { ".mui", "Multilingual User Interface" },
            { ".efi", "UEFI Firmware" },
            { ".cip", "Chrome CIP Package" },
            { ".bin", "Binary Data" },
            { ".sdi", "System Deployment Image" },
            { ".ttf", "TrueType Font" },
            { ".cur", "Windows Cursor" },
            { ".ani", "Animated Cursor" },
            { ".diagpkg", "Windows Diagnostic Package" },
            { ".dat", "Generic Data File" },
            { ".diffbase", "Diff Base Snapshot" },
            { ".lm", "Language Model" },
            { ".lm1", "Language Model Variant 1" },
            { ".lm2", "Language Model Variant 2" },
            { ".lm3", "Language Model Variant 3" },
            { ".lex", "Lexicon Data" },
            { ".res", "Windows Resource" },
            { ".nlt", "NetLink Trust Data" },
            { ".nls", "National Language Support" },
            { ".chm", "Compiled HTML Help" },
            { ".fil", "File List Container" },
            { ".msixbundle", "MSIX Bundle" },
            { ".p7x", "PKCS #7 Extended" },
            { ".pri", "Package Resource Index" },
            { ".etl", "Event Trace Log" },
            { ".nlp", "Natural Language Processor Data" },
            { ".compositefont", "WPF Composite Font" },
            { ".aspx", "ASP.NET Page" },
            { ".ascx", "ASP.NET User Control" },
            { ".master", "ASP.NET Master Page" },
            { ".browser", "Browser Definition" },
            { ".lnk", "Windows Shortcut" },
            { ".default", "Default Settings" },
            { ".comments", "Comment Metadata" },
            { ".rsp", "Response File" },
            { ".tld", "Tag Library Descriptor" },
            { ".win32manifest", "Win32 Manifest" },
            { ".man", "Manual Page" },
            { ".mof", "Managed Object Format" },
            { ".uninstall", "Uninstall Script" },
            { ".tasks", "MSBuild Tasks" },
            { ".overridetasks", "MSBuild Override Tasks" },
            { ".orp", "ORP Data" },
            { ".adml", "Administrative Template Language" },
            { ".ppkg", "Provisioning Package" },
            { ".mstheme", "Microsoft Theme" },
            { ".msstyles", "Windows Style" },
            { ".mum", "Manifest Update Module" },
            { ".cat", "Security Catalog" },
            { ".jfm", "Jet Database Metadata" },
            { ".rs", "Rust Source" },
            { ".jll", "Julia LLVM Bitcode" },
            { ".sys", "Windows System Driver" },
            { ".p7b", "PKCS #7 Certificate Chain" },
            { ".wmfw", "Windows Media Framework" },
            { ".inf_loc", "INF Localization" },
            { ".winmd", "Windows Metadata" },
            { ".xbf", "XAML Binary Format" },
            { ".license", "License Token" },
            { ".fpie", "FPGA Intermediate Executable" },
            { ".cso", "Compiled Shader Object" },
            { ".sccd", "System Center Config Data" },
            { ".bundle", "Application Bundle" },
            { ".schema", "JSON/XML Schema" },
            { ".csg", "Constructive Solid Geometry" },
            { ".mun", "Multi-Unit Network" },
            { ".uce", "Universal Chess Engine" },
            { ".cpl", "Control Panel Applet" },
            { ".msc", "Microsoft Management Console" },
            { ".ax", "DirectShow Filter" },
            { ".table", "Lookup/Hash Table" },
            { ".tsp", "TSP Package/Script" },
            { ".tbl", "Table Data" },
            { ".drv", "Device Driver" },
            { ".sep", "Separator File" },
            { ".ocx", "ActiveX Control" },
            { ".msp", "Windows Installer Patch" },
            { ".scr", "Windows Screen Saver" },
            { ".vbs", "VBScript" },
            { ".grxml", "Grammar XML" },
            { ".xrm-ms", "Microsoft License" },
            { ".rll", "Resource Link Library" },
            { ".mfl", "MFL Language File" },
            { ".cdxml", "Cmdlet Definition XML" },
            { ".dtd", "Document Type Definition" },
            { ".psm1", "PowerShell Module Script" },
            { ".ps1xml", "PowerShell Format Data" },
            { ".wprp", "Windows Performance Recorder Profile" },
            { ".xsl", "XSLT Stylesheet" },
            { ".gyp", "Generate Your Projects" },
            { ".rld", "ReLoad Data" },
            { ".job", "Windows Task Job" },
            { ".gypi", "GYP Include" },
            { ".hlp", "Windows Help" },
            { ".gdl", "Generic Description Language" },
            { ".elf", "Executable and Linkable Format" },
            { ".ppd", "PostScript Printer Description" },
            { ".gpd", "Generic Printer Description" },
            { ".mbn", "Modem Binary" },
            { ".pak", "PAK Archive" },
            { ".dgml", "Directed Graph Markup" },
            { ".smp", "Sample File" },
            { ".lxa", "Microsoft Lexicon Audio" },
            { ".wwd", "Microsoft Works Wizard" },
            { ".wsf", "Windows Script File" },
            { ".cw", "CardWorks Template" },
            { ".phn", "Phun Physics Scene" },
            { ".am", "Automake File" },
            { ".fe", "File Encryptor" },
            { ".mllr", "Maximum Likelihood Linear Regression" },
            { ".ngr", "NEOGEO ROM" },
            { ".sch", "Schedule/Schema" },
            { ".adlm", "Autodesk License Manager" },
            { ".adxm", "Administrative XML" },
            { ".nmnl", "Normalized Minimal" },
            { ".propdesc", "Property Description" },
            { ".nsl", "Nokia Sound Library" },
            { ".ntf", "National Transfer Format" },
            { ".ntp", "NTP Configuration" },
            { ".forms", "Windows Forms" },
            { ".runtime", "Runtime Manifest" },
            { ".interop", "COM Interop Data" },
            { ".frm", "Visual Basic Form" },
            { ".bas", "Visual Basic Module" },
            { ".dwb", "Drum Workshop Bundle" },
            { ".npmignore", "NPM Ignore Rules" },
            { ".rsrc", "macOS Resource Fork" },
            { ".upd2date", "Up2Date Cache Flag" },
            { ".Up2Date", "Up2Date Cache Flag" },
            { ".jshintrc", "JSHint Configuration" },
            { ".lock", "Lock/Dependency Pin" },
            { ".nix", "Nix Expression" },
            { ".hr1", "HR1 Game Data" },
            { ".hr2", "HR2 Game Data" },
            { ".hr3", "HR3 Game Data" },
            { ".hr4", "HR4 Game Data" },
            { ".hr5", "HR5 Game Data" },
            { ".hr6", "HR6 Game Data" },
            { ".hr7", "HR7 Game Data" },
            { ".hr8", "HR8 Game Data" },
            { ".hr9", "HR9 Game Data" },
            { ".bnf", "Backus-Naur Form Grammar" },
            { ".clb", "COM+ Catalog" },
            { ".tlb", "Type Library" },
            { ".dic", "Dictionary/Lexicon" },
            { ".aux", "Auxiliary TeX File" },
            { ".ds", "DataStore/DS_Store" },
            { ".inc", "Include/Source Include" },
            { ".cpx", "Code Page Translation" },
            { ".mdl", "Model/Module File" },
            { ".dls", "Downloadable Sounds Bank" },
            { ".cdf-ms", "ClickOnce Deployment Manifest" },
            { ".addin", "Visual Studio Add-in" },
            { ".scp", "Windows Script Component" },
            { ".wmz", "Compressed Windows Media Player Skin" },
            { ".iec", "IEC Database" },
            { ".wsc", "Windows Script Component" },
            { ".vrg", "Visual Studio Registry Script" },
            { ".prx", "Proxy Auto-Config" },
            { ".nuspec", "NuGet Specification" },
            
            // ── Extended Archive / Compression --------------------------------
            { ".zipx", "ZIPX Archive" },
            { ".alz", "ALZip Archive" },
            { ".eeg", "EEG Compressed" },
            { ".001", "Split Archive Part 1" },
            { ".arj", "ARJ Archive" },
            { ".bh",  "BlakHole Archive" },
            { ".lha", "LHA Archive" },
            { ".lzh", "LHA/LZH Archive" },
            { ".pma", "PMarc Archive" },
            { ".arc", "ARC Archive" },
            { ".ace", "ACE Archive" },
            { ".aes", "AES-Encrypted File" },
            { ".zpak", "ZPAQ Archive" },
            { ".zstd", "Zstandard Archive" },
            { ".br",  "Brotli Archive" },
            { ".pea", "PeaZip Archive" },
            { ".tbz", "Tar.BZ Archive" },
            { ".tbz2", "Tar.BZ2 Archive" },
            { ".txz", "Tar.XZ Archive" },
            { ".tlz", "Tar.LZMA Archive" },
            { ".uu",  "UUEncoded File" },
            { ".uue", "UUEncoded File" },
            { ".xxe", "XXEncoded File" },
            { ".z",   "Unix Compress" },
            { ".tgz", "Tar.GZ Archive" },
            { ".isz", "ISO-Zipped Image" },
            { ".udf", "Universal Disk Format" },
            { ".i00", "DVD Decrypter Split Image Part 1" }
        }
    },
    {
        "it", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
        {
            // ── Microsoft / Office ---------------------------------------------
            { ".docx", "Documento Word" },  { ".doc", "Word 97-2003" },
            { ".xlsx", "Cartella di lavoro Excel" }, { ".xls", "Excel 97-2003" },
            { ".pptx", "Presentazione PowerPoint" }, { ".ppt", "PowerPoint 97-2003" },
            { ".vsdx", "Disegno Visio" },  { ".pub", "Documento Publisher" },
            { ".one",  "Quaderno OneNote" },
            { ".ost", "Outlook Offline" }, { ".pst", "Outlook Personale" },
            { ".msg", "Messaggio Outlook" }, { ".eml", "Messaggio Email" },

            // ── Web / Mark-up ---------------------------------------------------
            { ".html", "Documento HTML" },  { ".htm", "Documento HTML" },
            { ".css",  "Foglio di stile CSS" }, { ".scss", "Sass (SCSS)" },
            { ".sass", "Sass (Indentato)" }, { ".less", "Stile Less" },
            { ".js",   "JavaScript" },      { ".jsx", "React JSX" },
            { ".ts",   "TypeScript" },      { ".tsx", "React TSX" },
            { ".json", "Dati JSON" },       { ".xml", "Documento XML" },
            { ".yml",  "Configurazione YAML" },

            // ── Microsoft / .NET ----------------------------------------------
            { ".cs", "Codice C#" },         { ".csx", "Script C#" },
            { ".fs", "Codice F#" },         { ".vb", "Codice VB.NET" },
            { ".il", "Assembly IL" },       { ".resx", "Risorse XML" },
            { ".xaml", "Mark-up XAML" },    { ".sln", "Soluzione Visual Studio" },
            { ".vbproj", "Progetto VB" },
            { ".vcxproj", "Progetto C++" },  { ".props", "Proprietà MSBuild" },
            { ".targets", "Target MSBuild" },

            // ── C / C++ --------------------------------------------------------
            { ".cpp", "Codice C++" },       { ".cc", "Codice C++" },
            { ".cxx", "Codice C++" },       { ".c", "Codice C" },
            { ".hpp", "Intestazione C++" }, { ".h", "Intestazione C/C++" },
            { ".inl", "C++ Inline" },       { ".idl", "Definizione Interfaccia" },
            { ".rc", "Script Risorse" },    { ".manifest", "Manifest Applicazione" },

            // ── Java / JVM ------------------------------------------------------
            { ".java", "Codice Java" },     { ".class", "Classe Java" },
            { ".jar", "Archivio Java" },    { ".war", "Archivio Web Java" },
            { ".ear", "Archivio Enterprise" }, { ".scala", "Codice Scala" },
            { ".groovy", "Codice Groovy" }, { ".clj", "Codice Clojure" },

            // ── Python ----------------------------------------------------------
            { ".py", "Script Python" },     { ".pyw", "Python (No Console)" },
            { ".pyi", "Stub Python" },      { ".pyc", "Bytecode Python" },
            { ".pyo", "Python Ottimizzato" }, { ".pyd", "Estensione Python" },
            { ".whl", "Wheel Python" },     { ".ipynb", "Notebook Jupyter" },

            // ── Mobile ----------------------------------------------------------
            { ".swift", "Codice Swift" },   { ".dart", "Codice Dart" },
            { ".kt", "Codice Kotlin" },     { ".kts", "Script Kotlin" },
            { ".gradle", "Script Gradle" }, { ".aar", "Archivio Android" },
            { ".apk", "Pacchetto Android" }, { ".aab", "Bundle App Android" },
            { ".ipa", "Pacchetto iOS" },

            // ── Game Dev / 3D ---------------------------------------------------
            { ".unity", "Scena Unity" },    { ".prefab", "Prefab Unity" },
            { ".uasset", "Risorsa Unreal" }, { ".umap", "Mappa Unreal" },
            { ".fbx", "Modello 3D FBX" },   { ".obj", "Modello 3D Wavefront" },
            { ".gltf", "Modello 3D glTF" }, { ".blend", "Progetto Blender" },
            { ".dae", "Modello Collada" },  { ".3ds", "Modello 3D Studio" },
            { ".stl", "Modello STL" },      { ".dxf", "AutoCAD DXF" },

            // ── Creative / Adobe ----------------------------------------------
            { ".psd", "Documento Photoshop" }, { ".psb", "Photoshop Grande" },
            { ".ai",  "Arte Illustrator" }, { ".indd", "Documento InDesign" },
            { ".prproj", "Progetto Premiere" }, { ".aep", "After Effects" },
            { ".xd",  "Prototipo Adobe XD" }, { ".sketch", "Documento Sketch" },
            { ".fig", "Documento Figma" },

            // ── Audio -----------------------------------------------------------
            { ".mp3", "Audio MP3" },        { ".wav", "Audio Wave" },
            { ".flac", "Audio FLAC" },      { ".aac", "Audio AAC" },
            { ".ogg", "OGG Vorbis" },       { ".wma", "Audio Windows" },
            { ".opus", "Audio Opus" },      { ".m4a", "Audio MPEG-4" },
            { ".midi", "Sequenza MIDI" },   { ".aiff", "Audio AIFF" },

            // ── Video -----------------------------------------------------------
            { ".mp4", "Video MP4" },        { ".mkv", "Video Matroska" },
            { ".avi", "Video AVI" },        { ".mov", "Video QuickTime" },
            { ".wmv", "Video Windows" },    { ".webm", "Video WebM" },
            { ".flv", "Video Flash" },      { ".m4v", "Video M4V" },
            { ".m3u8", "Playlist HLS" },
            { ".ogv", "Video OGG" },        { ".3gp", "Video 3GP" },

            // ── Images ----------------------------------------------------------
            { ".jpg", "Immagine JPEG" },    { ".jpeg", "Immagine JPEG" },
            { ".png", "Immagine PNG" },     { ".gif", "Immagine GIF" },
            { ".bmp", "Immagine BMP" },     { ".tiff", "Immagine TIFF" },
            { ".webp", "Immagine WebP" },   { ".ico", "Icona" },
            { ".svg", "Vettoriale SVG" },   { ".eps", "PostScript Incapsulato" },
            { ".raw", "Immagine RAW" },
            { ".cr2", "RAW Canon" },        { ".nef", "RAW Nikon" },
            { ".arw", "RAW Sony" },         { ".dng", "Negativo Digitale" },

            // ── Archives --------------------------------------------------------
            { ".zip", "Archivio ZIP" },     { ".rar", "Archivio RAR" },
            { ".7z",  "Archivio 7-Zip" },   { ".tar", "Archivio Tar" },
            { ".gz",  "Archivio GZip" },    { ".bz2", "Archivio BZip2" },
            { ".xz",  "Archivio XZ" },      { ".zst", "Archivio Zstd" },
            { ".lz4", "Archivio LZ4" },     { ".cab", "Archivio Cabinet" },
            { ".iso", "Immagine Disco" },   { ".dmg", "Immagine Disco macOS" },
            { ".img", "Immagine Disco Raw" }, { ".vhd", "Disco Rigido Virtuale" },
            { ".vhdx","Disco Hyper-V" },    { ".wim", "Immagine Windows" },

            // ── Database --------------------------------------------------------
            { ".sql", "Script SQL" },       { ".db",  "Database" },
            { ".sqlite", "DB SQLite" },     { ".mdb", "DB Access" },
            { ".accdb", "Database Access" }, { ".mdf", "DB SQL Server" },
            { ".ndf", "NDF SQL Server" },   { ".ldf", "Log SQL Server" },
            { ".bak", "Backup SQL" },       { ".dmp", "Dump Database" },

            // ── Scientific / Math ---------------------------------------------
            { ".mat", "Dati MATLAB" },      { ".m", "Script MATLAB" },
            { ".r", "Script R" },           { ".rdata", "Dataset R" },
            { ".csv", "Dati CSV" },         { ".tsv", "Dati TSV" },
            { ".sas", "Programma SAS" },    { ".sav", "Dataset SPSS" },
            { ".por", "SPSS Portatile" },

            // ── Crypto / Blockchain -------------------------------------------
            { ".gpg", "Criptato GPG" },    { ".pgp", "Criptato PGP" },
            { ".asc", "Firma PGP" },       { ".sig", "Firma Separata" },
            { ".wallet", "Portafoglio Crypto" }, { ".key", "File Chiave" },
            { ".pem", "Certificato PEM" }, { ".crt", "Certificato" },
            { ".p12", "Keystore PKCS#12" }, { ".pfx", "Keystore Windows" },

            // ── Emulation / ROMs ----------------------------------------------
            { ".gba", "ROM Game Boy" },     { ".nds", "ROM Nintendo DS" },
            { ".wbfs", "Backup Wii" },
            { ".cia", "Installer 3DS" },    { ".nsp", "Pacchetto Switch" },
            { ".xci", "Cartuccia Switch" }, { ".wad", "Canale Wii" },

            // ── Misc ------------------------------------------------------------
            { ".exe", "Eseguibile Windows" }, { ".msi", "Installer Windows" },
            { ".com", "Comando DOS" },      { ".bat", "Script Batch" },
            { ".ps1", "Script PowerShell" }, { ".cmd", "Script Comando" },
            { ".reg", "Voce Registro" },
            { ".url", "Collegamento Internet" }, { ".torrent", "BitTorrent" },
            { ".log", "File Log" },         { ".ini", "Configurazione INI" },
            { ".cfg", "File Config" },      { ".conf", "Configurazione" },
            { ".yaml", "Configurazione YAML" }, { ".toml", "Configurazione TOML" },
            { ".env", "File Ambiente" },    { ".gitignore", "Git Ignore" },
            { ".dockerfile", "Dockerfile" }, { ".md", "Markdown" },
            { ".tex", "Sorgente LaTeX" },   { ".bib", "Libreria BibTeX" },

            // ── Additional / Misc ---------------------------------------------
            { ".dwp", "Web Part SharePoint" },
            { ".fxp", "FoxPro Compilato" },
            { ".asd", "Salvataggio Automatico Word" },
            { ".fsc", "Cache Ricerca Windows" },
            { ".mid", "Sequenza MIDI" },
            { ".fst", "Stato FL Studio" },
            { ".txt", "File di Testo Semplice" },
            { ".pdb", "Database Programma" },
            { ".dll", "Libreria a Collegamento Dinamico" },
            { ".resources", "Risorse .NET" },
            { ".cache", "File Cache" },
            { ".settings", "Impostazioni XML" },
            { ".csproj", "Progetto C#" },
            { ".editorconfig", "EditorConfig" },
            { ".kdbx", "File KeePass" },
            { ".nupkg", "Pacchetto NuGet" },
            { ".p7s", "Firma PKCS #7" },
            { ".map", "File Source-Map" },
            { ".flow", "Dichiarazione Tipo Flow" },
            { ".mjs", "Modulo ES (JavaScript)" },
            { ".cjs", "CommonJS (JavaScript)" },
            { ".cts", "TypeScript CommonJS" },
            { ".mts", "TypeScript ES Module" },
            { ".jst", "Template JavaScript" },
            { ".markdown", "Documento Markdown" },
            { ".applescript", "AppleScript" },
            { ".ch1", "Dati Personaggio Nintendo" },
            { ".vital", "Preset Sintetizzatore Vital" },
            { ".ds_store", "macOS Desktop Services Store" },
            { ".zpw", "Pacchetto ZippedWeb" },
            { ".flp", "Progetto FL Studio" },
            { ".flstheme", "Tema FL Studio" },
            { ".nmsv", "Preset Native Instruments NMSV" },
            { ".wav.256", "Variante WAV 256-bit" },
            { ".pdf", "Formato Documento Portatile" },
            { ".config", "Configurazione XML/JSON" },
            { ".user", "Impostazioni Utente" },
            { ".uptodate", "Flag Cache Up2Date" },
            { ".rtf", "Formato Testo Ricco" },
            { ".buildwithskipanalyzers", "Flag MSBuild Skip-Analyzers" },
            { ".node", "Modulo Binario Node.js" },
            { ".snap", "Pacchetto Snapcraft" },
            { ".def", "File Definizione Modulo" },
            { ".bsd", "Licenza/Configurazione BSD" },
            { ".babelrc", "Configurazione Babel" },
            { ".prettierrc", "Configurazione Prettier" },
            { ".npignore", "Regole Ignore NuGet" },
            { ".php", "Script PHP" },
            { ".eslintignore", "ESLint Ignore" },
            { ".lic", "File Licenza" },
            { ".nib", "NeXT Interface Builder" },
            { ".plist", "Elenco Proprietà macOS" },
            { ".mui", "Interfaccia Utente Multilingue" },
            { ".efi", "Firmware UEFI" },
            { ".cip", "Pacchetto Chrome CIP" },
            { ".bin", "Dati Binari" },
            { ".sdi", "Immagine Distribuzione Sistema" },
            { ".ttf", "Font TrueType" },
            { ".cur", "Cursore Windows" },
            { ".ani", "Cursore Animato" },
            { ".diagpkg", "Pacchetto Diagnostico Windows" },
            { ".dat", "File Dati Generico" },
            { ".diffbase", "Snapshot Base Diff" },
            { ".lm", "Modello Lingua" },
            { ".lm1", "Variante Modello Lingua 1" },
            { ".lm2", "Variante Modello Lingua 2" },
            { ".lm3", "Variante Modello Lingua 3" },
            { ".lex", "Dati Lessico" },
            { ".res", "Risorsa Windows" },
            { ".nlt", "Dati Fiducia NetLink" },
            { ".nls", "Supporto Lingua Nazionale" },
            { ".chm", "Guida HTML Compilata" },
            { ".fil", "Contenitore Elenco File" },
            { ".msixbundle", "Bundle MSIX" },
            { ".p7x", "PKCS #7 Esteso" },
            { ".pri", "Indice Risorse Pacchetto" },
            { ".etl", "Log Traccia Eventi" },
            { ".nlp", "Dati Processore Lingua Naturale" },
            { ".compositefont", "Font Composito WPF" },
            { ".aspx", "Pagina ASP.NET" },
            { ".ascx", "Controllo Utente ASP.NET" },
            { ".master", "Pagina Master ASP.NET" },
            { ".browser", "Definizione Browser" },
            { ".lnk", "Collegamento Windows" },
            { ".default", "Impostazioni Predefinite" },
            { ".comments", "Metadati Commenti" },
            { ".rsp", "File Risposta" },
            { ".tld", "Descrittore Libreria Tag" },
            { ".win32manifest", "Manifest Win32" },
            { ".man", "Pagina Manuale" },
            { ".mof", "Formato Oggetto Gestito" },
            { ".uninstall", "Script Disinstallazione" },
            { ".tasks", "Attività MSBuild" },
            { ".overridetasks", "Attività Override MSBuild" },
            { ".orp", "Dati ORP" },
            { ".adml", "Linguaggio Modello Amministrativo" },
            { ".ppkg", "Pacchetto Provisioning" },
            { ".mstheme", "Tema Microsoft" },
            { ".msstyles", "Stile Windows" },
            { ".mum", "Modulo Aggiornamento Manifest" },
            { ".cat", "Catalogo Sicurezza" },
            { ".jfm", "Metadati Database Jet" },
            { ".rs", "Codice Rust" },
            { ".jll", "Bitcode Julia LLVM" },
            { ".sys", "Driver Sistema Windows" },
            { ".p7b", "Catena Certificati PKCS #7" },
            { ".wmfw", "Framework Windows Media" },
            { ".inf_loc", "Localizzazione INF" },
            { ".winmd", "Metadati Windows" },
            { ".xbf", "Formato Binario XAML" },
            { ".license", "Token Licenza" },
            { ".fpie", "Eseguibile Intermedio FPGA" },
            { ".cso", "Oggetto Shader Compilato" },
            { ".sccd", "Dati Config System Center" },
            { ".bundle", "Bundle Applicazione" },
            { ".schema", "Schema JSON/XML" },
            { ".csg", "Geometria Solida Costruttiva" },
            { ".mun", "Rete Multi-Unita" },
            { ".uce", "Motore Scacchi Universale" },
            { ".cpl", "Applet Pannello Controllo" },
            { ".msc", "Console Gestione Microsoft" },
            { ".ax", "Filtro DirectShow" },
            { ".table", "Tabella Hash/Ricerca" },
            { ".tsp", "Pacchetto/Script TSP" },
            { ".tbl", "Dati Tabella" },
            { ".drv", "Driver Dispositivo" },
            { ".sep", "File Separatore" },
            { ".ocx", "Controllo ActiveX" },
            { ".msp", "Patch Installer Windows" },
            { ".scr", "Salvaschermo Windows" },
            { ".vbs", "VBScript" },
            { ".grxml", "Grammatica XML" },
            { ".xrm-ms", "Licenza Microsoft" },
            { ".rll", "Libreria Collegamento Risorse" },
            { ".mfl", "File Lingua MFL" },
            { ".cdxml", "Definizione Cmdlet XML" },
            { ".dtd", "Definizione Tipo Documento" },
            { ".psm1", "Script Modulo PowerShell" },
            { ".ps1xml", "Dati Formato PowerShell" },
            { ".wprp", "Profilo Registratore Prestazioni Windows" },
            { ".xsl", "Foglio Stile XSLT" },
            { ".gyp", "Genera i Tuoi Progetti" },
            { ".rld", "Dati Ricarica" },
            { ".job", "Lavoro Attività Windows" },
            { ".gypi", "Includi GYP" },
            { ".hlp", "Guida Windows" },
            { ".gdl", "Linguaggio Descrizione Generico" },
            { ".elf", "Formato Eseguibile e Collegabile" },
            { ".ppd", "Descrizione Stampante PostScript" },
            { ".gpd", "Descrizione Stampante Generica" },
            { ".mbn", "Binario Modem" },
            { ".pak", "Archivio PAK" },
            { ".dgml", "Markup Grafo Diretto" },
            { ".smp", "File Campione" },
            { ".lxa", "Audio Lessico Microsoft" },
            { ".wwd", "Procedura Guidata Microsoft Works" },
            { ".wsf", "File Script Windows" },
            { ".cw", "Modello CardWorks" },
            { ".phn", "Scena Fisica Phun" },
            { ".am", "File Automake" },
            { ".fe", "Crittatore File" },
            { ".mllr", "Regressione Lineale Massima Verosimiglianza" },
            { ".ngr", "ROM NEOGEO" },
            { ".sch", "Programma/Schema" },
            { ".adlm", "Gestore Licenze Autodesk" },
            { ".adxm", "XML Amministrativo" },
            { ".nmnl", "Minimo Normalizzato" },
            { ".propdesc", "Descrizione Proprietà" },
            { ".nsl", "Libreria Suono Nokia" },
            { ".ntf", "Formato Trasferimento Nazionale" },
            { ".ntp", "Configurazione NTP" },
            { ".forms", "Windows Forms" },
            { ".runtime", "Manifest Runtime" },
            { ".interop", "Dati Interop COM" },
            { ".frm", "Modulo Visual Basic" },
            { ".bas", "Modulo Visual Basic" },
            { ".dwb", "Bundle Drum Workshop" },
            { ".npmignore", "Regole Ignore NPM" },
            { ".rsrc", "Fork Risorse macOS" },
            { ".upd2date", "Flag Cache Up2Date" },
            { ".Up2Date", "Flag Cache Up2Date" },
            { ".jshintrc", "Configurazione JSHint" },
            { ".lock", "Blocco/Dipendenza" },
            { ".nix", "Espressione Nix" },
            { ".hr1", "Dati Gioco HR1" },
            { ".hr2", "Dati Gioco HR2" },
            { ".hr3", "Dati Gioco HR3" },
            { ".hr4", "Dati Gioco HR4" },
            { ".hr5", "Dati Gioco HR5" },
            { ".hr6", "Dati Gioco HR6" },
            { ".hr7", "Dati Gioco HR7" },
            { ".hr8", "Dati Gioco HR8" },
            { ".hr9", "Dati Gioco HR9" },
            { ".bnf", "Grammatica Forma Backus-Naur" },
            { ".clb", "Catalogo COM+" },
            { ".tlb", "Libreria Tipi" },
            { ".dic", "Dizionario/Lessico" },
            { ".aux", "File TeX Ausiliario" },
            { ".ds", "Archivio Dati/DS_Store" },
            { ".inc", "Includi/Includi Sorgente" },
            { ".cpx", "Traduzione Pagina Codice" },
            { ".mdl", "File Modello/Modulo" },
            { ".dls", "Bank Suoni Scaricabili" },
            { ".cdf-ms", "Manifest Distribuzione ClickOnce" },
            { ".addin", "Add-in Visual Studio" },
            { ".scp", "Componente Script Windows" },
            { ".wmz", "Skin Windows Media Player Compressa" },
            { ".iec", "Database IEC" },
            { ".wsc", "Componente Script Windows" },
            { ".vrg", "Script Registro Visual Studio" },
            { ".prx", "Configurazione Proxy Automatica" },
            { ".nuspec", "Specifica NuGet" },
            
            // ── Extended Archive / Compression --------------------------------
            { ".zipx", "Archivio ZIPX" },
            { ".alz", "Archivio ALZip" },
            { ".eeg", "Compresso EEG" },
            { ".001", "Parte Archivio Diviso 1" },
            { ".arj", "Archivio ARJ" },
            { ".bh",  "Archivio BlakHole" },
            { ".lha", "Archivio LHA" },
            { ".lzh", "Archivio LHA/LZH" },
            { ".pma", "Archivio PMarc" },
            { ".arc", "Archivio ARC" },
            { ".ace", "Archivio ACE" },
            { ".aes", "File Criptato AES" },
            { ".zpak", "Archivio ZPAQ" },
            { ".zstd", "Archivio Zstandard" },
            { ".br",  "Archivio Brotli" },
            { ".pea", "Archivio PeaZip" },
            { ".tbz", "Archivio Tar.BZ" },
            { ".tbz2", "Archivio Tar.BZ2" },
            { ".txz", "Archivio Tar.XZ" },
            { ".tlz", "Archivio Tar.LZMA" },
            { ".uu",  "File UUEncoded" },
            { ".uue", "File UUEncoded" },
            { ".xxe", "File XXEncoded" },
            { ".z",   "Compress Unix" },
            { ".tgz", "Archivio Tar.GZ" },
            { ".isz", "Immagine ISO-Zippata" },
            { ".udf", "Formato Disco Universale" },
            { ".i00", "Parte Immagine Divisa DVD Decrypter 1" }
        }
    },
    {
    "pt-PT", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
    {
        // ── Microsoft / Office ---------------------------------------------
        { ".docx", "Documento Word" }, { ".doc", "Word 97-2003" },
        { ".xlsx", "Livro Excel" }, { ".xls", "Excel 97-2003" },
        { ".pptx", "PowerPoint" }, { ".ppt", "PowerPoint 97-2003" },
        { ".vsdx", "Desenho Visio" }, { ".pub", "Documento Publisher" },
        { ".one", "Caderno OneNote" },
        { ".ost", "Outlook Offline" }, { ".pst", "Outlook Pessoal" },
        { ".msg", "Mensagem Outlook" }, { ".eml", "Mensagem de Email" },

        // ── Web / Mark-up ---------------------------------------------------
        { ".html", "Documento HTML" }, { ".htm", "Documento HTML" },
        { ".css", "Folha de Estilos CSS" }, { ".scss", "Sass (SCSS)" },
        { ".sass", "Sass (Com Indentação)" }, { ".less", "Estilo Less" },
        { ".js", "JavaScript" }, { ".jsx", "React JSX" },
        { ".ts", "TypeScript" }, { ".tsx", "React TSX" },
        { ".json", "Dados JSON" }, { ".xml", "Documento XML" },
        { ".yml", "Configuração YAML" },

        // ── Microsoft / .NET ----------------------------------------------
        { ".cs", "Código C#" }, { ".csx", "Script C#" },
        { ".fs", "Código F#" }, { ".vb", "Código VB.NET" },
        { ".il", "Assembly IL" }, { ".resx", "Recursos XML" },
        { ".xaml", "Mark-up XAML" }, { ".sln", "Solução Visual Studio" },
        { ".vbproj", "Projeto VB" },
        { ".vcxproj", "Projeto C++" }, { ".props", "Propriedades MSBuild" },
        { ".targets", "Targets MSBuild" },

        // ── C / C++ --------------------------------------------------------
        { ".cpp", "Código C++" }, { ".cc", "Código C++" },
        { ".cxx", "Código C++" }, { ".c", "Código C" },
        { ".hpp", "Cabeçalho C++" }, { ".h", "Cabeçalho C/C++" },
        { ".inl", "Inline C++" }, { ".idl", "Definição de Interface" },
        { ".rc", "Script de Recursos" }, { ".manifest", "Manifesto da Aplicação" },

        // ── Java / JVM ------------------------------------------------------
        { ".java", "Código Java" }, { ".class", "Classe Java" },
        { ".jar", "Arquivo Java" }, { ".war", "Arquivo Web Java" },
        { ".ear", "Arquivo Enterprise" }, { ".scala", "Código Scala" },
        { ".groovy", "Código Groovy" }, { ".clj", "Código Clojure" },

        // ── Python ----------------------------------------------------------
        { ".py", "Script Python" }, { ".pyw", "Python (Sem Consola)" },
        { ".pyi", "Stub Python" }, { ".pyc", "Bytecode Python" },
        { ".pyo", "Python Otimizado" }, { ".pyd", "Extensão Python" },
        { ".whl", "Wheel Python" }, { ".ipynb", "Caderno Jupyter" },

        // ── Mobile ----------------------------------------------------------
        { ".swift", "Código Swift" }, { ".dart", "Código Dart" },
        { ".kt", "Código Kotlin" }, { ".kts", "Script Kotlin" },
        { ".gradle", "Script Gradle" }, { ".aar", "Arquivo Android" },
        { ".apk", "Pacote Android" }, { ".aab", "Pacote de App Android" },
        { ".ipa", "Pacote iOS" },

        // ── Game Dev / 3D ---------------------------------------------------
        { ".unity", "Cena Unity" }, { ".prefab", "Prefab Unity" },
        { ".uasset", "Recurso Unreal" }, { ".umap", "Mapa Unreal" },
        { ".fbx", "Modelo 3D FBX" }, { ".obj", "Modelo 3D Wavefront" },
        { ".gltf", "Modelo 3D glTF" }, { ".blend", "Projeto Blender" },
        { ".dae", "Modelo Collada" }, { ".3ds", "Modelo 3D Studio" },
        { ".stl", "Modelo STL" }, { ".dxf", "AutoCAD DXF" },

        // ── Criativo / Adobe ----------------------------------------------
        { ".psd", "Documento Photoshop" }, { ".psb", "Photoshop Grande" },
        { ".ai", "Arte Illustrator" }, { ".indd", "Documento InDesign" },
        { ".prproj", "Projeto Premiere" }, { ".aep", "After Effects" },
        { ".xd", "Protótipo Adobe XD" }, { ".sketch", "Documento Sketch" },
        { ".fig", "Documento Figma" },

        // ── Áudio -----------------------------------------------------------
        { ".mp3", "Áudio MP3" }, { ".wav", "Áudio Wave" },
        { ".flac", "Áudio FLAC" }, { ".aac", "Áudio AAC" },
        { ".ogg", "OGG Vorbis" }, { ".wma", "Áudio Windows" },
        { ".opus", "Áudio Opus" }, { ".m4a", "Áudio MPEG-4" },
        { ".midi", "Sequência MIDI" }, { ".aiff", "Áudio AIFF" },

        // ── Vídeo -----------------------------------------------------------
        { ".mp4", "Vídeo MP4" }, { ".mkv", "Vídeo Matroska" },
        { ".avi", "Vídeo AVI" }, { ".mov", "Vídeo QuickTime" },
        { ".wmv", "Vídeo Windows" }, { ".webm", "Vídeo WebM" },
        { ".flv", "Vídeo Flash" }, { ".m4v", "Vídeo M4V" },
        { ".m3u8", "Lista HLS" },
        { ".ogv", "Vídeo OGG" }, { ".3gp", "Vídeo 3GP" },

        // ── Imagens ----------------------------------------------------------
        { ".jpg", "Imagem JPEG" }, { ".jpeg", "Imagem JPEG" },
        { ".png", "Imagem PNG" }, { ".gif", "Imagem GIF" },
        { ".bmp", "Imagem BMP" }, { ".tiff", "Imagem TIFF" },
        { ".webp", "Imagem WebP" }, { ".ico", "Ícone" },
        { ".svg", "Vector SVG" }, { ".eps", "PostScript Encapsulado" },
        { ".raw", "Imagem RAW" },
        { ".cr2", "RAW Canon" }, { ".nef", "RAW Nikon" },
        { ".arw", "RAW Sony" }, { ".dng", "Negativo Digital" },

        // ── Arquivos --------------------------------------------------------
        { ".zip", "Arquivo ZIP" }, { ".rar", "Arquivo RAR" },
        { ".7z", "Arquivo 7-Zip" }, { ".tar", "Arquivo Tar" },
        { ".gz", "Arquivo GZip" }, { ".bz2", "Arquivo BZip2" },
        { ".xz", "Arquivo XZ" }, { ".zst", "Arquivo Zstd" },
        { ".lz4", "Arquivo LZ4" }, { ".cab", "Arquivo Cabinet" },
        { ".iso", "Imagem de Disco" }, { ".dmg", "Imagem de Disco macOS" },
        { ".img", "Imagem de Disco Raw" }, { ".vhd", "Disco Rígido Virtual" },
        { ".vhdx", "Disco Hyper-V" }, { ".wim", "Imagem Windows" },

        // ── Base de Dados --------------------------------------------------------
        { ".sql", "Script SQL" }, { ".db", "Base de Dados" },
        { ".sqlite", "Base de Dados SQLite" }, { ".mdb", "Base de Dados Access" },
        { ".accdb", "Base de Dados Access" }, { ".mdf", "Base de Dados SQL Server" },
        { ".ndf", "NDF SQL Server" }, { ".ldf", "Log SQL Server" },
        { ".bak", "Backup SQL" }, { ".dmp", "Dump da Base de Dados" },

        // ── Científico / Matemática ---------------------------------------------
        { ".mat", "Dados MATLAB" }, { ".m", "Script MATLAB" },
        { ".r", "Script R" }, { ".rdata", "Conjunto de Dados R" },
        { ".csv", "Dados CSV" }, { ".tsv", "Dados TSV" },
        { ".sas", "Programa SAS" }, { ".sav", "Conjunto de Dados SPSS" },
        { ".por", "SPSS Portátil" },

        // ── Cripto / Blockchain -------------------------------------------
        { ".gpg", "Encriptado GPG" }, { ".pgp", "Encriptado PGP" },
        { ".asc", "Assinatura PGP" }, { ".sig", "Assinatura Detachada" },
        { ".wallet", "Carteira Cripto" }, { ".key", "Ficheiro de Chave" },
        { ".pem", "Certificado PEM" }, { ".crt", "Certificado" },
        { ".p12", "Keystore PKCS#12" }, { ".pfx", "Keystore Windows" },

        // ── Emulação / ROMs ----------------------------------------------
        { ".gba", "ROM Game Boy" }, { ".nds", "ROM Nintendo DS" },
        { ".wbfs", "Backup Wii" },
        { ".cia", "Instalador 3DS" }, { ".nsp", "Pacote Switch" },
        { ".xci", "Cartucho Switch" }, { ".wad", "Canal Wii" },

        // ── Diversos ------------------------------------------------------------
        { ".exe", "Executável Windows" }, { ".msi", "Instalador Windows" },
        { ".com", "Comando DOS" }, { ".bat", "Script Batch" },
        { ".ps1", "Script PowerShell" }, { ".cmd", "Script de Comando" },
        { ".reg", "Entrada do Registo" },
        { ".url", "Atalho da Internet" }, { ".torrent", "BitTorrent" },
        { ".log", "Ficheiro de Log" }, { ".ini", "Configuração INI" },
        { ".cfg", "Ficheiro de Configuração" }, { ".conf", "Configuração" },
        { ".yaml", "Configuração YAML" }, { ".toml", "Configuração TOML" },
        { ".env", "Ficheiro de Ambiente" }, { ".gitignore", "Git Ignore" },
        { ".dockerfile", "Dockerfile" }, { ".md", "Markdown" },
        { ".tex", "Código LaTeX" }, { ".bib", "Biblioteca BibTeX" },

        // ── Adicionais / Diversos ---------------------------------------------
        { ".dwp", "Web Part SharePoint" },
        { ".fxp", "FoxPro Compilado" },
        { ".asd", "AutoSave Word" },
        { ".fsc", "Cache de Pesquisa Windows" },
        { ".mid", "Sequência MIDI" },
        { ".fst", "Estado FL Studio" },
        { ".txt", "Ficheiro de Texto Simples" },
        { ".pdb", "Base de Dados do Programa" },
        { ".dll", "Biblioteca de Ligação Dinâmica" },
        { ".resources", "Recursos .NET" },
        { ".cache", "Ficheiro de Cache" },
        { ".settings", "Definições XML" },
        { ".csproj", "Projeto C#" },
        { ".editorconfig", "EditorConfig" },
        { ".kdbx", "Ficheiro KeePass" },
        { ".nupkg", "Pacote NuGet" },
        { ".p7s", "Assinatura PKCS #7" },
        { ".map", "Ficheiro Source-Map" },
        { ".flow", "Declaração Flow Type" },
        { ".mjs", "ES Module (JavaScript)" },
        { ".cjs", "CommonJS (JavaScript)" },
        { ".cts", "TypeScript CommonJS" },
        { ".mts", "TypeScript ES Module" },
        { ".jst", "Template JavaScript" },
        { ".markdown", "Documento Markdown" },
        { ".applescript", "AppleScript" },
        { ".ch1", "Dados de Personagem Nintendo" },
        { ".vital", "Predefinição Vital Synthesizer" },
        { ".ds_store", "macOS Desktop Services Store" },
        { ".zpw", "Pacote ZippedWeb" },
        { ".flp", "Projeto FL Studio" },
        { ".flstheme", "Tema FL Studio" },
        { ".nmsv", "Predefinição Native Instruments NMSV" },
        { ".wav.256", "Variante WAV 256-bit" },
        { ".pdf", "Formato de Documento Portátil" },
        { ".config", "Configuração XML/JSON" },
        { ".user", "Definições do Utilizador" },
        { ".uptodate", "Flag de Cache Up2Date" },
        { ".rtf", "Formato de Texto Rico" },
        { ".buildwithskipanalyzers", "Flag MSBuild Skip-Analyzers" },
        { ".node", "Módulo Binário Node.js" },
        { ".snap", "Pacote Snapcraft" },
        { ".def", "Ficheiro de Definição de Módulo" },
        { ".bsd", "Licença/Configuração BSD" },
        { ".babelrc", "Configuração Babel" },
        { ".prettierrc", "Configuração Prettier" },
        { ".npignore", "Regras de Ignorar NuGet" },
        { ".php", "Script PHP" },
        { ".eslintignore", "ESLint Ignore" },
        { ".lic", "Ficheiro de Licença" },
        { ".nib", "NeXT Interface Builder" },
        { ".plist", "Lista de Propriedades macOS" },
        { ".mui", "Interface de Utilizador Multilingue" },
        { ".efi", "Firmware UEFI" },
        { ".cip", "Pacote Chrome CIP" },
        { ".bin", "Dados Binários" },
        { ".sdi", "Imagem de Implementação do Sistema" },
        { ".ttf", "Fonte TrueType" },
        { ".cur", "Cursor Windows" },
        { ".ani", "Cursor Animado" },
        { ".diagpkg", "Pacote de Diagnóstico Windows" },
        { ".dat", "Ficheiro de Dados Genérico" },
        { ".diffbase", "Instantâneo Base de Diff" },
        { ".lm", "Modelo de Linguagem" },
        { ".lm1", "Variante de Modelo de Linguagem 1" },
        { ".lm2", "Variante de Modelo de Linguagem 2" },
        { ".lm3", "Variante de Modelo de Linguagem 3" },
        { ".lex", "Dados de Léxico" },
        { ".res", "Recurso Windows" },
        { ".nlt", "Dados NetLink Trust" },
        { ".nls", "Suporte de Idioma Nacional" },
        { ".chm", "Ajuda HTML Compilada" },
        { ".fil", "Contentor de Lista de Ficheiros" },
        { ".msixbundle", "Pacote MSIX" },
        { ".p7x", "PKCS #7 Estendido" },
        { ".pri", "Índice de Recursos do Pacote" },
        { ".etl", "Log de Rastreio de Eventos" },
        { ".nlp", "Dados do Processador de Linguagem Natural" },
        { ".compositefont", "Fonte Composta WPF" },
        { ".aspx", "Página ASP.NET" },
        { ".ascx", "Controlo de Utilizador ASP.NET" },
        { ".master", "Página Master ASP.NET" },
        { ".browser", "Definição do Browser" },
        { ".lnk", "Atalho Windows" },
        { ".default", "Definições Predefinidas" },
        { ".comments", "Metadados de Comentários" },
        { ".rsp", "Ficheiro de Resposta" },
        { ".tld", "Descrição da Biblioteca de Tags" },
        { ".win32manifest", "Manifesto Win32" },
        { ".man", "Página de Manual" },
        { ".mof", "Formato de Objeto Gerido" },
        { ".uninstall", "Script de Desinstalação" },
        { ".tasks", "Tarefas MSBuild" },
        { ".overridetasks", "Tarefas de Substituição MSBuild" },
        { ".orp", "Dados ORP" },
        { ".adml", "Linguagem de Modelo Administrativo" },
        { ".ppkg", "Pacote de Provisionamento" },
        { ".mstheme", "Tema Microsoft" },
        { ".msstyles", "Estilo Windows" },
        { ".mum", "Módulo de Atualização de Manifesto" },
        { ".cat", "Catálogo de Segurança" },
        { ".jfm", "Metadados da Base de Dados Jet" },
        { ".rs", "Código Rust" },
        { ".jll", "Bitcode LLVM Julia" },
        { ".sys", "Driver do Sistema Windows" },
        { ".p7b", "Cadeia de Certificados PKCS #7" },
        { ".wmfw", "Windows Media Framework" },
        { ".inf_loc", "Localização INF" },
        { ".winmd", "Metadados Windows" },
        { ".xbf", "Formato Binário XAML" },
        { ".license", "Token de Licença" },
        { ".fpie", "Executável Intermédio FPGA" },
        { ".cso", "Objeto Shader Compilado" },
        { ".sccd", "Dados de Configuração System Center" },
        { ".bundle", "Pacote de Aplicação" },
        { ".schema", "Schema JSON/XML" },
        { ".csg", "Geometria Sólida Construtiva" },
        { ".mun", "Rede Multi-Unidade" },
        { ".uce", "Motor de Xadrez Universal" },
        { ".cpl", "Applet do Painel de Controlo" },
        { ".msc", "Consola de Gestão Microsoft" },
        { ".ax", "Filtro DirectShow" },
        { ".table", "Tabela de Pesquisa/Hash" },
        { ".tsp", "Pacote/Script TSP" },
        { ".tbl", "Dados de Tabela" },
        { ".drv", "Driver de Dispositivo" },
        { ".sep", "Ficheiro Separador" },
        { ".ocx", "Controlo ActiveX" },
        { ".msp", "Patch do Instalador Windows" },
        { ".scr", "Protetor de Ecrã Windows" },
        { ".vbs", "VBScript" },
        { ".grxml", "Gramática XML" },
        { ".xrm-ms", "Licença Microsoft" },
        { ".rll", "Biblioteca de Ligação de Recursos" },
        { ".mfl", "Ficheiro de Idioma MFL" },
        { ".cdxml", "Definição de Cmdlet XML" },
        { ".dtd", "Definição de Tipo de Documento" },
        { ".psm1", "Script de Módulo PowerShell" },
        { ".ps1xml", "Dados de Formatação PowerShell" },
        { ".wprp", "Perfil do Gravador de Performance Windows" },
        { ".xsl", "Folha de Estilos XSLT" },
        { ".gyp", "Generate Your Projects" },
        { ".rld", "Dados ReLoad" },
        { ".job", "Tarefa Windows" },
        { ".gypi", "Incluir GYP" },
        { ".hlp", "Ajuda Windows" },
        { ".gdl", "Linguagem de Descrição Genérica" },
        { ".elf", "Formato Executável e de Ligação" },
        { ".ppd", "Descrição de Impressora PostScript" },
        { ".gpd", "Descrição de Impressora Genérica" },
        { ".mbn", "Binário do Modem" },
        { ".pak", "Arquivo PAK" },
        { ".dgml", "Markup de Grafo Direcionado" },
        { ".smp", "Ficheiro de Amostra" },
        { ".lxa", "Áudio de Léxico Microsoft" },
        { ".wwd", "Assistente Microsoft Works" },
        { ".wsf", "Ficheiro de Script Windows" },
        { ".cw", "Modelo CardWorks" },
        { ".phn", "Cena de Física Phun" },
        { ".am", "Ficheiro Automake" },
        { ".fe", "Encriptador de Ficheiros" },
        { ".mllr", "Regressão Linear de Máxima Verossimilhança" },
        { ".ngr", "ROM NEOGEO" },
        { ".sch", "Horário/Esquema" },
        { ".adlm", "Gestor de Licenças Autodesk" },
        { ".adxm", "XML Administrativo" },
        { ".nmnl", "Minimal Normalizado" },
        { ".propdesc", "Descrição de Propriedade" },
        { ".nsl", "Biblioteca de Som Nokia" },
        { ".ntf", "Formato de Transferência Nacional" },
        { ".ntp", "Configuração NTP" },
        { ".forms", "Windows Forms" },
        { ".runtime", "Manifesto de Runtime" },
        { ".interop", "Dados de Interop COM" },
        { ".frm", "Formulário Visual Basic" },
        { ".bas", "Módulo Visual Basic" },
        { ".dwb", "Pacote Drum Workshop" },
        { ".npmignore", "Regras de Ignorar NPM" },
        { ".rsrc", "Resource Fork macOS" },
        { ".upd2date", "Flag de Cache Up2Date" },
        { ".Up2Date", "Flag de Cache Up2Date" },
        { ".jshintrc", "Configuração JSHint" },
        { ".lock", "Bloqueio/Pin de Dependência" },
        { ".nix", "Expressão Nix" },
        { ".hr1", "Dados de Jogo HR1" },
        { ".hr2", "Dados de Jogo HR2" },
        { ".hr3", "Dados de Jogo HR3" },
        { ".hr4", "Dados de Jogo HR4" },
        { ".hr5", "Dados de Jogo HR5" },
        { ".hr6", "Dados de Jogo HR6" },
        { ".hr7", "Dados de Jogo HR7" },
        { ".hr8", "Dados de Jogo HR8" },
        { ".hr9", "Dados de Jogo HR9" },
        { ".bnf", "Gramática Backus-Naur" },
        { ".clb", "Catálogo COM+" },
        { ".tlb", "Biblioteca de Tipos" },
        { ".dic", "Dicionário/Léxico" },
        { ".aux", "Ficheiro Auxiliar TeX" },
        { ".ds", "DataStore/DS_Store" },
        { ".inc", "Incluir/Incluir de Código" },
        { ".cpx", "Tradução de Página de Código" },
        { ".mdl", "Modelo/Ficheiro de Módulo" },
        { ".dls", "Banco de Sons Transferível" },
        { ".cdf-ms", "Manifesto de Implementação ClickOnce" },
        { ".addin", "Add-in Visual Studio" },
        { ".scp", "Componente de Script Windows" },
        { ".wmz", "Skin Comprimido do Windows Media Player" },
        { ".iec", "Base de Dados IEC" },
        { ".wsc", "Componente de Script Windows" },
        { ".vrg", "Script de Registo Visual Studio" },
        { ".prx", "Auto-Configuração de Proxy" },
        { ".nuspec", "Especificação NuGet" },
        
        // ── Arquivos Estendidos / Compressão --------------------------------
        { ".zipx", "Arquivo ZIPX" },
        { ".alz", "Arquivo ALZip" },
        { ".eeg", "Comprimido EEG" },
        { ".001", "Parte 1 do Arquivo Dividido" },
        { ".arj", "Arquivo ARJ" },
        { ".bh", "Arquivo BlakHole" },
        { ".lha", "Arquivo LHA" },
        { ".lzh", "Arquivo LHA/LZH" },
        { ".pma", "Arquivo PMarc" },
        { ".arc", "Arquivo ARC" },
        { ".ace", "Arquivo ACE" },
        { ".aes", "Ficheiro Encriptado AES" },
        { ".zpak", "Arquivo ZPAQ" },
        { ".zstd", "Arquivo Zstandard" },
        { ".br", "Arquivo Brotli" },
        { ".pea", "Arquivo PeaZip" },
        { ".tbz", "Arquivo Tar.BZ" },
        { ".tbz2", "Arquivo Tar.BZ2" },
        { ".txz", "Arquivo Tar.XZ" },
        { ".tlz", "Arquivo Tar.LZMA" },
        { ".uu", "Ficheiro UUEncoded" },
        { ".uue", "Ficheiro UUEncoded" },
        { ".xxe", "Ficheiro XXEncoded" },
        { ".z", "Unix Compress" },
        { ".tgz", "Arquivo Tar.GZ" },
        { ".isz", "Imagem ISO-Zipped" },
        { ".udf", "Formato de Disco Universal" },
        { ".i00", "Parte 1 da Imagem Dividida DVD Decrypter" }
    }
},
    {
    "pt-BR", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
    {
        // ── Microsoft / Office ---------------------------------------------
        { ".docx", "Documento do Word" }, { ".doc", "Word 97-2003" },
        { ".xlsx", "Pasta do Excel" }, { ".xls", "Excel 97-2003" },
        { ".pptx", "PowerPoint" }, { ".ppt", "PowerPoint 97-2003" },
        { ".vsdx", "Desenho do Visio" }, { ".pub", "Documento do Publisher" },
        { ".one", "Caderno do OneNote" },
        { ".ost", "Outlook Offline" }, { ".pst", "Outlook Pessoal" },
        { ".msg", "Mensagem do Outlook" }, { ".eml", "Mensagem de Email" },

        // ── Web / Mark-up ---------------------------------------------------
        { ".html", "Documento HTML" }, { ".htm", "Documento HTML" },
        { ".css", "Folha de Estilo CSS" }, { ".scss", "Sass (SCSS)" },
        { ".sass", "Sass (Com Indentação)" }, { ".less", "Estilo Less" },
        { ".js", "JavaScript" }, { ".jsx", "React JSX" },
        { ".ts", "TypeScript" }, { ".tsx", "React TSX" },
        { ".json", "Dados JSON" }, { ".xml", "Documento XML" },
        { ".yml", "Configuração YAML" },

        // ── Microsoft / .NET ----------------------------------------------
        { ".cs", "Código C#" }, { ".csx", "Script C#" },
        { ".fs", "Código F#" }, { ".vb", "Código VB.NET" },
        { ".il", "Assembly IL" }, { ".resx", "Recursos XML" },
        { ".xaml", "Mark-up XAML" }, { ".sln", "Solução do Visual Studio" },
        { ".vbproj", "Projeto VB" },
        { ".vcxproj", "Projeto C++" }, { ".props", "Propriedades MSBuild" },
        { ".targets", "Targets MSBuild" },

        // ── C / C++ --------------------------------------------------------
        { ".cpp", "Código C++" }, { ".cc", "Código C++" },
        { ".cxx", "Código C++" }, { ".c", "Código C" },
        { ".hpp", "Cabeçalho C++" }, { ".h", "Cabeçalho C/C++" },
        { ".inl", "Inline C++" }, { ".idl", "Definição de Interface" },
        { ".rc", "Script de Recursos" }, { ".manifest", "Manifesto do Aplicativo" },

        // ── Java / JVM ------------------------------------------------------
        { ".java", "Código Java" }, { ".class", "Classe Java" },
        { ".jar", "Arquivo Java" }, { ".war", "Arquivo Web Java" },
        { ".ear", "Arquivo Enterprise" }, { ".scala", "Código Scala" },
        { ".groovy", "Código Groovy" }, { ".clj", "Código Clojure" },

        // ── Python ----------------------------------------------------------
        { ".py", "Script Python" }, { ".pyw", "Python (Sem Console)" },
        { ".pyi", "Stub Python" }, { ".pyc", "Bytecode Python" },
        { ".pyo", "Python Otimizado" }, { ".pyd", "Extensão Python" },
        { ".whl", "Wheel Python" }, { ".ipynb", "Caderno Jupyter" },

        // ── Mobile ----------------------------------------------------------
        { ".swift", "Código Swift" }, { ".dart", "Código Dart" },
        { ".kt", "Código Kotlin" }, { ".kts", "Script Kotlin" },
        { ".gradle", "Script Gradle" }, { ".aar", "Arquivo Android" },
        { ".apk", "Pacote Android" }, { ".aab", "Pacote de App Android" },
        { ".ipa", "Pacote iOS" },

        // ── Game Dev / 3D ---------------------------------------------------
        { ".unity", "Cena Unity" }, { ".prefab", "Prefab Unity" },
        { ".uasset", "Recurso Unreal" }, { ".umap", "Mapa Unreal" },
        { ".fbx", "Modelo 3D FBX" }, { ".obj", "Modelo 3D Wavefront" },
        { ".gltf", "Modelo 3D glTF" }, { ".blend", "Projeto Blender" },
        { ".dae", "Modelo Collada" }, { ".3ds", "Modelo 3D Studio" },
        { ".stl", "Modelo STL" }, { ".dxf", "AutoCAD DXF" },

        // ── Criativo / Adobe ----------------------------------------------
        { ".psd", "Documento Photoshop" }, { ".psb", "Photoshop Grande" },
        { ".ai", "Arte Illustrator" }, { ".indd", "Documento InDesign" },
        { ".prproj", "Projeto Premiere" }, { ".aep", "After Effects" },
        { ".xd", "Protótipo Adobe XD" }, { ".sketch", "Documento Sketch" },
        { ".fig", "Documento Figma" },

        // ── Áudio -----------------------------------------------------------
        { ".mp3", "Áudio MP3" }, { ".wav", "Áudio Wave" },
        { ".flac", "Áudio FLAC" }, { ".aac", "Áudio AAC" },
        { ".ogg", "OGG Vorbis" }, { ".wma", "Áudio Windows" },
        { ".opus", "Áudio Opus" }, { ".m4a", "Áudio MPEG-4" },
        { ".midi", "Sequência MIDI" }, { ".aiff", "Áudio AIFF" },

        // ── Vídeo -----------------------------------------------------------
        { ".mp4", "Vídeo MP4" }, { ".mkv", "Vídeo Matroska" },
        { ".avi", "Vídeo AVI" }, { ".mov", "Vídeo QuickTime" },
        { ".wmv", "Vídeo Windows" }, { ".webm", "Vídeo WebM" },
        { ".flv", "Vídeo Flash" }, { ".m4v", "Vídeo M4V" },
        { ".m3u8", "Lista HLS" },
        { ".ogv", "Vídeo OGG" }, { ".3gp", "Vídeo 3GP" },

        // ── Imagens ----------------------------------------------------------
        { ".jpg", "Imagem JPEG" }, { ".jpeg", "Imagem JPEG" },
        { ".png", "Imagem PNG" }, { ".gif", "Imagem GIF" },
        { ".bmp", "Imagem BMP" }, { ".tiff", "Imagem TIFF" },
        { ".webp", "Imagem WebP" }, { ".ico", "Ícone" },
        { ".svg", "Vetor SVG" }, { ".eps", "PostScript Encapsulado" },
        { ".raw", "Imagem RAW" },
        { ".cr2", "RAW Canon" }, { ".nef", "RAW Nikon" },
        { ".arw", "RAW Sony" }, { ".dng", "Negativo Digital" },

        // ── Arquivos --------------------------------------------------------
        { ".zip", "Arquivo ZIP" }, { ".rar", "Arquivo RAR" },
        { ".7z", "Arquivo 7-Zip" }, { ".tar", "Arquivo Tar" },
        { ".gz", "Arquivo GZip" }, { ".bz2", "Arquivo BZip2" },
        { ".xz", "Arquivo XZ" }, { ".zst", "Arquivo Zstd" },
        { ".lz4", "Arquivo LZ4" }, { ".cab", "Arquivo Cabinet" },
        { ".iso", "Imagem de Disco" }, { ".dmg", "Imagem de Disco macOS" },
        { ".img", "Imagem de Disco Raw" }, { ".vhd", "Disco Rígido Virtual" },
        { ".vhdx", "Disco Hyper-V" }, { ".wim", "Imagem Windows" },

        // ── Banco de Dados --------------------------------------------------------
        { ".sql", "Script SQL" }, { ".db", "Banco de Dados" },
        { ".sqlite", "Banco de Dados SQLite" }, { ".mdb", "Banco de Dados Access" },
        { ".accdb", "Banco de Dados Access" }, { ".mdf", "Banco de Dados SQL Server" },
        { ".ndf", "NDF SQL Server" }, { ".ldf", "Log SQL Server" },
        { ".bak", "Backup SQL" }, { ".dmp", "Dump do Banco de Dados" },

        // ── Científico / Matemática ---------------------------------------------
        { ".mat", "Dados MATLAB" }, { ".m", "Script MATLAB" },
        { ".r", "Script R" }, { ".rdata", "Conjunto de Dados R" },
        { ".csv", "Dados CSV" }, { ".tsv", "Dados TSV" },
        { ".sas", "Programa SAS" }, { ".sav", "Conjunto de Dados SPSS" },
        { ".por", "SPSS Portátil" },

        // ── Cripto / Blockchain -------------------------------------------
        { ".gpg", "Criptografado GPG" }, { ".pgp", "Criptografado PGP" },
        { ".asc", "Assinatura PGP" }, { ".sig", "Assinatura Detachada" },
        { ".wallet", "Carteira Cripto" }, { ".key", "Arquivo de Chave" },
        { ".pem", "Certificado PEM" }, { ".crt", "Certificado" },
        { ".p12", "Keystore PKCS#12" }, { ".pfx", "Keystore Windows" },

        // ── Emulação / ROMs ----------------------------------------------
        { ".gba", "ROM Game Boy" }, { ".nds", "ROM Nintendo DS" },
        { ".wbfs", "Backup Wii" },
        { ".cia", "Instalador 3DS" }, { ".nsp", "Pacote Switch" },
        { ".xci", "Cartucho Switch" }, { ".wad", "Canal Wii" },

        // ── Diversos ------------------------------------------------------------
        { ".exe", "Executável Windows" }, { ".msi", "Instalador Windows" },
        { ".com", "Comando DOS" }, { ".bat", "Script Batch" },
        { ".ps1", "Script PowerShell" }, { ".cmd", "Script de Comando" },
        { ".reg", "Entrada do Registro" },
        { ".url", "Atalho da Internet" }, { ".torrent", "BitTorrent" },
        { ".log", "Arquivo de Log" }, { ".ini", "Configuração INI" },
        { ".cfg", "Arquivo de Configuração" }, { ".conf", "Configuração" },
        { ".yaml", "Configuração YAML" }, { ".toml", "Configuração TOML" },
        { ".env", "Arquivo de Ambiente" }, { ".gitignore", "Git Ignore" },
        { ".dockerfile", "Dockerfile" }, { ".md", "Markdown" },
        { ".tex", "Código LaTeX" }, { ".bib", "Biblioteca BibTeX" },

        // ── Adicionais / Diversos ---------------------------------------------
        { ".dwp", "Web Part SharePoint" },
        { ".fxp", "FoxPro Compilado" },
        { ".asd", "AutoSave Word" },
        { ".fsc", "Cache de Pesquisa Windows" },
        { ".mid", "Sequência MIDI" },
        { ".fst", "Estado FL Studio" },
        { ".txt", "Arquivo de Texto Simples" },
        { ".pdb", "Banco de Dados do Programa" },
        { ".dll", "Biblioteca de Vínculo Dinâmico" },
        { ".resources", "Recursos .NET" },
        { ".cache", "Arquivo de Cache" },
        { ".settings", "Configurações XML" },
        { ".csproj", "Projeto C#" },
        { ".editorconfig", "EditorConfig" },
        { ".kdbx", "Arquivo KeePass" },
        { ".nupkg", "Pacote NuGet" },
        { ".p7s", "Assinatura PKCS #7" },
        { ".map", "Arquivo Source-Map" },
        { ".flow", "Declaração Flow Type" },
        { ".mjs", "ES Module (JavaScript)" },
        { ".cjs", "CommonJS (JavaScript)" },
        { ".cts", "TypeScript CommonJS" },
        { ".mts", "TypeScript ES Module" },
        { ".jst", "Template JavaScript" },
        { ".markdown", "Documento Markdown" },
        { ".applescript", "AppleScript" },
        { ".ch1", "Dados de Personagem Nintendo" },
        { ".vital", "Predefinição Vital Synthesizer" },
        { ".ds_store", "macOS Desktop Services Store" },
        { ".zpw", "Pacote ZippedWeb" },
        { ".flp", "Projeto FL Studio" },
        { ".flstheme", "Tema FL Studio" },
        { ".nmsv", "Predefinição Native Instruments NMSV" },
        { ".wav.256", "Variante WAV 256-bit" },
        { ".pdf", "Formato de Documento Portátil" },
        { ".config", "Configuração XML/JSON" },
        { ".user", "Configurações do Usuário" },
        { ".uptodate", "Flag de Cache Up2Date" },
        { ".rtf", "Formato de Texto Rico" },
        { ".buildwithskipanalyzers", "Flag MSBuild Skip-Analyzers" },
        { ".node", "Módulo Binário Node.js" },
        { ".snap", "Pacote Snapcraft" },
        { ".def", "Arquivo de Definição de Módulo" },
        { ".bsd", "Licença/Configuração BSD" },
        { ".babelrc", "Configuração Babel" },
        { ".prettierrc", "Configuração Prettier" },
        { ".npignore", "Regras de Ignorar NuGet" },
        { ".php", "Script PHP" },
        { ".eslintignore", "ESLint Ignore" },
        { ".lic", "Arquivo de Licença" },
        { ".nib", "NeXT Interface Builder" },
        { ".plist", "Lista de Propriedades macOS" },
        { ".mui", "Interface do Usuário Multilíngue" },
        { ".efi", "Firmware UEFI" },
        { ".cip", "Pacote Chrome CIP" },
        { ".bin", "Dados Binários" },
        { ".sdi", "Imagem de Implantação do Sistema" },
        { ".ttf", "Fonte TrueType" },
        { ".cur", "Cursor Windows" },
        { ".ani", "Cursor Animado" },
        { ".diagpkg", "Pacote de Diagnóstico Windows" },
        { ".dat", "Arquivo de Dados Genérico" },
        { ".diffbase", "Instantâneo Base de Diff" },
        { ".lm", "Modelo de Linguagem" },
        { ".lm1", "Variante de Modelo de Linguagem 1" },
        { ".lm2", "Variante de Modelo de Linguagem 2" },
        { ".lm3", "Variante de Modelo de Linguagem 3" },
        { ".lex", "Dados de Léxico" },
        { ".res", "Recurso Windows" },
        { ".nlt", "Dados NetLink Trust" },
        { ".nls", "Suporte de Idioma Nacional" },
        { ".chm", "Ajuda HTML Compilada" },
        { ".fil", "Contêiner de Lista de Arquivos" },
        { ".msixbundle", "Pacote MSIX" },
        { ".p7x", "PKCS #7 Estendido" },
        { ".pri", "Índice de Recursos do Pacote" },
        { ".etl", "Log de Rastreamento de Eventos" },
        { ".nlp", "Dados do Processador de Linguagem Natural" },
        { ".compositefont", "Fonte Composta WPF" },
        { ".aspx", "Página ASP.NET" },
        { ".ascx", "Controle de Usuário ASP.NET" },
        { ".master", "Página Master ASP.NET" },
        { ".browser", "Definição do Navegador" },
        { ".lnk", "Atalho Windows" },
        { ".default", "Configurações Padrão" },
        { ".comments", "Metadados de Comentários" },
        { ".rsp", "Arquivo de Resposta" },
        { ".tld", "Descrição da Biblioteca de Tags" },
        { ".win32manifest", "Manifesto Win32" },
        { ".man", "Página de Manual" },
        { ".mof", "Formato de Objeto Gerenciado" },
        { ".uninstall", "Script de Desinstalação" },
        { ".tasks", "Tarefas MSBuild" },
        { ".overridetasks", "Tarefas de Substituição MSBuild" },
        { ".orp", "Dados ORP" },
        { ".adml", "Linguagem de Modelo Administrativo" },
        { ".ppkg", "Pacote de Provisionamento" },
        { ".mstheme", "Tema Microsoft" },
        { ".msstyles", "Estilo Windows" },
        { ".mum", "Módulo de Atualização de Manifesto" },
        { ".cat", "Catálogo de Segurança" },
        { ".jfm", "Metadados do Banco de Dados Jet" },
        { ".rs", "Código Rust" },
        { ".jll", "Bitcode LLVM Julia" },
        { ".sys", "Driver do Sistema Windows" },
        { ".p7b", "Cadeia de Certificados PKCS #7" },
        { ".wmfw", "Windows Media Framework" },
        { ".inf_loc", "Localização INF" },
        { ".winmd", "Metadados Windows" },
        { ".xbf", "Formato Binário XAML" },
        { ".license", "Token de Licença" },
        { ".fpie", "Executável Intermediário FPGA" },
        { ".cso", "Objeto Shader Compilado" },
        { ".sccd", "Dados de Configuração System Center" },
        { ".bundle", "Pacote de Aplicação" },
        { ".schema", "Schema JSON/XML" },
        { ".csg", "Geometria Sólida Construtiva" },
        { ".mun", "Rede Multi-Unidade" },
        { ".uce", "Motor de Xadrez Universal" },
        { ".cpl", "Applet do Painel de Controle" },
        { ".msc", "Console de Gerenciamento Microsoft" },
        { ".ax", "Filtro DirectShow" },
        { ".table", "Tabela de Pesquisa/Hash" },
        { ".tsp", "Pacote/Script TSP" },
        { ".tbl", "Dados de Tabela" },
        { ".drv", "Driver de Dispositivo" },
        { ".sep", "Arquivo Separador" },
        { ".ocx", "Controle ActiveX" },
        { ".msp", "Patch do Instalador Windows" },
        { ".scr", "Protetor de Tela Windows" },
        { ".vbs", "VBScript" },
        { ".grxml", "Gramática XML" },
        { ".xrm-ms", "Licença Microsoft" },
        { ".rll", "Biblioteca de Vínculo de Recursos" },
        { ".mfl", "Arquivo de Idioma MFL" },
        { ".cdxml", "Definição de Cmdlet XML" },
        { ".dtd", "Definição de Tipo de Documento" },
        { ".psm1", "Script de Módulo PowerShell" },
        { ".ps1xml", "Dados de Formatação PowerShell" },
        { ".wprp", "Perfil do Gravador de Performance Windows" },
        { ".xsl", "Folha de Estilos XSLT" },
        { ".gyp", "Generate Your Projects" },
        { ".rld", "Dados ReLoad" },
        { ".job", "Tarefa Windows" },
        { ".gypi", "Incluir GYP" },
        { ".hlp", "Ajuda Windows" },
        { ".gdl", "Linguagem de Descrição Genérica" },
        { ".elf", "Formato Executável e de Vínculo" },
        { ".ppd", "Descrição de Impressora PostScript" },
        { ".gpd", "Descrição de Impressora Genérica" },
        { ".mbn", "Binário do Modem" },
        { ".pak", "Arquivo PAK" },
        { ".dgml", "Markup de Grafo Direcionado" },
        { ".smp", "Arquivo de Amostra" },
        { ".lxa", "Áudio de Léxico Microsoft" },
        { ".wwd", "Assistente Microsoft Works" },
        { ".wsf", "Arquivo de Script Windows" },
        { ".cw", "Modelo CardWorks" },
        { ".phn", "Cena de Física Phun" },
        { ".am", "Arquivo Automake" },
        { ".fe", "Criptografador de Arquivos" },
        { ".mllr", "Regressão Linear de Máxima Verossimilhança" },
        { ".ngr", "ROM NEOGEO" },
        { ".sch", "Cronograma/Esquema" },
        { ".adlm", "Gerenciador de Licenças Autodesk" },
        { ".adxm", "XML Administrativo" },
        { ".nmnl", "Mínimo Normalizado" },
        { ".propdesc", "Descrição de Propriedade" },
        { ".nsl", "Biblioteca de Som Nokia" },
        { ".ntf", "Formato de Transferência Nacional" },
        { ".ntp", "Configuração NTP" },
        { ".forms", "Windows Forms" },
        { ".runtime", "Manifesto de Runtime" },
        { ".interop", "Dados de Interop COM" },
        { ".frm", "Formulário Visual Basic" },
        { ".bas", "Módulo Visual Basic" },
        { ".dwb", "Pacote Drum Workshop" },
        { ".npmignore", "Regras de Ignorar NPM" },
        { ".rsrc", "Resource Fork macOS" },
        { ".upd2date", "Flag de Cache Up2Date" },
        { ".Up2Date", "Flag de Cache Up2Date" },
        { ".jshintrc", "Configuração JSHint" },
        { ".lock", "Bloqueio/Pin de Dependência" },
        { ".nix", "Expressão Nix" },
        { ".hr1", "Dados de Jogo HR1" },
        { ".hr2", "Dados de Jogo HR2" },
        { ".hr3", "Dados de Jogo HR3" },
        { ".hr4", "Dados de Jogo HR4" },
        { ".hr5", "Dados de Jogo HR5" },
        { ".hr6", "Dados de Jogo HR6" },
        { ".hr7", "Dados de Jogo HR7" },
        { ".hr8", "Dados de Jogo HR8" },
        { ".hr9", "Dados de Jogo HR9" },
        { ".bnf", "Gramática Backus-Naur" },
        { ".clb", "Catálogo COM+" },
        { ".tlb", "Biblioteca de Tipos" },
        { ".dic", "Dicionário/Léxico" },
        { ".aux", "Arquivo Auxiliar TeX" },
        { ".ds", "DataStore/DS_Store" },
        { ".inc", "Incluir/Incluir de Código" },
        { ".cpx", "Tradução de Página de Código" },
        { ".mdl", "Modelo/Arquivo de Módulo" },
        { ".dls", "Banco de Sons Transferível" },
        { ".cdf-ms", "Manifesto de Implantação ClickOnce" },
        { ".addin", "Add-in Visual Studio" },
        { ".scp", "Componente de Script Windows" },
        { ".wmz", "Skin Comprimido do Windows Media Player" },
        { ".iec", "Banco de Dados IEC" },
        { ".wsc", "Componente de Script Windows" },
        { ".vrg", "Script de Registro Visual Studio" },
        { ".prx", "Auto-Configuração de Proxy" },
        { ".nuspec", "Especificação NuGet" },
        
        // ── Arquivos Estendidos / Compressão --------------------------------
        { ".zipx", "Arquivo ZIPX" },
        { ".alz", "Arquivo ALZip" },
        { ".eeg", "Comprimido EEG" },
        { ".001", "Parte 1 do Arquivo Dividido" },
        { ".arj", "Arquivo ARJ" },
        { ".bh", "Arquivo BlakHole" },
        { ".lha", "Arquivo LHA" },
        { ".lzh", "Arquivo LHA/LZH" },
        { ".pma", "Arquivo PMarc" },
        { ".arc", "Arquivo ARC" },
        { ".ace", "Arquivo ACE" },
        { ".aes", "Arquivo Criptografado AES" },
        { ".zpak", "Arquivo ZPAQ" },
        { ".zstd", "Arquivo Zstandard" },
        { ".br", "Arquivo Brotli" },
        { ".pea", "Arquivo PeaZip" },
        { ".tbz", "Arquivo Tar.BZ" },
        { ".tbz2", "Arquivo Tar.BZ2" },
        { ".txz", "Arquivo Tar.XZ" },
        { ".tlz", "Arquivo Tar.LZMA" },
        { ".uu", "Arquivo UUEncoded" },
        { ".uue", "Arquivo UUEncoded" },
        { ".xxe", "Arquivo XXEncoded" },
        { ".z", "Unix Compress" },
        { ".tgz", "Arquivo Tar.GZ" },
        { ".isz", "Imagem ISO-Zipped" },
        { ".udf", "Formato de Disco Universal" },
        { ".i00", "Parte 1 da Imagem Dividida DVD Decrypter" }
    }
},
    {
    "nl", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
    {
        // ── Microsoft / Office ---------------------------------------------
        { ".docx", "Word-document" },  { ".doc", "Word 97-2003" },
        { ".xlsx", "Excel-werkmap" }, { ".xls", "Excel 97-2003" },
        { ".pptx", "PowerPoint" },     { ".ppt", "PowerPoint 97-2003" },
        { ".vsdx", "Visio-tekening" },  { ".pub", "Publisher-document" },
        { ".one",  "OneNote-notitieblok" },
        { ".ost", "Outlook Offline" }, { ".pst", "Outlook Persoonlijk" },
        { ".msg", "Outlook-bericht" }, { ".eml", "E-mailbericht" },

        // ── Web / Mark-up ---------------------------------------------------
        { ".html", "HTML-document" },  { ".htm", "HTML-document" },
        { ".css",  "CSS-stijlblad" }, { ".scss", "Sass (SCSS)" },
        { ".sass", "Sass (Ingesprongen)" }, { ".less", "Less-stijl" },
        { ".js",   "JavaScript" },      { ".jsx", "React JSX" },
        { ".ts",   "TypeScript" },      { ".tsx", "React TSX" },
        { ".json", "JSON-gegevens" },       { ".xml", "XML-document" },
        { ".yml",  "YAML-configuratie" },

        // ── Microsoft / .NET ----------------------------------------------
        { ".cs", "C#-broncode" },         { ".csx", "C#-script" },
        { ".fs", "F#-broncode" },         { ".vb", "VB.NET-broncode" },
        { ".il", "IL-assembly" },       { ".resx", "Resource-XML" },
        { ".xaml", "XAML-opmaak" },    { ".sln", "Visual Studio-oplossing" },
        { ".vbproj", "VB-project" },
        { ".vcxproj", "C++-project" },  { ".props", "MSBuild-eigenschappen" },
        { ".targets", "MSBuild-doelen" },

        // ── C / C++ --------------------------------------------------------
        { ".cpp", "C++-broncode" },       { ".cc", "C++-broncode" },
        { ".cxx", "C++-broncode" },       { ".c", "C-broncode" },
        { ".hpp", "C++-header" },       { ".h", "C/C++-header" },
        { ".inl", "Inline C++" },       { ".idl", "Interface-definitie" },
        { ".rc", "Resourcescript" },   { ".manifest", "Applicatiemanifest" },

        // ── Java / JVM ------------------------------------------------------
        { ".java", "Java-broncode" },     { ".class", "Java-klasse" },
        { ".jar", "Java-archief" },     { ".war", "Java Web-archief" },
        { ".ear", "Enterprise-archief" }, { ".scala", "Scala-broncode" },
        { ".groovy", "Groovy-broncode" }, { ".clj", "Clojure-broncode" },

        // ── Python ----------------------------------------------------------
        { ".py", "Pythonscript" },     { ".pyw", "Python (Zonder Console)" },
        { ".pyi", "Python-stub" },      { ".pyc", "Python-bytecode" },
        { ".pyo", "Python geoptimaliseerd" }, { ".pyd", "Python-extensie" },
        { ".whl", "Python-wiel" },     { ".ipynb", "Jupyter-notitieblok" },

        // ── Mobile ----------------------------------------------------------
        { ".swift", "Swift-broncode" },   { ".dart", "Dart-broncode" },
        { ".kt", "Kotlin-broncode" },     { ".kts", "Kotlin-script" },
        { ".gradle", "Gradle-script" }, { ".aar", "Android-archief" },
        { ".apk", "Android-pakket" },  { ".aab", "Android App-bundel" },
        { ".ipa", "iOS-pakket" },

        // ── Game Dev / 3D ---------------------------------------------------
        { ".unity", "Unity-scène" },    { ".prefab", "Unity-prefab" },
        { ".uasset", "Unreal-asset" },  { ".umap", "Unreal-kaart" },
        { ".fbx", "FBX 3D-model" },     { ".obj", "Wavefront 3D" },
        { ".gltf", "glTF 3D-model" },   { ".blend", "Blender-project" },
        { ".dae", "Collada-model" },    { ".3ds", "3D Studio-model" },
        { ".stl", "STL-model" },        { ".dxf", "AutoCAD DXF" },

        // ── Creative / Adobe ----------------------------------------------
        { ".psd", "Photoshop-document" }, { ".psb", "Photoshop Groot" },
        { ".ai",  "Illustrator-tekening" },   { ".indd", "InDesign-document" },
        { ".prproj", "Premiere-project" }, { ".aep", "After Effects" },
        { ".xd",  "Adobe XD-prototype" }, { ".sketch", "Sketch-document" },
        { ".fig", "Figma-document" },

        // ── Audio -----------------------------------------------------------
        { ".mp3", "MP3-audio" },        { ".wav", "Wave-audio" },
        { ".flac", "FLAC-audio" },      { ".aac", "AAC-audio" },
        { ".ogg", "OGG Vorbis" },       { ".wma", "Windows-audio" },
        { ".opus", "Opus-audio" },      { ".m4a", "MPEG-4-audio" },
        { ".midi", "MIDI-sequentie" },   { ".aiff", "AIFF-audio" },

        // ── Video -----------------------------------------------------------
        { ".mp4", "MP4-video" },        { ".mkv", "Matroska-video" },
        { ".avi", "AVI-video" },        { ".mov", "QuickTime-video" },
        { ".wmv", "Windows-video" },    { ".webm", "WebM-video" },
        { ".flv", "Flash-video" },      { ".m4v", "M4V-video" },
        { ".m3u8", "HLS-afspeellijst" },
        { ".ogv", "OGG-video" },        { ".3gp", "3GP-video" },

        // ── Images ----------------------------------------------------------
        { ".jpg", "JPEG-afbeelding" },       { ".jpeg", "JPEG-afbeelding" },
        { ".png", "PNG-afbeelding" },        { ".gif", "GIF-afbeelding" },
        { ".bmp", "BMP-afbeelding" },        { ".tiff", "TIFF-afbeelding" },
        { ".webp", "WebP-afbeelding" },      { ".ico", "Pictogram" },
        { ".svg", "SVG-vector" },       { ".eps", "Encapsulated PostScript" },
        { ".raw", "RAW-afbeelding" },
        { ".cr2", "Canon RAW" },        { ".nef", "Nikon RAW" },
        { ".arw", "Sony RAW" },         { ".dng", "Digital Negatief" },

        // ── Archives --------------------------------------------------------
        { ".zip", "ZIP-archief" },      { ".rar", "RAR-archief" },
        { ".7z",  "7-Zip-archief" },    { ".tar", "Tar-archief" },
        { ".gz",  "GZip-archief" },     { ".bz2", "BZip2-archief" },
        { ".xz",  "XZ-archief" },       { ".zst", "Zstd-archief" },
        { ".lz4", "LZ4-archief" },      { ".cab", "Cabinet-archief" },
        { ".iso", "Schijfimage" },       { ".dmg", "macOS-schijfimage" },
        { ".img", "Raw-schijfimage" },   { ".vhd", "Virtuele harde schijf" },
        { ".vhdx","Hyper-V-schijf" },     { ".wim", "Windows-image" },

        // ── Database --------------------------------------------------------
        { ".sql", "SQL-script" },       { ".db",  "Database" },
        { ".sqlite", "SQLite-database" },     { ".mdb", "Access-database" },
        { ".accdb", "Access-database" }, { ".mdf", "SQL Server-database" },
        { ".ndf", "SQL Server NDF" },   { ".ldf", "SQL Server-log" },
        { ".bak", "SQL-back-up" },       { ".dmp", "Database-dump" },

        // ── Scientific / Math ---------------------------------------------
        { ".mat", "MATLAB-gegevens" },      { ".m", "MATLAB-script" },
        { ".r", "R-script" },           { ".rdata", "R-dataset" },
        { ".csv", "CSV-gegevens" },         { ".tsv", "TSV-gegevens" },
        { ".sas", "SAS-programma" },      { ".sav", "SPSS-dataset" },
        { ".por", "SPSS draagbaar" },

        // ── Crypto / Blockchain -------------------------------------------
        { ".gpg", "GPG-versleuteld" },    { ".pgp", "PGP-versleuteld" },
        { ".asc", "PGP-handtekening" },    { ".sig", "Losse handtekening" },
        { ".wallet", "Crypto-wallet" }, { ".key", "Sleutelbestand" },
        { ".pem", "PEM-certificaat" },  { ".crt", "Certificaat" },
        { ".p12", "PKCS#12-sleutelarchief" }, { ".pfx", "Windows-sleutelarchief" },

        // ── Emulation / ROMs ----------------------------------------------
        { ".gba", "Game Boy-ROM" },     { ".nds", "Nintendo DS-ROM" },
        { ".wbfs", "Wii-back-up" },
        { ".cia", "3DS-installatie" },    { ".nsp", "Switch-pakket" },
        { ".xci", "Switch-cartridge" }, { ".wad", "Wii-kanaal" },

        // ── Misc ------------------------------------------------------------
        { ".exe", "Windows uitvoerbaar" }, { ".msi", "Windows-installatie" },
        { ".com", "DOS-commando" },      { ".bat", "Batch-script" },
        { ".ps1", "PowerShell-script" }, { ".cmd", "Commando-script" },
        { ".reg", "Registervermelding" },
        { ".url", "Internet-snelkoppeling" }, { ".torrent", "BitTorrent" },
        { ".log", "Logbestand" },         { ".ini", "INI-configuratie" },
        { ".cfg", "Configuratiebestand" },      { ".conf", "Configuratie" },
        { ".yaml", "YAML-configuratie" },     { ".toml", "TOML-configuratie" },
        { ".env", "Omgevingsbestand" }, { ".gitignore", "Git negeren" },
        { ".dockerfile", "Dockerfile" }, { ".md", "Markdown" },
        { ".tex", "LaTeX-broncode" },     { ".bib", "BibTeX-bibliotheek" },

        // ── Additional / Misc ---------------------------------------------
        { ".dwp", "SharePoint Web Part" },
        { ".fxp", "FoxPro gecompileerd" },
        { ".asd", "Word automatisch opslaan" },
        { ".fsc", "Windows zoekcache" },
        { ".mid", "MIDI-sequentie" },
        { ".fst", "FL Studio-status" },
        { ".txt", "Tekstbestand" },
        { ".pdb", "Programmadatabase" },
        { ".dll", "Dynamic-Link Library" },
        { ".resources", ".NET-resources" },
        { ".cache", "Cachebestand" },
        { ".settings", "Instellingen XML" },
        { ".csproj", "C#-project" },
        { ".editorconfig", "EditorConfig" },
        { ".kdbx", "KeePass-bestand" },
        { ".nupkg", "NuGet-pakket" },
        { ".p7s", "PKCS #7-handtekening" },
        { ".map", "Source-map bestand" },
        { ".flow", "Flow Type-declaratie" },
        { ".mjs", "ES Module (JavaScript)" },
        { ".cjs", "CommonJS (JavaScript)" },
        { ".cts", "TypeScript CommonJS" },
        { ".mts", "TypeScript ES Module" },
        { ".jst", "JavaScript-sjabloon" },
        { ".markdown", "Markdown-document" },
        { ".applescript", "AppleScript" },
        { ".ch1", "Nintendo karaktergegevens" },
        { ".vital", "Vital Synthesizer-preset" },
        { ".ds_store", "macOS Desktop Services Store" },
        { ".zpw", "ZippedWeb-pakket" },
        { ".flp", "FL Studio-project" },
        { ".flstheme", "FL Studio-thema" },
        { ".nmsv", "Native Instruments NMSV-preset" },
        { ".wav.256", "256-bit WAV-variant" },
        { ".pdf", "Portable Document Format" },
        { ".config", "Configuratie XML/JSON" },
        { ".user", "Gebruikersinstellingen" },
        { ".uptodate", "Up2Date cache-vlag" },
        { ".rtf", "Rich Text Format" },
        { ".buildwithskipanalyzers", "MSBuild skip-analyzers vlag" },
        { ".node", "Node.js binaire module" },
        { ".snap", "Snapcraft-pakket" },
        { ".def", "Module-definitiebestand" },
        { ".bsd", "BSD-licentie/configuratie" },
        { ".babelrc", "Babel-configuratie" },
        { ".prettierrc", "Prettier-configuratie" },
        { ".npignore", "NuGet negeerregels" },
        { ".php", "PHP-script" },
        { ".eslintignore", "ESLint negeren" },
        { ".lic", "Licentiebestand" },
        { ".nib", "NeXT Interface Builder" },
        { ".plist", "macOS-eigenschappenlijst" },
        { ".mui", "Meertalige gebruikersinterface" },
        { ".efi", "UEFI-firmware" },
        { ".cip", "Chrome CIP-pakket" },
        { ".bin", "Binaire gegevens" },
        { ".sdi", "Systeemimplementatie-image" },
        { ".ttf", "TrueType-lettertype" },
        { ".cur", "Windows-cursor" },
        { ".ani", "Geanimeerde cursor" },
        { ".diagpkg", "Windows diagnostisch pakket" },
        { ".dat", "Algemeen gegevensbestand" },
        { ".diffbase", "Diff basis-momentopname" },
        { ".lm", "Taalmodel" },
        { ".lm1", "Taalmodel variant 1" },
        { ".lm2", "Taalmodel variant 2" },
        { ".lm3", "Taalmodel variant 3" },
        { ".lex", "Lexicongegevens" },
        { ".res", "Windows-resource" },
        { ".nlt", "NetLink Trust-gegevens" },
        { ".nls", "Nationale taalondersteuning" },
        { ".chm", "Gecompileerde HTML-help" },
        { ".fil", "Bestandslijstcontainer" },
        { ".msixbundle", "MSIX-bundel" },
        { ".p7x", "PKCS #7 uitgebreid" },
        { ".pri", "Pakketresource-index" },
        { ".etl", "Gebeurtenistracelog" },
        { ".nlp", "Natural Language Processor-gegevens" },
        { ".compositefont", "WPF-samenstellingslettertype" },
        { ".aspx", "ASP.NET-pagina" },
        { ".ascx", "ASP.NET-gebruikersbesturing" },
        { ".master", "ASP.NET-hoofdpagina" },
        { ".browser", "Browserdefinitie" },
        { ".lnk", "Windows-snelkoppeling" },
        { ".default", "Standaardinstellingen" },
        { ".comments", "Commentaarmetadata" },
        { ".rsp", "Antwoordbestand" },
        { ".tld", "Tag Library Descriptor" },
        { ".win32manifest", "Win32-manifest" },
        { ".man", "Handleiding" },
        { ".mof", "Managed Object Format" },
        { ".uninstall", "Deïnstallatiescript" },
        { ".tasks", "MSBuild-taken" },
        { ".overridetasks", "MSBuild-overschrijftaken" },
        { ".orp", "ORP-gegevens" },
        { ".adml", "Administratief sjabloon taal" },
        { ".ppkg", "Inrichtingspakket" },
        { ".mstheme", "Microsoft-thema" },
        { ".msstyles", "Windows-stijl" },
        { ".mum", "Manifest-updatemodule" },
        { ".cat", "Beveiligingscatalogus" },
        { ".jfm", "Jet-databasemetadata" },
        { ".rs", "Rust-broncode" },
        { ".jll", "Julia LLVM-bitcode" },
        { ".sys", "Windows-systeemstuurprogramma" },
        { ".p7b", "PKCS #7-certificaathoudster" },
        { ".wmfw", "Windows Media Framework" },
        { ".inf_loc", "INF-localisatie" },
        { ".winmd", "Windows-metadata" },
        { ".xbf", "XAML-binair formaat" },
        { ".license", "Licentietoken" },
        { ".fpie", "FPGA-intermediair uitvoerbaar" },
        { ".cso", "Gecompileerd shaderobject" },
        { ".sccd", "System Center-configuratiegegevens" },
        { ".bundle", "Applicatiebundel" },
        { ".schema", "JSON/XML-schema" },
        { ".csg", "Constructive Solid Geometry" },
        { ".mun", "Multi-Unit Network" },
        { ".uce", "Universal Chess Engine" },
        { ".cpl", "Configuratiescherm-applet" },
        { ".msc", "Microsoft Management Console" },
        { ".ax", "DirectShow-filter" },
        { ".table", "Lookup/Hash-tabel" },
        { ".tsp", "TSP-pakket/script" },
        { ".tbl", "Tabelgegevens" },
        { ".drv", "Apparaatstuurprogramma" },
        { ".sep", "Scheidingsbestand" },
        { ".ocx", "ActiveX-besturing" },
        { ".msp", "Windows Installer-patch" },
        { ".scr", "Windows-bureaubladachtergrond" },
        { ".vbs", "VBScript" },
        { ".grxml", "Grammatica-XML" },
        { ".xrm-ms", "Microsoft-licentie" },
        { ".rll", "Resource Link Library" },
        { ".mfl", "MFL-taalbestand" },
        { ".cdxml", "Cmdlet-definitie XML" },
        { ".dtd", "Document Type Definition" },
        { ".psm1", "PowerShell-modulescript" },
        { ".ps1xml", "PowerShell-opmaakgegevens" },
        { ".wprp", "Windows Performance Recorder-profiel" },
        { ".xsl", "XSLT-stijlblad" },
        { ".gyp", "Generate Your Projects" },
        { ".rld", "ReLoad-gegevens" },
        { ".job", "Windows-taak" },
        { ".gypi", "GYP-include" },
        { ".hlp", "Windows-help" },
        { ".gdl", "Generic Description Language" },
        { ".elf", "Executable and Linkable Format" },
        { ".ppd", "PostScript Printer Description" },
        { ".gpd", "Generic Printer Description" },
        { ".mbn", "Modem-binair" },
        { ".pak", "PAK-archief" },
        { ".dgml", "Directed Graph Markup" },
        { ".smp", "Voorbeeldbestand" },
        { ".lxa", "Microsoft Lexicon-audio" },
        { ".wwd", "Microsoft Works-wizard" },
        { ".wsf", "Windows Script File" },
        { ".cw", "CardWorks-sjabloon" },
        { ".phn", "Phun Physics-scène" },
        { ".am", "Automake-bestand" },
        { ".fe", "File Encryptor" },
        { ".mllr", "Maximum Likelihood Linear Regression" },
        { ".ngr", "NEOGEO-ROM" },
        { ".sch", "Schema" },
        { ".adlm", "Autodesk License Manager" },
        { ".adxm", "Administratieve XML" },
        { ".nmnl", "Genormaliseerd minimaal" },
        { ".propdesc", "Eigenschapsbeschrijving" },
        { ".nsl", "Nokia Sound Library" },
        { ".ntf", "National Transfer Format" },
        { ".ntp", "NTP-configuratie" },
        { ".forms", "Windows Forms" },
        { ".runtime", "Runtime-manifest" },
        { ".interop", "COM Interop-gegevens" },
        { ".frm", "Visual Basic-formulier" },
        { ".bas", "Visual Basic-module" },
        { ".dwb", "Drum Workshop-bundel" },
        { ".npmignore", "NPM negeerregels" },
        { ".rsrc", "macOS-resourcefork" },
        { ".upd2date", "Up2Date cache-vlag" },
        { ".Up2Date", "Up2Date cache-vlag" },
        { ".jshintrc", "JSHint-configuratie" },
        { ".lock", "Vergrendeling/afhankelijkheidspin" },
        { ".nix", "Nix-expressie" },
        { ".hr1", "HR1-spelgegevens" },
        { ".hr2", "HR2-spelgegevens" },
        { ".hr3", "HR3-spelgegevens" },
        { ".hr4", "HR4-spelgegevens" },
        { ".hr5", "HR5-spelgegevens" },
        { ".hr6", "HR6-spelgegevens" },
        { ".hr7", "HR7-spelgegevens" },
        { ".hr8", "HR8-spelgegevens" },
        { ".hr9", "HR9-spelgegevens" },
        { ".bnf", "Backus-Naur Form-grammatica" },
        { ".clb", "COM+-catalogus" },
        { ".tlb", "Typebibliotheek" },
        { ".dic", "Woordenboek/lexicon" },
        { ".aux", "Hulp-TeX-bestand" },
        { ".ds", "DataStore/DS_Store" },
        { ".inc", "Include/Broninclude" },
        { ".cpx", "Codepaginavetaling" },
        { ".mdl", "Model/Modulebestand" },
        { ".dls", "Downloadable Sounds Bank" },
        { ".cdf-ms", "ClickOnce-implementatiemanifest" },
        { ".addin", "Visual Studio-add-in" },
        { ".scp", "Windows Script Component" },
        { ".wmz", "Gecomprimeerde Windows Media Player-skin" },
        { ".iec", "IEC-database" },
        { ".wsc", "Windows Script Component" },
        { ".vrg", "Visual Studio-registerscript" },
        { ".prx", "Proxy Auto-Config" },
        { ".nuspec", "NuGet-specificatie" },
        
        // ── Extended Archive / Compression --------------------------------
        { ".zipx", "ZIPX-archief" },
        { ".alz", "ALZip-archief" },
        { ".eeg", "EEG gecomprimeerd" },
        { ".001", "Gesplitst archief deel 1" },
        { ".arj", "ARJ-archief" },
        { ".bh",  "BlakHole-archief" },
        { ".lha", "LHA-archief" },
        { ".lzh", "LHA/LZH-archief" },
        { ".pma", "PMarc-archief" },
        { ".arc", "ARC-archief" },
        { ".ace", "ACE-archief" },
        { ".aes", "AES-versleuteld bestand" },
        { ".zpak", "ZPAQ-archief" },
        { ".zstd", "Zstandard-archief" },
        { ".br",  "Brotli-archief" },
        { ".pea", "PeaZip-archief" },
        { ".tbz", "Tar.BZ-archief" },
        { ".tbz2", "Tar.BZ2-archief" },
        { ".txz", "Tar.XZ-archief" },
        { ".tlz", "Tar.LZMA-archief" },
        { ".uu",  "UUEncoded-bestand" },
        { ".uue", "UUEncoded-bestand" },
        { ".xxe", "XXEncoded-bestand" },
        { ".z",   "Unix-compress" },
        { ".tgz", "Tar.GZ-archief" },
        { ".isz", "ISO-gezipte image" },
        { ".udf", "Universal Disk Format" },
        { ".i00", "DVD Decrypter gesplitste image deel 1" }
    }
},
    {
    "sv", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
    {
        // ── Microsoft / Office ---------------------------------------------
        { ".docx", "Word-dokument" },  { ".doc", "Word 97-2003" },
        { ".xlsx", "Excel-arbetsbok" }, { ".xls", "Excel 97-2003" },
        { ".pptx", "PowerPoint" },     { ".ppt", "PowerPoint 97-2003" },
        { ".vsdx", "Visio-ritning" },  { ".pub", "Publisher-dokument" },
        { ".one",  "OneNote-anteckningsbok" },
        { ".ost", "Outlook Offline" }, { ".pst", "Outlook Personligt" },
        { ".msg", "Outlook-meddelande" }, { ".eml", "E-postmeddelande" },

        // ── Web / Mark-up ---------------------------------------------------
        { ".html", "HTML-dokument" },  { ".htm", "HTML-dokument" },
        { ".css",  "CSS-stilmall" }, { ".scss", "Sass (SCSS)" },
        { ".sass", "Sass (Indragen)" }, { ".less", "Less-stil" },
        { ".js",   "JavaScript" },      { ".jsx", "React JSX" },
        { ".ts",   "TypeScript" },      { ".tsx", "React TSX" },
        { ".json", "JSON-data" },       { ".xml", "XML-dokument" },
        { ".yml",  "YAML-konfiguration" },

        // ── Microsoft / .NET ----------------------------------------------
        { ".cs", "C#-källkod" },         { ".csx", "C#-skript" },
        { ".fs", "F#-källkod" },         { ".vb", "VB.NET-källkod" },
        { ".il", "IL-assembly" },       { ".resx", "Resurs-XML" },
        { ".xaml", "XAML-markup" },    { ".sln", "Visual Studio-lösning" },
        { ".vbproj", "VB-projekt" },
        { ".vcxproj", "C++-projekt" },  { ".props", "MSBuild-egenskaper" },
        { ".targets", "MSBuild-mål" },

        // ── C / C++ --------------------------------------------------------
        { ".cpp", "C++-källkod" },       { ".cc", "C++-källkod" },
        { ".cxx", "C++-källkod" },       { ".c", "C-källkod" },
        { ".hpp", "C++-header" },       { ".h", "C/C++-header" },
        { ".inl", "Inline C++" },       { ".idl", "Gränssnittsdefinition" },
        { ".rc", "Resursskript" },   { ".manifest", "Applikationsmanifest" },

        // ── Java / JVM ------------------------------------------------------
        { ".java", "Java-källkod" },     { ".class", "Java-klass" },
        { ".jar", "Java-arkiv" },     { ".war", "Java Web-arkiv" },
        { ".ear", "Enterprise-arkiv" }, { ".scala", "Scala-källkod" },
        { ".groovy", "Groovy-källkod" }, { ".clj", "Clojure-källkod" },

        // ── Python ----------------------------------------------------------
        { ".py", "Python-skript" },     { ".pyw", "Python (Ingen Konsol)" },
        { ".pyi", "Python-stub" },      { ".pyc", "Python-bytekod" },
        { ".pyo", "Python optimerad" }, { ".pyd", "Python-tillägg" },
        { ".whl", "Python-hjul" },     { ".ipynb", "Jupyter-anteckningsbok" },

        // ── Mobile ----------------------------------------------------------
        { ".swift", "Swift-källkod" },   { ".dart", "Dart-källkod" },
        { ".kt", "Kotlin-källkod" },     { ".kts", "Kotlin-skript" },
        { ".gradle", "Gradle-skript" }, { ".aar", "Android-arkiv" },
        { ".apk", "Android-paket" },  { ".aab", "Android App Bundle" },
        { ".ipa", "iOS-paket" },

        // ── Game Dev / 3D ---------------------------------------------------
        { ".unity", "Unity-scen" },    { ".prefab", "Unity-prefab" },
        { ".uasset", "Unreal-asset" },  { ".umap", "Unreal-karta" },
        { ".fbx", "FBX 3D-modell" },     { ".obj", "Wavefront 3D" },
        { ".gltf", "glTF 3D-modell" },   { ".blend", "Blender-projekt" },
        { ".dae", "Collada-modell" },    { ".3ds", "3D Studio-modell" },
        { ".stl", "STL-modell" },        { ".dxf", "AutoCAD DXF" },

        // ── Creative / Adobe ----------------------------------------------
        { ".psd", "Photoshop-dokument" }, { ".psb", "Photoshop Stor" },
        { ".ai",  "Illustrator-teckning" },   { ".indd", "InDesign-dokument" },
        { ".prproj", "Premiere-projekt" }, { ".aep", "After Effects" },
        { ".xd",  "Adobe XD-prototyp" }, { ".sketch", "Sketch-dokument" },
        { ".fig", "Figma-dokument" },

        // ── Audio -----------------------------------------------------------
        { ".mp3", "MP3-ljud" },        { ".wav", "Wave-ljud" },
        { ".flac", "FLAC-ljud" },      { ".aac", "AAC-ljud" },
        { ".ogg", "OGG Vorbis" },       { ".wma", "Windows-ljud" },
        { ".opus", "Opus-ljud" },      { ".m4a", "MPEG-4-ljud" },
        { ".midi", "MIDI-sekvens" },   { ".aiff", "AIFF-ljud" },

        // ── Video -----------------------------------------------------------
        { ".mp4", "MP4-video" },        { ".mkv", "Matroska-video" },
        { ".avi", "AVI-video" },        { ".mov", "QuickTime-video" },
        { ".wmv", "Windows-video" },    { ".webm", "WebM-video" },
        { ".flv", "Flash-video" },      { ".m4v", "M4V-video" },
        { ".m3u8", "HLS-spellista" },
        { ".ogv", "OGG-video" },        { ".3gp", "3GP-video" },

        // ── Images ----------------------------------------------------------
        { ".jpg", "JPEG-bild" },       { ".jpeg", "JPEG-bild" },
        { ".png", "PNG-bild" },        { ".gif", "GIF-bild" },
        { ".bmp", "BMP-bild" },        { ".tiff", "TIFF-bild" },
        { ".webp", "WebP-bild" },      { ".ico", "Ikon" },
        { ".svg", "SVG-vektor" },       { ".eps", "Encapsulated PostScript" },
        { ".raw", "RAW-bild" },
        { ".cr2", "Canon RAW" },        { ".nef", "Nikon RAW" },
        { ".arw", "Sony RAW" },         { ".dng", "Digital Negativ" },

        // ── Archives --------------------------------------------------------
        { ".zip", "ZIP-arkiv" },      { ".rar", "RAR-arkiv" },
        { ".7z",  "7-Zip-arkiv" },    { ".tar", "Tar-arkiv" },
        { ".gz",  "GZip-arkiv" },     { ".bz2", "BZip2-arkiv" },
        { ".xz",  "XZ-arkiv" },       { ".zst", "Zstd-arkiv" },
        { ".lz4", "LZ4-arkiv" },      { ".cab", "Cabinet-arkiv" },
        { ".iso", "Skivavbildning" },       { ".dmg", "macOS-skivavbildning" },
        { ".img", "Raw-skivavbildning" },   { ".vhd", "Virtuell hårddisk" },
        { ".vhdx","Hyper-V-disk" },     { ".wim", "Windows-avbildning" },

        // ── Database --------------------------------------------------------
        { ".sql", "SQL-skript" },       { ".db",  "Databas" },
        { ".sqlite", "SQLite-databas" },     { ".mdb", "Access-databas" },
        { ".accdb", "Access-databas" }, { ".mdf", "SQL Server-databas" },
        { ".ndf", "SQL Server NDF" },   { ".ldf", "SQL Server-log" },
        { ".bak", "SQL-säkerhetskopia" },       { ".dmp", "Databasdump" },

        // ── Scientific / Math ---------------------------------------------
        { ".mat", "MATLAB-data" },      { ".m", "MATLAB-skript" },
        { ".r", "R-skript" },           { ".rdata", "R-dataset" },
        { ".csv", "CSV-data" },         { ".tsv", "TSV-data" },
        { ".sas", "SAS-program" },      { ".sav", "SPSS-dataset" },
        { ".por", "SPSS portabel" },

        // ── Crypto / Blockchain -------------------------------------------
        { ".gpg", "GPG-krypterad" },    { ".pgp", "PGP-krypterad" },
        { ".asc", "PGP-signatur" },    { ".sig", "Fristående signatur" },
        { ".wallet", "Krypto-plånbok" }, { ".key", "Nyckelfil" },
        { ".pem", "PEM-certifikat" },  { ".crt", "Certifikat" },
        { ".p12", "PKCS#12-nyckelförvar" }, { ".pfx", "Windows-nyckelförvar" },

        // ── Emulation / ROMs ----------------------------------------------
        { ".gba", "Game Boy-ROM" },     { ".nds", "Nintendo DS-ROM" },
        { ".wbfs", "Wii-säkerhetskopia" },
        { ".cia", "3DS-installation" },    { ".nsp", "Switch-paket" },
        { ".xci", "Switch-kassett" }, { ".wad", "Wii-kanal" },

        // ── Misc ------------------------------------------------------------
        { ".exe", "Windows körbar" }, { ".msi", "Windows-installation" },
        { ".com", "DOS-kommando" },      { ".bat", "Batch-skript" },
        { ".ps1", "PowerShell-skript" }, { ".cmd", "Kommandoskript" },
        { ".reg", "Registerpost" },
        { ".url", "Internet-genväg" }, { ".torrent", "BitTorrent" },
        { ".log", "Loggfil" },         { ".ini", "INI-konfiguration" },
        { ".cfg", "Konfigurationsfil" },      { ".conf", "Konfiguration" },
        { ".yaml", "YAML-konfiguration" },     { ".toml", "TOML-konfiguration" },
        { ".env", "Miljöfil" }, { ".gitignore", "Git ignorera" },
        { ".dockerfile", "Dockerfile" }, { ".md", "Markdown" },
        { ".tex", "LaTeX-källkod" },     { ".bib", "BibTeX-bibliotek" },

        // ── Additional / Misc ---------------------------------------------
        { ".dwp", "SharePoint Web Part" },
        { ".fxp", "FoxPro kompilerad" },
        { ".asd", "Word automatiskt sparad" },
        { ".fsc", "Windows-sökcache" },
        { ".mid", "MIDI-sekvens" },
        { ".fst", "FL Studio-tillstånd" },
        { ".txt", "Textfil" },
        { ".pdb", "Programdatabas" },
        { ".dll", "Dynamic-Link Library" },
        { ".resources", ".NET-resurser" },
        { ".cache", "Cachefil" },
        { ".settings", "Inställningar XML" },
        { ".csproj", "C#-projekt" },
        { ".editorconfig", "EditorConfig" },
        { ".kdbx", "KeePass-fil" },
        { ".nupkg", "NuGet-paket" },
        { ".p7s", "PKCS #7-signatur" },
        { ".map", "Källkods-kartfil" },
        { ".flow", "Flow Type-deklaration" },
        { ".mjs", "ES Module (JavaScript)" },
        { ".cjs", "CommonJS (JavaScript)" },
        { ".cts", "TypeScript CommonJS" },
        { ".mts", "TypeScript ES Module" },
        { ".jst", "JavaScript-mall" },
        { ".markdown", "Markdown-dokument" },
        { ".applescript", "AppleScript" },
        { ".ch1", "Nintendo karaktärsdata" },
        { ".vital", "Vital Synthesizer-förinställning" },
        { ".ds_store", "macOS Desktop Services Store" },
        { ".zpw", "ZippedWeb-paket" },
        { ".flp", "FL Studio-projekt" },
        { ".flstheme", "FL Studio-tema" },
        { ".nmsv", "Native Instruments NMSV-förinställning" },
        { ".wav.256", "256-bitars WAV-variant" },
        { ".pdf", "Portable Document Format" },
        { ".config", "Konfiguration XML/JSON" },
        { ".user", "Användarinställningar" },
        { ".uptodate", "Up2Date cache-flagga" },
        { ".rtf", "Rich Text Format" },
        { ".buildwithskipanalyzers", "MSBuild hoppa-över-analyzers flagga" },
        { ".node", "Node.js binär modul" },
        { ".snap", "Snapcraft-paket" },
        { ".def", "Moduldefinitionsfil" },
        { ".bsd", "BSD-licens/konfiguration" },
        { ".babelrc", "Babel-konfiguration" },
        { ".prettierrc", "Prettier-konfiguration" },
        { ".npignore", "NuGet ignoreringsregler" },
        { ".php", "PHP-skript" },
        { ".eslintignore", "ESLint ignorera" },
        { ".lic", "Licensfil" },
        { ".nib", "NeXT Interface Builder" },
        { ".plist", "macOS-egenskapslista" },
        { ".mui", "Flerspråkig användargränssnitt" },
        { ".efi", "UEFI-firmware" },
        { ".cip", "Chrome CIP-paket" },
        { ".bin", "Binär data" },
        { ".sdi", "Systemdistributionsavbildning" },
        { ".ttf", "TrueType-teckensnitt" },
        { ".cur", "Windows-markör" },
        { ".ani", "Animerad markör" },
        { ".diagpkg", "Windows-diagnostikpaket" },
        { ".dat", "Generisk datafil" },
        { ".diffbase", "Diff bas-ögonblicksbild" },
        { ".lm", "Språkmodell" },
        { ".lm1", "Språkmodell variant 1" },
        { ".lm2", "Språkmodell variant 2" },
        { ".lm3", "Språkmodell variant 3" },
        { ".lex", "Lexikondata" },
        { ".res", "Windows-resurs" },
        { ".nlt", "NetLink Trust-data" },
        { ".nls", "Nationellt språkstöd" },
        { ".chm", "Kompilerad HTML-hjälp" },
        { ".fil", "Fillistbehållare" },
        { ".msixbundle", "MSIX-paket" },
        { ".p7x", "PKCS #7 utökad" },
        { ".pri", "Paketresursindex" },
        { ".etl", "Händelsespårningslogg" },
        { ".nlp", "Natural Language Processor-data" },
        { ".compositefont", "WPF-sammansatt teckensnitt" },
        { ".aspx", "ASP.NET-sida" },
        { ".ascx", "ASP.NET-användarkontroll" },
        { ".master", "ASP.NET-huvudsida" },
        { ".browser", "Browserdefinition" },
        { ".lnk", "Windows-genväg" },
        { ".default", "Standardinställningar" },
        { ".comments", "Kommentarsmetadata" },
        { ".rsp", "Svarsfil" },
        { ".tld", "Tag Library Descriptor" },
        { ".win32manifest", "Win32-manifest" },
        { ".man", "Manual" },
        { ".mof", "Managed Object Format" },
        { ".uninstall", "Avinstallationsskript" },
        { ".tasks", "MSBuild-uppgifter" },
        { ".overridetasks", "MSBuild-åsidosättningsuppgifter" },
        { ".orp", "ORP-data" },
        { ".adml", "Administrativ mall språk" },
        { ".ppkg", "Etableringspaket" },
        { ".mstheme", "Microsoft-tema" },
        { ".msstyles", "Windows-stil" },
        { ".mum", "Manifestuppdateringsmodul" },
        { ".cat", "Säkerhetskatalog" },
        { ".jfm", "Jet-databasmetadata" },
        { ".rs", "Rust-källkod" },
        { ".jll", "Julia LLVM-bitkod" },
        { ".sys", "Windows-systemdrivrutin" },
        { ".p7b", "PKCS #7-certifikatkedja" },
        { ".wmfw", "Windows Media Framework" },
        { ".inf_loc", "INF-lokalisering" },
        { ".winmd", "Windows-metadata" },
        { ".xbf", "XAML-binärt format" },
        { ".license", "Licenstillstånd" },
        { ".fpie", "FPGA-intermediär körbar" },
        { ".cso", "Kompilerat shader-objekt" },
        { ".sccd", "System Center-konfigurationsdata" },
        { ".bundle", "Applikationspaket" },
        { ".schema", "JSON/XML-schema" },
        { ".csg", "Constructive Solid Geometry" },
        { ".mun", "Multi-Unit Network" },
        { ".uce", "Universal Chess Engine" },
        { ".cpl", "Kontrollpanelsapplet" },
        { ".msc", "Microsoft Management Console" },
        { ".ax", "DirectShow-filter" },
        { ".table", "Lookup/Hash-tabell" },
        { ".tsp", "TSP-paket/skript" },
        { ".tbl", "Tabelldata" },
        { ".drv", "Enhetsdrivrutin" },
        { ".sep", "Separatorfil" },
        { ".ocx", "ActiveX-kontroll" },
        { ".msp", "Windows Installer-patch" },
        { ".scr", "Windows-skärmsläckare" },
        { ".vbs", "VBScript" },
        { ".grxml", "Grammatik-XML" },
        { ".xrm-ms", "Microsoft-licens" },
        { ".rll", "Resource Link Library" },
        { ".mfl", "MFL-språkfil" },
        { ".cdxml", "Cmdlet-definition XML" },
        { ".dtd", "Document Type Definition" },
        { ".psm1", "PowerShell-modulskript" },
        { ".ps1xml", "PowerShell-formateringsdata" },
        { ".wprp", "Windows Performance Recorder-profil" },
        { ".xsl", "XSLT-stilmall" },
        { ".gyp", "Generate Your Projects" },
        { ".rld", "ReLoad-data" },
        { ".job", "Windows-uppgift" },
        { ".gypi", "GYP-include" },
        { ".hlp", "Windows-hjälp" },
        { ".gdl", "Generic Description Language" },
        { ".elf", "Executable and Linkable Format" },
        { ".ppd", "PostScript Printer Description" },
        { ".gpd", "Generic Printer Description" },
        { ".mbn", "Modem-binär" },
        { ".pak", "PAK-arkiv" },
        { ".dgml", "Directed Graph Markup" },
        { ".smp", "Exempelfil" },
        { ".lxa", "Microsoft Lexicon-ljud" },
        { ".wwd", "Microsoft Works-guide" },
        { ".wsf", "Windows Script File" },
        { ".cw", "CardWorks-mall" },
        { ".phn", "Phun Physics-scen" },
        { ".am", "Automake-fil" },
        { ".fe", "File Encryptor" },
        { ".mllr", "Maximum Likelihood Linear Regression" },
        { ".ngr", "NEOGEO-ROM" },
        { ".sch", "Schema" },
        { ".adlm", "Autodesk License Manager" },
        { ".adxm", "Administrativ XML" },
        { ".nmnl", "Normaliserad minimal" },
        { ".propdesc", "Egenskapbeskrivning" },
        { ".nsl", "Nokia Sound Library" },
        { ".ntf", "National Transfer Format" },
        { ".ntp", "NTP-konfiguration" },
        { ".forms", "Windows Forms" },
        { ".runtime", "Runtime-manifest" },
        { ".interop", "COM Interop-data" },
        { ".frm", "Visual Basic-formulär" },
        { ".bas", "Visual Basic-modul" },
        { ".dwb", "Drum Workshop-paket" },
        { ".npmignore", "NPM ignoreringsregler" },
        { ".rsrc", "macOS-resursgaffel" },
        { ".upd2date", "Up2Date cache-flagga" },
        { ".Up2Date", "Up2Date cache-flagga" },
        { ".jshintrc", "JSHint-konfiguration" },
        { ".lock", "Lås/beroendepinne" },
        { ".nix", "Nix-uttryck" },
        { ".hr1", "HR1-speldata" },
        { ".hr2", "HR2-speldata" },
        { ".hr3", "HR3-speldata" },
        { ".hr4", "HR4-speldata" },
        { ".hr5", "HR5-speldata" },
        { ".hr6", "HR6-speldata" },
        { ".hr7", "HR7-speldata" },
        { ".hr8", "HR8-speldata" },
        { ".hr9", "HR9-speldata" },
        { ".bnf", "Backus-Naur Form-grammatik" },
        { ".clb", "COM+-katalog" },
        { ".tlb", "Typbibliotek" },
        { ".dic", "Ordlista/lexikon" },
        { ".aux", "Hjälp-TeX-fil" },
        { ".ds", "DataStore/DS_Store" },
        { ".inc", "Include/Källkodsinclude" },
        { ".cpx", "Kodsidöversättning" },
        { ".mdl", "Modell/Modulfil" },
        { ".dls", "Downloadable Sounds Bank" },
        { ".cdf-ms", "ClickOnce-distributionsmanifest" },
        { ".addin", "Visual Studio-tillägg" },
        { ".scp", "Windows Script Component" },
        { ".wmz", "Komprimerad Windows Media Player-skal" },
        { ".iec", "IEC-databas" },
        { ".wsc", "Windows Script Component" },
        { ".vrg", "Visual Studio-registerskript" },
        { ".prx", "Proxy Auto-Config" },
        { ".nuspec", "NuGet-specifikation" },
        
        // ── Extended Archive / Compression --------------------------------
        { ".zipx", "ZIPX-arkiv" },
        { ".alz", "ALZip-arkiv" },
        { ".eeg", "EEG komprimerad" },
        { ".001", "Delat arkiv del 1" },
        { ".arj", "ARJ-arkiv" },
        { ".bh",  "BlakHole-arkiv" },
        { ".lha", "LHA-arkiv" },
        { ".lzh", "LHA/LZH-arkiv" },
        { ".pma", "PMarc-arkiv" },
        { ".arc", "ARC-arkiv" },
        { ".ace", "ACE-arkiv" },
        { ".aes", "AES-krypterad fil" },
        { ".zpak", "ZPAQ-arkiv" },
        { ".zstd", "Zstandard-arkiv" },
        { ".br",  "Brotli-arkiv" },
        { ".pea", "PeaZip-arkiv" },
        { ".tbz", "Tar.BZ-arkiv" },
        { ".tbz2", "Tar.BZ2-arkiv" },
        { ".txz", "Tar.XZ-arkiv" },
        { ".tlz", "Tar.LZMA-arkiv" },
        { ".uu",  "UUEncoded-fil" },
        { ".uue", "UUEncoded-fil" },
        { ".xxe", "XXEncoded-fil" },
        { ".z",   "Unix-komprimera" },
        { ".tgz", "Tar.GZ-arkiv" },
        { ".isz", "ISO-zippad avbildning" },
        { ".udf", "Universal Disk Format" },
        { ".i00", "DVD Decrypter delad avbildning del 1" }
    }
},
    {
    "no", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
    {
        // ── Microsoft / Office ---------------------------------------------
        { ".docx", "Word-dokument" },  { ".doc", "Word 97-2003" },
        { ".xlsx", "Excel-regneark" }, { ".xls", "Excel 97-2003" },
        { ".pptx", "PowerPoint" },     { ".ppt", "PowerPoint 97-2003" },
        { ".vsdx", "Visio-tegning" },  { ".pub", "Publisher-dokument" },
        { ".one",  "OneNote-notatbok" },
        { ".ost", "Outlook-offline" }, { ".pst", "Outlook-personlig" },
        { ".msg", "Outlook-melding" }, { ".eml", "E-postmelding" },

        // ── Web / Mark-up ---------------------------------------------------
        { ".html", "HTML-dokument" },  { ".htm", "HTML-dokument" },
        { ".css",  "CSS-stilark" }, { ".scss", "Sass (SCSS)" },
        { ".sass", "Sass (innrykket)" }, { ".less", "Less-stil" },
        { ".js",   "JavaScript" },      { ".jsx", "React JSX" },
        { ".ts",   "TypeScript" },      { ".tsx", "React TSX" },
        { ".json", "JSON-data" },       { ".xml", "XML-dokument" },
        { ".yml",  "YAML-konfig" },

        // ── Microsoft / .NET ----------------------------------------------
        { ".cs", "C#-kildekode" },         { ".csx", "C#-skript" },
        { ".fs", "F#-kildekode" },         { ".vb", "VB.NET-kildekode" },
        { ".il", "IL-assembler" },       { ".resx", "Ressurs-XML" },
        { ".xaml", "XAML-markup" },    { ".sln", "Visual Studio-løsning" },
        { ".vbproj", "VB-prosjekt" },
        { ".vcxproj", "C++-prosjekt" },  { ".props", "MSBuild-egenskaper" },
        { ".targets", "MSBuild-mål" },

        // ── C / C++ --------------------------------------------------------
        { ".cpp", "C++-kildekode" },       { ".cc", "C++-kildekode" },
        { ".cxx", "C++-kildekode" },       { ".c", "C-kildekode" },
        { ".hpp", "C++-header" },       { ".h", "C/C++-header" },
        { ".inl", "Inline C++" },       { ".idl", "Grensesnittdefinisjon" },
        { ".rc", "Ressursskript" },   { ".manifest", "Applikasjonsmanifest" },

        // ── Java / JVM ------------------------------------------------------
        { ".java", "Java-kildekode" },     { ".class", "Java-klasse" },
        { ".jar", "Java-arkiv" },     { ".war", "Java Web-arkiv" },
        { ".ear", "Enterprise-arkiv" }, { ".scala", "Scala-kildekode" },
        { ".groovy", "Groovy-kildekode" }, { ".clj", "Clojure-kildekode" },

        // ── Python ----------------------------------------------------------
        { ".py", "Python-skript" },     { ".pyw", "Python (uten konsoll)" },
        { ".pyi", "Python-stub" },      { ".pyc", "Python-bytekode" },
        { ".pyo", "Python-optimalisert" }, { ".pyd", "Python-utvidelse" },
        { ".whl", "Python-wheel" },     { ".ipynb", "Jupyter-notatbok" },

        // ── Mobile ----------------------------------------------------------
        { ".swift", "Swift-kildekode" },   { ".dart", "Dart-kildekode" },
        { ".kt", "Kotlin-kildekode" },     { ".kts", "Kotlin-skript" },
        { ".gradle", "Gradle-skript" }, { ".aar", "Android-arkiv" },
        { ".apk", "Android-pakke" },  { ".aab", "Android App Bundle" },
        { ".ipa", "iOS-pakke" },

        // ── Game Dev / 3D ---------------------------------------------------
        { ".unity", "Unity-scene" },    { ".prefab", "Unity-prefab" },
        { ".uasset", "Unreal-ressurs" },  { ".umap", "Unreal-kart" },
        { ".fbx", "FBX 3D-modell" },     { ".obj", "Wavefront 3D" },
        { ".gltf", "glTF 3D-modell" },   { ".blend", "Blender-prosjekt" },
        { ".dae", "Collada-modell" },    { ".3ds", "3D Studio-modell" },
        { ".stl", "STL-modell" },        { ".dxf", "AutoCAD DXF" },

        // ── Creative / Adobe ----------------------------------------------
        { ".psd", "Photoshop-dokument" }, { ".psb", "Photoshop-stort" },
        { ".ai",  "Illustrator-kunst" },   { ".indd", "InDesign-dokument" },
        { ".prproj", "Premiere-prosjekt" }, { ".aep", "After Effects" },
        { ".xd",  "Adobe XD-prototype" }, { ".sketch", "Sketch-dokument" },
        { ".fig", "Figma-dokument" },

        // ── Audio -----------------------------------------------------------
        { ".mp3", "MP3-lyd" },        { ".wav", "Wave-lyd" },
        { ".flac", "FLAC-lyd" },      { ".aac", "AAC-lyd" },
        { ".ogg", "OGG Vorbis" },       { ".wma", "Windows-lyd" },
        { ".opus", "Opus-lyd" },      { ".m4a", "MPEG-4-lyd" },
        { ".midi", "MIDI-sekvens" },   { ".aiff", "AIFF-lyd" },

        // ── Video -----------------------------------------------------------
        { ".mp4", "MP4-video" },        { ".mkv", "Matroska-video" },
        { ".avi", "AVI-video" },        { ".mov", "QuickTime-video" },
        { ".wmv", "Windows-video" },    { ".webm", "WebM-video" },
        { ".flv", "Flash-video" },      { ".m4v", "M4V-video" },
        { ".m3u8", "HLS-spilleliste" },
        { ".ogv", "OGG-video" },        { ".3gp", "3GP-video" },

        // ── Images ----------------------------------------------------------
        { ".jpg", "JPEG-bilde" },       { ".jpeg", "JPEG-bilde" },
        { ".png", "PNG-bilde" },        { ".gif", "GIF-bilde" },
        { ".bmp", "BMP-bilde" },        { ".tiff", "TIFF-bilde" },
        { ".webp", "WebP-bilde" },      { ".ico", "Ikon" },
        { ".svg", "SVG-vektor" },       { ".eps", "Encapsulated PostScript" },
        { ".raw", "RAW-bilde" },
        { ".cr2", "Canon RAW" },        { ".nef", "Nikon RAW" },
        { ".arw", "Sony RAW" },         { ".dng", "Digitalt negativ" },

        // ── Archives --------------------------------------------------------
        { ".zip", "ZIP-arkiv" },      { ".rar", "RAR-arkiv" },
        { ".7z",  "7-Zip-arkiv" },    { ".tar", "Tar-arkiv" },
        { ".gz",  "GZip-arkiv" },     { ".bz2", "BZip2-arkiv" },
        { ".xz",  "XZ-arkiv" },       { ".zst", "Zstd-arkiv" },
        { ".lz4", "LZ4-arkiv" },      { ".cab", "Cabinet-arkiv" },
        { ".iso", "Platebilde" },       { ".dmg", "macOS-platebilde" },
        { ".img", "Rått platebilde" },   { ".vhd", "Virtuell harddisk" },
        { ".vhdx","Hyper-V-disk" },     { ".wim", "Windows-bilde" },

        // ── Database --------------------------------------------------------
        { ".sql", "SQL-skript" },       { ".db",  "Database" },
        { ".sqlite", "SQLite-database" },     { ".mdb", "Access-database" },
        { ".accdb", "Access-database" }, { ".mdf", "SQL Server-database" },
        { ".ndf", "SQL Server NDF" },   { ".ldf", "SQL Server-log" },
        { ".bak", "SQL-sikkerhetskopi" },       { ".dmp", "Database-dump" },

        // ── Scientific / Math ---------------------------------------------
        { ".mat", "MATLAB-data" },      { ".m", "MATLAB-skript" },
        { ".r", "R-skript" },           { ".rdata", "R-datasett" },
        { ".csv", "CSV-data" },         { ".tsv", "TSV-data" },
        { ".sas", "SAS-program" },      { ".sav", "SPSS-datasett" },
        { ".por", "SPSS-portabel" },

        // ── Crypto / Blockchain -------------------------------------------
        { ".gpg", "GPG-kryptert" },    { ".pgp", "PGP-kryptert" },
        { ".asc", "PGP-signatur" },    { ".sig", "Frittstående signatur" },
        { ".wallet", "Kryptolommebok" }, { ".key", "Nøkkelfil" },
        { ".pem", "PEM-sertifikat" },  { ".crt", "Sertifikat" },
        { ".p12", "PKCS#12-nøkkellager" }, { ".pfx", "Windows-nøkkellager" },

        // ── Emulation / ROMs ----------------------------------------------
        { ".gba", "Game Boy-ROM" },     { ".nds", "Nintendo DS-ROM" },
        { ".wbfs", "Wii-sikkerhetskopi" },
        { ".cia", "3DS-installasjonsprogram" },    { ".nsp", "Switch-pakke" },
        { ".xci", "Switch-kassett" }, { ".wad", "Wii-kanal" },

        // ── Misc ------------------------------------------------------------
        { ".exe", "Windows-program" }, { ".msi", "Windows-installasjonsprogram" },
        { ".com", "DOS-kommando" },      { ".bat", "Batch-skript" },
        { ".ps1", "PowerShell-skript" }, { ".cmd", "Kommando-skript" },
        { ".reg", "Registeroppføring" },
        { ".url", "Internett-snarvei" }, { ".torrent", "BitTorrent" },
        { ".log", "Loggfil" },         { ".ini", "INI-konfigurasjon" },
        { ".cfg", "Konfigurasjonsfil" },      { ".conf", "Konfigurasjon" },
        { ".yaml", "YAML-konfig" },     { ".toml", "TOML-konfig" },
        { ".env", "Miljøfil" }, { ".gitignore", "Git-ignorer" },
        { ".dockerfile", "Dockerfile" }, { ".md", "Markdown" },
        { ".tex", "LaTeX-kildekode" },     { ".bib", "BibTeX-bibliotek" },

        // ── Additional / Misc ---------------------------------------------
        { ".dwp", "SharePoint Web Part" },
        { ".fxp", "FoxPro-kompilert" },
        { ".asd", "Word-autolagring" },
        { ".fsc", "Windows-søkebuffer" },
        { ".mid", "MIDI-sekvens" },
        { ".fst", "FL Studio-tilstand" },
        { ".txt", "Ren tekstfil" },
        { ".pdb", "Programdatabase" },
        { ".dll", "Dynamisk lenkebibliotek" },
        { ".resources", ".NET-ressurser" },
        { ".cache", "Bufferfil" },
        { ".settings", "Innstillinger XML" },
        { ".csproj", "C#-prosjekt" },
        { ".editorconfig", "EditorConfig" },
        { ".kdbx", "KeePass-fil" },
        { ".nupkg", "NuGet-pakke" },
        { ".p7s", "PKCS #7-signatur" },
        { ".map", "Kildekart-fil" },
        { ".flow", "Flow Type-deklarasjon" },
        { ".mjs", "ES-modul (JavaScript)" },
        { ".cjs", "CommonJS (JavaScript)" },
        { ".cts", "TypeScript CommonJS" },
        { ".mts", "TypeScript ES-modul" },
        { ".jst", "JavaScript-mal" },
        { ".markdown", "Markdown-dokument" },
        { ".applescript", "AppleScript" },
        { ".ch1", "Nintendo-karakterdata" },
        { ".vital", "Vital Synthesizer-forhåndsinnstilling" },
        { ".ds_store", "macOS Desktop Services Store" },
        { ".zpw", "ZippedWeb-pakke" },
        { ".flp", "FL Studio-prosjekt" },
        { ".flstheme", "FL Studio-tema" },
        { ".nmsv", "Native Instruments NMSV-forhåndsinnstilling" },
        { ".wav.256", "256-bit WAV-variant" },
        { ".pdf", "Portable Document Format" },
        { ".config", "Konfigurasjon XML/JSON" },
        { ".user", "Brukerinnstillinger" },
        { ".uptodate", "Up2Date-bufferflagg" },
        { ".rtf", "Rich Text Format" },
        { ".buildwithskipanalyzers", "MSBuild Skip-Analyzers-flagg" },
        { ".node", "Node.js-binærmodul" },
        { ".snap", "Snapcraft-pakke" },
        { ".def", "Moduldefinisjonsfil" },
        { ".bsd", "BSD-lisens/konfigurasjon" },
        { ".babelrc", "Babel-konfigurasjon" },
        { ".prettierrc", "Prettier-konfigurasjon" },
        { ".npignore", "NuGet-ignoreringsregler" },
        { ".php", "PHP-skript" },
        { ".eslintignore", "ESLint-ignorer" },
        { ".lic", "Lisensfil" },
        { ".nib", "NeXT Interface Builder" },
        { ".plist", "macOS-egenskapsliste" },
        { ".mui", "Flerspråklig brukergrensesnitt" },
        { ".efi", "UEFI-fastvare" },
        { ".cip", "Chrome CIP-pakke" },
        { ".bin", "Binærdata" },
        { ".sdi", "System Deployment Image" },
        { ".ttf", "TrueType-skrift" },
        { ".cur", "Windows-markør" },
        { ".ani", "Animasjonsmarkør" },
        { ".diagpkg", "Windows-diagnostikkpakke" },
        { ".dat", "Generisk datafil" },
        { ".diffbase", "Diff-base-øyeblikksbilde" },
        { ".lm", "Språkmodell" },
        { ".lm1", "Språkmodell variant 1" },
        { ".lm2", "Språkmodell variant 2" },
        { ".lm3", "Språkmodell variant 3" },
        { ".lex", "Leksikondata" },
        { ".res", "Windows-ressurs" },
        { ".nlt", "NetLink Trust-data" },
        { ".nls", "Nasjonalt språkstøtte" },
        { ".chm", "Kompilert HTML-hjelp" },
        { ".fil", "Fillistebeholder" },
        { ".msixbundle", "MSIX-pakkesamling" },
        { ".p7x", "PKCS #7-utvidet" },
        { ".pri", "Pakkeressursindeks" },
        { ".etl", "Hendelsessporingslogg" },
        { ".nlp", "Naturlig språkprosessordata" },
        { ".compositefont", "WPF-sammensatt skrift" },
        { ".aspx", "ASP.NET-side" },
        { ".ascx", "ASP.NET-brukerkontroll" },
        { ".master", "ASP.NET-hovedside" },
        { ".browser", "Nettleserdefinisjon" },
        { ".lnk", "Windows-snarvei" },
        { ".default", "Standardinnstillinger" },
        { ".comments", "Kommentarmetadata" },
        { ".rsp", "Svarfil" },
        { ".tld", "Tag Library Descriptor" },
        { ".win32manifest", "Win32-manifest" },
        { ".man", "Manualside" },
        { ".mof", "Managed Object Format" },
        { ".uninstall", "Avinstalleringsskript" },
        { ".tasks", "MSBuild-oppgaver" },
        { ".overridetasks", "MSBuild-overstyringsoppgaver" },
        { ".orp", "ORP-data" },
        { ".adml", "Administrative Template Language" },
        { ".ppkg", "Provisioning-pakke" },
        { ".mstheme", "Microsoft-tema" },
        { ".msstyles", "Windows-stil" },
        { ".mum", "Manifest Update Module" },
        { ".cat", "Sikkerhetskatalog" },
        { ".jfm", "Jet Database-metadata" },
        { ".rs", "Rust-kildekode" },
        { ".jll", "Julia LLVM-bytekode" },
        { ".sys", "Windows-systemdriver" },
        { ".p7b", "PKCS #7-sertifikatkjede" },
        { ".wmfw", "Windows Media Framework" },
        { ".inf_loc", "INF-lokalisering" },
        { ".winmd", "Windows-metadata" },
        { ".xbf", "XAML-binærformat" },
        { ".license", "Lisensnøkkel" },
        { ".fpie", "FPGA Intermediate Executable" },
        { ".cso", "Compiled Shader Object" },
        { ".sccd", "System Center Config Data" },
        { ".bundle", "Applikasjonspakke" },
        { ".schema", "JSON/XML-skjema" },
        { ".csg", "Constructive Solid Geometry" },
        { ".mun", "Multi-Unit Network" },
        { ".uce", "Universal Chess Engine" },
        { ".cpl", "Kontrollpanel-program" },
        { ".msc", "Microsoft Management Console" },
        { ".ax", "DirectShow-filter" },
        { ".table", "Oppslag-/hashtabell" },
        { ".tsp", "TSP-pakke/skript" },
        { ".tbl", "Tabelldata" },
        { ".drv", "Enhetsdriver" },
        { ".sep", "Separatorfil" },
        { ".ocx", "ActiveX-kontroll" },
        { ".msp", "Windows Installer-patch" },
        { ".scr", "Windows-skjermsparer" },
        { ".vbs", "VBScript" },
        { ".grxml", "Grammar XML" },
        { ".xrm-ms", "Microsoft-lisens" },
        { ".rll", "Resource Link Library" },
        { ".mfl", "MFL-språkfil" },
        { ".cdxml", "Cmdlet Definition XML" },
        { ".dtd", "Document Type Definition" },
        { ".psm1", "PowerShell-modulskript" },
        { ".ps1xml", "PowerShell-formatdata" },
        { ".wprp", "Windows Performance Recorder Profile" },
        { ".xsl", "XSLT-stilark" },
        { ".gyp", "Generate Your Projects" },
        { ".rld", "ReLoad-data" },
        { ".job", "Windows-oppgavejobb" },
        { ".gypi", "GYP-include" },
        { ".hlp", "Windows-hjelp" },
        { ".gdl", "Generic Description Language" },
        { ".elf", "Executable and Linkable Format" },
        { ".ppd", "PostScript Printer Description" },
        { ".gpd", "Generic Printer Description" },
        { ".mbn", "Modem-binær" },
        { ".pak", "PAK-arkiv" },
        { ".dgml", "Directed Graph Markup" },
        { ".smp", "Eksempelfil" },
        { ".lxa", "Microsoft Lexicon Audio" },
        { ".wwd", "Microsoft Works Wizard" },
        { ".wsf", "Windows Script File" },
        { ".cw", "CardWorks-mal" },
        { ".phn", "Phun Physics Scene" },
        { ".am", "Automake-fil" },
        { ".fe", "File Encryptor" },
        { ".mllr", "Maximum Likelihood Linear Regression" },
        { ".ngr", "NEOGEO-ROM" },
        { ".sch", "Timeplan/skjema" },
        { ".adlm", "Autodesk License Manager" },
        { ".adxm", "Administrative XML" },
        { ".nmnl", "Normalized Minimal" },
        { ".propdesc", "Property Description" },
        { ".nsl", "Nokia Sound Library" },
        { ".ntf", "National Transfer Format" },
        { ".ntp", "NTP-konfigurasjon" },
        { ".forms", "Windows Forms" },
        { ".runtime", "Runtime-manifest" },
        { ".interop", "COM Interop-data" },
        { ".frm", "Visual Basic-skjema" },
        { ".bas", "Visual Basic-modul" },
        { ".dwb", "Drum Workshop Bundle" },
        { ".npmignore", "NPM-ignoreringsregler" },
        { ".rsrc", "macOS-ressursgaffel" },
        { ".upd2date", "Up2Date-bufferflagg" },
        { ".Up2Date", "Up2Date-bufferflagg" },
        { ".jshintrc", "JSHint-konfigurasjon" },
        { ".lock", "Lås/avhengighetsfeste" },
        { ".nix", "Nix-uttrykk" },
        { ".hr1", "HR1-spilldata" },
        { ".hr2", "HR2-spilldata" },
        { ".hr3", "HR3-spilldata" },
        { ".hr4", "HR4-spilldata" },
        { ".hr5", "HR5-spilldata" },
        { ".hr6", "HR6-spilldata" },
        { ".hr7", "HR7-spilldata" },
        { ".hr8", "HR8-spilldata" },
        { ".hr9", "HR9-spilldata" },
        { ".bnf", "Backus-Naur Form-grammatikk" },
        { ".clb", "COM+-katalog" },
        { ".tlb", "Typebibliotek" },
        { ".dic", "Ordbok/leksikon" },
        { ".aux", "Hjelpe-TeX-fil" },
        { ".ds", "DataStore/DS_Store" },
        { ".inc", "Inkluder/kildekodeinkludering" },
        { ".cpx", "Kodesidetranslasjon" },
        { ".mdl", "Modell/modulfil" },
        { ".dls", "Downloadable Sounds Bank" },
        { ".cdf-ms", "ClickOnce Deployment Manifest" },
        { ".addin", "Visual Studio-tillegg" },
        { ".scp", "Windows Script Component" },
        { ".wmz", "Komprimert Windows Media Player-drakt" },
        { ".iec", "IEC-database" },
        { ".wsc", "Windows Script Component" },
        { ".vrg", "Visual Studio Registry Script" },
        { ".prx", "Proxy Auto-Config" },
        { ".nuspec", "NuGet-spesifikasjon" },
        
        // ── Extended Archive / Compression --------------------------------
        { ".zipx", "ZIPX-arkiv" },
        { ".alz", "ALZip-arkiv" },
        { ".eeg", "EEG-komprimert" },
        { ".001", "Delt arkiv del 1" },
        { ".arj", "ARJ-arkiv" },
        { ".bh",  "BlakHole-arkiv" },
        { ".lha", "LHA-arkiv" },
        { ".lzh", "LHA/LZH-arkiv" },
        { ".pma", "PMarc-arkiv" },
        { ".arc", "ARC-arkiv" },
        { ".ace", "ACE-arkiv" },
        { ".aes", "AES-kryptert fil" },
        { ".zpak", "ZPAQ-arkiv" },
        { ".zstd", "Zstandard-arkiv" },
        { ".br",  "Brotli-arkiv" },
        { ".pea", "PeaZip-arkiv" },
        { ".tbz", "Tar.BZ-arkiv" },
        { ".tbz2", "Tar.BZ2-arkiv" },
        { ".txz", "Tar.XZ-arkiv" },
        { ".tlz", "Tar.LZMA-arkiv" },
        { ".uu",  "UUEncoded fil" },
        { ".uue", "UUEncoded fil" },
        { ".xxe", "XXEncoded fil" },
        { ".z",   "Unix-komprimering" },
        { ".tgz", "Tar.GZ-arkiv" },
        { ".isz", "ISO-komprimert bilde" },
        { ".udf", "Universal Disk Format" },
        { ".i00", "DVD Decrypter delt bilde del 1" }
    }
},
    {
    "da", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
    {
        // ── Microsoft / Office ---------------------------------------------
        { ".docx", "Word-dokument" },  { ".doc", "Word 97-2003" },
        { ".xlsx", "Excel-regneark" }, { ".xls", "Excel 97-2003" },
        { ".pptx", "PowerPoint" },     { ".ppt", "PowerPoint 97-2003" },
        { ".vsdx", "Visio-tegning" },  { ".pub", "Publisher-dokument" },
        { ".one",  "OneNote-notatbog" },
        { ".ost", "Outlook-offline" }, { ".pst", "Outlook-personlig" },
        { ".msg", "Outlook-besked" }, { ".eml", "E-mail-besked" },

        // ── Web / Mark-up ---------------------------------------------------
        { ".html", "HTML-dokument" },  { ".htm", "HTML-dokument" },
        { ".css",  "CSS-stilark" }, { ".scss", "Sass (SCSS)" },
        { ".sass", "Sass (indrykket)" }, { ".less", "Less-stil" },
        { ".js",   "JavaScript" },      { ".jsx", "React JSX" },
        { ".ts",   "TypeScript" },      { ".tsx", "React TSX" },
        { ".json", "JSON-data" },       { ".xml", "XML-dokument" },
        { ".yml",  "YAML-konfig" },

        // ── Microsoft / .NET ----------------------------------------------
        { ".cs", "C#-kildekode" },         { ".csx", "C#-script" },
        { ".fs", "F#-kildekode" },         { ".vb", "VB.NET-kildekode" },
        { ".il", "IL-assembler" },       { ".resx", "Ressource-XML" },
        { ".xaml", "XAML-markup" },    { ".sln", "Visual Studio-løsning" },
        { ".vbproj", "VB-projekt" },
        { ".vcxproj", "C++-projekt" },  { ".props", "MSBuild-egenskaber" },
        { ".targets", "MSBuild-mål" },

        // ── C / C++ --------------------------------------------------------
        { ".cpp", "C++-kildekode" },       { ".cc", "C++-kildekode" },
        { ".cxx", "C++-kildekode" },       { ".c", "C-kildekode" },
        { ".hpp", "C++-header" },       { ".h", "C/C++-header" },
        { ".inl", "Inline C++" },       { ".idl", "Interface-definition" },
        { ".rc", "Ressource-script" },   { ".manifest", "Applikationsmanifest" },

        // ── Java / JVM ------------------------------------------------------
        { ".java", "Java-kildekode" },     { ".class", "Java-klasse" },
        { ".jar", "Java-arkiv" },     { ".war", "Java Web-arkiv" },
        { ".ear", "Enterprise-arkiv" }, { ".scala", "Scala-kildekode" },
        { ".groovy", "Groovy-kildekode" }, { ".clj", "Clojure-kildekode" },

        // ── Python ----------------------------------------------------------
        { ".py", "Python-script" },     { ".pyw", "Python (uden konsol)" },
        { ".pyi", "Python-stub" },      { ".pyc", "Python-bytekode" },
        { ".pyo", "Python-optimeret" }, { ".pyd", "Python-udvidelse" },
        { ".whl", "Python-wheel" },     { ".ipynb", "Jupyter-notatbog" },

        // ── Mobile ----------------------------------------------------------
        { ".swift", "Swift-kildekode" },   { ".dart", "Dart-kildekode" },
        { ".kt", "Kotlin-kildekode" },     { ".kts", "Kotlin-script" },
        { ".gradle", "Gradle-script" }, { ".aar", "Android-arkiv" },
        { ".apk", "Android-pakke" },  { ".aab", "Android App Bundle" },
        { ".ipa", "iOS-pakke" },

        // ── Game Dev / 3D ---------------------------------------------------
        { ".unity", "Unity-scene" },    { ".prefab", "Unity-prefab" },
        { ".uasset", "Unreal-ressource" },  { ".umap", "Unreal-kort" },
        { ".fbx", "FBX 3D-model" },     { ".obj", "Wavefront 3D" },
        { ".gltf", "glTF 3D-model" },   { ".blend", "Blender-projekt" },
        { ".dae", "Collada-model" },    { ".3ds", "3D Studio-model" },
        { ".stl", "STL-model" },        { ".dxf", "AutoCAD DXF" },

        // ── Creative / Adobe ----------------------------------------------
        { ".psd", "Photoshop-dokument" }, { ".psb", "Photoshop-stor" },
        { ".ai",  "Illustrator-kunst" },   { ".indd", "InDesign-dokument" },
        { ".prproj", "Premiere-projekt" }, { ".aep", "After Effects" },
        { ".xd",  "Adobe XD-prototype" }, { ".sketch", "Sketch-dokument" },
        { ".fig", "Figma-dokument" },

        // ── Audio -----------------------------------------------------------
        { ".mp3", "MP3-lyd" },        { ".wav", "Wave-lyd" },
        { ".flac", "FLAC-lyd" },      { ".aac", "AAC-lyd" },
        { ".ogg", "OGG Vorbis" },       { ".wma", "Windows-lyd" },
        { ".opus", "Opus-lyd" },      { ".m4a", "MPEG-4-lyd" },
        { ".midi", "MIDI-sekvens" },   { ".aiff", "AIFF-lyd" },

        // ── Video -----------------------------------------------------------
        { ".mp4", "MP4-video" },        { ".mkv", "Matroska-video" },
        { ".avi", "AVI-video" },        { ".mov", "QuickTime-video" },
        { ".wmv", "Windows-video" },    { ".webm", "WebM-video" },
        { ".flv", "Flash-video" },      { ".m4v", "M4V-video" },
        { ".m3u8", "HLS-afspilningsliste" },
        { ".ogv", "OGG-video" },        { ".3gp", "3GP-video" },

        // ── Images ----------------------------------------------------------
        { ".jpg", "JPEG-billede" },       { ".jpeg", "JPEG-billede" },
        { ".png", "PNG-billede" },        { ".gif", "GIF-billede" },
        { ".bmp", "BMP-billede" },        { ".tiff", "TIFF-billede" },
        { ".webp", "WebP-billede" },      { ".ico", "Ikon" },
        { ".svg", "SVG-vektor" },       { ".eps", "Encapsulated PostScript" },
        { ".raw", "RAW-billede" },
        { ".cr2", "Canon RAW" },        { ".nef", "Nikon RAW" },
        { ".arw", "Sony RAW" },         { ".dng", "Digitalt negativ" },

        // ── Archives --------------------------------------------------------
        { ".zip", "ZIP-arkiv" },      { ".rar", "RAR-arkiv" },
        { ".7z",  "7-Zip-arkiv" },    { ".tar", "Tar-arkiv" },
        { ".gz",  "GZip-arkiv" },     { ".bz2", "BZip2-arkiv" },
        { ".xz",  "XZ-arkiv" },       { ".zst", "Zstd-arkiv" },
        { ".lz4", "LZ4-arkiv" },      { ".cab", "Cabinet-arkiv" },
        { ".iso", "Disc-billede" },       { ".dmg", "macOS-diskbillede" },
        { ".img", "Råt diskbillede" },   { ".vhd", "Virtuel harddisk" },
        { ".vhdx","Hyper-V-disk" },     { ".wim", "Windows-billede" },

        // ── Database --------------------------------------------------------
        { ".sql", "SQL-script" },       { ".db",  "Database" },
        { ".sqlite", "SQLite-database" },     { ".mdb", "Access-database" },
        { ".accdb", "Access-database" }, { ".mdf", "SQL Server-database" },
        { ".ndf", "SQL Server NDF" },   { ".ldf", "SQL Server-log" },
        { ".bak", "SQL-sikkerhedskopi" },       { ".dmp", "Database-dump" },

        // ── Scientific / Math ---------------------------------------------
        { ".mat", "MATLAB-data" },      { ".m", "MATLAB-script" },
        { ".r", "R-script" },           { ".rdata", "R-datasæt" },
        { ".csv", "CSV-data" },         { ".tsv", "TSV-data" },
        { ".sas", "SAS-program" },      { ".sav", "SPSS-datasæt" },
        { ".por", "SPSS-portabel" },

        // ── Crypto / Blockchain -------------------------------------------
        { ".gpg", "GPG-krypteret" },    { ".pgp", "PGP-krypteret" },
        { ".asc", "PGP-signatur" },    { ".sig", "Fristående signatur" },
        { ".wallet", "Krypto-pung" }, { ".key", "Nøglefil" },
        { ".pem", "PEM-certifikat" },  { ".crt", "Certifikat" },
        { ".p12", "PKCS#12-nøgellager" }, { ".pfx", "Windows-nøgellager" },

        // ── Emulation / ROMs ----------------------------------------------
        { ".gba", "Game Boy-ROM" },     { ".nds", "Nintendo DS-ROM" },
        { ".wbfs", "Wii-sikkerhedskopi" },
        { ".cia", "3DS-installationsprogram" },    { ".nsp", "Switch-pakke" },
        { ".xci", "Switch-kassette" }, { ".wad", "Wii-kanal" },

        // ── Misc ------------------------------------------------------------
        { ".exe", "Windows-program" }, { ".msi", "Windows-installationsprogram" },
        { ".com", "DOS-kommando" },      { ".bat", "Batch-script" },
        { ".ps1", "PowerShell-script" }, { ".cmd", "Kommando-script" },
        { ".reg", "Registerpost" },
        { ".url", "Internet-genvej" }, { ".torrent", "BitTorrent" },
        { ".log", "Logfil" },         { ".ini", "INI-konfiguration" },
        { ".cfg", "Konfigurationsfil" },      { ".conf", "Konfiguration" },
        { ".yaml", "YAML-konfig" },     { ".toml", "TOML-konfig" },
        { ".env", "Miljøfil" }, { ".gitignore", "Git-ignorer" },
        { ".dockerfile", "Dockerfile" }, { ".md", "Markdown" },
        { ".tex", "LaTeX-kildekode" },     { ".bib", "BibTeX-bibliotek" },

        // ── Additional / Misc ---------------------------------------------
        { ".dwp", "SharePoint Web Part" },
        { ".fxp", "FoxPro-kompileret" },
        { ".asd", "Word-autogem" },
        { ".fsc", "Windows-søgecache" },
        { ".mid", "MIDI-sekvens" },
        { ".fst", "FL Studio-tilstand" },
        { ".txt", "Almindelig tekstfil" },
        { ".pdb", "Programdatabase" },
        { ".dll", "Dynamisk linkbibliotek" },
        { ".resources", ".NET-ressourcer" },
        { ".cache", "Cache-fil" },
        { ".settings", "Indstillinger XML" },
        { ".csproj", "C#-projekt" },
        { ".editorconfig", "EditorConfig" },
        { ".kdbx", "KeePass-fil" },
        { ".nupkg", "NuGet-pakke" },
        { ".p7s", "PKCS #7-signatur" },
        { ".map", "Kildekort-fil" },
        { ".flow", "Flow Type-deklaration" },
        { ".mjs", "ES-modul (JavaScript)" },
        { ".cjs", "CommonJS (JavaScript)" },
        { ".cts", "TypeScript CommonJS" },
        { ".mts", "TypeScript ES-modul" },
        { ".jst", "JavaScript-skabelon" },
        { ".markdown", "Markdown-dokument" },
        { ".applescript", "AppleScript" },
        { ".ch1", "Nintendo-karakterdata" },
        { ".vital", "Vital Synthesizer-præsætning" },
        { ".ds_store", "macOS Desktop Services Store" },
        { ".zpw", "ZippedWeb-pakke" },
        { ".flp", "FL Studio-projekt" },
        { ".flstheme", "FL Studio-tema" },
        { ".nmsv", "Native Instruments NMSV-præsætning" },
        { ".wav.256", "256-bit WAV-variant" },
        { ".pdf", "Portable Document Format" },
        { ".config", "Konfiguration XML/JSON" },
        { ".user", "Brugerindstillinger" },
        { ".uptodate", "Up2Date-cache-flag" },
        { ".rtf", "Rich Text Format" },
        { ".buildwithskipanalyzers", "MSBuild Skip-Analyzers-flag" },
        { ".node", "Node.js-binærmodul" },
        { ".snap", "Snapcraft-pakke" },
        { ".def", "Moduldefinitionsfil" },
        { ".bsd", "BSD-licens/konfiguration" },
        { ".babelrc", "Babel-konfiguration" },
        { ".prettierrc", "Prettier-konfiguration" },
        { ".npignore", "NuGet-ignoreringsregler" },
        { ".php", "PHP-script" },
        { ".eslintignore", "ESLint-ignorer" },
        { ".lic", "Licensfil" },
        { ".nib", "NeXT Interface Builder" },
        { ".plist", "macOS-egenskabsliste" },
        { ".mui", "Flersproget brugergrænseflade" },
        { ".efi", "UEFI-firmware" },
        { ".cip", "Chrome CIP-pakke" },
        { ".bin", "Binærdata" },
        { ".sdi", "System Deployment Image" },
        { ".ttf", "TrueType-skrifttype" },
        { ".cur", "Windows-markør" },
        { ".ani", "Animeret markør" },
        { ".diagpkg", "Windows-diagnostikpakke" },
        { ".dat", "Generisk datafil" },
        { ".diffbase", "Diff-base-øjebliksbillede" },
        { ".lm", "Sprogmodel" },
        { ".lm1", "Sprogmodel variant 1" },
        { ".lm2", "Sprogmodel variant 2" },
        { ".lm3", "Sprogmodel variant 3" },
        { ".lex", "Leksikondata" },
        { ".res", "Windows-ressource" },
        { ".nlt", "NetLink Trust-data" },
        { ".nls", "National Language Support" },
        { ".chm", "Kompileret HTML-hjælp" },
        { ".fil", "Filliste-container" },
        { ".msixbundle", "MSIX-pakkesamling" },
        { ".p7x", "PKCS #7-udvidet" },
        { ".pri", "Pakkeressource-indeks" },
        { ".etl", "Hændelsessporingslog" },
        { ".nlp", "Natural Language Processor-data" },
        { ".compositefont", "WPF-sammensat skrifttype" },
        { ".aspx", "ASP.NET-side" },
        { ".ascx", "ASP.NET-brugerkontrol" },
        { ".master", "ASP.NET-hovedside" },
        { ".browser", "Browser-definition" },
        { ".lnk", "Windows-genvej" },
        { ".default", "Standardindstillinger" },
        { ".comments", "Kommentar-metadata" },
        { ".rsp", "Svarfil" },
        { ".tld", "Tag Library Descriptor" },
        { ".win32manifest", "Win32-manifest" },
        { ".man", "Manual-side" },
        { ".mof", "Managed Object Format" },
        { ".uninstall", "Afinstalleringsscript" },
        { ".tasks", "MSBuild-opgaver" },
        { ".overridetasks", "MSBuild-overstyringsopgaver" },
        { ".orp", "ORP-data" },
        { ".adml", "Administrative Template Language" },
        { ".ppkg", "Provisioning-pakke" },
        { ".mstheme", "Microsoft-tema" },
        { ".msstyles", "Windows-stil" },
        { ".mum", "Manifest Update Module" },
        { ".cat", "Sikkerhedskatalog" },
        { ".jfm", "Jet Database-metadata" },
        { ".rs", "Rust-kildekode" },
        { ".jll", "Julia LLVM-bytekode" },
        { ".sys", "Windows-systemdriver" },
        { ".p7b", "PKCS #7-certifikatkæde" },
        { ".wmfw", "Windows Media Framework" },
        { ".inf_loc", "INF-lokalisering" },
        { ".winmd", "Windows-metadata" },
        { ".xbf", "XAML-binærformat" },
        { ".license", "Licensnøgle" },
        { ".fpie", "FPGA Intermediate Executable" },
        { ".cso", "Compiled Shader Object" },
        { ".sccd", "System Center Config Data" },
        { ".bundle", "Applikationspakke" },
        { ".schema", "JSON/XML-skema" },
        { ".csg", "Constructive Solid Geometry" },
        { ".mun", "Multi-Unit Network" },
        { ".uce", "Universal Chess Engine" },
        { ".cpl", "Kontrolpanel-program" },
        { ".msc", "Microsoft Management Console" },
        { ".ax", "DirectShow-filter" },
        { ".table", "Opslag-/hashtabel" },
        { ".tsp", "TSP-pakke/script" },
        { ".tbl", "Tabeldata" },
        { ".drv", "Enhedsdriver" },
        { ".sep", "Separatorfil" },
        { ".ocx", "ActiveX-kontrol" },
        { ".msp", "Windows Installer-patch" },
        { ".scr", "Windows-pauseskærm" },
        { ".vbs", "VBScript" },
        { ".grxml", "Grammar XML" },
        { ".xrm-ms", "Microsoft-licens" },
        { ".rll", "Resource Link Library" },
        { ".mfl", "MFL-sprogfil" },
        { ".cdxml", "Cmdlet Definition XML" },
        { ".dtd", "Document Type Definition" },
        { ".psm1", "PowerShell-modulscript" },
        { ".ps1xml", "PowerShell-formatdata" },
        { ".wprp", "Windows Performance Recorder Profile" },
        { ".xsl", "XSLT-stilark" },
        { ".gyp", "Generate Your Projects" },
        { ".rld", "ReLoad-data" },
        { ".job", "Windows-opgavejob" },
        { ".gypi", "GYP-include" },
        { ".hlp", "Windows-hjælp" },
        { ".gdl", "Generic Description Language" },
        { ".elf", "Executable and Linkable Format" },
        { ".ppd", "PostScript Printer Description" },
        { ".gpd", "Generic Printer Description" },
        { ".mbn", "Modem-binær" },
        { ".pak", "PAK-arkiv" },
        { ".dgml", "Directed Graph Markup" },
        { ".smp", "Eksempelfil" },
        { ".lxa", "Microsoft Lexicon Audio" },
        { ".wwd", "Microsoft Works Wizard" },
        { ".wsf", "Windows Script File" },
        { ".cw", "CardWorks-skabelon" },
        { ".phn", "Phun Physics Scene" },
        { ".am", "Automake-fil" },
        { ".fe", "File Encryptor" },
        { ".mllr", "Maximum Likelihood Linear Regression" },
        { ".ngr", "NEOGEO-ROM" },
        { ".sch", "Tidsplan/skema" },
        { ".adlm", "Autodesk License Manager" },
        { ".adxm", "Administrative XML" },
        { ".nmnl", "Normalized Minimal" },
        { ".propdesc", "Property Description" },
        { ".nsl", "Nokia Sound Library" },
        { ".ntf", "National Transfer Format" },
        { ".ntp", "NTP-konfiguration" },
        { ".forms", "Windows Forms" },
        { ".runtime", "Runtime-manifest" },
        { ".interop", "COM Interop-data" },
        { ".frm", "Visual Basic-formular" },
        { ".bas", "Visual Basic-modul" },
        { ".dwb", "Drum Workshop Bundle" },
        { ".npmignore", "NPM-ignoreringsregler" },
        { ".rsrc", "macOS-ressourcegaffel" },
        { ".upd2date", "Up2Date-cache-flag" },
        { ".Up2Date", "Up2Date-cache-flag" },
        { ".jshintrc", "JSHint-konfiguration" },
        { ".lock", "Lås/afhængighedsfæstning" },
        { ".nix", "Nix-udtryk" },
        { ".hr1", "HR1-spildata" },
        { ".hr2", "HR2-spildata" },
        { ".hr3", "HR3-spildata" },
        { ".hr4", "HR4-spildata" },
        { ".hr5", "HR5-spildata" },
        { ".hr6", "HR6-spildata" },
        { ".hr7", "HR7-spildata" },
        { ".hr8", "HR8-spildata" },
        { ".hr9", "HR9-spildata" },
        { ".bnf", "Backus-Naur Form-grammatik" },
        { ".clb", "COM+-katalog" },
        { ".tlb", "Typebibliotek" },
        { ".dic", "Ordbog/leksikon" },
        { ".aux", "Hjælpe-TeX-fil" },
        { ".ds", "DataStore/DS_Store" },
        { ".inc", "Inkluder/kildekodeinkludering" },
        { ".cpx", "Kodesidetranslation" },
        { ".mdl", "Model/modulfil" },
        { ".dls", "Downloadable Sounds Bank" },
        { ".cdf-ms", "ClickOnce Deployment Manifest" },
        { ".addin", "Visual Studio-tilføjelse" },
        { ".scp", "Windows Script Component" },
        { ".wmz", "Komprimeret Windows Media Player-skin" },
        { ".iec", "IEC-database" },
        { ".wsc", "Windows Script Component" },
        { ".vrg", "Visual Studio Registry Script" },
        { ".prx", "Proxy Auto-Config" },
        { ".nuspec", "NuGet-specifikation" },
        
        // ── Extended Archive / Compression --------------------------------
        { ".zipx", "ZIPX-arkiv" },
        { ".alz", "ALZip-arkiv" },
        { ".eeg", "EEG-komprimeret" },
        { ".001", "Delt arkiv del 1" },
        { ".arj", "ARJ-arkiv" },
        { ".bh",  "BlakHole-arkiv" },
        { ".lha", "LHA-arkiv" },
        { ".lzh", "LHA/LZH-arkiv" },
        { ".pma", "PMarc-arkiv" },
        { ".arc", "ARC-arkiv" },
        { ".ace", "ACE-arkiv" },
        { ".aes", "AES-krypteret fil" },
        { ".zpak", "ZPAQ-arkiv" },
        { ".zstd", "Zstandard-arkiv" },
        { ".br",  "Brotli-arkiv" },
        { ".pea", "PeaZip-arkiv" },
        { ".tbz", "Tar.BZ-arkiv" },
        { ".tbz2", "Tar.BZ2-arkiv" },
        { ".txz", "Tar.XZ-arkiv" },
        { ".tlz", "Tar.LZMA-arkiv" },
        { ".uu",  "UUEncoded fil" },
        { ".uue", "UUEncoded fil" },
        { ".xxe", "XXEncoded fil" },
        { ".z",   "Unix-komprimering" },
        { ".tgz", "Tar.GZ-arkiv" },
        { ".isz", "ISO-komprimeret billede" },
        { ".udf", "Universal Disk Format" },
        { ".i00", "DVD Decrypter delt billede del 1" }
    }
},
    {
    "fi", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
    {
        // ── Microsoft / Office ---------------------------------------------
        { ".docx", "Word-asiakirja" },  { ".doc", "Word 97-2003" },
        { ".xlsx", "Excel-työkirja" }, { ".xls", "Excel 97-2003" },
        { ".pptx", "PowerPoint" },     { ".ppt", "PowerPoint 97-2003" },
        { ".vsdx", "Visio-piirros" },  { ".pub", "Publisher-asiakirja" },
        { ".one",  "OneNote-muistikirja" },
        { ".ost", "Outlook-offline" }, { ".pst", "Outlook-henkilökohtainen" },
        { ".msg", "Outlook-viesti" }, { ".eml", "Sähköpostiviesti" },

        // ── Web / Mark-up ---------------------------------------------------
        { ".html", "HTML-asiakirja" },  { ".htm", "HTML-asiakirja" },
        { ".css",  "CSS-tyyliohje" }, { ".scss", "Sass (SCSS)" },
        { ".sass", "Sass (sisennetty)" }, { ".less", "Less-tyyli" },
        { ".js",   "JavaScript" },      { ".jsx", "React JSX" },
        { ".ts",   "TypeScript" },      { ".tsx", "React TSX" },
        { ".json", "JSON-data" },       { ".xml", "XML-asiakirja" },
        { ".yml",  "YAML-konfiguraatio" },

        // ── Microsoft / .NET ----------------------------------------------
        { ".cs", "C#-lähdekoodi" },         { ".csx", "C#-skripti" },
        { ".fs", "F#-lähdekoodi" },         { ".vb", "VB.NET-lähdekoodi" },
        { ".il", "IL-konekieli" },       { ".resx", "Resurssi-XML" },
        { ".xaml", "XAML-määritys" },    { ".sln", "Visual Studio -ratkaisu" },
        { ".vbproj", "VB-projekti" },
        { ".vcxproj", "C++-projekti" },  { ".props", "MSBuild-ominaisuudet" },
        { ".targets", "MSBuild-kohteet" },

        // ── C / C++ --------------------------------------------------------
        { ".cpp", "C++-lähdekoodi" },       { ".cc", "C++-lähdekoodi" },
        { ".cxx", "C++-lähdekoodi" },       { ".c", "C-lähdekoodi" },
        { ".hpp", "C++-otsake" },       { ".h", "C/C++-otsake" },
        { ".inl", "Inline C++" },       { ".idl", "Rajapinnan määritys" },
        { ".rc", "Resurssiskripti" },   { ".manifest", "Sovelluksen manifesti" },

        // ── Java / JVM ------------------------------------------------------
        { ".java", "Java-lähdekoodi" },     { ".class", "Java-luokka" },
        { ".jar", "Java-arkisto" },     { ".war", "Java Web -arkisto" },
        { ".ear", "Enterprise-arkisto" }, { ".scala", "Scala-lähdekoodi" },
        { ".groovy", "Groovy-lähdekoodi" }, { ".clj", "Clojure-lähdekoodi" },

        // ── Python ----------------------------------------------------------
        { ".py", "Python-skripti" },     { ".pyw", "Python (ei konsolia)" },
        { ".pyi", "Python-tynkä" },      { ".pyc", "Python-tavuakoodi" },
        { ".pyo", "Python-optimoitu" }, { ".pyd", "Python-laajennus" },
        { ".whl", "Python-pyörä" },     { ".ipynb", "Jupyter-muistikirja" },

        // ── Mobiili ----------------------------------------------------------
        { ".swift", "Swift-lähdekoodi" },   { ".dart", "Dart-lähdekoodi" },
        { ".kt", "Kotlin-lähdekoodi" },     { ".kts", "Kotlin-skripti" },
        { ".gradle", "Gradle-skripti" }, { ".aar", "Android-arkisto" },
        { ".apk", "Android-paketti" },  { ".aab", "Android-sovelluspaketti" },
        { ".ipa", "iOS-paketti" },

        // ── Pelikehitys / 3D ---------------------------------------------------
        { ".unity", "Unity-skene" },    { ".prefab", "Unity-prefab" },
        { ".uasset", "Unreal-asset" },  { ".umap", "Unreal-kartta" },
        { ".fbx", "FBX 3D-malli" },     { ".obj", "Wavefront 3D" },
        { ".gltf", "glTF 3D-malli" },   { ".blend", "Blender-projekti" },
        { ".dae", "Collada-malli" },    { ".3ds", "3D Studio -malli" },
        { ".stl", "STL-malli" },        { ".dxf", "AutoCAD DXF" },

        // ── Luova / Adobe ----------------------------------------------
        { ".psd", "Photoshop-asiakirja" }, { ".psb", "Photoshop (suuri)" },
        { ".ai",  "Illustrator-taide" },   { ".indd", "InDesign-asiakirja" },
        { ".prproj", "Premiere-projekti" }, { ".aep", "After Effects" },
        { ".xd",  "Adobe XD-prototyyppi" }, { ".sketch", "Sketch-asiakirja" },
        { ".fig", "Figma-asiakirja" },

        // ── Ääni -----------------------------------------------------------
        { ".mp3", "MP3-ääni" },        { ".wav", "Wave-ääni" },
        { ".flac", "FLAC-ääni" },      { ".aac", "AAC-ääni" },
        { ".ogg", "OGG Vorbis" },       { ".wma", "Windows-ääni" },
        { ".opus", "Opus-ääni" },      { ".m4a", "MPEG-4 -ääni" },
        { ".midi", "MIDI-sekvenssi" },   { ".aiff", "AIFF-ääni" },

        // ── Video -----------------------------------------------------------
        { ".mp4", "MP4-video" },        { ".mkv", "Matroska-video" },
        { ".avi", "AVI-video" },        { ".mov", "QuickTime-video" },
        { ".wmv", "Windows-video" },    { ".webm", "WebM-video" },
        { ".flv", "Flash-video" },      { ".m4v", "M4V-video" },
        { ".m3u8", "HLS-soittolista" },
        { ".ogv", "OGG-video" },        { ".3gp", "3GP-video" },

        // ── Kuvat ----------------------------------------------------------
        { ".jpg", "JPEG-kuva" },       { ".jpeg", "JPEG-kuva" },
        { ".png", "PNG-kuva" },        { ".gif", "GIF-kuva" },
        { ".bmp", "BMP-kuva" },        { ".tiff", "TIFF-kuva" },
        { ".webp", "WebP-kuva" },      { ".ico", "Kuvake" },
        { ".svg", "SVG-vektori" },       { ".eps", "Encapsulated PostScript" },
        { ".raw", "RAW-kuva" },
        { ".cr2", "Canon RAW" },        { ".nef", "Nikon RAW" },
        { ".arw", "Sony RAW" },         { ".dng", "Digitaalinen negatiivi" },

        // ── Arkistot --------------------------------------------------------
        { ".zip", "ZIP-arkisto" },      { ".rar", "RAR-arkisto" },
        { ".7z",  "7-Zip-arkisto" },    { ".tar", "Tar-arkisto" },
        { ".gz",  "GZip-arkisto" },     { ".bz2", "BZip2-arkisto" },
        { ".xz",  "XZ-arkisto" },       { ".zst", "Zstd-arkisto" },
        { ".lz4", "LZ4-arkisto" },      { ".cab", "Cabinet-arkisto" },
        { ".iso", "Levykuva" },       { ".dmg", "macOS-levykuva" },
        { ".img", "Raaka-levykuva" },   { ".vhd", "Virtuaalikiintolevy" },
        { ".vhdx","Hyper-V-levy" },     { ".wim", "Windows-kuva" },

        // ── Tietokanta --------------------------------------------------------
        { ".sql", "SQL-skripti" },       { ".db",  "Tietokanta" },
        { ".sqlite", "SQLite-tietokanta" },     { ".mdb", "Access-tietokanta" },
        { ".accdb", "Access-tietokanta" }, { ".mdf", "SQL Server -tietokanta" },
        { ".ndf", "SQL Server NDF" },   { ".ldf", "SQL Server -loki" },
        { ".bak", "SQL-varmuuskopio" },       { ".dmp", "Tietokantavedos" },

        // ── Tiede / Matematiikka ---------------------------------------------
        { ".mat", "MATLAB-data" },      { ".m", "MATLAB-skripti" },
        { ".r", "R-skripti" },           { ".rdata", "R-datasetti" },
        { ".csv", "CSV-data" },         { ".tsv", "TSV-data" },
        { ".sas", "SAS-ohjelma" },      { ".sav", "SPSS-datasetti" },
        { ".por", "SPSS-kannettava" },

        // ── Krypto / Blockchain -------------------------------------------
        { ".gpg", "GPG-salattu" },    { ".pgp", "PGP-salattu" },
        { ".asc", "PGP-allekirjoitus" },    { ".sig", "Irrotettu allekirjoitus" },
        { ".wallet", "Kryptolompakko" }, { ".key", "Avaintiedosto" },
        { ".pem", "PEM-sertifikaatti" },  { ".crt", "Sertifikaatti" },
        { ".p12", "PKCS#12-avainvarasto" }, { ".pfx", "Windows-avainvarasto" },

        // ── Emulaatio / ROMit ----------------------------------------------
        { ".gba", "Game Boy ROM" },     { ".nds", "Nintendo DS ROM" },
        { ".wbfs", "Wii-varmuuskopio" },
        { ".cia", "3DS-asennus" },    { ".nsp", "Switch-paketti" },
        { ".xci", "Switch-pelikortti" }, { ".wad", "Wii-kanava" },

        // ── Sekalaista ------------------------------------------------------------
        { ".exe", "Windows-suoritettava" }, { ".msi", "Windows-asennus" },
        { ".com", "DOS-komento" },      { ".bat", "Eräkäsikirjoitus" },
        { ".ps1", "PowerShell-skripti" }, { ".cmd", "Komentoskripti" },
        { ".reg", "Rekisterimerkintä" },
        { ".url", "Internet-pikakuvake" }, { ".torrent", "BitTorrent" },
        { ".log", "Lokitiedosto" },         { ".ini", "INI-konfiguraatio" },
        { ".cfg", "Asetustiedosto" },      { ".conf", "Konfiguraatio" },
        { ".yaml", "YAML-konfiguraatio" },     { ".toml", "TOML-konfiguraatio" },
        { ".env", "Ympäristötiedosto" }, { ".gitignore", "Git-ohitus" },
        { ".dockerfile", "Dockerfile" }, { ".md", "Markdown" },
        { ".tex", "LaTeX-lähde" },     { ".bib", "BibTeX-kirjasto" },

        // ── Lisä / Sekalaista ---------------------------------------------
        { ".dwp", "SharePoint-verkkososa" },
        { ".fxp", "FoxPro-käännetty" },
        { ".asd", "Word-automaattitalletus" },
        { ".fsc", "Windows-hakuvälimuisti" },
        { ".mid", "MIDI-sekvenssi" },
        { ".fst", "FL Studio -tila" },
        { ".txt", "Tekstitiedosto" },
        { ".pdb", "Ohjelmatietokanta" },
        { ".dll", "Dynamisesti linkitetty kirjasto" },
        { ".resources", ".NET-resurssit" },
        { ".cache", "Välimuistitiedosto" },
        { ".settings", "Asetukset XML" },
        { ".csproj", "C#-projekti" },
        { ".editorconfig", "EditorConfig" },
        { ".kdbx", "KeePass-tiedosto" },
        { ".nupkg", "NuGet-paketti" },
        { ".p7s", "PKCS #7 -allekirjoitus" },
        { ".map", "Lähdekarttatiedosto" },
        { ".flow", "Flow-tyypin määritys" },
        { ".mjs", "ES-moduuli (JavaScript)" },
        { ".cjs", "CommonJS (JavaScript)" },
        { ".cts", "TypeScript CommonJS" },
        { ".mts", "TypeScript ES-moduuli" },
        { ".jst", "JavaScript-malli" },
        { ".markdown", "Markdown-asiakirja" },
        { ".applescript", "AppleScript" },
        { ".ch1", "Nintendo-hahmodata" },
        { ".vital", "Vital-syntetisaattoriasetus" },
        { ".ds_store", "macOS Desktop Services Store" },
        { ".zpw", "Pakattu verkkopaketti" },
        { ".flp", "FL Studio -projekti" },
        { ".flstheme", "FL Studio -teema" },
        { ".nmsv", "Native Instruments NMSV-asetus" },
        { ".wav.256", "256-bittinen WAV-variantti" },
        { ".pdf", "Kannettava asiakirjamuoto" },
        { ".config", "Konfiguraatio XML/JSON" },
        { ".user", "Käyttäjäasetukset" },
        { ".uptodate", "Up2Date-välimuistimerkki" },
        { ".rtf", "Rikastettu tekstimuoto" },
        { ".buildwithskipanalyzers", "MSBuild Skip-Analyzers -merkki" },
        { ".node", "Node.js-binaarimoduuli" },
        { ".snap", "Snapcraft-paketti" },
        { ".def", "Moduulin määritystiedosto" },
        { ".bsd", "BSD-lisenssi/konfiguraatio" },
        { ".babelrc", "Babel-konfiguraatio" },
        { ".prettierrc", "Prettier-konfiguraatio" },
        { ".npignore", "NuGet-ohitussäännöt" },
        { ".php", "PHP-skripti" },
        { ".eslintignore", "ESLint-ohitus" },
        { ".lic", "Lisenssitiedosto" },
        { ".nib", "NeXT Interface Builder" },
        { ".plist", "macOS-ominaisuusluettelo" },
        { ".mui", "Monikielinen käyttöliittymä" },
        { ".efi", "UEFi-laiteohjelmisto" },
        { ".cip", "Chrome CIP-paketti" },
        { ".bin", "Binaaridata" },
        { ".sdi", "Järjestelmän käyttöönotto-kuva" },
        { ".ttf", "TrueType-fontti" },
        { ".cur", "Windows-osoitin" },
        { ".ani", "Animoitu osoitin" },
        { ".diagpkg", "Windows-diagnostiikkapaketti" },
        { ".dat", "Yleinen datatiedosto" },
        { ".diffbase", "Erojen perustilanne" },
        { ".lm", "Kielimalli" },
        { ".lm1", "Kielimalli variantti 1" },
        { ".lm2", "Kielimalli variantti 2" },
        { ".lm3", "Kielimalli variantti 3" },
        { ".lex", "Leksikkodata" },
        { ".res", "Windows-resurssi" },
        { ".nlt", "NetLink Trust -data" },
        { ".nls", "Kansallinen kielituki" },
        { ".chm", "Käännetty HTML-ohje" },
        { ".fil", "Tiedostoluettelosäilö" },
        { ".msixbundle", "MSIX-paketti" },
        { ".p7x", "PKCS #7 -laajennettu" },
        { ".pri", "Pakettiresurssihakemisto" },
        { ".etl", "Tapahtumajäljitysloki" },
        { ".nlp", "Luonnollisen kielen käsittelydata" },
        { ".compositefont", "WPF-yhdistelmäfontti" },
        { ".aspx", "ASP.NET-sivu" },
        { ".ascx", "ASP.NET-käyttäjäohjaus" },
        { ".master", "ASP.NET-pääsivu" },
        { ".browser", "Selaimen määritys" },
        { ".lnk", "Windows-pikakuvake" },
        { ".default", "Oletusasetukset" },
        { ".comments", "Kommenttimetatiedot" },
        { ".rsp", "Vastaustiedosto" },
        { ".tld", "Tag-kirjaston kuvailija" },
        { ".win32manifest", "Win32-manifesti" },
        { ".man", "Manuaalisivu" },
        { ".mof", "Hallittu objektimuoto" },
        { ".uninstall", "Poistoskripti" },
        { ".tasks", "MSBuild-tehtävät" },
        { ".overridetasks", "MSBuild-korvaustehtävät" },
        { ".orp", "ORP-data" },
        { ".adml", "Hallintamallin kieli" },
        { ".ppkg", "Valmistelupaketti" },
        { ".mstheme", "Microsoft-teema" },
        { ".msstyles", "Windows-tyyli" },
        { ".mum", "Manifestin päivitysmoduuli" },
        { ".cat", "Turvallisuuskatalogi" },
        { ".jfm", "Jet-tietokannan metatiedot" },
        { ".rs", "Rust-lähde" },
        { ".jll", "Julia LLVM -bittikoodi" },
        { ".sys", "Windows-järjestelmäohjain" },
        { ".p7b", "PKCS #7 -sertifikaattiketju" },
        { ".wmfw", "Windows Media Framework" },
        { ".inf_loc", "INF-lokalisointi" },
        { ".winmd", "Windows-metatiedot" },
        { ".xbf", "XAML-binaarimuoto" },
        { ".license", "Lisenssimerkki" },
        { ".fpie", "FPGA-välikäyttöjärjestelmä" },
        { ".cso", "Käännetty varjostinobjekti" },
        { ".sccd", "System Center -konfiguraatiodata" },
        { ".bundle", "Sovelluspaketti" },
        { ".schema", "JSON/XML-skeema" },
        { ".csg", "Konstruktiivinen kiinteä geometria" },
        { ".mun", "Moniyksikköverkko" },
        { ".uce", "Universaali shakkimoottori" },
        { ".cpl", "Ohjauspaneelisovellus" },
        { ".msc", "Microsoft Management Console" },
        { ".ax", "DirectShow-suodatin" },
        { ".table", "Hakutaulu/hajautustaulu" },
        { ".tsp", "TSP-paketti/skripti" },
        { ".tbl", "Taulukkotiedot" },
        { ".drv", "Laiteohjain" },
        { ".sep", "Erotintiedosto" },
        { ".ocx", "ActiveX-ohjaus" },
        { ".msp", "Windows-asennuskorjaus" },
        { ".scr", "Windows-näytönsäästäjä" },
        { ".vbs", "VBScript" },
        { ".grxml", "Kielioppi-XML" },
        { ".xrm-ms", "Microsoft-lisenssi" },
        { ".rll", "Resurssilinkkikirjasto" },
        { ".mfl", "MFL-kielitiedosto" },
        { ".cdxml", "Cmdlet-määritys XML" },
        { ".dtd", "Asiakirjatyypin määritys" },
        { ".psm1", "PowerShell-moduuliskripti" },
        { ".ps1xml", "PowerShell-muotodata" },
        { ".wprp", "Windows Performance Recorder -profiili" },
        { ".xsl", "XSLT-tyyliohje" },
        { ".gyp", "Generate Your Projects" },
        { ".rld", "ReLoad-data" },
        { ".job", "Windows-tehtävä" },
        { ".gypi", "GYP-include" },
        { ".hlp", "Windows-ohje" },
        { ".gdl", "Yleinen kuvauskieli" },
        { ".elf", "Suoritettava ja linkitettävä muoto" },
        { ".ppd", "PostScript-tulostimen kuvaus" },
        { ".gpd", "Yleinen tulostimen kuvaus" },
        { ".mbn", "Modeemin binaari" },
        { ".pak", "PAK-arkisto" },
        { ".dgml", "Suunnattu graafimerkintä" },
        { ".smp", "Näytetiedosto" },
        { ".lxa", "Microsoft-leksikonääni" },
        { ".wwd", "Microsoft Works -avustaja" },
        { ".wsf", "Windows-skriptitiedosto" },
        { ".cw", "CardWorks-malli" },
        { ".phn", "Phun-fysiikkaskene" },
        { ".am", "Automake-tiedosto" },
        { ".fe", "Tiedoston salaus" },
        { ".mllr", "Maximum Likelihood Linear Regression" },
        { ".ngr", "NEOGEO ROM" },
        { ".sch", "Aikataulu/skeema" },
        { ".adlm", "Autodesk License Manager" },
        { ".adxm", "Hallinnollinen XML" },
        { ".nmnl", "Normalisoitu minimaalinen" },
        { ".propdesc", "Ominaisuuden kuvaus" },
        { ".nsl", "Nokia Sound Library" },
        { ".ntf", "National Transfer Format" },
        { ".ntp", "NTP-konfiguraatio" },
        { ".forms", "Windows Forms" },
        { ".runtime", "Runtime-manifesti" },
        { ".interop", "COM-interop-data" },
        { ".frm", "Visual Basic -lomake" },
        { ".bas", "Visual Basic -moduuli" },
        { ".dwb", "Drum Workshop -paketti" },
        { ".npmignore", "NPM-ohitussäännöt" },
        { ".rsrc", "macOS-resurssihaara" },
        { ".upd2date", "Up2Date-välimuistimerkki" },
        { ".Up2Date", "Up2Date-välimuistimerkki" },
        { ".jshintrc", "JSHint-konfiguraatio" },
        { ".lock", "Lukko/riippuvuuden kiinnitys" },
        { ".nix", "Nix-lauseke" },
        { ".hr1", "HR1-pelidata" },
        { ".hr2", "HR2-pelidata" },
        { ".hr3", "HR3-pelidata" },
        { ".hr4", "HR4-pelidata" },
        { ".hr5", "HR5-pelidata" },
        { ".hr6", "HR6-pelidata" },
        { ".hr7", "HR7-pelidata" },
        { ".hr8", "HR8-pelidata" },
        { ".hr9", "HR9-pelidata" },
        { ".bnf", "Backus-Naur -muodon kielioppi" },
        { ".clb", "COM+-katalogi" },
        { ".tlb", "Tyypinkirjasto" },
        { ".dic", "Sanakirja/leksikko" },
        { ".aux", "TeX-aputiedosto" },
        { ".ds", "DataStore/DS_Store" },
        { ".inc", "Include/lähdeinclude" },
        { ".cpx", "Koodisivun käännös" },
        { ".mdl", "Malli/moduulitiedosto" },
        { ".dls", "Ladattava äänipankki" },
        { ".cdf-ms", "ClickOnce-käyttöönoton manifesti" },
        { ".addin", "Visual Studio -laajennus" },
        { ".scp", "Windows-skriptikomponentti" },
        { ".wmz", "Pakattu Windows Media Player -teema" },
        { ".iec", "IEC-tietokanta" },
        { ".wsc", "Windows-skriptikomponentti" },
        { ".vrg", "Visual Studio -rekisteriskripti" },
        { ".prx", "Proxy Auto-Config" },
        { ".nuspec", "NuGet-määritys" },
        
        // ── Laajennetut arkistot / pakkaus --------------------------------
        { ".zipx", "ZIPX-arkisto" },
        { ".alz", "ALZip-arkisto" },
        { ".eeg", "EEG-pakattu" },
        { ".001", "Jaettu arkisto osa 1" },
        { ".arj", "ARJ-arkisto" },
        { ".bh",  "BlakHole-arkisto" },
        { ".lha", "LHA-arkisto" },
        { ".lzh", "LHA/LZH-arkisto" },
        { ".pma", "PMarc-arkisto" },
        { ".arc", "ARC-arkisto" },
        { ".ace", "ACE-arkisto" },
        { ".aes", "AES-salattu tiedosto" },
        { ".zpak", "ZPAQ-arkisto" },
        { ".zstd", "Zstandard-arkisto" },
        { ".br",  "Brotli-arkisto" },
        { ".pea", "PeaZip-arkisto" },
        { ".tbz", "Tar.BZ-arkisto" },
        { ".tbz2", "Tar.BZ2-arkisto" },
        { ".txz", "Tar.XZ-arkisto" },
        { ".tlz", "Tar.LZMA-arkisto" },
        { ".uu",  "UU-koodattu tiedosto" },
        { ".uue", "UU-koodattu tiedosto" },
        { ".xxe", "XX-koodattu tiedosto" },
        { ".z",   "Unix-pakkaus" },
        { ".tgz", "Tar.GZ-arkisto" },
        { ".isz", "ISO-pakattu kuva" },
        { ".udf", "Universal Disk Format" },
        { ".i00", "DVD Decrypter jaettu kuva osa 1" }
    }
},
    {
    "pl", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
    {
        // ── Microsoft / Office ---------------------------------------------
        { ".docx", "Dokument Word" },  { ".doc", "Word 97-2003" },
        { ".xlsx", "Skoroszyt Excel" }, { ".xls", "Excel 97-2003" },
        { ".pptx", "PowerPoint" },     { ".ppt", "PowerPoint 97-2003" },
        { ".vsdx", "Rysunek Visio" },  { ".pub", "Dokument Publisher" },
        { ".one",  "Notatnik OneNote" },
        { ".ost", "Outlook offline" }, { ".pst", "Plik osobisty Outlook" },
        { ".msg", "Wiadomość Outlook" }, { ".eml", "Wiadomość e-mail" },

        // ── Web / Mark-up ---------------------------------------------------
        { ".html", "Dokument HTML" },  { ".htm", "Dokument HTML" },
        { ".css",  "Arkusz stylów CSS" }, { ".scss", "Sass (SCSS)" },
        { ".sass", "Sass (wcięty)" }, { ".less", "Styl Less" },
        { ".js",   "JavaScript" },      { ".jsx", "React JSX" },
        { ".ts",   "TypeScript" },      { ".tsx", "React TSX" },
        { ".json", "Dane JSON" },       { ".xml", "Dokument XML" },
        { ".yml",  "Konfiguracja YAML" },

        // ── Microsoft / .NET ----------------------------------------------
        { ".cs", "Kod źródłowy C#" },         { ".csx", "Skrypt C#" },
        { ".fs", "Kod źródłowy F#" },         { ".vb", "Kod źródłowy VB.NET" },
        { ".il", "Asembler IL" },       { ".resx", "Zasoby XML" },
        { ".xaml", "Znacznik XAML" },    { ".sln", "Rozwiązanie Visual Studio" },
        { ".vbproj", "Projekt VB" },
        { ".vcxproj", "Projekt C++" },  { ".props", "Właściwości MSBuild" },
        { ".targets", "Cele MSBuild" },

        // ── C / C++ --------------------------------------------------------
        { ".cpp", "Kod źródłowy C++" },       { ".cc", "Kod źródłowy C++" },
        { ".cxx", "Kod źródłowy C++" },       { ".c", "Kod źródłowy C" },
        { ".hpp", "Nagłówek C++" },       { ".h", "Nagłówek C/C++" },
        { ".inl", "Inline C++" },       { ".idl", "Definicja interfejsu" },
        { ".rc", "Skrypt zasobów" },   { ".manifest", "Manifest aplikacji" },

        // ── Java / JVM ------------------------------------------------------
        { ".java", "Kod źródłowy Java" },     { ".class", "Klasa Java" },
        { ".jar", "Archiwum Java" },     { ".war", "Archiwum web Java" },
        { ".ear", "Archiwum Enterprise" }, { ".scala", "Kod źródłowy Scala" },
        { ".groovy", "Kod źródłowy Groovy" }, { ".clj", "Kod źródłowy Clojure" },

        // ── Python ----------------------------------------------------------
        { ".py", "Skrypt Python" },     { ".pyw", "Python (bez konsoli)" },
        { ".pyi", "Plik szkieletowy Python" },      { ".pyc", "Bajtkod Python" },
        { ".pyo", "Python zoptymalizowany" }, { ".pyd", "Rozszerzenie Python" },
        { ".whl", "Python Wheel" },     { ".ipynb", "Notatnik Jupyter" },

        // ── Mobile ----------------------------------------------------------
        { ".swift", "Kod źródłowy Swift" },   { ".dart", "Kod źródłowy Dart" },
        { ".kt", "Kod źródłowy Kotlin" },     { ".kts", "Skrypt Kotlin" },
        { ".gradle", "Skrypt Gradle" }, { ".aar", "Archiwum Android" },
        { ".apk", "Pakiet Android" },  { ".aab", "Pakiet aplikacji Android" },
        { ".ipa", "Pakiet iOS" },

        // ── Game Dev / 3D ---------------------------------------------------
        { ".unity", "Scena Unity" },    { ".prefab", "Prefab Unity" },
        { ".uasset", "Zasób Unreal" },  { ".umap", "Mapa Unreal" },
        { ".fbx", "Model 3D FBX" },     { ".obj", "Wavefront 3D" },
        { ".gltf", "Model 3D glTF" },   { ".blend", "Projekt Blender" },
        { ".dae", "Model Collada" },    { ".3ds", "Model 3D Studio" },
        { ".stl", "Model STL" },        { ".dxf", "AutoCAD DXF" },

        // ── Creative / Adobe ----------------------------------------------
        { ".psd", "Dokument Photoshop" }, { ".psb", "Photoshop duży" },
        { ".ai",  "Sztuka Illustrator" },   { ".indd", "Dokument InDesign" },
        { ".prproj", "Projekt Premiere" }, { ".aep", "After Effects" },
        { ".xd",  "Prototyp Adobe XD" }, { ".sketch", "Dokument Sketch" },
        { ".fig", "Dokument Figma" },

        // ── Audio -----------------------------------------------------------
        { ".mp3", "Audio MP3" },        { ".wav", "Audio Wave" },
        { ".flac", "Audio FLAC" },      { ".aac", "Audio AAC" },
        { ".ogg", "OGG Vorbis" },       { ".wma", "Audio Windows" },
        { ".opus", "Audio Opus" },      { ".m4a", "Audio MPEG-4" },
        { ".midi", "Sekwencja MIDI" },   { ".aiff", "Audio AIFF" },

        // ── Video -----------------------------------------------------------
        { ".mp4", "Wideo MP4" },        { ".mkv", "Wideo Matroska" },
        { ".avi", "Wideo AVI" },        { ".mov", "Wideo QuickTime" },
        { ".wmv", "Wideo Windows" },    { ".webm", "Wideo WebM" },
        { ".flv", "Wideo Flash" },      { ".m4v", "Wideo M4V" },
        { ".m3u8", "Lista odtwarzania HLS" },
        { ".ogv", "Wideo OGG" },        { ".3gp", "Wideo 3GP" },

        // ── Images ----------------------------------------------------------
        { ".jpg", "Obraz JPEG" },       { ".jpeg", "Obraz JPEG" },
        { ".png", "Obraz PNG" },        { ".gif", "Obraz GIF" },
        { ".bmp", "Obraz BMP" },        { ".tiff", "Obraz TIFF" },
        { ".webp", "Obraz WebP" },      { ".ico", "Ikona" },
        { ".svg", "Wektor SVG" },       { ".eps", "Encapsulated PostScript" },
        { ".raw", "Obraz RAW" },
        { ".cr2", "Canon RAW" },        { ".nef", "Nikon RAW" },
        { ".arw", "Sony RAW" },         { ".dng", "Cyfrowy negatyw" },

        // ── Archives --------------------------------------------------------
        { ".zip", "Archiwum ZIP" },      { ".rar", "Archiwum RAR" },
        { ".7z",  "Archiwum 7-Zip" },    { ".tar", "Archiwum Tar" },
        { ".gz",  "Archiwum GZip" },     { ".bz2", "Archiwum BZip2" },
        { ".xz",  "Archiwum XZ" },       { ".zst", "Archiwum Zstd" },
        { ".lz4", "Archiwum LZ4" },      { ".cab", "Archiwum Cabinet" },
        { ".iso", "Obraz dysku" },       { ".dmg", "Obraz dysku macOS" },
        { ".img", "Surovy obraz dysku" },   { ".vhd", "Wirtualny dysk twardy" },
        { ".vhdx","Dysk Hyper-V" },     { ".wim", "Obraz Windows" },

        // ── Database --------------------------------------------------------
        { ".sql", "Skrypt SQL" },       { ".db",  "Baza danych" },
        { ".sqlite", "Baza SQLite" },     { ".mdb", "Baza Access" },
        { ".accdb", "Baza danych Access" }, { ".mdf", "Baza SQL Server" },
        { ".ndf", "SQL Server NDF" },   { ".ldf", "Log SQL Server" },
        { ".bak", "Kopia zapasowa SQL" },       { ".dmp", "Zrzut bazy danych" },

        // ── Scientific / Math ---------------------------------------------
        { ".mat", "Dane MATLAB" },      { ".m", "Skrypt MATLAB" },
        { ".r", "Skrypt R" },           { ".rdata", "Zbiór danych R" },
        { ".csv", "Dane CSV" },         { ".tsv", "Dane TSV" },
        { ".sas", "Program SAS" },      { ".sav", "Zbiór danych SPSS" },
        { ".por", "SPSS przenośny" },

        // ── Crypto / Blockchain -------------------------------------------
        { ".gpg", "Zaszyfrowany GPG" },    { ".pgp", "Zaszyfrowany PGP" },
        { ".asc", "Podpis PGP" },    { ".sig", "Podpis odłączony" },
        { ".wallet", "Portfel kryptowalut" }, { ".key", "Plik klucza" },
        { ".pem", "Certyfikat PEM" },  { ".crt", "Certyfikat" },
        { ".p12", "Magazyn kluczy PKCS#12" }, { ".pfx", "Magazyn kluczy Windows" },

        // ── Emulation / ROMs ----------------------------------------------
        { ".gba", "ROM Game Boy" },     { ".nds", "ROM Nintendo DS" },
        { ".wbfs", "Kopia zapasowa Wii" },
        { ".cia", "Instalator 3DS" },    { ".nsp", "Pakiet Switch" },
        { ".xci", "Kartridż Switch" }, { ".wad", "Kanał Wii" },

        // ── Misc ------------------------------------------------------------
        { ".exe", "Plik wykonywalny Windows" }, { ".msi", "Instalator Windows" },
        { ".com", "Polecenie DOS" },      { ".bat", "Skrypt wsadowy" },
        { ".ps1", "Skrypt PowerShell" }, { ".cmd", "Skrypt poleceń" },
        { ".reg", "Wpis rejestru" },
        { ".url", "Skrót internetowy" }, { ".torrent", "BitTorrent" },
        { ".log", "Plik dziennika" },         { ".ini", "Konfiguracja INI" },
        { ".cfg", "Plik konfiguracyjny" },      { ".conf", "Konfiguracja" },
        { ".yaml", "Konfiguracja YAML" },     { ".toml", "Konfiguracja TOML" },
        { ".env", "Plik środowiskowy" }, { ".gitignore", "Ignorowanie Git" },
        { ".dockerfile", "Dockerfile" }, { ".md", "Markdown" },
        { ".tex", "Kod źródłowy LaTeX" },     { ".bib", "Biblioteka BibTeX" },

        // ── Additional / Misc ---------------------------------------------
        { ".dwp", "Element sieciowy SharePoint" },
        { ".fxp", "Skompilowany FoxPro" },
        { ".asd", "Autozapis Word" },
        { ".fsc", "Pamięć podręczna wyszukiwania Windows" },
        { ".mid", "Sekwencja MIDI" },
        { ".fst", "Stan FL Studio" },
        { ".txt", "Plik tekstowy" },
        { ".pdb", "Baza danych programu" },
        { ".dll", "Biblioteka dołączana dynamicznie" },
        { ".resources", "Zasoby .NET" },
        { ".cache", "Plik pamięci podręcznej" },
        { ".settings", "Ustawienia XML" },
        { ".csproj", "Projekt C#" },
        { ".editorconfig", "EditorConfig" },
        { ".kdbx", "Plik KeePass" },
        { ".nupkg", "Pakiet NuGet" },
        { ".p7s", "Podpis PKCS #7" },
        { ".map", "Plik mapy źródłowej" },
        { ".flow", "Deklaracja typu Flow" },
        { ".mjs", "Moduł ES (JavaScript)" },
        { ".cjs", "CommonJS (JavaScript)" },
        { ".cts", "TypeScript CommonJS" },
        { ".mts", "Moduł ES TypeScript" },
        { ".jst", "Szablon JavaScript" },
        { ".markdown", "Dokument Markdown" },
        { ".applescript", "AppleScript" },
        { ".ch1", "Dane postaci Nintendo" },
        { ".vital", "Preset syntezatora Vital" },
        { ".ds_store", "macOS Desktop Services Store" },
        { ".zpw", "Pakiet ZippedWeb" },
        { ".flp", "Projekt FL Studio" },
        { ".flstheme", "Motyw FL Studio" },
        { ".nmsv", "Preset Native Instruments NMSV" },
        { ".wav.256", "Wariant WAV 256-bitowy" },
        { ".pdf", "Przenośny format dokumentu" },
        { ".config", "Konfiguracja XML/JSON" },
        { ".user", "Ustawienia użytkownika" },
        { ".uptodate", "Flaga pamięci podręcznej Up2Date" },
        { ".rtf", "Format tekstu sformatowanego" },
        { ".buildwithskipanalyzers", "Flaga MSBuild Skip-Analyzers" },
        { ".node", "Moduł binarny Node.js" },
        { ".snap", "Pakiet Snapcraft" },
        { ".def", "Plik definicji modułu" },
        { ".bsd", "Licencja/konfiguracja BSD" },
        { ".babelrc", "Konfiguracja Babel" },
        { ".prettierrc", "Konfiguracja Prettier" },
        { ".npignore", "Reguły ignorowania NuGet" },
        { ".php", "Skrypt PHP" },
        { ".eslintignore", "Ignorowanie ESLint" },
        { ".lic", "Plik licencji" },
        { ".nib", "NeXT Interface Builder" },
        { ".plist", "Lista właściwości macOS" },
        { ".mui", "Wielojęzyczny interfejs użytkownika" },
        { ".efi", "Oprogramowanie firmware UEFI" },
        { ".cip", "Pakiet Chrome CIP" },
        { ".bin", "Dane binarne" },
        { ".sdi", "Obraz wdrażania systemu" },
        { ".ttf", "Czcionka TrueType" },
        { ".cur", "Kursor Windows" },
        { ".ani", "Animowany kursor" },
        { ".diagpkg", "Pakiet diagnostyczny Windows" },
        { ".dat", "Ogólny plik danych" },
        { ".diffbase", "Migawka bazowa różnic" },
        { ".lm", "Model języka" },
        { ".lm1", "Wariant modelu języka 1" },
        { ".lm2", "Wariant modelu języka 2" },
        { ".lm3", "Wariant modelu języka 3" },
        { ".lex", "Dane leksykonu" },
        { ".res", "Zasób Windows" },
        { ".nlt", "Dane NetLink Trust" },
        { ".nls", "Obsługa języków narodowych" },
        { ".chm", "Skompilowana pomoc HTML" },
        { ".fil", "Kontener listy plików" },
        { ".msixbundle", "Pakiet MSIX" },
        { ".p7x", "PKCS #7 rozszerzony" },
        { ".pri", "Indeks zasobów pakietu" },
        { ".etl", "Dziennik śledzenia zdarzeń" },
        { ".nlp", "Dane procesora języka naturalnego" },
        { ".compositefont", "Czcionka złożona WPF" },
        { ".aspx", "Strona ASP.NET" },
        { ".ascx", "Kontrolka użytkownika ASP.NET" },
        { ".master", "Strona wzorcowa ASP.NET" },
        { ".browser", "Definicja przeglądarki" },
        { ".lnk", "Skrót Windows" },
        { ".default", "Ustawienia domyślne" },
        { ".comments", "Metadane komentarzy" },
        { ".rsp", "Plik odpowiedzi" },
        { ".tld", "Deskryptor biblioteki tagów" },
        { ".win32manifest", "Manifest Win32" },
        { ".man", "Strona podręcznika" },
        { ".mof", "Zarządzany format obiektu" },
        { ".uninstall", "Skrypt dezinstalacji" },
        { ".tasks", "Zadania MSBuild" },
        { ".overridetasks", "Zadania zastępujące MSBuild" },
        { ".orp", "Dane ORP" },
        { ".adml", "Język szablonu administracyjnego" },
        { ".ppkg", "Pakiet inicjowania" },
        { ".mstheme", "Motyw Microsoft" },
        { ".msstyles", "Styl Windows" },
        { ".mum", "Moduł aktualizacji manifestu" },
        { ".cat", "Katalog zabezpieczeń" },
        { ".jfm", "Metadane bazy danych Jet" },
        { ".rs", "Kod źródłowy Rust" },
        { ".jll", "Bitcode LLVM Julia" },
        { ".sys", "Sterownik systemowy Windows" },
        { ".p7b", "Łańcuch certyfikatów PKCS #7" },
        { ".wmfw", "Windows Media Framework" },
        { ".inf_loc", "Lokalizacja INF" },
        { ".winmd", "Metadane Windows" },
        { ".xbf", "Format binarny XAML" },
        { ".license", "Token licencji" },
        { ".fpie", "Plik wykonywalny pośredni FPGA" },
        { ".cso", "Skompilowany obiekt shadera" },
        { ".sccd", "Dane konfiguracyjne System Center" },
        { ".bundle", "Pakiet aplikacji" },
        { ".schema", "Schemat JSON/XML" },
        { ".csg", "Konstruktywna geometria bryły" },
        { ".mun", "Sieć wielojednostkowa" },
        { ".uce", "Uniwersalna szachowa maszyna" },
        { ".cpl", "Aplet Panelu sterowania" },
        { ".msc", "Microsoft Management Console" },
        { ".ax", "Filtr DirectShow" },
        { ".table", "Tabela przeglądowa/haszująca" },
        { ".tsp", "Pakiet/skrypt TSP" },
        { ".tbl", "Dane tabeli" },
        { ".drv", "Sterownik urządzenia" },
        { ".sep", "Plik separatora" },
        { ".ocx", "Kontrolka ActiveX" },
        { ".msp", "Łata instalatora Windows" },
        { ".scr", "Wygaszacz ekranu Windows" },
        { ".vbs", "VBScript" },
        { ".grxml", "Gramatyka XML" },
        { ".xrm-ms", "Licencja Microsoft" },
        { ".rll", "Biblioteka łącza zasobów" },
        { ".mfl", "Plik języka MFL" },
        { ".cdxml", "Definicja polecenia cmdlet XML" },
        { ".dtd", "Definicja typu dokumentu" },
        { ".psm1", "Skrypt modułu PowerShell" },
        { ".ps1xml", "Dane formatowania PowerShell" },
        { ".wprp", "Profil rejestratora wydajności Windows" },
        { ".xsl", "Arkusz stylów XSLT" },
        { ".gyp", "Generate Your Projects" },
        { ".rld", "Dane ReLoad" },
        { ".job", "Zadanie Windows" },
        { ".gypi", "Dołącznik GYP" },
        { ".hlp", "Pomoc Windows" },
        { ".gdl", "Język opisu ogólnego" },
        { ".elf", "Format wykonywalny i linkowalny" },
        { ".ppd", "Opis drukarki PostScript" },
        { ".gpd", "Ogólny opis drukarki" },
        { ".mbn", "Binaria modemu" },
        { ".pak", "Archiwum PAK" },
        { ".dgml", "Znacznik grafu skierowanego" },
        { ".smp", "Plik przykładowy" },
        { ".lxa", "Audio leksykonu Microsoft" },
        { ".wwd", "Kreator Microsoft Works" },
        { ".wsf", "Plik skryptu Windows" },
        { ".cw", "Szablon CardWorks" },
        { ".phn", "Scena fizyki Phun" },
        { ".am", "Plik Automake" },
        { ".fe", "Szyfrator plików" },
        { ".mllr", "Maximum Likelihood Linear Regression" },
        { ".ngr", "ROM NEOGEO" },
        { ".sch", "Harmonogram/schemat" },
        { ".adlm", "Menedżer licencji Autodesk" },
        { ".adxm", "XML administracyjny" },
        { ".nmnl", "Znormalizowany minimalny" },
        { ".propdesc", "Opis właściwości" },
        { ".nsl", "Biblioteka dźwięków Nokia" },
        { ".ntf", "National Transfer Format" },
        { ".ntp", "Konfiguracja NTP" },
        { ".forms", "Windows Forms" },
        { ".runtime", "Manifest środowiska uruchomieniowego" },
        { ".interop", "Dane COM Interop" },
        { ".frm", "Formularz Visual Basic" },
        { ".bas", "Moduł Visual Basic" },
        { ".dwb", "Pakiet Drum Workshop" },
        { ".npmignore", "Reguły ignorowania NPM" },
        { ".rsrc", "Widelec zasobów macOS" },
        { ".upd2date", "Flaga pamięci podręcznej Up2Date" },
        { ".Up2Date", "Flaga pamięci podręcznej Up2Date" },
        { ".jshintrc", "Konfiguracja JSHint" },
        { ".lock", "Blokada/przypisanie zależności" },
        { ".nix", "Wyrażenie Nix" },
        { ".hr1", "Dane gry HR1" },
        { ".hr2", "Dane gry HR2" },
        { ".hr3", "Dane gry HR3" },
        { ".hr4", "Dane gry HR4" },
        { ".hr5", "Dane gry HR5" },
        { ".hr6", "Dane gry HR6" },
        { ".hr7", "Dane gry HR7" },
        { ".hr8", "Dane gry HR8" },
        { ".hr9", "Dane gry HR9" },
        { ".bnf", "Gramatyka formy Backus-Naur" },
        { ".clb", "Katalog COM+" },
        { ".tlb", "Biblioteka typów" },
        { ".dic", "Słownik/leksykon" },
        { ".aux", "Plik pomocniczy TeX" },
        { ".ds", "DataStore/DS_Store" },
        { ".inc", "Dołącznik źródłowy" },
        { ".cpx", "Tłumaczenie strony kodowej" },
        { ".mdl", "Plik modelu/modułu" },
        { ".dls", "Bank dźwięków do pobrania" },
        { ".cdf-ms", "Manifest wdrożenia ClickOnce" },
        { ".addin", "Dodatek Visual Studio" },
        { ".scp", "Komponent skryptu Windows" },
        { ".wmz", "Skórka Windows Media Player skompresowana" },
        { ".iec", "Baza danych IEC" },
        { ".wsc", "Komponent skryptu Windows" },
        { ".vrg", "Skrypt rejestru Visual Studio" },
        { ".prx", "Proxy Auto-Config" },
        { ".nuspec", "Specyfikacja NuGet" },
        
        // ── Extended Archive / Compression --------------------------------
        { ".zipx", "Archiwum ZIPX" },
        { ".alz", "Archiwum ALZip" },
        { ".eeg", "Skompresowany EEG" },
        { ".001", "Podzielone archiwum część 1" },
        { ".arj", "Archiwum ARJ" },
        { ".bh",  "Archiwum BlakHole" },
        { ".lha", "Archiwum LHA" },
        { ".lzh", "Archiwum LHA/LZH" },
        { ".pma", "Archiwum PMarc" },
        { ".arc", "Archiwum ARC" },
        { ".ace", "Archiwum ACE" },
        { ".aes", "Plik zaszyfrowany AES" },
        { ".zpak", "Archiwum ZPAQ" },
        { ".zstd", "Archiwum Zstandard" },
        { ".br",  "Archiwum Brotli" },
        { ".pea", "Archiwum PeaZip" },
        { ".tbz", "Archiwum Tar.BZ" },
        { ".tbz2", "Archiwum Tar.BZ2" },
        { ".txz", "Archiwum Tar.XZ" },
        { ".tlz", "Archiwum Tar.LZMA" },
        { ".uu",  "Plik zakodowany UU" },
        { ".uue", "Plik zakodowany UU" },
        { ".xxe", "Plik zakodowany XX" },
        { ".z",   "Kompresja Unix" },
        { ".tgz", "Archiwum Tar.GZ" },
        { ".isz", "Obraz ISO skompresowany" },
        { ".udf", "Uniwersalny format dysku" },
        { ".i00", "Obraz podzielony DVD Decrypter część 1" }
    }
},
    {
    "cs", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
    {
        // ── Microsoft / Office ---------------------------------------------
        { ".docx", "Dokument Word" }, { ".doc", "Word 97-2003" },
        { ".xlsx", "Sešit Excel" }, { ".xls", "Excel 97-2003" },
        { ".pptx", "Prezentace PowerPoint" }, { ".ppt", "PowerPoint 97-2003" },
        { ".vsdx", "Kresba Visio" }, { ".pub", "Dokument Publisher" },
        { ".one", "Poznámkový blok OneNote" },
        { ".ost", "Offline data Outlook" }, { ".pst", "Osobní soubory Outlook" },
        { ".msg", "Zpráva Outlook" }, { ".eml", "E-mailová zpráva" },

        // ── Web / Mark-up ---------------------------------------------------
        { ".html", "HTML dokument" }, { ".htm", "HTML dokument" },
        { ".css", "CSS styl" }, { ".scss", "Sass (SCSS)" },
        { ".sass", "Sass (odsazený)" }, { ".less", "Less styl" },
        { ".js", "JavaScript" }, { ".jsx", "React JSX" },
        { ".ts", "TypeScript" }, { ".tsx", "React TSX" },
        { ".json", "JSON data" }, { ".xml", "XML dokument" },
        { ".yml", "YAML konfigurace" },

        // ── Microsoft / .NET ----------------------------------------------
        { ".cs", "Zdrojový kód C#" }, { ".csx", "Skript C#" },
        { ".fs", "Zdrojový kód F#" }, { ".vb", "Zdrojový kód VB.NET" },
        { ".il", "IL assembler" }, { ".resx", "XML zdrojů" },
        { ".xaml", "XAML značky" }, { ".sln", "Řešení Visual Studio" },
        { ".vbproj", "VB projekt" },
        { ".vcxproj", "C++ projekt" }, { ".props", "Vlastnosti MSBuild" },
        { ".targets", "Cíle MSBuild" },

        // ── C / C++ --------------------------------------------------------
        { ".cpp", "Zdrojový kód C++" }, { ".cc", "Zdrojový kód C++" },
        { ".cxx", "Zdrojový kód C++" }, { ".c", "Zdrojový kód C" },
        { ".hpp", "Hlavička C++" }, { ".h", "Hlavička C/C++" },
        { ".inl", "Inline C++" }, { ".idl", "Definice rozhraní" },
        { ".rc", "Skript zdrojů" }, { ".manifest", "Manifest aplikace" },

        // ── Java / JVM ------------------------------------------------------
        { ".java", "Zdrojový kód Java" }, { ".class", "Třída Java" },
        { ".jar", "Archiv Java" }, { ".war", "Webový archiv Java" },
        { ".ear", "Enterprise archiv" }, { ".scala", "Zdrojový kód Scala" },
        { ".groovy", "Zdrojový kód Groovy" }, { ".clj", "Zdrojový kód Clojure" },

        // ── Python ----------------------------------------------------------
        { ".py", "Skript Python" }, { ".pyw", "Python (bez konzole)" },
        { ".pyi", "Zástupný soubor Python" }, { ".pyc", "Bytecode Python" },
        { ".pyo", "Optimalizovaný Python" }, { ".pyd", "Rozšíření Python" },
        { ".whl", "Python Wheel" }, { ".ipynb", "Jupyter Notebook" },

        // ── Mobile ----------------------------------------------------------
        { ".swift", "Zdrojový kód Swift" }, { ".dart", "Zdrojový kód Dart" },
        { ".kt", "Zdrojový kód Kotlin" }, { ".kts", "Skript Kotlin" },
        { ".gradle", "Skript Gradle" }, { ".aar", "Android archiv" },
        { ".apk", "Balíček Android" }, { ".aab", "Sada aplikací Android" },
        { ".ipa", "Balíček iOS" },

        // ── Game Dev / 3D ---------------------------------------------------
        { ".unity", "Scéna Unity" }, { ".prefab", "Prefab Unity" },
        { ".uasset", "Asset Unreal" }, { ".umap", "Mapa Unreal" },
        { ".fbx", "3D model FBX" }, { ".obj", "3D model Wavefront" },
        { ".gltf", "3D model glTF" }, { ".blend", "Projekt Blender" },
        { ".dae", "Model Collada" }, { ".3ds", "Model 3D Studio" },
        { ".stl", "Model STL" }, { ".dxf", "AutoCAD DXF" },

        // ── Creative / Adobe ----------------------------------------------
        { ".psd", "Dokument Photoshop" }, { ".psb", "Velký Photoshop" },
        { ".ai", "Ilustrace Illustrator" }, { ".indd", "Dokument InDesign" },
        { ".prproj", "Projekt Premiere" }, { ".aep", "After Effects" },
        { ".xd", "Prototyp Adobe XD" }, { ".sketch", "Dokument Sketch" },
        { ".fig", "Dokument Figma" },

        // ── Audio -----------------------------------------------------------
        { ".mp3", "Audio MP3" }, { ".wav", "Audio Wave" },
        { ".flac", "Audio FLAC" }, { ".aac", "Audio AAC" },
        { ".ogg", "OGG Vorbis" }, { ".wma", "Audio Windows" },
        { ".opus", "Audio Opus" }, { ".m4a", "Audio MPEG-4" },
        { ".midi", "Sekvence MIDI" }, { ".aiff", "Audio AIFF" },

        // ── Video -----------------------------------------------------------
        { ".mp4", "Video MP4" }, { ".mkv", "Video Matroska" },
        { ".avi", "Video AVI" }, { ".mov", "Video QuickTime" },
        { ".wmv", "Video Windows" }, { ".webm", "Video WebM" },
        { ".flv", "Video Flash" }, { ".m4v", "Video M4V" },
        { ".m3u8", "Seznam HLS" },
        { ".ogv", "Video OGG" }, { ".3gp", "Video 3GP" },

        // ── Images ----------------------------------------------------------
        { ".jpg", "Obrázek JPEG" }, { ".jpeg", "Obrázek JPEG" },
        { ".png", "Obrázek PNG" }, { ".gif", "Obrázek GIF" },
        { ".bmp", "Obrázek BMP" }, { ".tiff", "Obrázek TIFF" },
        { ".webp", "Obrázek WebP" }, { ".ico", "Ikona" },
        { ".svg", "Vektor SVG" }, { ".eps", "Encapsulated PostScript" },
        { ".raw", "RAW obrázek" },
        { ".cr2", "Canon RAW" }, { ".nef", "Nikon RAW" },
        { ".arw", "Sony RAW" }, { ".dng", "Digital Negative" },

        // ── Archives --------------------------------------------------------
        { ".zip", "ZIP archiv" }, { ".rar", "RAR archiv" },
        { ".7z", "7-Zip archiv" }, { ".tar", "Tar archiv" },
        { ".gz", "GZip archiv" }, { ".bz2", "BZip2 archiv" },
        { ".xz", "XZ archiv" }, { ".zst", "Zstd archiv" },
        { ".lz4", "LZ4 archiv" }, { ".cab", "Cabinet archiv" },
        { ".iso", "Image disku" }, { ".dmg", "Diskový image macOS" },
        { ".img", "Raw disk image" }, { ".vhd", "Virtuální pevný disk" },
        { ".vhdx", "Hyper-V disk" }, { ".wim", "Windows image" },

        // ── Database --------------------------------------------------------
        { ".sql", "SQL skript" }, { ".db", "Databáze" },
        { ".sqlite", "SQLite DB" }, { ".mdb", "Access DB" },
        { ".accdb", "Access databáze" }, { ".mdf", "SQL Server DB" },
        { ".ndf", "SQL Server NDF" }, { ".ldf", "Log SQL Server" },
        { ".bak", "Záloha SQL" }, { ".dmp", "Výpis databáze" },

        // ── Scientific / Math ---------------------------------------------
        { ".mat", "Data MATLAB" }, { ".m", "Skript MATLAB" },
        { ".r", "Skript R" }, { ".rdata", "Dataset R" },
        { ".csv", "Data CSV" }, { ".tsv", "Data TSV" },
        { ".sas", "Program SAS" }, { ".sav", "Dataset SPSS" },
        { ".por", "Přenosný SPSS" },

        // ── Crypto / Blockchain -------------------------------------------
        { ".gpg", "Šifrovaný GPG" }, { ".pgp", "Šifrovaný PGP" },
        { ".asc", "Podpis PGP" }, { ".sig", "Oddělený podpis" },
        { ".wallet", "Krypto peněženka" }, { ".key", "Soubor klíče" },
        { ".pem", "Certifikát PEM" }, { ".crt", "Certifikát" },
        { ".p12", "Úložiště klíčů PKCS#12" }, { ".pfx", "Úložiště klíčů Windows" },

        // ── Emulation / ROMs ----------------------------------------------
        { ".gba", "ROM Game Boy" }, { ".nds", "ROM Nintendo DS" },
        { ".wbfs", "Záloha Wii" },
        { ".cia", "Instalátor 3DS" }, { ".nsp", "Balíček Switch" },
        { ".xci", "Kazeta Switch" }, { ".wad", "Kanál Wii" },

        // ── Misc ------------------------------------------------------------
        { ".exe", "Spustitelný soubor Windows" }, { ".msi", "Instalátor Windows" },
        { ".com", "Příkaz DOS" }, { ".bat", "Dávkový soubor" },
        { ".ps1", "Skript PowerShell" }, { ".cmd", "Příkazový skript" },
        { ".reg", "Záznam registru" },
        { ".url", "Internetová zkratka" }, { ".torrent", "BitTorrent" },
        { ".log", "Log soubor" }, { ".ini", "INI konfigurace" },
        { ".cfg", "Konfigurační soubor" }, { ".conf", "Konfigurace" },
        { ".yaml", "YAML konfigurace" }, { ".toml", "TOML konfigurace" },
        { ".env", "Soubor prostředí" }, { ".gitignore", "Git ignore" },
        { ".dockerfile", "Dockerfile" }, { ".md", "Markdown" },
        { ".tex", "Zdrojový kód LaTeX" }, { ".bib", "Knihovna BibTeX" },

        // ── Additional / Misc ---------------------------------------------
        { ".dwp", "Webová část SharePoint" },
        { ".fxp", "Kompilovaný FoxPro" },
        { ".asd", "Automatické uložení Word" },
        { ".fsc", "Mezipaměť vyhledávání Windows" },
        { ".mid", "Sekvence MIDI" },
        { ".fst", "Stav FL Studio" },
        { ".txt", "Prostý textový soubor" },
        { ".pdb", "Programová databáze" },
        { ".dll", "Dynamická knihovna" },
        { ".resources", "Prostředky .NET" },
        { ".cache", "Soubor mezipaměti" },
        { ".settings", "Nastavení XML" },
        { ".csproj", "C# projekt" },
        { ".editorconfig", "EditorConfig" },
        { ".kdbx", "Soubor KeePass" },
        { ".nupkg", "Balíček NuGet" },
        { ".p7s", "Podpis PKCS #7" },
        { ".map", "Source-Map soubor" },
        { ".flow", "Deklarace typu Flow" },
        { ".mjs", "ES Module (JavaScript)" },
        { ".cjs", "CommonJS (JavaScript)" },
        { ".cts", "TypeScript CommonJS" },
        { ".mts", "TypeScript ES Module" },
        { ".jst", "Šablona JavaScript" },
        { ".markdown", "Dokument Markdown" },
        { ".applescript", "AppleScript" },
        { ".ch1", "Data postav Nintendo" },
        { ".vital", "Přednastavení syntezátoru Vital" },
        { ".ds_store", "Úložiště služeb macOS" },
        { ".zpw", "Balíček ZippedWeb" },
        { ".flp", "Projekt FL Studio" },
        { ".flstheme", "Téma FL Studio" },
        { ".nmsv", "Přednastavení Native Instruments NMSV" },
        { ".wav.256", "Varianta WAV 256-bit" },
        { ".pdf", "Portable Document Format" },
        { ".config", "Konfigurace XML/JSON" },
        { ".user", "Uživatelská nastavení" },
        { ".uptodate", "Příznak mezipaměti Up2Date" },
        { ".rtf", "Rich Text Format" },
        { ".buildwithskipanalyzers", "Příznak MSBuild Skip-Analyzers" },
        { ".node", "Binární modul Node.js" },
        { ".snap", "Balíček Snapcraft" },
        { ".def", "Soubor definice modulu" },
        { ".bsd", "Licence/Konfigurace BSD" },
        { ".babelrc", "Konfigurace Babel" },
        { ".prettierrc", "Konfigurace Prettier" },
        { ".npignore", "Pravidla ignorování NuGet" },
        { ".php", "Skript PHP" },
        { ".eslintignore", "ESLint ignore" },
        { ".lic", "Licenční soubor" },
        { ".nib", "NeXT Interface Builder" },
        { ".plist", "Seznam vlastností macOS" },
        { ".mui", "Vícejazyčné uživatelské rozhraní" },
        { ".efi", "Firmware UEFI" },
        { ".cip", "Balíček Chrome CIP" },
        { ".bin", "Binární data" },
        { ".sdi", "Image systémového nasazení" },
        { ".ttf", "TrueType font" },
        { ".cur", "Kurzor Windows" },
        { ".ani", "Animovaný kurzor" },
        { ".diagpkg", "Diagnostický balíček Windows" },
        { ".dat", "Obecný datový soubor" },
        { ".diffbase", "Snímek základny rozdílů" },
        { ".lm", "Jazykový model" },
        { ".lm1", "Varianta jazykového modelu 1" },
        { ".lm2", "Varianta jazykového modelu 2" },
        { ".lm3", "Varianta jazykového modelu 3" },
        { ".lex", "Data lexikonu" },
        { ".res", "Prostředek Windows" },
        { ".nlt", "Data důvěry NetLink" },
        { ".nls", "Podpora národních jazyků" },
        { ".chm", "Kompilovaná nápověda HTML" },
        { ".fil", "Kontejner seznamu souborů" },
        { ".msixbundle", "Balíček MSIX" },
        { ".p7x", "Rozšířený PKCS #7" },
        { ".pri", "Index prostředků balíčku" },
        { ".etl", "Log trasování událostí" },
        { ".nlp", "Data procesoru přirozeného jazyka" },
        { ".compositefont", "Kompozitní font WPF" },
        { ".aspx", "Stránka ASP.NET" },
        { ".ascx", "Uživatelský ovladač ASP.NET" },
        { ".master", "Hlavní stránka ASP.NET" },
        { ".browser", "Definice prohlížeče" },
        { ".lnk", "Zástupce Windows" },
        { ".default", "Výchozí nastavení" },
        { ".comments", "Metadata komentářů" },
        { ".rsp", "Response soubor" },
        { ".tld", "Deskriptor knihovny tagů" },
        { ".win32manifest", "Manifest Win32" },
        { ".man", "Manuálová stránka" },
        { ".mof", "Managed Object Format" },
        { ".uninstall", "Odinstalační skript" },
        { ".tasks", "Úlohy MSBuild" },
        { ".overridetasks", "Přepsané úlohy MSBuild" },
        { ".orp", "Data ORP" },
        { ".adml", "Jazyk administrativní šablony" },
        { ".ppkg", "Provisioning balíček" },
        { ".mstheme", "Téma Microsoft" },
        { ".msstyles", "Styl Windows" },
        { ".mum", "Modul aktualizace manifestu" },
        { ".cat", "Bezpečnostní katalog" },
        { ".jfm", "Metadata databáze Jet" },
        { ".rs", "Zdrojový kód Rust" },
        { ".jll", "Bitcode Julia LLVM" },
        { ".sys", "Systémový ovladač Windows" },
        { ".p7b", "Řetěz certifikátů PKCS #7" },
        { ".wmfw", "Windows Media Framework" },
        { ".inf_loc", "Lokalizace INF" },
        { ".winmd", "Metadata Windows" },
        { ".xbf", "Binární formát XAML" },
        { ".license", "Licenční token" },
        { ".fpie", "Středně pokročilý spustitelný soubor FPGA" },
        { ".cso", "Kompilovaný objekt shaderu" },
        { ".sccd", "Data konfigurace System Center" },
        { ".bundle", "Balíček aplikace" },
        { ".schema", "Schéma JSON/XML" },
        { ".csg", "Konstruktivní geometrie těles" },
        { ".mun", "Multi-Unit síť" },
        { ".uce", "Univerzální šachový engine" },
        { ".cpl", "Apleť ovládacího panelu" },
        { ".msc", "Konzola správy Microsoft" },
        { ".ax", "Filtr DirectShow" },
        { ".table", "Vyhledávací/hash tabulka" },
        { ".tsp", "Balíček/skript TSP" },
        { ".tbl", "Data tabulky" },
        { ".drv", "Ovladač zařízení" },
        { ".sep", "Soubor oddělovače" },
        { ".ocx", "Ovládací prvek ActiveX" },
        { ".msp", "Záplata instalátoru Windows" },
        { ".scr", "Spořič obrazovky Windows" },
        { ".vbs", "VBScript" },
        { ".grxml", "Gramatika XML" },
        { ".xrm-ms", "Licence Microsoft" },
        { ".rll", "Knihovna odkazů na prostředky" },
        { ".mfl", "Jazykový soubor MFL" },
        { ".cdxml", "Definice cmdletu XML" },
        { ".dtd", "Definice typu dokumentu" },
        { ".psm1", "Skript modulu PowerShell" },
        { ".ps1xml", "Data formátu PowerShell" },
        { ".wprp", "Profil Windows Performance Recorder" },
        { ".xsl", "Šablona XSLT" },
        { ".gyp", "Generate Your Projects" },
        { ".rld", "Data ReLoad" },
        { ".job", "Úloha úloh Windows" },
        { ".gypi", "GYP Include" },
        { ".hlp", "Nápověda Windows" },
        { ".gdl", "Generic Description Language" },
        { ".elf", "Executable and Linkable Format" },
        { ".ppd", "Popis tiskárny PostScript" },
        { ".gpd", "Generic Printer Description" },
        { ".mbn", "Modemový binární soubor" },
        { ".pak", "PAK archiv" },
        { ".dgml", "Directed Graph Markup" },
        { ".smp", "Vzorkový soubor" },
        { ".lxa", "Audio lexikonu Microsoft" },
        { ".wwd", "Průvodce Microsoft Works" },
        { ".wsf", "Skriptový soubor Windows" },
        { ".cw", "Šablona CardWorks" },
        { ".phn", "Fyzikální scéna Phun" },
        { ".am", "Soubor Automake" },
        { ".fe", "Šifrovač souborů" },
        { ".mllr", "Maximum Likelihood Linear Regression" },
        { ".ngr", "ROM NEOGEO" },
        { ".sch", "Rozvrh/Schéma" },
        { ".adlm", "Správce licencí Autodesk" },
        { ".adxm", "Administrativní XML" },
        { ".nmnl", "Normalizované minimální" },
        { ".propdesc", "Popis vlastnosti" },
        { ".nsl", "Zvuková knihovna Nokia" },
        { ".ntf", "Národní přenosový formát" },
        { ".ntp", "Konfigurace NTP" },
        { ".forms", "Windows Forms" },
        { ".runtime", "Manifest runtime" },
        { ".interop", "Data COM Interop" },
        { ".frm", "Formulář Visual Basic" },
        { ".bas", "Modul Visual Basic" },
        { ".dwb", "Balíček Drum Workshop" },
        { ".npmignore", "Pravidla ignorování NPM" },
        { ".rsrc", "Vidlice prostředků macOS" },
        { ".upd2date", "Příznak mezipaměti Up2Date" },
        { ".Up2Date", "Příznak mezipaměti Up2Date" },
        { ".jshintrc", "Konfigurace JSHint" },
        { ".lock", "Zámek/Pin závislosti" },
        { ".nix", "Výraz Nix" },
        { ".hr1", "Herní data HR1" },
        { ".hr2", "Herní data HR2" },
        { ".hr3", "Herní data HR3" },
        { ".hr4", "Herní data HR4" },
        { ".hr5", "Herní data HR5" },
        { ".hr6", "Herní data HR6" },
        { ".hr7", "Herní data HR7" },
        { ".hr8", "Herní data HR8" },
        { ".hr9", "Herní data HR9" },
        { ".bnf", "Gramatika Backus-Naur Form" },
        { ".clb", "Katalog COM+" },
        { ".tlb", "Knihovna typů" },
        { ".dic", "Slovník/Lexikon" },
        { ".aux", "Pomocný soubor TeX" },
        { ".ds", "Úložiště dat/DS_Store" },
        { ".inc", "Include/Zdrojový include" },
        { ".cpx", "Překlad kódové stránky" },
        { ".mdl", "Model/Modul souboru" },
        { ".dls", "Banky stahovatelných zvuků" },
        { ".cdf-ms", "Manifest nasazení ClickOnce" },
        { ".addin", "Doplněk Visual Studio" },
        { ".scp", "Komponenta skriptů Windows" },
        { ".wmz", "Komprimovaný skin Windows Media Player" },
        { ".iec", "Databáze IEC" },
        { ".wsc", "Komponenta skriptů Windows" },
        { ".vrg", "Skript registru Visual Studio" },
        { ".prx", "Automatická konfigurace proxy" },
        { ".nuspec", "Specifikace NuGet" },
        
        // ── Extended Archive / Compression --------------------------------
        { ".zipx", "Archiv ZIPX" },
        { ".alz", "Archiv ALZip" },
        { ".eeg", "Komprimovaný EEG" },
        { ".001", "Rozdělený archiv část 1" },
        { ".arj", "Archiv ARJ" },
        { ".bh", "Archiv BlakHole" },
        { ".lha", "Archiv LHA" },
        { ".lzh", "Archiv LHA/LZH" },
        { ".pma", "Archiv PMarc" },
        { ".arc", "Archiv ARC" },
        { ".ace", "Archiv ACE" },
        { ".aes", "Šifrovaný soubor AES" },
        { ".zpak", "Archiv ZPAQ" },
        { ".zstd", "Archiv Zstandard" },
        { ".br", "Archiv Brotli" },
        { ".pea", "Archiv PeaZip" },
        { ".tbz", "Archiv Tar.BZ" },
        { ".tbz2", "Archiv Tar.BZ2" },
        { ".txz", "Archiv Tar.XZ" },
        { ".tlz", "Archiv Tar.LZMA" },
        { ".uu", "UUEncoded soubor" },
        { ".uue", "UUEncoded soubor" },
        { ".xxe", "XXEncoded soubor" },
        { ".z", "Unix Compress" },
        { ".tgz", "Archiv Tar.GZ" },
        { ".isz", "ISO-Zipped image" },
        { ".udf", "Univerzální disk formát" },
        { ".i00", "Rozdělený image DVD Decrypter část 1" }
    }
},
    {
    "hu", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
    {
        // ── Microsoft / Office ---------------------------------------------
        { ".docx", "Word dokumentum" }, { ".doc", "Word 97-2003" },
        { ".xlsx", "Excel munkafüzet" }, { ".xls", "Excel 97-2003" },
        { ".pptx", "PowerPoint prezentáció" }, { ".ppt", "PowerPoint 97-2003" },
        { ".vsdx", "Visio rajz" }, { ".pub", "Publisher dokumentum" },
        { ".one", "OneNote jegyzetfüzet" },
        { ".ost", "Outlook offline" }, { ".pst", "Outlook személyes" },
        { ".msg", "Outlook üzenet" }, { ".eml", "E-mail üzenet" },

        // ── Web / Mark-up ---------------------------------------------------
        { ".html", "HTML dokumentum" }, { ".htm", "HTML dokumentum" },
        { ".css", "CSS stíluslap" }, { ".scss", "Sass (SCSS)" },
        { ".sass", "Sass (behúzott)" }, { ".less", "Less stílus" },
        { ".js", "JavaScript" }, { ".jsx", "React JSX" },
        { ".ts", "TypeScript" }, { ".tsx", "React TSX" },
        { ".json", "JSON adat" }, { ".xml", "XML dokumentum" },
        { ".yml", "YAML konfiguráció" },

        // ── Microsoft / .NET ----------------------------------------------
        { ".cs", "C# forráskód" }, { ".csx", "C# szkript" },
        { ".fs", "F# forráskód" }, { ".vb", "VB.NET forráskód" },
        { ".il", "IL assembly" }, { ".resx", "Erőforrás XML" },
        { ".xaml", "XAML jelölés" }, { ".sln", "Visual Studio megoldás" },
        { ".vbproj", "VB projekt" },
        { ".vcxproj", "C++ projekt" }, { ".props", "MSBuild tulajdonságok" },
        { ".targets", "MSBuild célok" },

        // ── C / C++ --------------------------------------------------------
        { ".cpp", "C++ forráskód" }, { ".cc", "C++ forráskód" },
        { ".cxx", "C++ forráskód" }, { ".c", "C forráskód" },
        { ".hpp", "C++ fejléc" }, { ".h", "C/C++ fejléc" },
        { ".inl", "Inline C++" }, { ".idl", "Interfész definíció" },
        { ".rc", "Erőforrás szkript" }, { ".manifest", "Alkalmazás jegyzék" },

        // ── Java / JVM ------------------------------------------------------
        { ".java", "Java forráskód" }, { ".class", "Java osztály" },
        { ".jar", "Java archívum" }, { ".war", "Java web archívum" },
        { ".ear", "Enterprise archívum" }, { ".scala", "Scala forráskód" },
        { ".groovy", "Groovy forráskód" }, { ".clj", "Clojure forráskód" },

        // ── Python ----------------------------------------------------------
        { ".py", "Python szkript" }, { ".pyw", "Python (konzol nélkül)" },
        { ".pyi", "Python stub" }, { ".pyc", "Python bytecode" },
        { ".pyo", "Python optimalizált" }, { ".pyd", "Python kiterjesztés" },
        { ".whl", "Python Wheel" }, { ".ipynb", "Jupyter notebook" },

        // ── Mobile ----------------------------------------------------------
        { ".swift", "Swift forráskód" }, { ".dart", "Dart forráskód" },
        { ".kt", "Kotlin forráskód" }, { ".kts", "Kotlin szkript" },
        { ".gradle", "Gradle szkript" }, { ".aar", "Android archívum" },
        { ".apk", "Android csomag" }, { ".aab", "Android alkalmazás csomag" },
        { ".ipa", "iOS csomag" },

        // ── Game Dev / 3D ---------------------------------------------------
        { ".unity", "Unity jelenet" }, { ".prefab", "Unity prefab" },
        { ".uasset", "Unreal asset" }, { ".umap", "Unreal térkép" },
        { ".fbx", "FBX 3D modell" }, { ".obj", "Wavefront 3D" },
        { ".gltf", "glTF 3D modell" }, { ".blend", "Blender projekt" },
        { ".dae", "Collada modell" }, { ".3ds", "3D Studio modell" },
        { ".stl", "STL modell" }, { ".dxf", "AutoCAD DXF" },

        // ── Creative / Adobe ----------------------------------------------
        { ".psd", "Photoshop dokumentum" }, { ".psb", "Photoshop nagy" },
        { ".ai", "Illustrator művészet" }, { ".indd", "InDesign dokumentum" },
        { ".prproj", "Premiere projekt" }, { ".aep", "After Effects" },
        { ".xd", "Adobe XD prototípus" }, { ".sketch", "Sketch dokumentum" },
        { ".fig", "Figma dokumentum" },

        // ── Audio -----------------------------------------------------------
        { ".mp3", "MP3 audio" }, { ".wav", "Wave audio" },
        { ".flac", "FLAC audio" }, { ".aac", "AAC audio" },
        { ".ogg", "OGG Vorbis" }, { ".wma", "Windows audio" },
        { ".opus", "Opus audio" }, { ".m4a", "MPEG-4 audio" },
        { ".midi", "MIDI szekvencia" }, { ".aiff", "AIFF audio" },

        // ── Video -----------------------------------------------------------
        { ".mp4", "MP4 videó" }, { ".mkv", "Matroska videó" },
        { ".avi", "AVI videó" }, { ".mov", "QuickTime videó" },
        { ".wmv", "Windows videó" }, { ".webm", "WebM videó" },
        { ".flv", "Flash videó" }, { ".m4v", "M4V videó" },
        { ".m3u8", "HLS lejátszási lista" },
        { ".ogv", "OGG videó" }, { ".3gp", "3GP videó" },

        // ── Images ----------------------------------------------------------
        { ".jpg", "JPEG kép" }, { ".jpeg", "JPEG kép" },
        { ".png", "PNG kép" }, { ".gif", "GIF kép" },
        { ".bmp", "BMP kép" }, { ".tiff", "TIFF kép" },
        { ".webp", "WebP kép" }, { ".ico", "Ikon" },
        { ".svg", "SVG vektor" }, { ".eps", "Encapsulated PostScript" },
        { ".raw", "RAW kép" },
        { ".cr2", "Canon RAW" }, { ".nef", "Nikon RAW" },
        { ".arw", "Sony RAW" }, { ".dng", "Digital Negative" },

        // ── Archives --------------------------------------------------------
        { ".zip", "ZIP archívum" }, { ".rar", "RAR archívum" },
        { ".7z", "7-Zip archívum" }, { ".tar", "Tar archívum" },
        { ".gz", "GZip archívum" }, { ".bz2", "BZip2 archívum" },
        { ".xz", "XZ archívum" }, { ".zst", "Zstd archívum" },
        { ".lz4", "LZ4 archívum" }, { ".cab", "Cabinet archívum" },
        { ".iso", "Lemez kép" }, { ".dmg", "macOS lemezkép" },
        { ".img", "Nyers lemezkép" }, { ".vhd", "Virtuális merevlemez" },
        { ".vhdx", "Hyper-V lemez" }, { ".wim", "Windows kép" },

        // ── Database --------------------------------------------------------
        { ".sql", "SQL szkript" }, { ".db", "Adatbázis" },
        { ".sqlite", "SQLite DB" }, { ".mdb", "Access DB" },
        { ".accdb", "Access adatbázis" }, { ".mdf", "SQL Server DB" },
        { ".ndf", "SQL Server NDF" }, { ".ldf", "SQL Server napló" },
        { ".bak", "SQL biztonsági mentés" }, { ".dmp", "Adatbázis dump" },

        // ── Scientific / Math ---------------------------------------------
        { ".mat", "MATLAB adat" }, { ".m", "MATLAB szkript" },
        { ".r", "R szkript" }, { ".rdata", "R adatkészlet" },
        { ".csv", "CSV adat" }, { ".tsv", "TSV adat" },
        { ".sas", "SAS program" }, { ".sav", "SPSS adatkészlet" },
        { ".por", "SPSS hordozható" },

        // ── Crypto / Blockchain -------------------------------------------
        { ".gpg", "GPG titkosított" }, { ".pgp", "PGP titkosított" },
        { ".asc", "PGP aláírás" }, { ".sig", "Leválasztott aláírás" },
        { ".wallet", "Krypto pénztárca" }, { ".key", "Kulcs fájl" },
        { ".pem", "PEM tanúsítvány" }, { ".crt", "Tanúsítvány" },
        { ".p12", "PKCS#12 kulcstároló" }, { ".pfx", "Windows kulcstároló" },

        // ── Emulation / ROMs ----------------------------------------------
        { ".gba", "Game Boy ROM" }, { ".nds", "Nintendo DS ROM" },
        { ".wbfs", "Wii biztonsági mentés" },
        { ".cia", "3DS telepítő" }, { ".nsp", "Switch csomag" },
        { ".xci", "Switch kazetta" }, { ".wad", "Wii csatorna" },

        // ── Misc ------------------------------------------------------------
        { ".exe", "Windows végrehajtható" }, { ".msi", "Windows telepítő" },
        { ".com", "DOS parancs" }, { ".bat", "Kötegelt szkript" },
        { ".ps1", "PowerShell szkript" }, { ".cmd", "Parancs szkript" },
        { ".reg", "Beállításjegyzék bejegyzés" },
        { ".url", "Internetes parancsikon" }, { ".torrent", "BitTorrent" },
        { ".log", "Naplófájl" }, { ".ini", "INI konfiguráció" },
        { ".cfg", "Konfigurációs fájl" }, { ".conf", "Konfiguráció" },
        { ".yaml", "YAML konfiguráció" }, { ".toml", "TOML konfiguráció" },
        { ".env", "Környezeti fájl" }, { ".gitignore", "Git ignore" },
        { ".dockerfile", "Dockerfile" }, { ".md", "Markdown" },
        { ".tex", "LaTeX forráskód" }, { ".bib", "BibTeX könyvtár" },

        // ── Additional / Misc ---------------------------------------------
        { ".dwp", "SharePoint web rész" },
        { ".fxp", "FoxPro fordított" },
        { ".asd", "Word automatikus mentés" },
        { ".fsc", "Windows keresési gyorsítótár" },
        { ".mid", "MIDI szekvencia" },
        { ".fst", "FL Studio állapot" },
        { ".txt", "Egyszerű szöveges fájl" },
        { ".pdb", "Program adatbázis" },
        { ".dll", "Dinamikus linkelésű könyvtár" },
        { ".resources", ".NET erőforrások" },
        { ".cache", "Gyorsítótár fájl" },
        { ".settings", "Beállítások XML" },
        { ".csproj", "C# projekt" },
        { ".editorconfig", "EditorConfig" },
        { ".kdbx", "KeePass fájl" },
        { ".nupkg", "NuGet csomag" },
        { ".p7s", "PKCS #7 aláírás" },
        { ".map", "Source-Map fájl" },
        { ".flow", "Flow típus deklaráció" },
        { ".mjs", "ES Module (JavaScript)" },
        { ".cjs", "CommonJS (JavaScript)" },
        { ".cts", "TypeScript CommonJS" },
        { ".mts", "TypeScript ES Module" },
        { ".jst", "JavaScript sablon" },
        { ".markdown", "Markdown dokumentum" },
        { ".applescript", "AppleScript" },
        { ".ch1", "Nintendo karakter adat" },
        { ".vital", "Vital szintetizátor előbeállítás" },
        { ".ds_store", "macOS asztali szolgáltatások tároló" },
        { ".zpw", "ZippedWeb csomag" },
        { ".flp", "FL Studio projekt" },
        { ".flstheme", "FL Studio téma" },
        { ".nmsv", "Native Instruments NMSV előbeállítás" },
        { ".wav.256", "256-bit WAR variáns" },
        { ".pdf", "Portable Document Format" },
        { ".config", "Konfiguráció XML/JSON" },
        { ".user", "Felhasználói beállítások" },
        { ".uptodate", "Up2Date gyorsítótár jelző" },
        { ".rtf", "Rich Text Format" },
        { ".buildwithskipanalyzers", "MSBuild Skip-Analyzers jelző" },
        { ".node", "Node.js bináris modul" },
        { ".snap", "Snapcraft csomag" },
        { ".def", "Modul-definíciós fájl" },
        { ".bsd", "BSD licenc/konfiguráció" },
        { ".babelrc", "Babel konfiguráció" },
        { ".prettierrc", "Prettier konfiguráció" },
        { ".npignore", "NuGet ignore szabályok" },
        { ".php", "PHP szkript" },
        { ".eslintignore", "ESLint ignore" },
        { ".lic", "Licenc fájl" },
        { ".nib", "NeXT Interface Builder" },
        { ".plist", "macOS tulajdonság lista" },
        { ".mui", "Többnyelvű felhasználói felület" },
        { ".efi", "UEFI firmware" },
        { ".cip", "Chrome CIP csomag" },
        { ".bin", "Bináris adat" },
        { ".sdi", "Rendszer telepítési kép" },
        { ".ttf", "TrueType betűtípus" },
        { ".cur", "Windows kurzor" },
        { ".ani", "Animált kurzor" },
        { ".diagpkg", "Windows diagnosztikai csomag" },
        { ".dat", "Általános adatfájl" },
        { ".diffbase", "Diff alap pillanatkép" },
        { ".lm", "Nyelvi modell" },
        { ".lm1", "Nyelvi modell variáns 1" },
        { ".lm2", "Nyelvi modell variáns 2" },
        { ".lm3", "Nyelvi modell variáns 3" },
        { ".lex", "Lexikon adat" },
        { ".res", "Windows erőforrás" },
        { ".nlt", "NetLink trust adat" },
        { ".nls", "Nemzeti nyelvi támogatás" },
        { ".chm", "Kompilált HTML súgó" },
        { ".fil", "Fájl lista tároló" },
        { ".msixbundle", "MSIX csomag" },
        { ".p7x", "PKCS #7 kiterjesztett" },
        { ".pri", "Csomag erőforrás index" },
        { ".etl", "Esemény nyomkövetési napló" },
        { ".nlp", "Természetes nyelv feldolgozó adat" },
        { ".compositefont", "WPF kompozit betűtípus" },
        { ".aspx", "ASP.NET oldal" },
        { ".ascx", "ASP.NET felhasználói vezérlő" },
        { ".master", "ASP.NET főoldal" },
        { ".browser", "Böngésző definíció" },
        { ".lnk", "Windows parancsikon" },
        { ".default", "Alapértelmezett beállítások" },
        { ".comments", "Hozzászólás metaadatok" },
        { ".rsp", "Válasz fájl" },
        { ".tld", "Címke könyvtár leíró" },
        { ".win32manifest", "Win32 jegyzék" },
        { ".man", "Kézikönyv oldal" },
        { ".mof", "Managed Object Format" },
        { ".uninstall", "Eltávolítási szkript" },
        { ".tasks", "MSBuild feladatok" },
        { ".overridetasks", "MSBuild felülírt feladatok" },
        { ".orp", "ORP adat" },
        { ".adml", "Adminisztratív sablon nyelv" },
        { ".ppkg", "Provisioning csomag" },
        { ".mstheme", "Microsoft téma" },
        { ".msstyles", "Windows stílus" },
        { ".mum", "Jegyzék frissítési modul" },
        { ".cat", "Biztonsági katalógus" },
        { ".jfm", "Jet adatbázis metaadatok" },
        { ".rs", "Rust forráskód" },
        { ".jll", "Julia LLVM bitkód" },
        { ".sys", "Windows rendszer illesztő" },
        { ".p7b", "PKCS #7 tanúsítványlánc" },
        { ".wmfw", "Windows Media Framework" },
        { ".inf_loc", "INF lokalizáció" },
        { ".winmd", "Windows metaadatok" },
        { ".xbf", "XAML bináris formátum" },
        { ".license", "Licenc token" },
        { ".fpie", "FPGA köztes végrehajtható" },
        { ".cso", "Kompilált shader objektum" },
        { ".sccd", "System Center konfigurációs adat" },
        { ".bundle", "Alkalmazás csomag" },
        { ".schema", "JSON/XML séma" },
        { ".csg", "Konstruktív szilárd test geometria" },
        { ".mun", "Több egység hálózat" },
        { ".uce", "Univerzális sakk motor" },
        { ".cpl", "Vezérlőpult aplet" },
        { ".msc", "Microsoft felügyeleti konzol" },
        { ".ax", "DirectShow szűrő" },
        { ".table", "Kereső/hash tábla" },
        { ".tsp", "TSP csomag/szkript" },
        { ".tbl", "Tábla adat" },
        { ".drv", "Eszköz illesztő" },
        { ".sep", "Elválasztó fájl" },
        { ".ocx", "ActiveX vezérlő" },
        { ".msp", "Windows telepítő javítás" },
        { ".scr", "Windows képernyővédő" },
        { ".vbs", "VBScript" },
        { ".grxml", "Grammatika XML" },
        { ".xrm-ms", "Microsoft licenc" },
        { ".rll", "Erőforrás link könyvtár" },
        { ".mfl", "MFL nyelvi fájl" },
        { ".cdxml", "Cmdlet definíció XML" },
        { ".dtd", "Dokumentum típus definíció" },
        { ".psm1", "PowerShell modul szkript" },
        { ".ps1xml", "PowerShell formátum adat" },
        { ".wprp", "Windows Performance Recorder profil" },
        { ".xsl", "XSLT stíluslap" },
        { ".gyp", "Generate Your Projects" },
        { ".rld", "ReLoad adat" },
        { ".job", "Windows feladat munka" },
        { ".gypi", "GYP include" },
        { ".hlp", "Windows súgó" },
        { ".gdl", "Generic Description Language" },
        { ".elf", "Executable and Linkable Format" },
        { ".ppd", "PostScript printer leírás" },
        { ".gpd", "Generic Printer Description" },
        { ".mbn", "Modem bináris" },
        { ".pak", "PAK archívum" },
        { ".dgml", "Directed Graph Markup" },
        { ".smp", "Minta fájl" },
        { ".lxa", "Microsoft lexikon audio" },
        { ".wwd", "Microsoft Works varázsló" },
        { ".wsf", "Windows szkript fájl" },
        { ".cw", "CardWorks sablon" },
        { ".phn", "Phun fizika jelenet" },
        { ".am", "Automake fájl" },
        { ".fe", "Fájl titkosító" },
        { ".mllr", "Maximum Likelihood Linear Regression" },
        { ".ngr", "NEOGEO ROM" },
        { ".sch", "Ütemezés/Séma" },
        { ".adlm", "Autodesk licenc kezelő" },
        { ".adxm", "Adminisztratív XML" },
        { ".nmnl", "Normalizált minimális" },
        { ".propdesc", "Tulajdonság leírás" },
        { ".nsl", "Nokia hang könyvtár" },
        { ".ntf", "Nemzeti átviteli formátum" },
        { ".ntp", "NTP konfiguráció" },
        { ".forms", "Windows Forms" },
        { ".runtime", "Futási idő jegyzék" },
        { ".interop", "COM Interop adat" },
        { ".frm", "Visual Basic űrlap" },
        { ".bas", "Visual Basic modul" },
        { ".dwb", "Drum Workshop csomag" },
        { ".npmignore", "NPM ignore szabályok" },
        { ".rsrc", "macOS erőforrás elágazás" },
        { ".upd2date", "Up2Date gyorsítótár jelző" },
        { ".Up2Date", "Up2Date gyorsítótár jelző" },
        { ".jshintrc", "JSHint konfiguráció" },
        { ".lock", "Zár/Függőség pin" },
        { ".nix", "Nix kifejezés" },
        { ".hr1", "HR1 játék adat" },
        { ".hr2", "HR2 játék adat" },
        { ".hr3", "HR3 játék adat" },
        { ".hr4", "HR4 játék adat" },
        { ".hr5", "HR5 játék adat" },
        { ".hr6", "HR6 játék adat" },
        { ".hr7", "HR7 játék adat" },
        { ".hr8", "HR8 játék adat" },
        { ".hr9", "HR9 játék adat" },
        { ".bnf", "Backus-Naur Form grammatika" },
        { ".clb", "COM+ katalógus" },
        { ".tlb", "Típus könyvtár" },
        { ".dic", "Szótár/Lexikon" },
        { ".aux", "Segéd TeX fájl" },
        { ".ds", "Adattároló/DS_Store" },
        { ".inc", "Include/Forrás include" },
        { ".cpx", "Kódlap fordítás" },
        { ".mdl", "Modul/Modell fájl" },
        { ".dls", "Letölthető hangok bank" },
        { ".cdf-ms", "ClickOnce telepítési jegyzék" },
        { ".addin", "Visual Studio bővítmény" },
        { ".scp", "Windows szkript komponens" },
        { ".wmz", "Tömörített Windows Media Player skin" },
        { ".iec", "IEC adatbázis" },
        { ".wsc", "Windows szkript komponens" },
        { ".vrg", "Visual Studio beállításjegyzék szkript" },
        { ".prx", "Proxy automatikus konfiguráció" },
        { ".nuspec", "NuGet specifikáció" },
        
        // ── Extended Archive / Compression --------------------------------
        { ".zipx", "ZIPX archívum" },
        { ".alz", "ALZip archívum" },
        { ".eeg", "EEG tömörített" },
        { ".001", "Felosztott archívum rész 1" },
        { ".arj", "ARJ archívum" },
        { ".bh", "BlakHole archívum" },
        { ".lha", "LHA archívum" },
        { ".lzh", "LHA/LZH archívum" },
        { ".pma", "PMarc archívum" },
        { ".arc", "ARC archívum" },
        { ".ace", "ACE archívum" },
        { ".aes", "AES titkosított fájl" },
        { ".zpak", "ZPAQ archívum" },
        { ".zstd", "Zstandard archívum" },
        { ".br", "Brotli archívum" },
        { ".pea", "PeaZip archívum" },
        { ".tbz", "Tar.BZ archívum" },
        { ".tbz2", "Tar.BZ2 archívum" },
        { ".txz", "Tar.XZ archívum" },
        { ".tlz", "Tar.LZMA archívum" },
        { ".uu", "UUEncoded fájl" },
        { ".uue", "UUEncoded fájl" },
        { ".xxe", "XXEncoded fájl" },
        { ".z", "Unix Compress" },
        { ".tgz", "Tar.GZ archívum" },
        { ".isz", "ISO-Zipped kép" },
        { ".udf", "Univerzális lemez formátum" },
        { ".i00", "DVD Decrypter felosztott kép rész 1" }
    }
},
    {
    "ro", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
    {
        // ── Microsoft / Office ---------------------------------------------
        { ".docx", "Document Word" }, { ".doc", "Word 97-2003" },
        { ".xlsx", "Caiet de lucru Excel" }, { ".xls", "Excel 97-2003" },
        { ".pptx", "Prezentare PowerPoint" }, { ".ppt", "PowerPoint 97-2003" },
        { ".vsdx", "Desen Visio" }, { ".pub", "Document Publisher" },
        { ".one", "Caiet de note OneNote" },
        { ".ost", "Date offline Outlook" }, { ".pst", "Date personale Outlook" },
        { ".msg", "Mesaj Outlook" }, { ".eml", "Mesaj email" },

        // ── Web / Mark-up ---------------------------------------------------
        { ".html", "Document HTML" }, { ".htm", "Document HTML" },
        { ".css", "Fișier de stil CSS" }, { ".scss", "Sass (SCSS)" },
        { ".sass", "Sass (indentat)" }, { ".less", "Stil Less" },
        { ".js", "JavaScript" }, { ".jsx", "React JSX" },
        { ".ts", "TypeScript" }, { ".tsx", "React TSX" },
        { ".json", "Date JSON" }, { ".xml", "Document XML" },
        { ".yml", "Configurație YAML" },

        // ── Microsoft / .NET ----------------------------------------------
        { ".cs", "Cod sursă C#" }, { ".csx", "Script C#" },
        { ".fs", "Cod sursă F#" }, { ".vb", "Cod sursă VB.NET" },
        { ".il", "Asamblare IL" }, { ".resx", "Resurse XML" },
        { ".xaml", "Marcaje XAML" }, { ".sln", "Soluție Visual Studio" },
        { ".vbproj", "Proiect VB" },
        { ".vcxproj", "Proiect C++" }, { ".props", "Proprietăți MSBuild" },
        { ".targets", "Ținte MSBuild" },

        // ── C / C++ --------------------------------------------------------
        { ".cpp", "Cod sursă C++" }, { ".cc", "Cod sursă C++" },
        { ".cxx", "Cod sursă C++" }, { ".c", "Cod sursă C" },
        { ".hpp", "Antet C++" }, { ".h", "Antet C/C++" },
        { ".inl", "Inline C++" }, { ".idl", "Definiție interfață" },
        { ".rc", "Script resurse" }, { ".manifest", "Manifest aplicație" },

        // ── Java / JVM ------------------------------------------------------
        { ".java", "Cod sursă Java" }, { ".class", "Clasă Java" },
        { ".jar", "Arhivă Java" }, { ".war", "Arhivă web Java" },
        { ".ear", "Arhivă enterprise" }, { ".scala", "Cod sursă Scala" },
        { ".groovy", "Cod sursă Groovy" }, { ".clj", "Cod sursă Clojure" },

        // ── Python ----------------------------------------------------------
        { ".py", "Script Python" }, { ".pyw", "Python (fără consolă)" },
        { ".pyi", "Stub Python" }, { ".pyc", "Bytecode Python" },
        { ".pyo", "Python optimizat" }, { ".pyd", "Extensie Python" },
        { ".whl", "Python Wheel" }, { ".ipynb", "Jupyter Notebook" },

        // ── Mobile ----------------------------------------------------------
        { ".swift", "Cod sursă Swift" }, { ".dart", "Cod sursă Dart" },
        { ".kt", "Cod sursă Kotlin" }, { ".kts", "Script Kotlin" },
        { ".gradle", "Script Gradle" }, { ".aar", "Arhivă Android" },
        { ".apk", "Pachet Android" }, { ".aab", "Pachet aplicație Android" },
        { ".ipa", "Pachet iOS" },

        // ── Game Dev / 3D ---------------------------------------------------
        { ".unity", "Scenă Unity" }, { ".prefab", "Prefab Unity" },
        { ".uasset", "Asset Unreal" }, { ".umap", "Hartă Unreal" },
        { ".fbx", "Model 3D FBX" }, { ".obj", "Wavefront 3D" },
        { ".gltf", "Model 3D glTF" }, { ".blend", "Proiect Blender" },
        { ".dae", "Model Collada" }, { ".3ds", "Model 3D Studio" },
        { ".stl", "Model STL" }, { ".dxf", "AutoCAD DXF" },

        // ── Creative / Adobe ----------------------------------------------
        { ".psd", "Document Photoshop" }, { ".psb", "Photoshop mare" },
        { ".ai", "Artă Illustrator" }, { ".indd", "Document InDesign" },
        { ".prproj", "Proiect Premiere" }, { ".aep", "After Effects" },
        { ".xd", "Prototip Adobe XD" }, { ".sketch", "Document Sketch" },
        { ".fig", "Document Figma" },

        // ── Audio -----------------------------------------------------------
        { ".mp3", "Audio MP3" }, { ".wav", "Audio Wave" },
        { ".flac", "Audio FLAC" }, { ".aac", "Audio AAC" },
        { ".ogg", "OGG Vorbis" }, { ".wma", "Audio Windows" },
        { ".opus", "Audio Opus" }, { ".m4a", "Audio MPEG-4" },
        { ".midi", "Secvență MIDI" }, { ".aiff", "Audio AIFF" },

        // ── Video -----------------------------------------------------------
        { ".mp4", "Video MP4" }, { ".mkv", "Video Matroska" },
        { ".avi", "Video AVI" }, { ".mov", "Video QuickTime" },
        { ".wmv", "Video Windows" }, { ".webm", "Video WebM" },
        { ".flv", "Video Flash" }, { ".m4v", "Video M4V" },
        { ".m3u8", "Listă de redare HLS" },
        { ".ogv", "Video OGG" }, { ".3gp", "Video 3GP" },

        // ── Images ----------------------------------------------------------
        { ".jpg", "Imagine JPEG" }, { ".jpeg", "Imagine JPEG" },
        { ".png", "Imagine PNG" }, { ".gif", "Imagine GIF" },
        { ".bmp", "Imagine BMP" }, { ".tiff", "Imagine TIFF" },
        { ".webp", "Imagine WebP" }, { ".ico", "Pictogramă" },
        { ".svg", "Vector SVG" }, { ".eps", "Encapsulated PostScript" },
        { ".raw", "Imagine RAW" },
        { ".cr2", "Canon RAW" }, { ".nef", "Nikon RAW" },
        { ".arw", "Sony RAW" }, { ".dng", "Digital Negative" },

        // ── Archives --------------------------------------------------------
        { ".zip", "Arhivă ZIP" }, { ".rar", "Arhivă RAR" },
        { ".7z", "Arhivă 7-Zip" }, { ".tar", "Arhivă Tar" },
        { ".gz", "Arhivă GZip" }, { ".bz2", "Arhivă BZip2" },
        { ".xz", "Arhivă XZ" }, { ".zst", "Arhivă Zstd" },
        { ".lz4", "Arhivă LZ4" }, { ".cab", "Arhivă Cabinet" },
        { ".iso", "Imagine disc" }, { ".dmg", "Imagine disc macOS" },
        { ".img", "Imagine disc brut" }, { ".vhd", "Disc virtual" },
        { ".vhdx", "Disc Hyper-V" }, { ".wim", "Imagine Windows" },

        // ── Database --------------------------------------------------------
        { ".sql", "Script SQL" }, { ".db", "Bază de date" },
        { ".sqlite", "SQLite DB" }, { ".mdb", "Access DB" },
        { ".accdb", "Bază de date Access" }, { ".mdf", "SQL Server DB" },
        { ".ndf", "SQL Server NDF" }, { ".ldf", "Jurnal SQL Server" },
        { ".bak", "Backup SQL" }, { ".dmp", "Dump bază de date" },

        // ── Scientific / Math ---------------------------------------------
        { ".mat", "Date MATLAB" }, { ".m", "Script MATLAB" },
        { ".r", "Script R" }, { ".rdata", "Set de date R" },
        { ".csv", "Date CSV" }, { ".tsv", "Date TSV" },
        { ".sas", "Program SAS" }, { ".sav", "Set de date SPSS" },
        { ".por", "SPSS portabil" },

        // ── Crypto / Blockchain -------------------------------------------
        { ".gpg", "Criptat GPG" }, { ".pgp", "Criptat PGP" },
        { ".asc", "Semnătură PGP" }, { ".sig", "Semnătură detașată" },
        { ".wallet", "Portofel crypto" }, { ".key", "Fișier cheie" },
        { ".pem", "Certificat PEM" }, { ".crt", "Certificat" },
        { ".p12", "Depozit chei PKCS#12" }, { ".pfx", "Depozit chei Windows" },

        // ── Emulation / ROMs ----------------------------------------------
        { ".gba", "ROM Game Boy" }, { ".nds", "ROM Nintendo DS" },
        { ".wbfs", "Backup Wii" },
        { ".cia", "Instalator 3DS" }, { ".nsp", "Pachet Switch" },
        { ".xci", "Cartuș Switch" }, { ".wad", "Canal Wii" },

        // ── Misc ------------------------------------------------------------
        { ".exe", "Executabil Windows" }, { ".msi", "Instalator Windows" },
        { ".com", "Comandă DOS" }, { ".bat", "Script batch" },
        { ".ps1", "Script PowerShell" }, { ".cmd", "Script comandă" },
        { ".reg", "Intrare registru" },
        { ".url", "Scurtătură internet" }, { ".torrent", "BitTorrent" },
        { ".log", "Fișier log" }, { ".ini", "Configurație INI" },
        { ".cfg", "Fișier config" }, { ".conf", "Configurație" },
        { ".yaml", "Configurație YAML" }, { ".toml", "Configurație TOML" },
        { ".env", "Fișier mediu" }, { ".gitignore", "Git ignore" },
        { ".dockerfile", "Dockerfile" }, { ".md", "Markdown" },
        { ".tex", "Cod sursă LaTeX" }, { ".bib", "Bibliotecă BibTeX" },

        // ── Additional / Misc ---------------------------------------------
        { ".dwp", "Parte web SharePoint" },
        { ".fxp", "Compilat FoxPro" },
        { ".asd", "Salvare automată Word" },
        { ".fsc", "Cache căutare Windows" },
        { ".mid", "Secvență MIDI" },
        { ".fst", "Stare FL Studio" },
        { ".txt", "Fișier text simplu" },
        { ".pdb", "Bază de date program" },
        { ".dll", "Bibliotecă dinamică" },
        { ".resources", "Resurse .NET" },
        { ".cache", "Fișier cache" },
        { ".settings", "Setări XML" },
        { ".csproj", "Proiect C#" },
        { ".editorconfig", "EditorConfig" },
        { ".kdbx", "Fișier KeePass" },
        { ".nupkg", "Pachet NuGet" },
        { ".p7s", "Semnătură PKCS #7" },
        { ".map", "Fișier Source-Map" },
        { ".flow", "Declarație tip Flow" },
        { ".mjs", "ES Module (JavaScript)" },
        { ".cjs", "CommonJS (JavaScript)" },
        { ".cts", "TypeScript CommonJS" },
        { ".mts", "TypeScript ES Module" },
        { ".jst", "Șablon JavaScript" },
        { ".markdown", "Document Markdown" },
        { ".applescript", "AppleScript" },
        { ".ch1", "Date personaje Nintendo" },
        { ".vital", "Preset sintetizator Vital" },
        { ".ds_store", "Magazin servicii desktop macOS" },
        { ".zpw", "Pachet ZippedWeb" },
        { ".flp", "Proiect FL Studio" },
        { ".flstheme", "Temă FL Studio" },
        { ".nmsv", "Preset Native Instruments NMSV" },
        { ".wav.256", "Variantă WAV 256-bit" },
        { ".pdf", "Portable Document Format" },
        { ".config", "Configurație XML/JSON" },
        { ".user", "Setări utilizator" },
        { ".uptodate", "Indicator cache Up2Date" },
        { ".rtf", "Rich Text Format" },
        { ".buildwithskipanalyzers", "Indicator MSBuild Skip-Analyzers" },
        { ".node", "Modul binar Node.js" },
        { ".snap", "Pachet Snapcraft" },
        { ".def", "Fișier definiție modul" },
        { ".bsd", "Licență/Configurație BSD" },
        { ".babelrc", "Configurație Babel" },
        { ".prettierrc", "Configurație Prettier" },
        { ".npignore", "Reguli ignorare NuGet" },
        { ".php", "Script PHP" },
        { ".eslintignore", "ESLint ignore" },
        { ".lic", "Fișier licență" },
        { ".nib", "NeXT Interface Builder" },
        { ".plist", "Listă proprietăți macOS" },
        { ".mui", "Interfață multilingvă" },
        { ".efi", "Firmware UEFI" },
        { ".cip", "Pachet Chrome CIP" },
        { ".bin", "Date binare" },
        { ".sdi", "Imagine implementare sistem" },
        { ".ttf", "Font TrueType" },
        { ".cur", "Cursor Windows" },
        { ".ani", "Cursor animat" },
        { ".diagpkg", "Pachet diagnostic Windows" },
        { ".dat", "Fișier date generic" },
        { ".diffbase", "Instantaneu bază diff" },
        { ".lm", "Model lingvistic" },
        { ".lm1", "Variantă model lingvistic 1" },
        { ".lm2", "Variantă model lingvistic 2" },
        { ".lm3", "Variantă model lingvistic 3" },
        { ".lex", "Date lexic" },
        { ".res", "Resursă Windows" },
        { ".nlt", "Date încredere NetLink" },
        { ".nls", "Suport limbă națională" },
        { ".chm", "Ajutor HTML compilat" },
        { ".fil", "Container listă fișiere" },
        { ".msixbundle", "Pachet MSIX" },
        { ".p7x", "PKCS #7 extins" },
        { ".pri", "Index resurse pachet" },
        { ".etl", "Jurnal urmărire evenimente" },
        { ".nlp", "Date procesor limbaj natural" },
        { ".compositefont", "Font compozit WPF" },
        { ".aspx", "Pagină ASP.NET" },
        { ".ascx", "Control utilizator ASP.NET" },
        { ".master", "Pagină master ASP.NET" },
        { ".browser", "Definiție browser" },
        { ".lnk", "Scurtătură Windows" },
        { ".default", "Setări implicite" },
        { ".comments", "Metadate comentarii" },
        { ".rsp", "Fișier răspuns" },
        { ".tld", "Descriptor bibliotecă tag-uri" },
        { ".win32manifest", "Manifest Win32" },
        { ".man", "Pagină manual" },
        { ".mof", "Managed Object Format" },
        { ".uninstall", "Script dezinstalare" },
        { ".tasks", "Sarcini MSBuild" },
        { ".overridetasks", "Sarcini suprascrise MSBuild" },
        { ".orp", "Date ORP" },
        { ".adml", "Limbaj șablon administrativ" },
        { ".ppkg", "Pachet de provisioning" },
        { ".mstheme", "Temă Microsoft" },
        { ".msstyles", "Stil Windows" },
        { ".mum", "Modul actualizare manifest" },
        { ".cat", "Catalog securitate" },
        { ".jfm", "Metadate bază de date Jet" },
        { ".rs", "Cod sursă Rust" },
        { ".jll", "Bitcode Julia LLVM" },
        { ".sys", "Driver sistem Windows" },
        { ".p7b", "Lanț certificate PKCS #7" },
        { ".wmfw", "Windows Media Framework" },
        { ".inf_loc", "Localizare INF" },
        { ".winmd", "Metadate Windows" },
        { ".xbf", "Format binar XAML" },
        { ".license", "Token licență" },
        { ".fpie", "Executabil intermediar FPGA" },
        { ".cso", "Obiect shader compilat" },
        { ".sccd", "Date configurare System Center" },
        { ".bundle", "Pachet aplicație" },
        { ".schema", "Schemă JSON/XML" },
        { ".csg", "Geometrie solidă constructivă" },
        { ".mun", "Rețea multi-unitate" },
        { ".uce", "Motor șah universal" },
        { ".cpl", "Aplet panou de control" },
        { ".msc", "Consolă management Microsoft" },
        { ".ax", "Filtru DirectShow" },
        { ".table", "Tabelă căutare/hash" },
        { ".tsp", "Pachet/Script TSP" },
        { ".tbl", "Date tabel" },
        { ".drv", "Driver dispozitiv" },
        { ".sep", "Fișier separator" },
        { ".ocx", "Control ActiveX" },
        { ".msp", "Patch instalator Windows" },
        { ".scr", "Salvator de ecran Windows" },
        { ".vbs", "VBScript" },
        { ".grxml", "Gramatică XML" },
        { ".xrm-ms", "Licență Microsoft" },
        { ".rll", "Bibliotecă legături resurse" },
        { ".mfl", "Fișier limbă MFL" },
        { ".cdxml", "Definiție cmdlet XML" },
        { ".dtd", "Definiție tip document" },
        { ".psm1", "Script modul PowerShell" },
        { ".ps1xml", "Date format PowerShell" },
        { ".wprp", "Profil Windows Performance Recorder" },
        { ".xsl", "Fișier de stil XSLT" },
        { ".gyp", "Generate Your Projects" },
        { ".rld", "Date ReLoad" },
        { ".job", "Sarcină Windows" },
        { ".gypi", "GYP Include" },
        { ".hlp", "Ajutor Windows" },
        { ".gdl", "Generic Description Language" },
        { ".elf", "Executable and Linkable Format" },
        { ".ppd", "Descriere imprimantă PostScript" },
        { ".gpd", "Generic Printer Description" },
        { ".mbn", "Binar modem" },
        { ".pak", "Arhivă PAK" },
        { ".dgml", "Directed Graph Markup" },
        { ".smp", "Fișier eșantion" },
        { ".lxa", "Audio lexic Microsoft" },
        { ".wwd", "Expert Microsoft Works" },
        { ".wsf", "Fișier script Windows" },
        { ".cw", "Șablon CardWorks" },
        { ".phn", "Scenă fizică Phun" },
        { ".am", "Fișier Automake" },
        { ".fe", "Criptor fișiere" },
        { ".mllr", "Maximum Likelihood Linear Regression" },
        { ".ngr", "ROM NEOGEO" },
        { ".sch", "Program/Schemă" },
        { ".adlm", "Manager licențe Autodesk" },
        { ".adxm", "XML administrativ" },
        { ".nmnl", "Minimal normalizat" },
        { ".propdesc", "Descriere proprietate" },
        { ".nsl", "Bibliotecă sunet Nokia" },
        { ".ntf", "Format transfer național" },
        { ".ntp", "Configurație NTP" },
        { ".forms", "Windows Forms" },
        { ".runtime", "Manifest runtime" },
        { ".interop", "Date COM Interop" },
        { ".frm", "Formular Visual Basic" },
        { ".bas", "Modul Visual Basic" },
        { ".dwb", "Pachet Drum Workshop" },
        { ".npmignore", "Reguli ignorare NPM" },
        { ".rsrc", "Furcă resurse macOS" },
        { ".upd2date", "Indicator cache Up2Date" },
        { ".Up2Date", "Indicator cache Up2Date" },
        { ".jshintrc", "Configurație JSHint" },
        { ".lock", "Blocare/Pin dependență" },
        { ".nix", "Expresie Nix" },
        { ".hr1", "Date joc HR1" },
        { ".hr2", "Date joc HR2" },
        { ".hr3", "Date joc HR3" },
        { ".hr4", "Date joc HR4" },
        { ".hr5", "Date joc HR5" },
        { ".hr6", "Date joc HR6" },
        { ".hr7", "Date joc HR7" },
        { ".hr8", "Date joc HR8" },
        { ".hr9", "Date joc HR9" },
        { ".bnf", "Gramatică Backus-Naur Form" },
        { ".clb", "Catalog COM+" },
        { ".tlb", "Bibliotecă tip" },
        { ".dic", "Dicționar/Lexic" },
        { ".aux", "Fișier auxiliar TeX" },
        { ".ds", "Stocare date/DS_Store" },
        { ".inc", "Include/Include sursă" },
        { ".cpx", "Traducere pagină cod" },
        { ".mdl", "Fișier model/modul" },
        { ".dls", "Bancă sunete descărcabile" },
        { ".cdf-ms", "Manifest implementare ClickOnce" },
        { ".addin", "Add-in Visual Studio" },
        { ".scp", "Componentă script Windows" },
        { ".wmz", "Skin comprimat Windows Media Player" },
        { ".iec", "Bază de date IEC" },
        { ".wsc", "Componentă script Windows" },
        { ".vrg", "Script registru Visual Studio" },
        { ".prx", "Configurație automată proxy" },
        { ".nuspec", "Specificație NuGet" },
        
        // ── Extended Archive / Compression --------------------------------
        { ".zipx", "Arhivă ZIPX" },
        { ".alz", "Arhivă ALZip" },
        { ".eeg", "Comprimat EEG" },
        { ".001", "Arhivă divizată partea 1" },
        { ".arj", "Arhivă ARJ" },
        { ".bh", "Arhivă BlakHole" },
        { ".lha", "Arhivă LHA" },
        { ".lzh", "Arhivă LHA/LZH" },
        { ".pma", "Arhivă PMarc" },
        { ".arc", "Arhivă ARC" },
        { ".ace", "Arhivă ACE" },
        { ".aes", "Fișier criptat AES" },
        { ".zpak", "Arhivă ZPAQ" },
        { ".zstd", "Arhivă Zstandard" },
        { ".br", "Arhivă Brotli" },
        { ".pea", "Arhivă PeaZip" },
        { ".tbz", "Arhivă Tar.BZ" },
        { ".tbz2", "Arhivă Tar.BZ2" },
        { ".txz", "Arhivă Tar.XZ" },
        { ".tlz", "Arhivă Tar.LZMA" },
        { ".uu", "Fișier UUEncoded" },
        { ".uue", "Fișier UUEncoded" },
        { ".xxe", "Fișier XXEncoded" },
        { ".z", "Unix Compress" },
        { ".tgz", "Arhivă Tar.GZ" },
        { ".isz", "Imagine ISO-Zipped" },
        { ".udf", "Format disc universal" },
        { ".i00", "Imagine divizată DVD Decrypter partea 1" }
    }
}
};

            public string ItemType
            {
                get
                {
                    if (IsDirectory) return "Folder"; // If it's a directory, return "Folder".

                    var map = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
                    {
                        // Add mappings for file extensions to user-friendly descriptions.
                        // This dictionary maps common file extensions to human-readable names.

                    // This section of the code is incomplete and would need to be filled in with
                    // a mapping from file extensions to a human-readable name.
                    // ── Microsoft / Office ---------------------------------------------
                    { ".docx", "Word Document" },  { ".doc", "Word 97-2003" },
            { ".xlsx", "Excel Workbook" }, { ".xls", "Excel 97-2003" },
            { ".pptx", "PowerPoint" },     { ".ppt", "PowerPoint 97-2003" },
            { ".vsdx", "Visio Drawing" },  { ".pub", "Publisher Document" },
            { ".one",  "OneNote Notebook" },
            { ".ost", "Outlook Offline" }, { ".pst", "Outlook Personal" },
            { ".msg", "Outlook Message" }, { ".eml", "Email Message" },

            // ── Web / Mark-up ---------------------------------------------------
            { ".html", "HTML Document" },  { ".htm", "HTML Document" },
            { ".css",  "CSS Style Sheet" }, { ".scss", "Sass (SCSS)" },
            { ".sass", "Sass (Indented)" }, { ".less", "Less Style" },
            { ".js",   "JavaScript" },      { ".jsx", "React JSX" },
            { ".ts",   "TypeScript" },      { ".tsx", "React TSX" },
            { ".json", "JSON Data" },       { ".xml", "XML Document" },
            { ".yml",  "YAML Config" },

            // ── Microsoft / .NET ----------------------------------------------
            { ".cs", "C# Source" },         { ".csx", "C# Script" },
            { ".fs", "F# Source" },         { ".vb", "VB.NET Source" },
            { ".il", "IL Assembly" },       { ".resx", "Resource XML" },
            { ".xaml", "XAML Mark-up" },    { ".sln", "Visual Studio Solution" },
            { ".vbproj", "VB Project" },
            { ".vcxproj", "C++ Project" },  { ".props", "MSBuild Props" },
            { ".targets", "MSBuild Targets" },

            // ── C / C++ --------------------------------------------------------
            { ".cpp", "C++ Source" },       { ".cc", "C++ Source" },
            { ".cxx", "C++ Source" },       { ".c", "C Source" },
            { ".hpp", "C++ Header" },       { ".h", "C/C++ Header" },
            { ".inl", "Inline C++" },       { ".idl", "Interface Definition" },
            { ".rc", "Resource Script" },   { ".manifest", "Application Manifest" },

            // ── Java / JVM ------------------------------------------------------
            { ".java", "Java Source" },     { ".class", "Java Class" },
            { ".jar", "Java Archive" },     { ".war", "Java Web Archive" },
            { ".ear", "Enterprise Archive" }, { ".scala", "Scala Source" },
            { ".groovy", "Groovy Source" }, { ".clj", "Clojure Source" },

            // ── Python ----------------------------------------------------------
            { ".py", "Python Script" },     { ".pyw", "Python (No Console)" },
            { ".pyi", "Python Stub" },      { ".pyc", "Python Bytecode" },
            { ".pyo", "Python Optimised" }, { ".pyd", "Python Extension" },
            { ".whl", "Python Wheel" },     { ".ipynb", "Jupyter Notebook" },

            // ── Mobile ----------------------------------------------------------
            { ".swift", "Swift Source" },   { ".dart", "Dart Source" },
            { ".kt", "Kotlin Source" },     { ".kts", "Kotlin Script" },
            { ".gradle", "Gradle Script" }, { ".aar", "Android Archive" },
            { ".apk", "Android Package" },  { ".aab", "Android App Bundle" },
            { ".ipa", "iOS Package" },

            // ── Game Dev / 3D ---------------------------------------------------
            { ".unity", "Unity Scene" },    { ".prefab", "Unity Prefab" },
            { ".uasset", "Unreal Asset" },  { ".umap", "Unreal Map" },
            { ".fbx", "FBX 3D Model" },     { ".obj", "Wavefront 3D" },
            { ".gltf", "glTF 3D Model" },   { ".blend", "Blender Project" },
            { ".dae", "Collada Model" },    { ".3ds", "3D Studio Model" },
            { ".stl", "STL Model" },        { ".dxf", "AutoCAD DXF" },

            // ── Creative / Adobe ----------------------------------------------
            { ".psd", "Photoshop Document" }, { ".psb", "Photoshop Large" },
            { ".ai",  "Illustrator Art" },   { ".indd", "InDesign Document" },
            { ".prproj", "Premiere Project" }, { ".aep", "After Effects" },
            { ".xd",  "Adobe XD Prototype" }, { ".sketch", "Sketch Document" },
            { ".fig", "Figma Document" },

            // ── Audio -----------------------------------------------------------
            { ".mp3", "MP3 Audio" },        { ".wav", "Wave Audio" },
            { ".flac", "FLAC Audio" },      { ".aac", "AAC Audio" },
            { ".ogg", "OGG Vorbis" },       { ".wma", "Windows Audio" },
            { ".opus", "Opus Audio" },      { ".m4a", "MPEG-4 Audio" },
            { ".midi", "MIDI Sequence" },   { ".aiff", "AIFF Audio" },

            // ── Video -----------------------------------------------------------
            { ".mp4", "MP4 Video" },        { ".mkv", "Matroska Video" },
            { ".avi", "AVI Video" },        { ".mov", "QuickTime Video" },
            { ".wmv", "Windows Video" },    { ".webm", "WebM Video" },
            { ".flv", "Flash Video" },      { ".m4v", "M4V Video" },
            { ".m3u8", "HLS Playlist" },
            { ".ogv", "OGG Video" },        { ".3gp", "3GP Video" },

            // ── Images ----------------------------------------------------------
            { ".jpg", "JPEG Image" },       { ".jpeg", "JPEG Image" },
            { ".png", "PNG Image" },        { ".gif", "GIF Image" },
            { ".bmp", "BMP Image" },        { ".tiff", "TIFF Image" },
            { ".webp", "WebP Image" },      { ".ico", "Icon" },
            { ".svg", "SVG Vector" },       { ".eps", "Encapsulated PostScript" },
            { ".raw", "RAW Image" },
            { ".cr2", "Canon RAW" },        { ".nef", "Nikon RAW" },
            { ".arw", "Sony RAW" },         { ".dng", "Digital Negative" },

            // ── Archives --------------------------------------------------------
            { ".zip", "ZIP Archive" },      { ".rar", "RAR Archive" },
            { ".7z",  "7-Zip Archive" },    { ".tar", "Tar Archive" },
            { ".gz",  "GZip Archive" },     { ".bz2", "BZip2 Archive" },
            { ".xz",  "XZ Archive" },       { ".zst", "Zstd Archive" },
            { ".lz4", "LZ4 Archive" },      { ".cab", "Cabinet Archive" },
            { ".iso", "Disc Image" },       { ".dmg", "macOS Disk Image" },
            { ".img", "Raw Disk Image" },   { ".vhd", "Virtual Hard Disk" },
            { ".vhdx","Hyper-V Disk" },     { ".wim", "Windows Image" },

            // ── Database --------------------------------------------------------
            { ".sql", "SQL Script" },       { ".db",  "Database" },
            { ".sqlite", "SQLite DB" },     { ".mdb", "Access DB" },
            { ".accdb", "Access Database" }, { ".mdf", "SQL Server DB" },
            { ".ndf", "SQL Server NDF" },   { ".ldf", "SQL Server Log" },
            { ".bak", "SQL Backup" },       { ".dmp", "Database Dump" },

            // ── Scientific / Math ---------------------------------------------
            { ".mat", "MATLAB Data" },      { ".m", "MATLAB Script" },
            { ".r", "R Script" },           { ".rdata", "R Dataset" },
            { ".csv", "CSV Data" },         { ".tsv", "TSV Data" },
            { ".sas", "SAS Program" },      { ".sav", "SPSS Dataset" },
            { ".por", "SPSS Portable" },

            // ── Crypto / Blockchain -------------------------------------------
            { ".gpg", "GPG Encrypted" },    { ".pgp", "PGP Encrypted" },
            { ".asc", "PGP Signature" },    { ".sig", "Detached Signature" },
            { ".wallet", "Crypto Wallet" }, { ".key", "Key File" },
            { ".pem", "PEM Certificate" },  { ".crt", "Certificate" },
            { ".p12", "PKCS#12 Keystore" }, { ".pfx", "Windows Keystore" },

            // ── Emulation / ROMs ----------------------------------------------
            { ".gba", "Game Boy ROM" },     { ".nds", "Nintendo DS ROM" },
            { ".wbfs", "Wii Backup" },
            { ".cia", "3DS Installer" },    { ".nsp", "Switch Package" },
            { ".xci", "Switch Cartridge" }, { ".wad", "Wii Channel" },

            // ── Misc ------------------------------------------------------------
            { ".exe", "Windows Executable" }, { ".msi", "Windows Installer" },
            { ".com", "DOS Command" },      { ".bat", "Batch Script" },
            { ".ps1", "PowerShell Script" }, { ".cmd", "Command Script" },
            { ".reg", "Registry Entry" },
            { ".url", "Internet Shortcut" }, { ".torrent", "BitTorrent" },
            { ".log", "Log File" },         { ".ini", "INI Configuration" },
            { ".cfg", "Config File" },      { ".conf", "Configuration" },
            { ".yaml", "YAML Config" },     { ".toml", "TOML Config" },
            { ".env", "Environment File" }, { ".gitignore", "Git Ignore" },
            { ".dockerfile", "Dockerfile" }, { ".md", "Markdown" },
            { ".tex", "LaTeX Source" },     { ".bib", "BibTeX Library" },

            // ── Additional / Misc ---------------------------------------------
            { ".dwp", "SharePoint Web Part" },
            { ".fxp", "FoxPro Compiled" },
            { ".asd", "Word AutoSave" },
            { ".fsc", "Windows Search Cache" },
            { ".mid", "MIDI Sequence" },
            { ".fst", "FL Studio State" },
            { ".txt", "Plain Text File" },
            { ".pdb", "Program Database" },
            { ".dll", "Dynamic-Link Library" },
            { ".resources", ".NET Resources" },
            { ".cache", "Cache File" },
            { ".settings", "Settings XML" },
            { ".csproj", "C# Project" },
            { ".editorconfig", "EditorConfig" },
            { ".kdbx", "KeePass File" },
            { ".nupkg", "NuGet Package" },
            { ".p7s", "PKCS #7 Signature" },
            { ".map", "Source-Map File" },
            { ".flow", "Flow Type Declaration" },
            { ".mjs", "ES Module (JavaScript)" },
            { ".cjs", "CommonJS (JavaScript)" },
            { ".cts", "TypeScript CommonJS" },
            { ".mts", "TypeScript ES Module" },
            { ".jst", "JavaScript Template" },
            { ".markdown", "Markdown Document" },
            { ".applescript", "AppleScript" },
            { ".ch1", "Nintendo Character Data" },
            { ".vital", "Vital Synthesizer Preset" },
            { ".ds_store", "macOS Desktop Services Store" },
            { ".zpw", "ZippedWeb Package" },
            { ".flp", "FL Studio Project" },
            { ".flstheme", "FL Studio Theme" },
            { ".nmsv", "Native Instruments NMSV Preset" },
            { ".wav.256", "256-bit WAV Variant" },
            { ".pdf", "Portable Document Format" },
            { ".config", "Configuration XML/JSON" },
            { ".user", "User Settings" },
            { ".uptodate", "Up2Date Cache Flag" },
            { ".rtf", "Rich Text Format" },
            { ".buildwithskipanalyzers", "MSBuild Skip-Analyzers Flag" },
            { ".node", "Node.js Binary Module" },
            { ".snap", "Snapcraft Package" },
            { ".def", "Module-Definition File" },
            { ".bsd", "BSD Licence/Configuration" },
            { ".babelrc", "Babel Configuration" },
            { ".prettierrc", "Prettier Configuration" },
            { ".npignore", "NuGet Ignore Rules" },
            { ".php", "PHP Script" },
            { ".eslintignore", "ESLint Ignore" },
            { ".lic", "License File" },
            { ".nib", "NeXT Interface Builder" },
            { ".plist", "macOS Property List" },
            { ".mui", "Multilingual User Interface" },
            { ".efi", "UEFI Firmware" },
            { ".cip", "Chrome CIP Package" },
            { ".bin", "Binary Data" },
            { ".sdi", "System Deployment Image" },
            { ".ttf", "TrueType Font" },
            { ".cur", "Windows Cursor" },
            { ".ani", "Animated Cursor" },
            { ".diagpkg", "Windows Diagnostic Package" },
            { ".dat", "Generic Data File" },
            { ".diffbase", "Diff Base Snapshot" },
            { ".lm", "Language Model" },
            { ".lm1", "Language Model Variant 1" },
            { ".lm2", "Language Model Variant 2" },
            { ".lm3", "Language Model Variant 3" },
            { ".lex", "Lexicon Data" },
            { ".res", "Windows Resource" },
            { ".nlt", "NetLink Trust Data" },
            { ".nls", "National Language Support" },
            { ".chm", "Compiled HTML Help" },
            { ".fil", "File List Container" },
            { ".msixbundle", "MSIX Bundle" },
            { ".p7x", "PKCS #7 Extended" },
            { ".pri", "Package Resource Index" },
            { ".etl", "Event Trace Log" },
            { ".nlp", "Natural Language Processor Data" },
            { ".compositefont", "WPF Composite Font" },
            { ".aspx", "ASP.NET Page" },
            { ".ascx", "ASP.NET User Control" },
            { ".master", "ASP.NET Master Page" },
            { ".browser", "Browser Definition" },
            { ".lnk", "Windows Shortcut" },
            { ".default", "Default Settings" },
            { ".comments", "Comment Metadata" },
            { ".rsp", "Response File" },
            { ".tld", "Tag Library Descriptor" },
            { ".win32manifest", "Win32 Manifest" },
            { ".man", "Manual Page" },
            { ".mof", "Managed Object Format" },
            { ".uninstall", "Uninstall Script" },
            { ".tasks", "MSBuild Tasks" },
            { ".overridetasks", "MSBuild Override Tasks" },
            { ".orp", "ORP Data" },
            { ".adml", "Administrative Template Language" },
            { ".ppkg", "Provisioning Package" },
            { ".mstheme", "Microsoft Theme" },
            { ".msstyles", "Windows Style" },
            { ".mum", "Manifest Update Module" },
            { ".cat", "Security Catalog" },
            { ".jfm", "Jet Database Metadata" },
            { ".rs", "Rust Source" },
            { ".jll", "Julia LLVM Bitcode" },
            { ".sys", "Windows System Driver" },
            { ".p7b", "PKCS #7 Certificate Chain" },
            { ".wmfw", "Windows Media Framework" },
            { ".inf_loc", "INF Localization" },
            { ".winmd", "Windows Metadata" },
            { ".xbf", "XAML Binary Format" },
            { ".license", "License Token" },
            { ".fpie", "FPGA Intermediate Executable" },
            { ".cso", "Compiled Shader Object" },
            { ".sccd", "System Center Config Data" },
            { ".bundle", "Application Bundle" },
            { ".schema", "JSON/XML Schema" },
            { ".csg", "Constructive Solid Geometry" },
            { ".mun", "Multi-Unit Network" },
            { ".uce", "Universal Chess Engine" },
            { ".cpl", "Control Panel Applet" },
            { ".msc", "Microsoft Management Console" },
            { ".ax", "DirectShow Filter" },
            { ".table", "Lookup/Hash Table" },
            { ".tsp", "TSP Package/Script" },
            { ".tbl", "Table Data" },
            { ".drv", "Device Driver" },
            { ".sep", "Separator File" },
            { ".ocx", "ActiveX Control" },
            { ".msp", "Windows Installer Patch" },
            { ".scr", "Windows Screen Saver" },
            { ".vbs", "VBScript" },
            { ".grxml", "Grammar XML" },
            { ".xrm-ms", "Microsoft License" },
            { ".rll", "Resource Link Library" },
            { ".mfl", "MFL Language File" },
            { ".cdxml", "Cmdlet Definition XML" },
            { ".dtd", "Document Type Definition" },
            { ".psm1", "PowerShell Module Script" },
            { ".ps1xml", "PowerShell Format Data" },
            { ".wprp", "Windows Performance Recorder Profile" },
            { ".xsl", "XSLT Stylesheet" },
            { ".gyp", "Generate Your Projects" },
            { ".rld", "ReLoad Data" },
            { ".job", "Windows Task Job" },
            { ".gypi", "GYP Include" },
            { ".hlp", "Windows Help" },
            { ".gdl", "Generic Description Language" },
            { ".elf", "Executable and Linkable Format" },
            { ".ppd", "PostScript Printer Description" },
            { ".gpd", "Generic Printer Description" },
            { ".mbn", "Modem Binary" },
            { ".pak", "PAK Archive" },
            { ".dgml", "Directed Graph Markup" },
            { ".smp", "Sample File" },
            { ".lxa", "Microsoft Lexicon Audio" },
            { ".wwd", "Microsoft Works Wizard" },
            { ".wsf", "Windows Script File" },
            { ".cw", "CardWorks Template" },
            { ".phn", "Phun Physics Scene" },
            { ".am", "Automake File" },
            { ".fe", "File Encryptor" },
            { ".mllr", "Maximum Likelihood Linear Regression" },
            { ".ngr", "NEOGEO ROM" },
            { ".sch", "Schedule/Schema" },
            { ".adlm", "Autodesk License Manager" },
            { ".adxm", "Administrative XML" },
            { ".nmnl", "Normalized Minimal" },
            { ".propdesc", "Property Description" },
            { ".nsl", "Nokia Sound Library" },
            { ".ntf", "National Transfer Format" },
            { ".ntp", "NTP Configuration" },
            { ".forms", "Windows Forms" },
            { ".runtime", "Runtime Manifest" },
            { ".interop", "COM Interop Data" },
            { ".frm", "Visual Basic Form" },
            { ".bas", "Visual Basic Module" },
             { ".dwb", "Drum Workshop Bundle" },
            { ".npmignore", "NPM Ignore Rules" },
            { ".rsrc", "macOS Resource Fork" },
            { ".upd2date", "Up2Date Cache Flag" },
            { ".Up2Date", "Up2Date Cache Flag" },
            { ".jshintrc", "JSHint Configuration" },
            { ".lock", "Lock/Dependency Pin" },
            { ".nix", "Nix Expression" },
            { ".hr1", "HR1 Game Data" },
            { ".hr2", "HR2 Game Data" },
            { ".hr3", "HR3 Game Data" },
            { ".hr4", "HR4 Game Data" },
            { ".hr5", "HR5 Game Data" },
            { ".hr6", "HR6 Game Data" },
            { ".hr7", "HR7 Game Data" },
            { ".hr8", "HR8 Game Data" },
            { ".hr9", "HR9 Game Data" },
            { ".bnf", "Backus-Naur Form Grammar" },
            { ".clb", "COM+ Catalog" },
            { ".tlb", "Type Library" },
            { ".dic", "Dictionary/Lexicon" },
            { ".aux", "Auxiliary TeX File" },
            { ".ds", "DataStore/DS_Store" },
            { ".inc", "Include/Source Include" },
            { ".cpx", "Code Page Translation" },
            { ".mdl", "Model/Module File" },
            { ".dls", "Downloadable Sounds Bank" },
            { ".cdf-ms", "ClickOnce Deployment Manifest" },
            { ".addin", "Visual Studio Add-in" },
            { ".scp", "Windows Script Component" },
            { ".wmz", "Compressed Windows Media Player Skin" },
            { ".iec", "IEC Database" },
            { ".wsc", "Windows Script Component" },
            { ".vrg", "Visual Studio Registry Script" },
            { ".prx", "Proxy Auto-Config" },
            { ".nuspec", "NuGet Specification" },
            
            // ── Extended Archive / Compression --------------------------------
            { ".zipx", "ZIPX Archive" },
            { ".alz", "ALZip Archive" },
            { ".eeg", "EEG Compressed" },
            { ".001", "Split Archive Part 1" },
            { ".arj", "ARJ Archive" },
            { ".bh",  "BlakHole Archive" },
            { ".lha", "LHA Archive" },
            { ".lzh", "LHA/LZH Archive" },
            { ".pma", "PMarc Archive" },
            { ".arc", "ARC Archive" },
            { ".ace", "ACE Archive" },
            { ".aes", "AES-Encrypted File" },
            { ".zpak", "ZPAQ Archive" },
            { ".zstd", "Zstandard Archive" },
            { ".br",  "Brotli Archive" },
            { ".pea", "PeaZip Archive" },
            { ".tbz", "Tar.BZ Archive" },
            { ".tbz2", "Tar.BZ2 Archive" },
            { ".txz", "Tar.XZ Archive" },
            { ".tlz", "Tar.LZMA Archive" },
            { ".uu",  "UUEncoded File" },
            { ".uue", "UUEncoded File" },
            { ".xxe", "XXEncoded File" },
            { ".z",   "Unix Compress" },
            { ".tgz", "Tar.GZ Archive" },
            { ".isz", "ISO-Zipped Image" },
            { ".udf", "Universal Disk Format" },
            { ".i00", "DVD Decrypter Split Image Part 1" }
        };

                    string ext = System.IO.Path.GetExtension(FileName);
                    return map.TryGetValue(ext, out var desc) ? desc : "File";
                }
            }
        }
        /// <summary>
        /// A private class to pass a bundle of parameters to a BackgroundWorker's DoWork event.
        /// This encapsulates all the necessary settings for a file operation.
        /// </summary>
        private class DoWorkParameters
        {
            public FileOperation Operation { get; set; }          // The type of operation (e.g., Copy, Move, Delete).
            public List<string> TargetPaths { get; set; }         // The list of destination directories.
            public bool OverwriteAll { get; set; }                // Flag for "overwrite all" behavior.
            public bool DoNotOverwrite { get; set; }              // Flag for "do not overwrite" behavior.
            public bool OverwriteIfNewer { get; set; }            // Flag for "overwrite if newer" behavior.
            public bool KeepDirectoryStructure { get; set; }      // Flag to maintain the original folder structure.
            public bool CopyFilesOnly { get; set; }               // Flag to only copy files, not folders.
            public bool KeepEmptyFolders { get; set; }            // Flag to keep empty folders after a move/delete.
            public bool KeepOnlyFiles { get; set; }               // Flag to process only files.
        }

        /// <summary>
        /// A class to hold real-time information about the current file operation.
        /// This is likely used for displaying live progress in the UI.
        /// </summary>
        public class CurrentOperation
        {
            public string FileName { get; set; }  // The name of the file currently being processed.
            public long FileSize { get; set; }    // The size of the current file in bytes.
            public double Speed { get; set; }     // The current transfer speed.
        }

        /// <summary>
        /// Toggles the enabled state of various UI controls based on the application's state.
        /// This is typically used to enable/disable buttons like Start, Cancel, and Pause/Resume.
        /// </summary>
        /// <param name="enabled">If true, enables Start/Add buttons and disables Cancel/Pause/Resume. If false, does the opposite.</param>
        private void ToggleUIState(bool enabled)
        {
            addFileButton.Enabled = enabled;
            sourceDirectoryLabel.Enabled = enabled;
            startButton.Enabled = enabled;
            cancelButton.Enabled = !enabled;
            pauseResumeButton.Enabled = !enabled;
        }

        /// <summary>
        /// The main constructor for the mainForm class. It initializes components and sets up the application's state and workers.
        /// </summary>
        public mainForm()
        {
            /*  derive version from the EXE that is currently running  */
            var exe = System.IO.Path.GetFileNameWithoutExtension(Application.ExecutablePath);
            if (!exe.StartsWith("CTv") || !Version.TryParse(exe[3..], out _))
                throw new InvalidDataException(
                    Translator.Get("Executable must be named CTvX.Y.exe"));
            _localVersion = exe[3..];        // "1.0"
            _localZip = exe + ".zip";    // "CTv1.0.zip"

            // Initializes the combo boxes for post-copy actions and file operations.
            InitializeComponent();              // Initializes the visual components of the form.



            _slots = new[]
            {
            new Slot(1, progressBarMulti1, filesNameLabel1),
            new Slot(2, progressBarMulti2, filesNameLabel2),
            new Slot(3, progressBarMulti3, filesNameLabel3),
            new Slot(4, progressBarMulti4, filesNameLabel4)
            };


            InitializeDefaultSettings();        // Sets up default values for application settings if they don't exist.
            ConfigureApplicationSettings();     // A method placeholder (not shown) for configuring app settings.
            CheckForIllegalCrossThreadCalls = false; // Allows background workers to update the UI directly (Note: Not a best practice, but common for simplicity in some projects).
            filesDataGridView.SelectionMode = DataGridViewSelectionMode.FullRowSelect; // Configures how users select rows in the DataGridView.

            // Initialize the BackgroundWorker for 'Move' operations.
            _moveWorker = new BackgroundWorker
            {
                WorkerReportsProgress = true,          // Allows reporting progress updates.
                WorkerSupportsCancellation = true      // Allows the worker to be cancelled.
            };
            _moveWorker.DoWork += DeleteWorker_DoWork; // Attaches the event handler for the main work. (Note: The name `DeleteWorker_DoWork` is likely a typo, it should probably be `MoveWorker_DoWork` if it's a dedicated method.)
            _moveWorker.RunWorkerCompleted += MoveWorker_RunWorkerCompleted; // Attaches the event handler for when the worker completes.
            _moveWorker.ProgressChanged += MoveWorker_ProgressChanged;      // Attaches the event handler for progress updates.

            // Initialize the BackgroundWorker for 'Delete' operations.
            _deleteWorker = new BackgroundWorker
            {
                WorkerReportsProgress = true,
                WorkerSupportsCancellation = true
            };
            _deleteWorker.DoWork += DeleteWorker_DoWork;
            _deleteWorker.RunWorkerCompleted += DeleteWorker_RunWorkerCompleted;
            _deleteWorker.ProgressChanged += DeleteWorker_ProgressChanged;


            // Initialize the BackgroundWorker for 'Copy' operations.
            _copyWorker = new BackgroundWorker();
            _copyWorker.WorkerReportsProgress = true;
            _copyWorker.WorkerSupportsCancellation = true;
            _copyWorker.DoWork += _copyWorker_DoWork;
            _copyWorker.ProgressChanged += _copyWorker_ProgressChanged;
            _copyWorker.RunWorkerCompleted += _copyWorker_RunWorkerCompleted;

            // Initialize a Timer for UI updates, such as status labels or progress bars.
            if (_updateTimer == null)
            {
                _updateTimer = new Timer();
                _updateTimer.Interval = 1000; // Sets the timer to tick every 1000ms (1 second).
                _updateTimer.Tick += _updateTimer_Tick; // Attaches the event handler for each tick.
            }
            _cancellationTokenSource = new CancellationTokenSource(); // Creates an object for managing task cancellations.

            startWithWindowsCheckBox.Checked = Properties.Settings.Default.StartWithWindows;

            startWithWindowsCheckBox.CheckedChanged += startWithWindowsCheckBox_CheckedChanged;
            GetMyAppsName();
            //SyncStartupSetting();

            this.Shown += MainForm_Shown;
        }

        /// <summary>
        /// Initializes the default application settings. This method is called once when the application is first run.
        /// </summary>
        private void InitializeDefaultSettings()
        {
            if (!CopyThatProgram.Properties.Settings.Default.Initialized)
            {
                // Sets default values for various settings.
                CopyThatProgram.Properties.Settings.Default.FontSize = 9;
                CopyThatProgram.Properties.Settings.Default.Skin = "Dark Mode";
                CopyThatProgram.Properties.Settings.Default.LogRetentionDays = 10;
                CopyThatProgram.Properties.Settings.Default.BufferSize = 1024;
                CopyThatProgram.Properties.Settings.Default.AlwaysOnTop = false;
                CopyThatProgram.Properties.Settings.Default.ConfirmDragDrop = true;
                CopyThatProgram.Properties.Settings.Default.MinimizeToTray = false;
                CopyThatProgram.Properties.Settings.Default.StartWithWindows = false;
                CopyThatProgram.Properties.Settings.Default.Initialized = true; // Marks settings as initialized.
                CopyThatProgram.Properties.Settings.Default.Save(); // Saves the new default settings.
            }
        }

        /// <summary>
        /// Loads the current application settings from the user's configuration file and applies them to the UI controls.
        /// </summary>
        private void LoadCurrentSettings()
        {
            // Windows Settings Group
            alwaysOnTopCheckBox.Checked = CopyThatProgram.Properties.Settings.Default.AlwaysOnTop;
            confirmDragDropCheckBox.Checked = CopyThatProgram.Properties.Settings.Default.ConfirmDragDrop;
            minimizeSystemTrayCheckBox.Checked = CopyThatProgram.Properties.Settings.Default.MinimizeToTray;




            // Log Settings
            logFileCheckBox.Checked = CopyThatProgram.Properties.Settings.Default.LogToFile;
            logDaysNumUpDown.Minimum = 10;
            logDaysNumUpDown.Maximum = 30;
            logDaysNumUpDown.Value = CopyThatProgram.Properties.Settings.Default.LogRetentionDays;

            // Performance Settings
            bufferNumUpDown.Minimum = 100;
            bufferNumUpDown.Maximum = 2048;
            bufferNumUpDown.Value = CopyThatProgram.Properties.Settings.Default.BufferSize;

            overMBCheckBox.Checked = CopyThatProgram.Properties.Settings.Default.CopyFilesOver;
            setMBGBOverNumUpDown.Minimum = 1;
            setMBGBOverNumUpDown.Maximum = 100;
            setMBGBOverNumUpDown.Value = CopyThatProgram.Properties.Settings.Default.OverNum;

            // Other Settings
            onErrorCheckBox.Checked = CopyThatProgram.Properties.Settings.Default.RestartOnError;
            closeProgramCheckBox.Checked = CopyThatProgram.Properties.Settings.Default.CloseOnError;
            startWithWindowsCheckBox.Checked = CopyThatProgram.Properties.Settings.Default.StartWithWindows;

            // Sound Settings
            onFinishCheckBox.Checked = CopyThatProgram.Properties.Settings.Default.SoundCopyComplete;
            onAddFilesCheckBox.Checked = CopyThatProgram.Properties.Settings.Default.SoundFileAdded;
            onCancelCheckBox.Checked = CopyThatProgram.Properties.Settings.Default.SoundCancel;
            onErrorCheckBox.Checked = CopyThatProgram.Properties.Settings.Default.SoundError;

            // Auto Save Settings
            saveAutoCheckBox.Checked = CopyThatProgram.Properties.Settings.Default.AutoSaveSettings;
        }

        /// <summary>
        /// Initializes the main DataGridView control, sets up its data source, and defines its columns.
        /// </summary>
        private void InitializeDataGridView()
        {
            _bindingSource.DataSource = _fileList;           // Binds the DataGridView to the list of FileInfoWrapper objects.
            filesDataGridView.DataSource = _bindingSource;   // Sets the DataGridView's data source.

            filesDataGridView.AutoGenerateColumns = false;   // Prevents automatic column creation.
            filesDataGridView.Columns.Clear();               // Clears any existing columns.

            // Adds columns to the DataGridView, mapping them to the properties of FileInfoWrapper.
            filesDataGridView.Columns.AddRange(new DataGridViewColumn[]
            {
             new DataGridViewTextBoxColumn { DataPropertyName = "FileName", HeaderText = "Name", Width = 200 },
             new DataGridViewTextBoxColumn { DataPropertyName = "FilePath", HeaderText = "Path", Width = 300 },
             new DataGridViewTextBoxColumn { DataPropertyName = "ItemType", HeaderText = "Type", Width = 80 },
             new DataGridViewTextBoxColumn { DataPropertyName = "FileSize", HeaderText = "Size", Width = 60 },
             new DataGridViewTextBoxColumn { DataPropertyName = "Status", HeaderText = "Status", Width = 100 },
             new DataGridViewTextBoxColumn { DataPropertyName = "BytesRaw", HeaderText = "BytesRaw", Visible = false } // Hides this column from the user.
            });

            ConfigureSecondaryGridViews(); // Calls a method to set up other DataGridViews.

            // Attaches an event handler for cell clicks, first removing it to prevent duplicates.
            filesDataGridView.CellMouseClick -= filesDataGridView_CellMouseClick;
            filesDataGridView.CellMouseClick += filesDataGridView_CellMouseClick;

            _bindingSource.ResetBindings(false); // Refreshes the data bindings.
        }


        /// <summary>
        /// Configures the columns for the secondary DataGridView controls (dataGridView1 and dataGridView2).
        /// </summary>
        private void ConfigureSecondaryGridViews()
        {
            // Configures dataGridView1 if its columns have not been set up.
            if (dataGridView1.Columns.Count == 0)
            {
                dataGridView1.Columns.AddRange(new DataGridViewColumn[]
                {
                 new DataGridViewTextBoxColumn { DataPropertyName = "FileName", HeaderText = "File's Name", Width = 200 },
                 new DataGridViewTextBoxColumn { DataPropertyName = "FilePath", HeaderText = "File's Path", Width = 300 },
                 new DataGridViewTextBoxColumn { DataPropertyName = "ItemType", HeaderText = "Type", Width = 80 },
                 new DataGridViewTextBoxColumn { DataPropertyName = "FileSize", HeaderText = "File's Size", Width = 100 },
                 new DataGridViewTextBoxColumn { DataPropertyName = "Status", HeaderText = "Status", Width = 100 },
                 new DataGridViewTextBoxColumn { DataPropertyName = "BytesRaw", HeaderText = "BytesRaw", Visible = false }
                });
            }

            //// Configures dataGridView2 if its columns have not been set up.
            //if (dataGridView2.Columns.Count == 0)
            //{
            //    dataGridView2.Columns.AddRange(new DataGridViewColumn[]
            //    {
            //     new DataGridViewTextBoxColumn { DataPropertyName = "FileName", HeaderText = "File's Name", Width = 200 },
            //     new DataGridViewTextBoxColumn { DataPropertyName = "FilePath", HeaderText = "File/Dir(s) Path", Width = 300 },
            //     new DataGridViewTextBoxColumn { DataPropertyName = "ItemType", HeaderText = "Type", Width = 80 },
            //     new DataGridViewTextBoxColumn { DataPropertyName = "FileSize", HeaderText = "File's Size", Width = 100 },
            //     new DataGridViewTextBoxColumn { DataPropertyName = "Status", HeaderText = "Status", Width = 100 },
            //     new DataGridViewTextBoxColumn { DataPropertyName = "BytesRaw", HeaderText = "BytesRaw", Visible = false }
            //    });
            //}
        }

        /// <summary>
        /// This method provides a centralized way to update the UI from any thread.
        /// It checks if a UI update is required and, if so, invokes the action on the UI thread.
        /// </summary>
        /// <param name="type">The type of UI update, defined in the UIUpdateType enum.</param>
        /// <param name="message">An optional message to display (e.g., for errors or completion notices).</param>
        private void UpdateUI(UIUpdateType type, string message = "")
        {
            // Check if the current thread is not the UI thread.
            if (InvokeRequired)
            {
                // If not, use Invoke to execute this method on the UI thread.
                Invoke(new Action(() => UpdateUI(type, message)));
                return;
            }

            // Handle the UI update based on the specified type.
            switch (type)
            {
                case UIUpdateType.InitialScanStarted:
                    // This case is currently empty, but would be used to handle UI changes when a scan begins.
                    break;
                case UIUpdateType.InitialScanProgress:
                    // This case is currently empty, but would be used to update progress during the initial scan.
                    break;
                case UIUpdateType.InitialScanCompleted:
                    // This case is currently empty, but would be used to handle UI changes when a scan completes.
                    break;
                case UIUpdateType.Progress:
                    // This case is currently empty, but would be used to update progress bars and labels.
                    break;
                case UIUpdateType.OperationCanceled:
                    // Display a message box informing the user that the operation was canceled.
                    MessageBox.Show(Translator.Get(message), Translator.Get("Operation Canceled"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    // Call a method to reset all UI elements and variables related to progress.
                    ResetProgressUIAndVariables();
                    break;
                case UIUpdateType.OperationCompleted:
                    // Display a message box informing the user that the operation is complete.
                    MessageBox.Show(Translator.Get(message), Translator.Get("Operation Complete"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    // Reset all progress-related UI and variables.
                    ResetProgressUIAndVariables();
                    break;
                case UIUpdateType.Error:
                    // Display an error message box with the provided message.
                    MessageBox.Show(Translator.Get("Error: " + message), Translator.Get("Error"), MessageBoxButtons.OK, MessageBoxIcon.Error);
                    break;
                case UIUpdateType.StatusMessage:
                    // This case is currently empty, but would be used to display simple status messages.
                    break;
                default:
                    // Default case, does nothing.
                    break;
            }
        }

        /// <summary>
        /// A custom class that extends BindingList to add sorting functionality.
        /// This allows a data-bound control, like a DataGridView, to be sorted by clicking column headers.
        /// </summary>
        /// <typeparam name="T">The type of items in the list.</typeparam>
        public class SortableBindingList<T> : BindingList<T>
        {
            private bool isSortedValue;               // Stores whether the list is currently sorted.
            private ListSortDirection sortDirectionValue; // Stores the direction of the current sort.
            private PropertyDescriptor sortPropertyValue;  // Stores the property used for the current sort.

            // Overrides to tell the BindingList that sorting is supported.
            protected override bool SupportsSortingCore => true;
            protected override bool IsSortedCore => isSortedValue;

            // Overrides to return the current sort property and direction.
            protected override PropertyDescriptor SortPropertyCore => sortPropertyValue;
            protected override ListSortDirection SortDirectionCore => sortDirectionValue;

            /// <summary>
            /// Applies the sort to the list based on the given property descriptor and direction.
            /// </summary>
            /// <param name="prop">The property to sort by.</param>
            /// <param name="direction">The sort direction (Ascending or Descending).</param>
            protected override void ApplySortCore(PropertyDescriptor prop, ListSortDirection direction)
            {
                var items = Items as List<T>;
                if (items != null)
                {
                    // Use LINQ to order the list items.
                    var sortedItems = direction == ListSortDirection.Ascending
                        ? items.OrderBy(x => prop.GetValue(x)).ToList()
                        : items.OrderByDescending(x => prop.GetValue(x)).ToList();

                    // Clear the original list and add the sorted items back.
                    items.Clear();
                    foreach (var item in sortedItems)
                        items.Add(item);

                    // Update the sort properties.
                    sortPropertyValue = prop;
                    sortDirectionValue = direction;
                    isSortedValue = true;

                    // Raise a ListChanged event to notify bound controls to refresh.
                    OnListChanged(new ListChangedEventArgs(ListChangedType.Reset, -1));
                }
            }

            /// <summary>
            /// Removes the sort from the list.
            /// </summary>
            protected override void RemoveSortCore()
            {
                isSortedValue = false;
            }
        }

        /// <summary>
        /// Updates the UI based on the selected file operation.
        /// </summary>
        private void UpdateUIForOperation()
        {
            // Check if the "Secure Delete" option is selected.
            bool isDelete = copyMoveDeleteComboBox.SelectedItem.ToString() == "Secure Delete";
            // Disable the target directory label if the operation is "Secure Delete".
            targetDirLabel.Enabled = !isDelete;
            // Disable the source directory label if the operation is "Secure Delete".
            sourceDirectoryLabel.Enabled = !isDelete;
        }
        private void SetupUI()
        {
            // Configure the main DataGridView control.
            filesDataGridView.AutoGenerateColumns = false; // Prevents the grid from automatically creating columns.
            filesDataGridView.AllowUserToAddRows = false; // Prevents the user from adding new rows.

            // Set the maximum value for all progress bars to 10000 for finer granularity.
            modernFile.Maximum = 10000;
            modernTotal.Maximum = 10000;
            progressBarMulti1.Maximum = 10000;
            progressBarMulti2.Maximum = 10000;
            progressBarMulti3.Maximum = 10000;
            progressBarMulti4.Maximum = 10000;
            progressBarMultiTotal.Maximum = 10000;
            multithreadCheckBox.Checked = true;
            keepDirStructCheckBox.Checked = true;
        }

        /// <summary>
        /// Resets all progress-related UI elements and variables to their initial state.
        /// This is called after an operation is completed or canceled.
        /// </summary>
        private void ResetProgressUIAndVariables()
        {
            // Ensure the method is executed on the UI thread.
            if (InvokeRequired)
            {
                Invoke(new Action(ResetProgressUIAndVariables));
                return;
            }

            _processedFiles = 0;
            modernFile.Value = 0;
            modernTotal.Value = 0;


            modernFile.Text = "0.00%";
            modernTotal.Text = "0.00%";

            // Reset the total progress label and bar.
            fileProcessedLabel.Text = Translator.Get("Files Processed: 0 Bytes / 0 Bytes");
            totalCopiedProgressLabel.Text = string.Format(
                Translator.Get("Total C/M/D: 0 Bytes / {0}"),
                FormatBytes(_totalBytesToProcess));
            fileCountOnLabel.Text = Translator.Get("File Count: 0 Out of 0");
            // Reset internal total bytes processed counters.
            _totalBytesProcessed = 0;
            _totalBytesToProcess = 0;

            // Reset all multithreaded progress bars and labels.
            progressBarMulti1.Value = 0;
            progressBarMulti1.Text = "0.00%";
            progressBarMulti2.Value = 0;
            progressBarMulti2.Text = "0.00%";
            progressBarMulti3.Value = 0;
            progressBarMulti3.Text = "0.00%";
            progressBarMulti4.Value = 0;
            progressBarMulti4.Text = "0.00%";
            progressBarMultiTotal.Value = 0;
            progressBarMultiTotal.Text = "0.00%";
            //multiThreadTotalProgressLabel.Text = "0.00%";

            // Reset the path labels to their default text.
            fileCountOnLabel.Text = Translator.Get("File Count: 0 Out of 0");
            totalCopiedProgressLabel.Text = string.Format(
                Translator.Get("Total C/M/D: 0 Bytes / {0}"),
                FormatBytes(_totalBytesToProcess));
            fromFilesDirLabel.Text = Translator.Get("Select Files/Directory");
            targetDirLabel.Text = Translator.Get("Select Target Directory");
            fileCountMultiLabel.Text = Translator.Get("File Count: 0 Out of 0");
            totalCMDMultiLabel.Text = Translator.Get("Total C/M/D: 0 Bytes / 0 Bytes");
            filePathLabel.Text = Translator.Get("Nothing");
            _fileList.Clear();
            _sourceDirectories.Clear();
            _currentTargetPaths.Clear();
            _targetDirectories.Clear();
            _sourcePaths.Clear();
            targetPaths.Clear();

        }
        /// <summary>
        /// Configures all application settings by applying user preferences from the settings store.
        /// This method initializes core application behavior and UI settings during startup or settings changes.
        /// </summary>
        private void ConfigureApplicationSettings()
        {
            // Apply application settings that affect core behavior.
            ConfigureWindowsStartup(CopyThatProgram.Properties.Settings.Default.StartWithWindows);
            ConfigureAlwaysOnTop(CopyThatProgram.Properties.Settings.Default.AlwaysOnTop);
            ConfigureDragDropConfirmation(CopyThatProgram.Properties.Settings.Default.ConfirmDragDrop);

            // Apply UI-related settings.
            ApplyLanguageSettings();
        }

        /// <summary>
        /// Configures whether the application starts automatically with Windows using the Registry.
        /// </summary>
        /// <param name="startWithWindows">True to add the app to startup, false to remove it.</param>
        private void ConfigureWindowsStartup(bool startWithWindows)
        {
            const string RunKey = @"SOFTWARE\Microsoft\Windows\CurrentVersion\Run";
            // Open the Run key in the current user's registry hive with write permissions.
            using (var key = Microsoft.Win32.Registry.CurrentUser.OpenSubKey(RunKey, true))
            {
                if (startWithWindows)
                {
                    // Set a new value with the application's executable path.
                    key.SetValue("CopyThatProgram", System.Windows.Forms.Application.ExecutablePath);
                }
                else
                {
                    // Delete the value if it exists. The 'false' parameter prevents an exception if the value is not found.
                    key.DeleteValue("CopyThatProgram", false);
                }
            }
        }
        /// <summary>
        /// Configures drag-and-drop functionality with optional confirmation prompt before processing files.
        /// Based on the configuration setting, either attaches confirmation-based or standard drag-drop event handlers.
        /// </summary>
        /// <param name="confirmDragDrop">True to show confirmation prompts before processing dragged files, false to process files immediately</param>
        private void ConfigureDragDropConfirmation(bool confirmDragDrop)
        {
            // The `confirmDragDrop` setting determines if a confirmation prompt should appear before processing dragged files.
            if (confirmDragDrop == true)
            {
                // Enable drag-and-drop and attach event handlers for confirmation logic.
                this.AllowDrop = true;
                this.DragEnter += MainForm_DragEnterWithConfirmation;
                this.DragDrop += MainForm_DragDropWithConfirmation;
            }
            else
            {
                // Enable drag-and-drop and attach standard event handlers without a confirmation.
                this.AllowDrop = true;
                this.DragEnter += MainForm_DragEnter;
                this.DragDrop += MainForm_DragDrop;
            }
        }

        /// <summary>
        /// This event handler is for the UI timer's tick event. It calculates and updates
        /// the transfer speed and estimated time remaining every second.
        /// </summary>
        private void updateTimer_Tick(object sender, EventArgs e)
        {
            // Do nothing if the operation is paused or canceled.
            if (_isPaused || _isCanceled) return;
            // Do nothing if the stopwatch hasn't started or no bytes have been processed.
            if (_stopwatch.ElapsedMilliseconds == 0 && _totalBytesProcessed == 0)
                return;

            long elapsedMs = _stopwatch.ElapsedMilliseconds;
            if (elapsedMs == 0)
                return;

            // Calculate bytes processed since the last tick.
            long bytesSinceLastTick = _totalBytesProcessed - _lastProcessedBytesForSpeed;

            // Calculate speed in bytes per second.
            double speedBps = bytesSinceLastTick / ((DateTime.Now - _lastSpeedCalcTime).TotalSeconds);

            // Use a switch expression to format the speed into B/s, KB/s, MB/s, or GB/s.
            string speedText = speedBps switch
            {
                < 1024 => $"{speedBps:F2} B/s",
                < 1024 * 1024 => $"{speedBps / 1024:F2} KB/s",
                < 1024L * 1024 * 1024 => $"{speedBps / (1024.0 * 1024):F2} MB/s",
                _ => $"{speedBps / (1024.0 * 1024 * 1024):F2} GB/s"
            };

            // Calculate the estimated time remaining.
            long bytesRemaining = _totalBytesToProcess - _totalBytesProcessed;
            TimeSpan eta = bytesRemaining <= 0 || speedBps <= 0
                ? TimeSpan.Zero
                : TimeSpan.FromSeconds(bytesRemaining / speedBps);

            TimeSpan elapsed = TimeSpan.FromMilliseconds(elapsedMs);

            // Calculate the total estimated target time.
            TimeSpan target = elapsed + eta;

            // Calculate running grand totals (current operation + previously saved totals)
            var settings = Properties.Settings.Default;
            _grandElapsedTime = TimeSpan.FromSeconds(settings.TotalElapsedTimeSeconds) + elapsed;
            _grandTargetTime = TimeSpan.FromSeconds(settings.TotalTargetTimeSeconds) + target;

            // Update the UI labels with the new speed and time information
            if (speedLabel != null && !speedLabel.IsDisposed)
                speedLabel.Text = string.Format(Translator.Get("Speed: {0}"), speedText);

            // Update current operation time display
            if (elapsedAndTargetTimeLabel != null && !elapsedAndTargetTimeLabel.IsDisposed)
                elapsedAndTargetTimeLabel.Text = $"Elapsed / Target Time: {elapsed:hh\\:mm\\:ss} / {target:hh\\:mm\\:ss}";

            // Update running totals display
            if (totalElapsedTimeLabel != null && !totalElapsedTimeLabel.IsDisposed)
                totalElapsedTimeLabel.Text = string.Format(
                    Translator.Get("Total Elapsed Time: {0}"),
                    TotalsManager.FormatTimeWithDaysAndYears(_grandElapsedTime));

            if (totalTargetTimeLabel != null && !totalTargetTimeLabel.IsDisposed)
                totalTargetTimeLabel.Text = string.Format(
                    Translator.Get("Total Target Time: {0}"),
                    TotalsManager.FormatTimeWithDaysAndYears(_grandTargetTime));
            // Store the current values for the next calculation.
            _lastProcessedBytesForSpeed = _totalBytesProcessed;
            _lastSpeedCalcTime = DateTime.Now;

            // Update the drive space information.
            UpdateDriveSpaceInfo();
        }




        /// <summary>
        /// This method retrieves the file path of the currently active Windows Explorer window.
        /// It uses COM objects and P/Invoke to interact with the Windows Shell.
        /// </summary>
        /// <returns>The path of the active Explorer window, or the Desktop path if no Explorer window is active or the path cannot be determined.</returns>
        private static string GetExplorerPath()
        {
            string value = "";
            // Get the handle of the active window (foreground window) using a P/Invoke call.
            IntPtr handle = GetForegroundWindow();

            // Instantiate the ShellWindows COM object, which represents all open shell windows.
            // A reference to SHDocVw.dll is required for this.
            ShellWindows shellWindows = new SHDocVw.ShellWindows();

            // Iterate through all open shell windows.
            foreach (InternetExplorer window in shellWindows)
            {
                // Check if the current window is the active (foreground) window.
                if ((IntPtr)window.HWND == handle)
                {
                    // Try to get the ShellFolderViewDual2 object, which represents the file list of an Explorer window.
                    var shellWindow = window.Document as Shell32.IShellFolderViewDual2;

                    if (shellWindow != null)
                    {
                        // Retrieve the current folder item.
                        var currentFolder = shellWindow.Folder.Items().Item();

                        // Check for special cases like "Desktop" or other virtual folders, which have a "::" path.
                        if (currentFolder == null || currentFolder.Path.StartsWith("::"))
                        {
                            // If it's a special folder, use the window title as a fallback path.
                            const int nChars = 256;
                            StringBuilder Buff = new StringBuilder(nChars);
                            if (GetWindowText(handle, Buff, nChars) > 0)
                            {
                                return Buff.ToString();
                            }
                        }
                        else
                        {
                            // If a valid path is found, return it.
                            value = currentFolder.Path;
                            return currentFolder.Path;
                        }
                    }
                }
            }

            // If the foreground window wasn't an Explorer window, or the path couldn't be determined,
            // iterate through all open Explorer windows again to find the first valid path.
            foreach (InternetExplorer window in shellWindows)
            {
                var shellWindow = window.Document as Shell32.IShellFolderViewDual2;
                if (shellWindow != null)
                {
                    var currentFolder = shellWindow.Folder.Items().Item();
                    if (currentFolder == null || currentFolder.Path.StartsWith("::"))
                    {
                        const int nChars = 256;
                        StringBuilder Buff = new StringBuilder(nChars);
                        if (GetWindowText((IntPtr)window.HWND, Buff, nChars) > 0)
                        {
                            return Buff.ToString();
                        }
                    }
                    else
                    {
                        value = currentFolder.Path;
                        return currentFolder.Path;
                    }
                }
            }

            // As a final fallback, return the path to the user's Desktop.
            string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            return (desktopPath);
        }

        // P/Invoke method declarations to call unmanaged functions from user32.dll.
        [DllImport("user32.dll")]
        static extern IntPtr GetForegroundWindow();

        [DllImport("user32.dll")]
        static extern int GetWindowText(IntPtr hWnd, StringBuilder text, int count);

        /// <summary>
        /// Initializes the combo box for post-operation actions.
        /// </summary>
        private void InitializePostCopyActionComboBox()
        {
            // Populate the combo box with options for what the program should do after an operation is complete.
            onFinishComboBox.Items.AddRange(new string[]
            {
    "Do Nothing",
    "Sleep",
    "Log Off",
    "Exit Program",
    "Shut Down"
            });

            onFinishMultiComboBox.Items.AddRange(new string[]
{
    "Do Nothing",
    "Sleep",
    "Log Off",
    "Exit Program",
    "Shut Down"
});
        }

        /// <summary>
        /// Configures the application's "Always On Top" setting.
        /// </summary>
        /// <param name="alwaysOnTop">A boolean indicating whether the window should be the topmost window.</param>
        private void ConfigureAlwaysOnTop(bool alwaysOnTop)
        {
            // Set the form's TopMost property based on the setting.
            this.TopMost = alwaysOnTop;
        }

        /// <summary>
        /// Applies the language settings based on user preferences.
        /// The switch statement is a placeholder for future localization logic.
        /// </summary>
        private void ApplyLanguageSettings()
        {
            // Placeholder logic for applying different language settings.
            switch (CopyThatProgram.Properties.Settings.Default.Language)
            {
                case "English":
                    break;
                case "Inglés":
                    break;
                case "French":
                    break;
                case "Francés":
                    break;
                case "German":
                    break;
                case "Deutsch":
                    break;
                case "Spanish":
                    break;
                case "Español":
                    break;
            }
        }


        /// <summary>
        /// Applies the theme and font settings based on user preferences.
        /// </summary>
        /// 

        private void ApplyThemeSettings()
        {
            string savedSkinKey = CopyThatProgram.Properties.Settings.Default.Skin ?? "Light Mode";

            switch (savedSkinKey)
            {
                case "Dark Mode":
                    // Apply dark theme colors (Your existing color logic)
                    ChangeControlsForeColor(this, System.Drawing.Color.White);
                    ChangeControlsBackColor(this, System.Drawing.Color.Black);
                    ChangeControlColorsLabelsCheckBoxes(System.Drawing.Color.Transparent);
                    this.BackColor = System.Drawing.Color.Black;
                    filesDataGridView.DefaultCellStyle.ForeColor = System.Drawing.Color.Black; // Keep grid text readable
                    filesDataGridView.DefaultCellStyle.SelectionForeColor = System.Drawing.Color.White;
                    break;

                case "Medium Mode":
                    // Apply medium theme colors
                    ChangeControlsForeColor(this, System.Drawing.Color.Black);
                    ChangeControlsBackColor(this, System.Drawing.Color.Gainsboro);
                    ChangeControlColorsLabelsCheckBoxes(System.Drawing.Color.Transparent);
                    this.BackColor = System.Drawing.Color.Gainsboro;
                    filesDataGridView.DefaultCellStyle.ForeColor = System.Drawing.Color.Black;
                    filesDataGridView.DefaultCellStyle.SelectionForeColor = System.Drawing.Color.White;
                    break;

                case "Light Mode":
                    // Apply light theme colors
                    ChangeControlsForeColor(this, System.Drawing.Color.Black);
                    ChangeControlsBackColor(this, System.Drawing.Color.White);
                    ChangeControlColorsLabelsCheckBoxes(System.Drawing.Color.Transparent);
                    this.BackColor = System.Drawing.Color.White;
                    filesDataGridView.DefaultCellStyle.ForeColor = System.Drawing.Color.Black;
                    filesDataGridView.DefaultCellStyle.SelectionForeColor = System.Drawing.Color.White;
                    break;

                case "Custom Color":
                    // Apply custom theme colors read from settings
                    ChangeControlsBackColor(this, Properties.Settings.Default.CustomBackColor);
                    ChangeControlsForeColor(this, Properties.Settings.Default.CustomForeColor);
                    ChangeControlColorsLabelsCheckBoxes(System.Drawing.Color.Transparent);
                    this.BackColor = Properties.Settings.Default.CustomBackColor;
                    this.ForeColor = Properties.Settings.Default.CustomForeColor;
                    filesDataGridView.DefaultCellStyle.ForeColor = System.Drawing.Color.Black; // Keep grid text readable
                    filesDataGridView.DefaultCellStyle.SelectionForeColor = System.Drawing.Color.White;
                    break;

                default: // Fallback to Light Mode if key is unrecognized
                    ChangeControlsForeColor(this, System.Drawing.Color.Black);
                    ChangeControlsBackColor(this, System.Drawing.Color.White);
                    ChangeControlColorsLabelsCheckBoxes(System.Drawing.Color.Transparent);
                    this.BackColor = System.Drawing.Color.White;
                    filesDataGridView.DefaultCellStyle.ForeColor = System.Drawing.Color.Black;
                    filesDataGridView.DefaultCellStyle.SelectionForeColor = System.Drawing.Color.White;
                    break;
            }

            this.Font = new System.Drawing.Font("Arial Regular", CopyThatProgram.Properties.Settings.Default.FontSize);
        }



        /// <summary>
        /// Asynchronously scans a directory and updates the UI with the found files and folders.
        /// This method uses an asynchronous approach to prevent the UI from freezing.
        /// </summary>
        /// <param name="path">The directory path to scan.</param>
        /// <param name="updateIntervalMs">The interval in milliseconds to update the UI with progress.</param>
        public async Task ScanDirectoryWithUpdatesAsync(string path, int updateIntervalMs = 10)
        {
            // Disable the DataGridView while scanning to prevent user interaction and visual glitches.
            filesDataGridView.Enabled = false;

            // Validation checks to ensure the path is valid and exists.
            if (string.IsNullOrWhiteSpace(path) || !Directory.Exists(path))
            {
                MessageBox.Show(Translator.Get($"Invalid folder: {path}"), Translator.Get("Scan Error"),
                                 MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            var fullPath = System.IO.Path.GetFullPath(path).TrimEnd(System.IO.Path.DirectorySeparatorChar);
            _currentSourceRootPath = fullPath;

            // Check to prevent the user from trying to scan an entire drive.
            string root = System.IO.Path.GetPathRoot(fullPath).TrimEnd(System.IO.Path.DirectorySeparatorChar);
            if (string.Equals(root, fullPath, StringComparison.OrdinalIgnoreCase))
            {
                MessageBox.Show(Translator.Get("You cannot scan an entire drive."), Translator.Get("Scan Not Allowed"),
                                 MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            // Clear previous scan data.
            _fileList.Clear();
            _seenPaths.Clear();
            _grandTotalFileCount = 0;
            _totalDirs = 0;
            _totalBytesToProcess = 0;

            // Temporarily suspend UI layout updates for the DataGridView for performance.
            filesDataGridView.SuspendLayout();
            filesDataGridView.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.None;
            filesDataGridView.RowHeadersWidthSizeMode = DataGridViewRowHeadersWidthSizeMode.DisableResizing;

            // Define a set of folders to exclude from the scan.
            var exclude = new HashSet<string>(StringComparer.OrdinalIgnoreCase)
    {
        "$Recycle.Bin", "Recycle Bin", "System Volume Information"
    };

            // Define enumeration options for the directory scan.
            var options = new EnumerationOptions
            {
                RecurseSubdirectories = true,
                IgnoreInaccessible = true,
                AttributesToSkip = FileAttributes.System | FileAttributes.Hidden,
                ReturnSpecialDirectories = false
            };

            // Start the scanning process on a background thread to keep the UI responsive.
            await Task.Run(() => DoScan(exclude, options, updateIntervalMs));

            // Resume UI layout updates and re-enable controls after the scan is complete.
            filesDataGridView.ResumeLayout();
            EnableAllControls(this);
            if (onAddFilesCheckBox.Checked) PlayRes(Properties.Resources.OnAddFiles);
        }

        /// <summary>
        /// The core scanning logic that runs on a background thread.
        /// It enumerates files and folders and adds them to a batch for periodic UI updates.
        /// </summary>
        /// <param name="exclude">A set of folder names to exclude.</param>
        /// <param name="opts">The enumeration options.</param>
        /// <param name="intervalMs">The interval for flushing batches to the UI.</param>
        private void DoScan(HashSet<string> exclude, EnumerationOptions opts, int intervalMs)
        {
            var batch = new List<FileInfoWrapper>(512);
            var sw = Stopwatch.StartNew();

            /* ----------  NEW: add the root directory itself  ---------- */
            var rootDir = new DirectoryInfo(_currentSourceRootPath);
            if (!exclude.Contains(rootDir.Name))          // respect exclusion list
            {
                batch.Add(new FileInfoWrapper
                {
                    FileName = rootDir.Name,
                    FilePath = rootDir.FullName,
                    IsDirectory = true,
                    BytesRaw = 0,
                    FileSize = "<DIR>",
                    Status = Translator.Get("Pending")
                });
                Interlocked.Increment(ref _totalDirs);
            }
            /* ---------------------------------------------------------- */

            foreach (var entry in FastEnumerator.Enumerate(_currentSourceRootPath, opts))
            {
                if (_cancellationTokenSource?.IsCancellationRequested == true)
                    break;

                if (Exclude(entry, exclude))
                    continue;

                batch.Add(new FileInfoWrapper
                {
                    FileName = entry.Name,
                    FilePath = entry.FullPath,
                    IsDirectory = entry.IsDirectory,
                    BytesRaw = entry.Length,
                    FileSize = entry.IsDirectory ? "<DIR>" : FormatBytes(entry.Length),
                    Status = Translator.Get("Pending")
                });

                if (entry.IsDirectory)
                    Interlocked.Increment(ref _totalDirs);
                else
                {
                    Interlocked.Increment(ref _grandTotalFileCount);
                    Interlocked.Add(ref _totalBytesToProcess, entry.Length);
                }

                if (batch.Count >= 200 || sw.ElapsedMilliseconds >= intervalMs)
                {
                    var snapshot = batch.ToArray();
                    batch.Clear();
                    FlushBatch(snapshot);
                    sw.Restart();
                }
            }

            if (batch.Count > 0)
            {
                var snapshot = batch.ToArray();
                batch.Clear();
                FlushBatch(snapshot);
            }
        }
        /// <summary>
        /// Adds a batch of file information to the UI thread for display.
        /// </summary>
        /// <param name="snapshot">An array of FileInfoWrapper objects to add.</param>
        private void FlushBatch(FileInfoWrapper[] snapshot)
        {
            if (snapshot.Length == 0) return;

            // Capture the current counts for display.
            long filesSnap = _grandTotalFileCount;
            long bytesSnap = _totalBytesToProcess;

            // Use BeginInvoke to add the batch to the UI thread's queue.
            this.BeginInvoke((Action)(() =>
            {
                // Use a lock to ensure thread-safe access to the _fileList.
                lock (_batchLock)
                {
                    foreach (var item in snapshot)
                    {
                        // Use a HashSet to prevent duplicate entries from being added to the list.
                        if (_seenPaths.Add(item.FilePath))
                        {
                            _fileList.Add(item);
                        }
                    }

                    fileCountOnLabel.Text = string.Format(Translator.Get("File Count: {0} Out of {1}"),
                  _processedFiles.ToString("N0"),
                  _grandTotalFileCount.ToString("N0"));
                    totalCopiedProgressLabel.Text = string.Format(
            Translator.Get("Total C/M/D: 0 Bytes / {0}"),
            FormatBytes(_totalBytesToProcess));
                }
            }));
        }

        /// <summary>
        /// Checks if a file system entry should be excluded from the scan.
        /// </summary>
        /// <param name="e">The file system entry.</param>
        /// <param name="exclude">The set of excluded names.</param>
        /// <returns>True if the entry should be excluded, otherwise false.</returns>
        private static bool Exclude(FastFileSystemEntry e, HashSet<string> exclude)
        {
            // Check if any part of the full path contains an excluded name.
            foreach (var x in exclude)
            {
                if (e.FullPath.IndexOf(x, StringComparison.OrdinalIgnoreCase) >= 0)
                    return true;
            }
            return false;
        }

        /// <summary>
        /// Clears the DataGridView and resets all scan-related variables.
        /// </summary>
        private void ClearDataGridView()
        {
            // Create a new BindingList to clear the data.
            _fileList = new BindingList<FileInfoWrapper>();
            // Rebind the data source to the new, empty list.
            _bindingSource.DataSource = _fileList;
            filesDataGridView.DataSource = _bindingSource;

            // Force a refresh of the binding context to update the UI.
            CurrencyManager cm = (CurrencyManager)BindingContext[_bindingSource];
            cm.Refresh();

            // Reset all counters.
            _grandTotalFileCount = 0;
            _totalBytesToProcess = 0;
        }

        /// <summary>
        /// Updates the UI with the current scanning progress, showing the file being processed.
        /// </summary>
        /// <param name="currentPath">The path of the file currently being scanned.</param>
        /// <param name="currentCount">The current number of files found.</param>
        /// <param name="totalCount">The total number of files to be scanned (not used in this implementation).</param>
        private void UpdateScanProgress(string currentPath, int currentCount, int totalCount)
        {
            // Update the status and file path labels.
            statusLabel.Text = string.Format(Translator.Get("Scanning: {0}"),
                                             System.IO.Path.GetFileName(currentPath));
            filePathLabel.Text = currentPath;
        }

        /// <summary>
        /// Adds a batch of file items to the UI list and updates the progress labels.
        /// </summary>
        /// <param name="items">The list of items to add.</param>
        /// <param name="currentPath">The current path being scanned.</param>
        /// <param name="isFinalBatch">A flag to indicate if this is the last batch.</param>
        private void AddItemsBatchToUI(List<FileInfoWrapper> items, string currentPath, bool isFinalBatch)
        {
            foreach (var item in items)
                // Use Invoke to add each item to the UI list thread-safely.
                Invoke((Delegate)(() =>
                {
                    _fileList.Add(item);
                    // Auto-scroll the DataGridView to show the newly added item.
                    filesDataGridView.FirstDisplayedScrollingRowIndex = filesDataGridView.RowCount - 1;
                }));

            // Update the status labels if it's not the final batch.
            if (!isFinalBatch)
            {
                statusLabel.Text = string.Format(Translator.Get("Adding: {0}"),
                                                 System.IO.Path.GetFileName(currentPath));
                filePathLabel.Text = currentPath;
            }
        }

        /// <summary>
        /// Finalizes the UI updates after the scan is complete.
        /// This method ensures the DataGridView and other UI elements are correctly displayed with the final results.
        /// </summary>
        /// <param name="fileCount">The total number of files found.</param>
        /// <param name="dirCount">The total number of directories found.</param>
        /// <param name="totalBytes">The total size in bytes of all files.</param>
        private void CompleteScanUpdate(int fileCount, int dirCount, long totalBytes)
        {
            // Re-enable binding events.
            _bindingSource.RaiseListChangedEvents = true;

            // Force the data source to refresh its bindings.
            _bindingSource.ResetBindings(false);

            // Invalidate and refresh the DataGridView and its parent to ensure all changes are rendered.
            filesDataGridView.Invalidate(true);
            filesDataGridView.Update();
            filesDataGridView.Refresh();

            if (filesDataGridView.Parent != null)
            {
                filesDataGridView.Parent.Invalidate(true);
                filesDataGridView.Parent.Update();
            }

            // A workaround to force a full re-render of the DataGridView.
            var tempDataSource = _bindingSource.DataSource;
            _bindingSource.DataSource = null;
            _bindingSource.DataSource = tempDataSource;

            // Update the final counters and labels with the total scan results.
            _grandTotalFileCount = fileCount;
            _totalBytesToProcess = totalBytes;

            fileCountOnLabel.Text = string.Format(Translator.Get("File Count: {0} Out of {1}"),
                _processedFiles.ToString("N0"),
                _grandTotalFileCount.ToString("N0"));

            totalCopiedProgressLabel.Text = string.Format(
    Translator.Get("Total C/M/D: 0 Bytes / {0}"),
    FormatBytes(_totalBytesToProcess));
            fromFilesDirLabel.Text = string.Format(
                Translator.Get("Scan complete: {0} files and {1} folders || {2} total"),
                _grandTotalFileCount.ToString("N0"),
                dirCount.ToString("N0"),
                FormatBytes(_totalBytesToProcess));
            statusLabel.Text = string.Format(
                Translator.Get("Scan complete: {0} files…"),
                _totalFileCount.ToString("N0"));

            filePathLabel.Text = Translator.Get("Ready");
        }


        /// <summary>
        /// This method is intended to update the UI with scan progress information.
        /// However, it has a logical flaw: it adds new files to the list both before and after checking `InvokeRequired`.
        /// This can lead to duplicate entries and an error if called from a non-UI thread without proper handling.
        /// </summary>
        /// <param name="currentFileCount">The current number of files found (not used correctly).</param>
        /// <param name="currentTotalSize">The current total size of files found (not used correctly).</param>
        /// <param name="newFiles">A list of new FileInfoWrapper objects to add to the UI.</param>
        private void UpdateScanProgressUI(long currentFileCount, long currentTotalSize, List<FileInfoWrapper> newFiles)
        {
            // This loop adds files to the list on the calling thread, which could be a background thread.
            // This is problematic because `_fileList` is bound to the UI, so it should only be modified on the UI thread.
            foreach (var fileInfo in newFiles)
            {
                _fileList.Add(fileInfo);
            }

            // Checks if the method is being called from a different thread than the one that created the control.
            if (this.InvokeRequired)
            {
                // If so, it uses `Invoke` to call the method again on the UI thread, ensuring thread safety.
                // The return statement prevents the rest of the method from executing on the background thread.
                this.Invoke(new Action(() => UpdateScanProgressUI(currentFileCount, currentTotalSize, newFiles)));
                return;
            }

            // Checks if the `fileCountOnLabel` control exists.
            if (fileCountOnLabel != null)
            {
                // Updates the text of the label with the total file count.
                fileCountOnLabel.Text = string.Format(Translator.Get("File Count: {0} Out of {1}"),
                    _processedFiles.ToString("N0"),
                    _grandTotalFileCount.ToString("N0"));
            }
            // Checks if the `totalCopiedProgressLabel` control exists.
            if (totalCopiedProgressLabel != null)
            {
                // Updates the text of the label with the total size of files to be processed.
                totalCopiedProgressLabel.Text = string.Format(
        Translator.Get("Total C/M/D: 0 Bytes / {0}"),
        FormatBytes(_totalBytesToProcess));
            }

            // This is the second time the files are being added, which will result in duplicate entries.
            foreach (var item in newFiles)
            {
                _fileList.Add(item);
            }
        }


        /// <summary>
        /// Recursively disables all controls within a given parent control.
        /// </summary>
        /// <param name="parent">The parent control whose children should be disabled.</param>
        private void DisableAllControls(System.Windows.Forms.Control parent)
        {
            // Iterates through each control in the parent's control collection.
            foreach (System.Windows.Forms.Control ctrl in parent.Controls)
            {
                // Sets the `Enabled` property of the current control to false.
                ctrl.Enabled = false;

                // If the current control has child controls, it calls itself recursively.
                if (ctrl.HasChildren)
                {
                    DisableAllControls(ctrl);
                }
            }
        }
        /// <summary>
        /// An array of strings representing the size suffixes (Bytes, KB, MB, etc.).
        /// </summary>
        private static readonly string[] Suffixes =
        {
    "Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"
};

        /// <summary>
        /// Formats a number of bytes into a human-readable string with a size suffix.
        /// </summary>
        /// <param name="bytes">The number of bytes.</param>
        /// <param name="decimalPlaces">The number of decimal places to round to.</param>
        /// <returns>A formatted string (e.g., "1.23 GB").</returns>
        private static string FormatBytes(long bytes, int decimalPlaces = 2)
        {
            // If the number of bytes is 0, return "0 Bytes".
            if (bytes == 0) return "0 Bytes";

            double size = bytes;
            int idx = 0;

            // A series of if/else if statements to determine the correct suffix and value.
            // It checks for Terabytes, Gigabytes, Megabytes, and Kilobytes.
            if (bytes >= (1L << 40))
            {
                size = bytes / (double)(1L << 40);
                idx = 4; // TB
            }
            else if (bytes >= (1L << 30))
            {
                size = bytes / (double)(1L << 30);
                idx = 3; // GB
            }
            else if (bytes >= (1L << 20))
            {
                size = bytes / (double)(1L << 20);
                idx = 2; // MB
            }
            else if (bytes >= 1024)
            {
                size = bytes / 1024d;
                idx = 1; // KB
            }

            // Rounds the size to the specified number of decimal places.
            size = Math.Round(size, decimalPlaces);

            // Returns the formatted string using string interpolation.
            return $"{size.ToString($"F{decimalPlaces}")} {Suffixes[idx]}";
        }

        /// <summary>
        /// Attempts to parse a formatted size string (e.g., "1.23 GB") back into a long integer of bytes.
        /// </summary>
        /// <param name="input">The formatted string to parse.</param>
        /// <param name="result">The parsed long value if successful.</param>
        /// <returns>True if parsing was successful, otherwise false.</returns>
        public static bool TryParseFormattedSize(string input, out long result)
        {
            result = 0;

            // Returns false if the input string is null.
            if (input == null)
            {
                return false;
            }

            // Defines the suffixes to check for.
            string[] suffixes = { "Bytes", "KB", "MB", "GB", "TB" };
            // Trims whitespace from the input string.
            input = input.Trim();

            // Loops through the suffixes in reverse order (from largest to smallest).
            for (int i = suffixes.Length - 1; i >= 0; i--)
            {
                string suffix = suffixes[i];
                // Checks if the input string ends with the current suffix.
                if (input.EndsWith(suffix, StringComparison.OrdinalIgnoreCase))
                {
                    // Extracts the numeric part of the string.
                    string numberPart = input[..^suffix.Length].Trim();

                    // Tries to parse the numeric part as a double.
                    if (double.TryParse(numberPart, NumberStyles.Any, CultureInfo.InvariantCulture, out double number))
                    {
                        // Calculates the multiplier for the current suffix.
                        long multiplier = 1L << (i * 10);

                        // Checks for potential overflow before multiplication.
                        if (number > 0 && number > (double)long.MaxValue / multiplier)
                        {
                            result = long.MaxValue;
                            return false;
                        }
                        else if (number < 0 && number < (double)long.MinValue / multiplier)
                        {
                            result = long.MinValue;
                            return false;
                        }

                        // Calculates the final result in bytes and returns true.
                        result = (long)(number * multiplier);
                        return true;
                    }
                }
            }

            // As a fallback, try to parse the entire input as a simple long integer.
            if (long.TryParse(input, NumberStyles.Any, CultureInfo.InvariantCulture, out result))
            {
                return true;
            }

            return false;
        }
        /// <summary>
        /// Recursively enables all controls within a given parent control.
        /// </summary>
        /// <param name="parent">The parent control whose children should be enabled.</param>
        private void EnableAllControls(System.Windows.Forms.Control parent)
        {
            try
            {
                // Iterates through each control in the parent's control collection.
                foreach (System.Windows.Forms.Control ctrl in parent.Controls)
                {
                    // Sets the `Enabled` property of the current control to true.
                    ctrl.Enabled = true;

                    // If the current control has child controls, it calls itself recursively.
                    if (ctrl.HasChildren)
                    {
                        EnableAllControls(ctrl);
                    }
                }
            }
            catch { } // An empty catch block, which is generally bad practice as it can hide errors.
        }

        /// <summary>
        /// Initializes a `Progress` object to handle and report progress updates to the UI.
        /// </summary>
        private void InitializeProgressHandler()
        {
            // Creates a new Progress object with an action to be executed when progress is reported.
            progress = new Progress<ProgressReport>(report =>
            {
                modernTotal.Value = report.PercentComplete;
                // Forces the progress bar to repaint itself.
                modernTotal.Refresh();

                // Updates the text of the file path label.
                fromFilesDirLabel.Text = report.CurrentFile;
                // Forces the label to repaint.
                fromFilesDirLabel.Refresh();
                // Updates the text of the speed label.
                speedLabel.Text = string.Format(Translator.Get("{0} MB/s"), report.Speed.ToString("0.00"));
                // Forces the speed label to repaint.
                speedLabel.Refresh();
            });
        }
        /// <summary>
        /// Calculates the data transfer speed in MB/s based on total bytes copied and elapsed time.
        /// </summary>
        /// <param name="totalBytesCopied">The total number of bytes copied.</param>
        /// <returns>The speed in megabytes per second.</returns>
        private double CalculateSpeed(long totalBytesCopied)
        {
            // Gets the elapsed time in seconds from a stopwatch.
            double elapsedTimeInSeconds = _stopwatch.Elapsed.TotalSeconds;
            // Returns 0 if no time has elapsed to avoid division by zero. Otherwise, calculates and returns the speed.
            return elapsedTimeInSeconds > 0 ? (totalBytesCopied / elapsedTimeInSeconds) / 1024 / 1024 : 0;
        }
        /// <summary>
        /// Displays a message box with a summary of a file operation.
        /// </summary>
        /// <param name="title">The title of the message box.</param>
        /// <param name="status">The status of the operation (e.g., "Complete", "Canceled").</param>
        /// <param name="operation">The type of file operation (e.g., Copy, Move).</param>
        /// <param name="totalFilesConsidered">The total number of files considered in the operation.</param>
        private void ShowOperationSummaryMessageBox(string title, string status, FileOperation operation, int totalFilesConsidered)
        {
            // Gets the name of the operation from the enum.
            string operationName = operation.ToString();
            // Constructs the message string with a summary of the operation statistics.
            string tmpl = Translator.Get("----- {0} Operation Summary ({1}) -----\n\n" +
                                         "Total files considered: {2:N0}\nFiles copied: {3:N0} / {4:N0}\n" +
                                         "Files skipped (by filter/user): {5:N0}\nFiles failed (due to error): {6:N0}\n\n" +
                                         "Total bytes processed: {7}\n\nTotal bytes to process (estimated): {8}\n\n{0} {1}!");

            string message = string.Format(tmpl,
                                operationName, status,
                                totalFilesConsidered, _processedFiles, _grandTotalFileCount,
                                _totalFilesSkipped, _totalFilesFailed,
                                FormatBytes(_totalBytesProcessed),
                                FormatBytes(_totalBytesToProcess));

            string title2 = string.Format(Translator.Get("Operation {0}"), status);

            MessageBoxIcon icon = status switch
            {
                "Cancelled" => MessageBoxIcon.Warning,
                "Failed" => MessageBoxIcon.Error,
                _ => MessageBoxIcon.Information
            };

            if (status == "Cancelled")
            {
                icon = MessageBoxIcon.Warning;
            }
            else if (status == "Failed")
            {
                icon = MessageBoxIcon.Error;
            }

            // Displays the message box.
            MessageBox.Show(Translator.Get(message), Translator.Get(title2), MessageBoxButtons.OK, icon);
        }
        /// <summary>
        /// A setter method for a private folder path field.
        /// </summary>
        /// <param name="path">The folder path string to set.</param>
        public void SetFolderPath(string path)
        {
            folderPath = path;
        }
        /// <summary>
        /// A nested class representing a progress report.
        /// It contains properties to hold information about the current state of a task.
        /// </summary>
        public class ProgressReport
        {
            public int PercentComplete { get; set; }
            public string CurrentFile { get; set; }
            public string FilePath { get; set; }
            public double Speed { get; set; }
            public string Status { get; set; }
            public long BytesCopied { get; set; }
        }
        /// <summary>
        /// Plays a system sound based on the type of event and user settings.
        /// </summary>
        /// <param name="soundType">A string indicating which sound to play (e.g., "CopyComplete").</param>
        private void PlaySound(string soundType)
        {
            // A switch statement to handle different sound types.
            switch (soundType)
            {
                case "CopyComplete":
                    // Plays a sound if the setting for "SoundCopyComplete" is enabled.
                    if (CopyThatProgram.Properties.Settings.Default.SoundCopyComplete)
                        SystemSounds.Asterisk.Play();
                    break;
                case "FileAdded":
                    // Plays a sound if the setting for "SoundFileAdded" is enabled.
                    if (CopyThatProgram.Properties.Settings.Default.SoundFileAdded)
                        SystemSounds.Exclamation.Play();
                    break;
            }
        }
        /// <summary>
        /// Logs a file that was skipped during the operation.
        /// </summary>
        /// <param name="fileItem">The `FileInfoWrapper` object for the skipped file.</param>
        /// <param name="reason">The reason the file was skipped (e.g., "File already exists").</param>
        /// <param name="intendedTargetPath">The intended destination path of the file.</param>
        private void HandleSkippedFile(FileInfoWrapper fileItem, string reason, string intendedTargetPath)
        {
            // Calls a method to add the skipped file to a log.
            AddToSkippedFiles(
                reason,
                fileItem.FileName,
                fileItem.BytesRaw,
                fileItem.FilePath,
                intendedTargetPath,
                ""
            );
        }
        /// <summary>
        /// Logs a file that caused an error during the operation.
        /// </summary>
        /// <param name="fileItem">The `FileInfoWrapper` object for the errored file.</param>
        /// <param name="errorMessage">The specific error message.</param>
        /// <param name="intendedTargetPath">The intended destination path of the file.</param>
        private void HandleErrorFile(FileInfoWrapper fileItem, string errorMessage, string intendedTargetPath)
        {
            // Ignores directories, only logs file errors.
            if (fileItem.IsDirectory)
                return;

            AddToSkippedFiles(
    Translator.Get("Error"),
    fileItem.FileName,
    fileItem.BytesRaw,
    fileItem.FilePath,
    intendedTargetPath,
    errorMessage
);
        }
        /// <summary>
        /// Initializes the timer for a form animation.
        /// </summary>
        private void InitializeRollAnimation()
        {
            // Creates a new Timer object.
            rollTimer = new Timer();
            // Sets the timer's interval to 10 milliseconds.
            rollTimer.Interval = 10;
            // Wires the `RollTimer_Tick` method to the timer's `Tick` event.
            rollTimer.Tick += RollTimer_Tick;
        }

        /// <summary>
        /// Changes the application's icon in the taskbar.
        /// </summary>
        /// <param name="iconPath">The file path of the new icon.</param>
        private void ChangeTaskbarIcon(string iconPath)
        {
            try
            {
                // Creates a new Icon object from the specified path.
                Icon newIcon = new Icon(iconPath);
                // Sets the form's `Icon` property to the new icon.
                this.Icon = newIcon;
            }
            catch (Exception ex)
            {
                // Shows a message box if the icon fails to load.
                MessageBox.Show(Translator.Get($"Failed to load icon: {ex.Message}"), "Failed", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        // Fields for a context menu and hover color.
        private ContextMenuStrip exportMenu;
        private readonly System.Drawing.Color HoverColor = SystemColors.Control;

        /// <summary>
        /// An event handler for when the mouse enters a label.
        /// It changes the label's background color to the hover color.
        /// </summary>
        /// <param name="sender">The label control that triggered the event.</param>
        /// <param name="e">The event arguments.</param>
        private void Label_MouseEnter(object sender, EventArgs e)
        {
            var lbl = (Label)sender;
            lbl.BackColor = HoverColor;
        }

        /// <summary>
        /// An event handler for when the mouse leaves a label.
        /// It restores the label's original background color.
        /// </summary>
        /// <param name="sender">The label control that triggered the event.</param>
        /// <param name="e">The event arguments.</param>
        private void Label_MouseLeave(object sender, EventArgs e)
        {
            var lbl = (Label)sender;
            // Restores the background color from the `Tag` property, which was saved previously.
            lbl.BackColor = (System.Drawing.Color)lbl.Tag;
        }

        /// <summary>
        /// Wires the mouse enter and leave event handlers to a predefined set of labels.
        /// </summary>
        private void WireHoverLabels()
        {
            // An array of labels to apply the hover effect to.
            Label[] labels =
            {
        rollUpLabel, rollDownLabel, settingsLabel,
        exitLabel, minimizeLabel, allAboutLabel
    };

            // Iterates through each label in the array.
            foreach (var lbl in labels)
            {
                if (lbl == null) continue;

                // Sets the initial background color to transparent and stores it in the `Tag` property.
                lbl.BackColor = System.Drawing.Color.Transparent;
                lbl.Tag = System.Drawing.Color.Transparent;
                // Wires the `MouseEnter` and `MouseLeave` event handlers.
                lbl.MouseEnter += Label_MouseEnter;
                lbl.MouseLeave += Label_MouseLeave;
            }
        }

        private void TabControl1_Selecting(object sender, TabControlCancelEventArgs e)
        {
            if (allowTabChanges)
            {
                e.Cancel = false;
            }
            else
            {
                e.Cancel = false;
            }
        }

        /// <summary>
        /// Hides all tabs except the currently selected tab, effectively showing only one tab at a time.
        /// This method is useful for creating a focused or simplified view of the tab control.
        /// </summary>
        private void ShowOnlyCurrentTab()
        {
            var currentTab = tabControl1.SelectedTab;
            tabControl1.TabPages.Clear();
            tabControl1.TabPages.Add(currentTab);
        }

        /// <summary>
        /// Restores all previously hidden tabs to the tab control, returning to the full tab view.
        /// This method reverses the effect of ShowOnlyCurrentTab and displays all available tabs.
        /// </summary>
        private void ShowAllTabs()
        {
            tabControl1.TabPages.Clear();
            tabControl1.TabPages.AddRange(allTabs.ToArray());
        }
        /// <summary>
        /// Navigates to the specified tab page and displays it as the only visible tab.
        /// Temporarily allows tab changes during navigation to prevent interference with change event handlers.
        /// </summary>
        /// <param name="targetTab">The tab page to navigate to and display exclusively</param>
        public void NavigateToTab(TabPage targetTab)
        {
            allowTabChanges = true;
            tabControl1.SelectedTab = targetTab;
            allowTabChanges = false;
            ShowOnlyCurrentTab();
        }


        private bool _isLoadingForm = false;

        private static readonly Dictionary<string, string> LangKeyToDisplay =
     new(StringComparer.OrdinalIgnoreCase)
 {
    {"English",                  "English"},
    {"French",                   "Français"},
    {"German",                   "Deutsch"},
    {"Spanish",                  "Español"},
    {"Italian",                  "Italiano"},
    {"Portuguese - Portugal",    "Português (Portugal)"},
    {"Portuguese - Brazil",      "Português (Brasil)"},
    {"Dutch",                    "Nederlands"},
    {"Swedish",                  "Svenska"},
    {"Norwegian",                "Norsk"},
    {"Danish",                   "Dansk"},
    {"Finnish",                  "Suomi"},
    {"Polish",                   "Polski"},
    {"Czech",                    "Čeština"},
    {"Hungarian",                "Magyar"},
    {"Romanian",                 "Română"}
 };




        string savedLangKey = "";

        // ==================== MAIN FORM LOAD ====================
        private void MainForm_Load(object sender, EventArgs e)
        {
            _multiThreadUiTimer.Interval = 500;
            _multiThreadUiTimer.Tick += UpdateMultiThreadUiTimer_Tick;

            _isUpdatingLanguage = true;
            _isLoadingForm = true;

            languageComboBox.SelectedIndexChanged -= languageComboBox_SelectedIndexChanged;
            skinsComboBox.SelectedIndexChanged -= skinsComboBox_SelectedIndexChanged;

            try
            {
                /* 1. read what the user saved */
                string savedLangKey = Properties.Settings.Default.Language ?? "English";
                string savedSkinKey = Properties.Settings.Default.Skin ?? "Light Mode";

                /* 2. set culture + translator BEFORE touching the UI */
                string culture = savedLangKey switch
                {
                    "Spanish" => "es-ES",
                    "French" => "fr-FR",
                    "German" => "de-DE",
                    "Italian" => "it-IT",
                    "Portuguese - Portugal" => "pt-PT",
                    "Portuguese - Brazil" => "pt-BR",
                    "Dutch" => "nl-NL",
                    "Swedish" => "sv-SE",
                    "Norwegian" => "nb-NO",
                    "Danish" => "da-DK",
                    "Finnish" => "fi-FI",
                    "Polish" => "pl-PL",
                    "Czech" => "cs-CZ",
                    "Hungarian" => "hu-HU",
                    "Romanian" => "ro-RO",
                    _ => "en"
                };
                Thread.CurrentThread.CurrentUICulture =
                Thread.CurrentThread.CurrentCulture = new CultureInfo(culture);

                Translator.CurrentLanguage = savedLangKey switch
                {
                    "French" => "fr",
                    "German" => "de",
                    "Spanish" => "es",
                    "Italian" => "it",
                    "Portuguese - Portugal" => "pt-PT",
                    "Portuguese - Brazil" => "pt-BR",
                    "Dutch" => "nl",
                    "Swedish" => "sv",
                    "Norwegian" => "no",
                    "Danish" => "da",
                    "Finnish" => "fi",
                    "Polish" => "pl",
                    "Czech" => "cs",
                    "Hungarian" => "hu",
                    "Romanian" => "ro",
                    _ => "en"
                };

                /* 3. Populate the language combo box with items in the current language */
                string[] languageItems = savedLangKey switch
                {
                    "Spanish" => new[] { "Inglés", "Francés", "Alemán", "Español", "Italiano", "Portugués (Portugal)", "Portugués (Brasil)", "Holandés", "Sueco", "Noruego", "Danés", "Finlandés", "Polaco", "Checo", "Húngaro", "Rumano" },
                    "French" => new[] { "Anglais", "Français", "Allemand", "Espagnol", "Italien", "Portugais (Portugal)", "Portugais (Brésil)", "Néerlandais", "Suédois", "Norvégien", "Danois", "Finnois", "Polonais", "Tchèque", "Hongrois", "Roumain" },
                    "German" => new[] { "Englisch", "Französisch", "Deutsch", "Spanisch", "Italienisch", "Portugiesisch (Portugal)", "Portugiesisch (Brasilien)", "Niederländisch", "Schwedisch", "Norwegisch", "Dänisch", "Finnisch", "Polnisch", "Tschechisch", "Ungarisch", "Rumänisch" },
                    "Italian" => new[] { "Inglese", "Francese", "Tedesco", "Spagnolo", "Italiano", "Portoghese (Portogallo)", "Portoghese (Brasile)", "Olandese", "Svedese", "Norvegese", "Danese", "Finlandese", "Polacco", "Ceco", "Ungherese", "Rumeno" },
                    "Portuguese - Portugal" => new[] { "Inglês", "Francês", "Alemão", "Espanhol", "Italiano", "Português (Portugal)", "Português (Brasil)", "Holandês", "Sueco", "Norueguês", "Dinamarquês", "Finlandês", "Polaco", "Checo", "Húngaro", "Romeno" },
                    "Portuguese - Brazil" => new[] { "Inglês", "Francês", "Alemão", "Espanhol", "Italiano", "Português (Portugal)", "Português (Brasil)", "Holandês", "Sueco", "Norueguês", "Dinamarquês", "Finlandês", "Polonês", "Tcheco", "Húngaro", "Romeno" },
                    "Dutch" => new[] { "Engels", "Frans", "Duits", "Spaans", "Italiaans", "Portugees (Portugal)", "Portugees (Brazilië)", "Nederlands", "Zweeds", "Noors", "Deens", "Fins", "Pools", "Tsjechisch", "Hongaars", "Roemeens" },
                    "Swedish" => new[] { "Engelska", "Franska", "Tyska", "Spanska", "Italienska", "Portugisiska (Portugal)", "Portugisiska (Brasilien)", "Nederländska", "Svenska", "Norska", "Danska", "Finska", "Polska", "Tjeckiska", "Ungerska", "Rumänska" },
                    "Norwegian" => new[] { "Engelsk", "Fransk", "Tysk", "Spansk", "Italiensk", "Portugisisk (Portugal)", "Portugisisk (Brasil)", "Nederlandsk", "Svensk", "Norsk", "Dansk", "Finsk", "Polsk", "Tsjekkisk", "Ungarsk", "Rumensk" },
                    "Danish" => new[] { "Engelsk", "Fransk", "Tysk", "Spansk", "Italiensk", "Portugisisk (Portugal)", "Portugisisk (Brasilien)", "Hollandsk", "Svensk", "Norsk", "Dansk", "Finsk", "Polsk", "Tjekkisk", "Ungarsk", "Rumænsk" },
                    "Finnish" => new[] { "Englanti", "Ranska", "Saksa", "Espanja", "Italia", "Portugali (Portugali)", "Portugali (Brasilia)", "Hollanti", "Ruotsi", "Norja", "Tanska", "Suomi", "Puola", "Tšekki", "Unkari", "Romania" },
                    "Polish" => new[] { "Angielski", "Francuski", "Niemiecki", "Hiszpański", "Włoski", "Portugalski (Portugalia)", "Portugalski (Brazylia)", "Holenderski", "Szwedzki", "Norweski", "Duński", "Fiński", "Polski", "Czeski", "Węgierski", "Rumuński" },
                    "Czech" => new[] { "Angličtina", "Francouzština", "Němčina", "Španělština", "Italština", "Portugalština (Portugalsko)", "Portugalština (Brazílie)", "Nizozemština", "Švédština", "Norština", "Dánština", "Finština", "Polština", "Čeština", "Maďarština", "Rumunština" },
                    "Hungarian" => new[] { "Angol", "Francia", "Német", "Spanyol", "Olasz", "Portugál (Portugália)", "Portugál (Brazília)", "Holland", "Svéd", "Norvég", "Dán", "Finn", "Lengyel", "Cseh", "Magyar", "Román" },
                    "Romanian" => new[] { "Engleză", "Franceză", "Germană", "Spaniolă", "Italiană", "Portugheză (Portugalia)", "Portugheză (Brazilia)", "Olandeză", "Suedeză", "Norvegiană", "Daneză", "Finlandeză", "Poloneză", "Cehă", "Maghiară", "Română" },
                    _ => new[] { "English", "French", "German", "Spanish", "Italian", "Portuguese - Portugal", "Portuguese - Brazil", "Dutch", "Swedish", "Norwegian", "Danish", "Finnish", "Polish", "Czech", "Hungarian", "Romanian" }
                };

                languageComboBox.Items.Clear();
                languageComboBox.Items.AddRange(languageItems);

                // Select the correct item based on the saved language key
                int selectedIndex = savedLangKey switch
                {
                    "French" => 1,
                    "German" => 2,
                    "Spanish" => 3,
                    "Italian" => 4,
                    "Portuguese - Portugal" => 5,
                    "Portuguese - Brazil" => 6,
                    "Dutch" => 7,
                    "Swedish" => 8,
                    "Norwegian" => 9,
                    "Danish" => 10,
                    "Finnish" => 11,
                    "Polish" => 12,
                    "Czech" => 13,
                    "Hungarian" => 14,
                    "Romanian" => 15,
                    _ => 0 // English
                };

                languageComboBox.SelectedIndex = selectedIndex;

                UpdateSkinsComboBoxItems(savedLangKey);
                LoadCurrentSettings();

                // Apply localized .resx resources
                var resMan = new ComponentResourceManager(typeof(mainForm));
                ApplyAllResources(resMan);

                allTabs.AddRange(tabControl1.TabPages.Cast<TabPage>());
                tabControl1.Selecting += TabControl1_Selecting;
                InitializeResetButton();
                TotalsManager.LoadTotalsIntoLabels(
                    totalCopyOperationsLabel, totalMoveOperationsLabel, totalDeleteOperationsLabel,
                    totalCancelledOperationsLabel, totalCompletedOperationsLabel,
                    totalFilesConsideredLabel, totalFilesCopiedLabel, totalFilesMovedLabel,
                    totalFilesDeletedLabel, totalFilesSkippedLabel, totalFilesFailedLabel,
                    totalBytesProcessedLabel, totalBytesToProcessLabel,
                    totalElapsedTimeLabel, totalTargetTimeLabel,
                    resetTotalsButton);
                CleanupOldVersions();
                WireHoverLabels();

                CheckForIllegalCrossThreadCalls = false;
                _bindingSource.DataSource = _fileList;
                filesDataGridView.DataSource = _bindingSource;
                filesDataGridView.AutoGenerateColumns = false;

                InitializeDataGridView();
                InitializeRollAnimation();
                proVersion = true;
                titleLabel.Text = Translator.Get(proVersion
                    ? "Copy That v1.0 Pro By: Havoc - Home"
                    : "Copy That v1.0 By: Havoc - Home");

                overwriteOption = "Overwrite Type - If Newer";
                modernFile.Value = 0;
                modernTotal.Value = 0;
                startButton.Enabled = true;
                pauseResumeButton.Enabled = false;
                cancelButton.Enabled = false;
                allowedTextBox.Text = "*.";
                excludedTextBox.Text = "*.";
                isInitialized = true;
                this.MinimumSize = Size.Empty;
                tabControl1.MinimumSize = Size.Empty;

                if (!string.IsNullOrEmpty(folderPath))
                    ProcessFolder(folderPath);

                if (this.WindowState == FormWindowState.Normal)
                    notifyIcon1.Visible = false;

                InitializePostCopyActionComboBox();
                InitializeOperationComboBox();

                if (onFinishComboBox.SelectedIndex == -1) onFinishComboBox.SelectedIndex = 0;
                if (onFinishMultiComboBox.SelectedIndex == -1) onFinishMultiComboBox.SelectedIndex = 0;
                if (copyMoveDeleteComboBox.SelectedIndex == -1) copyMoveDeleteComboBox.SelectedIndex = 0;

                TranslateGridHeaders();
                _bindingSource.ResetBindings(false);

                this.MinimumSize = new Size(tabControl1.Right + 1, titleLabel.Bottom);
                this.MaximumSize = new Size(tabControl1.Right + 1, tabControl1.Bottom + 1);
                this.Size = this.MaximumSize;
                StoreOriginalSize();

                // Select the skin in ComboBox (but don't apply colors yet)
                SelectSkinInCombo(savedSkinKey);

                // Apply manual translations – now Translator.Get() works correctly
                switch (savedLangKey)
                {
                    case "Spanish": ApplyManualSpanishUpdates(); break;
                    case "French": ApplyManualFrenchUpdates(); break;
                    case "German": ApplyManualGermanUpdates(); break;
                    case "Italian": ApplyManualItalianUpdates(); break;
                    case "Portuguese - Portugal": ApplyManualPortuguesePortugalUpdates(); break;
                    case "Portuguese - Brazil": ApplyManualPortugueseBrazilUpdates(); break;
                    case "Dutch": ApplyManualDutchUpdates(); break;
                    case "Swedish": ApplyManualSwedishUpdates(); break;
                    case "Norwegian": ApplyManualNorwegianUpdates(); break;
                    case "Danish": ApplyManualDanishUpdates(); break;
                    case "Finnish": ApplyManualFinnishUpdates(); break;
                    case "Polish": ApplyManualPolishUpdates(); break;
                    case "Czech": ApplyManualCzechUpdates(); break;
                    case "Hungarian": ApplyManualHungarianUpdates(); break;
                    case "Romanian": ApplyManualRomanianUpdates(); break;
                    default: ApplyManualEnglishUpdates(); break;
                }
            }
            finally
            {
                _isUpdatingLanguage = false;
                _isLoadingForm = false;

                languageComboBox.SelectedIndexChanged += languageComboBox_SelectedIndexChanged;
                skinsComboBox.SelectedIndexChanged += skinsComboBox_SelectedIndexChanged;
            }
        }
        private static string FormatTime(double seconds)
        {
            if (seconds < 60)
                return $"{seconds:F0}s";
            if (seconds < 3600)
                return $"{seconds / 60:F1}m";
            return $"{seconds / 3600:F1}h";
        }

        private static string FormatSpeed(double bytesPerSec)
        {
            const double KB = 1024.0;
            const double MB = KB * 1024.0;
            const double GB = MB * 1024.0;

            if (bytesPerSec >= GB)
                return $"{bytesPerSec / GB:F2} GB/s";
            if (bytesPerSec >= MB)
                return $"{bytesPerSec / MB:F2} MB/s";
            if (bytesPerSec >= KB)
                return $"{bytesPerSec / KB:F2} KB/s";
            return $"{bytesPerSec:F0} B/s";
        }



        // ==================== MAIN FORM SHOWN ====================
        private void MainForm_Shown(object sender, EventArgs e)
        {
            // Apply skin colors AFTER the form is fully shown
            string savedSkinKey = Properties.Settings.Default.Skin ?? "Light Mode";

            if (savedSkinKey == "Custom Color")
            {
                var savedBack = Properties.Settings.Default.CustomBackColor;
                var savedFore = Properties.Settings.Default.CustomForeColor;

                // Validate custom colors (check if alpha is non-zero)
                if (savedBack.A != 0 && savedFore.A != 0)
                {
                    ApplySkin("Custom Color", savedFore, savedBack);
                    System.Diagnostics.Debug.WriteLine($"[SHOWN] Applied Custom Color - Back: {savedBack}, Fore: {savedFore}");
                }
                else
                {
                    // Fallback to Light Mode if custom colors are invalid
                    System.Diagnostics.Debug.WriteLine("[SHOWN] Custom Color invalid, falling back to Light Mode");
                    ApplySkin("Light Mode");
                    CopyThatProgram.Properties.Settings.Default.Skin = "Light Mode";
                    SelectSkinInCombo("Light Mode");
                    if (saveAutoCheckBox.Checked)
                        CopyThatProgram.Properties.Settings.Default.Save();
                }
            }
            else
            {
                // Apply standard skin
                ApplySkin(savedSkinKey);
                System.Diagnostics.Debug.WriteLine($"[SHOWN] Applied skin: {savedSkinKey}");
            }

            fileCountOnLabel.Text = Translator.Get("File Count: 0 Out of 0");
            totalCMDMultiLabel.Text = Translator.Get("Total C/M/D: 0 Bytes / 0 Bytes");
            totalCopiedProgressLabel.Text = Translator.Get("Total C/M/D: 0 Bytes / 0 Bytes");
            fromFilesDirLabel.Text = Translator.Get("Select Files/Directory");
            targetDirLabel.Text = Translator.Get("Select Target Directory");
            fileCountMultiLabel.Text = Translator.Get("File Count: 0 Out of 0");
            filePathLabel.Text = Translator.Get("Nothing");
            fileProcessedLabel.Text = Translator.Get("Files Processed: 0 Bytes / 0 Bytes");
            speedLabel.Text = Translator.Get("Speed: 0 MB/s");
            speedMultiLabel.Text = Translator.Get("Speed: 0 MB/s");
            elapsedAndTargetTimeLabel.Text = Translator.Get("Elapsed / Target Time: 00:00:00 / 00:00:00");
            totalTimeMultiLabel.Text = Translator.Get("Elapsed / Target Time: 00:00:00 / 00:00:00");
            totalSpaceMultiLabel.Text = Translator.Get("Total Space Used: 0 Bytes / 0 Bytes");
        }



        // ==================== INITIALIZE LANGUAGE COMBOBOX ====================
        private void InitializeLanguageComboBox(string language)
        {
            languageComboBox.Items.Clear();

            string[] items = savedLangKey switch
            {
                "Spanish" => new[] { "Inglés", "Francés", "Deutsch", "Español", "Italiano", "Portugués (Portugal)", "Portugués (Brasil)", "Holandés", "Sueco", "Noruego", "Danés", "Finlandés", "Polaco", "Checo", "Húngaro", "Rumano" },
                "French" => new[] { "Anglais", "Français", "Allemand", "Espagnol", "Italien", "Portugais (Portugal)", "Portugais (Brésil)", "Néerlandais", "Suédois", "Norvégien", "Danois", "Finnois", "Polonais", "Tchèque", "Hongrois", "Roumain" },
                "German" => new[] { "Englisch", "Französisch", "Deutsch", "Spanisch", "Italienisch", "Portugiesisch (Portugal)", "Portugiesisch (Brasilien)", "Niederländisch", "Schwedisch", "Norwegisch", "Dänisch", "Finnisch", "Polnisch", "Tschechisch", "Ungarisch", "Rumänisch" },
                "Italian" => new[] { "Inglese", "Francese", "Tedesco", "Spagnolo", "Italiano", "Portoghese (Portogallo)", "Portoghese (Brasile)", "Olandese", "Svedese", "Norvegese", "Danese", "Finlandese", "Polacco", "Ceco", "Ungherese", "Rumeno" },
                "Portuguese - Portugal" => new[] { "Inglês", "Francês", "Alemão", "Espanhol", "Italiano", "Português (Portugal)", "Português (Brasil)", "Holandês", "Sueco", "Norueguês", "Dinamarquês", "Finlandês", "Polaco", "Checo", "Húngaro", "Romeno" },
                "Portuguese - Brazil" => new[] { "Inglês", "Francês", "Alemão", "Espanhol", "Italiano", "Português (Portugal)", "Português (Brasil)", "Holandês", "Sueco", "Norueguês", "Dinamarquês", "Finlandês", "Polonês", "Tcheco", "Húngaro", "Romeno" },
                "Dutch" => new[] { "Engels", "Frans", "Duits", "Spaans", "Italiaans", "Portugees (Portugal)", "Portugees (Brazilië)", "Nederlands", "Zweeds", "Noors", "Deens", "Fins", "Pools", "Tsjechisch", "Hongaars", "Roemeens" },
                "Swedish" => new[] { "Engelska", "Franska", "Tyska", "Spanska", "Italienska", "Portugisiska (Portugal)", "Portugisiska (Brasilien)", "Nederländska", "Svenska", "Norska", "Danska", "Finska", "Polska", "Tjeckiska", "Ungerska", "Rumänska" },
                "Norwegian" => new[] { "Engelsk", "Fransk", "Tysk", "Spansk", "Italiensk", "Portugisisk (Portugal)", "Portugisisk (Brasil)", "Nederlandsk", "Svensk", "Norsk", "Dansk", "Finsk", "Polsk", "Tsjekkisk", "Ungarsk", "Rumensk" },
                "Danish" => new[] { "Engelsk", "Fransk", "Tysk", "Spansk", "Italiensk", "Portugisisk (Portugal)", "Portugisisk (Brasilien)", "Hollandsk", "Svensk", "Norsk", "Dansk", "Finsk", "Polsk", "Tjekkisk", "Ungarsk", "Rumænsk" },
                "Finnish" => new[] { "Englanti", "Ranska", "Saksa", "Espanja", "Italia", "Portugali (Portugali)", "Portugali (Brasilia)", "Hollanti", "Ruotsi", "Norja", "Tanska", "Suomi", "Puola", "Tšekki", "Unkari", "Romania" },
                "Polish" => new[] { "Angielski", "Francuski", "Niemiecki", "Hiszpański", "Włoski", "Portugalski (Portugalia)", "Portugalski (Brazylia)", "Holenderski", "Szwedzki", "Norweski", "Duński", "Fiński", "Polski", "Czeski", "Węgierski", "Rumuński" },
                "Czech" => new[] { "Angličtina", "Francouzština", "Němčina", "Španělština", "Italština", "Portugalština (Portugalsko)", "Portugalština (Brazílie)", "Nizozemština", "Švédština", "Norština", "Dánština", "Finština", "Polština", "Čeština", "Maďarština", "Rumunština" },
                "Hungarian" => new[] { "Angol", "Francia", "Német", "Spanyol", "Olasz", "Portugál (Portugália)", "Portugál (Brazília)", "Holland", "Svéd", "Norvég", "Dán", "Finn", "Lengyel", "Cseh", "Magyar", "Román" },
                "Romanian" => new[] { "Engleză", "Franceză", "Germană", "Spaniolă", "Italiană", "Portugheză (Portugalia)", "Portugheză (Brazilia)", "Olandeză", "Suedeză", "Norvegiană", "Daneză", "Finlandeză", "Poloneză", "Cehă", "Maghiară", "Română" },
                _ => new[] { "English", "French", "German", "Spanish", "Italian", "Portuguese - Portugal", "Portuguese - Brazil", "Dutch", "Swedish", "Norwegian", "Danish", "Finnish", "Polish", "Czech", "Hungarian", "Romanian" }
            };

            languageComboBox.Items.AddRange(items);

            // Set the selected index based on the saved language
            int selectedIndex = savedLangKey switch
            {
                "English" => 0,
                "French" => 1,
                "German" => 2,
                "Spanish" => 3,
                "Italian" => 4,
                "Portuguese - Portugal" => 5,
                "Portuguese - Brazil" => 6,
                "Dutch" => 7,
                "Swedish" => 8,
                "Norwegian" => 9,
                "Danish" => 10,
                "Finnish" => 11,
                "Polish" => 12,
                "Czech" => 13,
                "Hungarian" => 14,
                "Romanian" => 15,
                _ => 0
            };

            languageComboBox.SelectedIndex = selectedIndex;
        }

        // ==================== HELPER METHODS ====================
        private void UpdateSkinsComboBoxItems(string languageKey)
        {
            skinsComboBox.Items.Clear();
            switch (languageKey)
            {
                case "Spanish":
                    skinsComboBox.Items.AddRange(new[] { "Modo Claro", "Modo Medio", "Modo Oscuro", "_________________", "Color Personalizado" });
                    break;
                case "French":
                    skinsComboBox.Items.AddRange(new[] { "Mode Clair", "Mode Moyen", "Mode Sombre", "_________________", "Couleur Personnalisée" });
                    break;
                case "German":
                    skinsComboBox.Items.AddRange(new[] { "Heller Modus", "Mittlerer Modus", "Dunkler Modus", "_________________", "Benutzerdefinierte Farbe" });
                    break;
                case "Italian":
                    skinsComboBox.Items.AddRange(new[] { "Modalità Chiara", "Modalità Media", "Modalità Scura", "_________________", "Colore Personalizzato" });
                    break;
                case "Portuguese - Portugal":
                case "Portuguese - Brazil":
                    skinsComboBox.Items.AddRange(new[] { "Modo Claro", "Modo Médio", "Modo Escuro", "_________________", "Cor Personalizada" });
                    break;
                case "Dutch":
                    skinsComboBox.Items.AddRange(new[] { "Lichte Modus", "Middelmodus", "Donkere Modus", "_________________", "Aangepaste Kleur" });
                    break;
                case "Swedish":
                    skinsComboBox.Items.AddRange(new[] { "Ljust Läge", "Mellanläge", "Mörkt Läge", "_________________", "Anpassad Färg" });
                    break;
                case "Norwegian":
                    skinsComboBox.Items.AddRange(new[] { "Lys Modus", "Middels Modus", "Mørk Modus", "_________________", "Egendefinert Farge" });
                    break;
                case "Danish":
                    skinsComboBox.Items.AddRange(new[] { "Lys Tilstand", "Mellem Tilstand", "Mørk Tilstand", "_________________", "Brugerdefineret Farve" });
                    break;
                case "Finnish":
                    skinsComboBox.Items.AddRange(new[] { "Vaalea Tila", "Keskitila", "Tumma Tila", "_________________", "Mukautettu Väri" });
                    break;
                case "Polish":
                    skinsComboBox.Items.AddRange(new[] { "Tryb Jasny", "Tryb Średni", "Tryb Ciemny", "_________________", "Niestandardowy Kolor" });
                    break;
                case "Czech":
                    skinsComboBox.Items.AddRange(new[] { "Světlý Režim", "Střední Režim", "Tmavý Režim", "_________________", "Vlastní Barva" });
                    break;
                case "Hungarian":
                    skinsComboBox.Items.AddRange(new[] { "Világos Mód", "Közepes Mód", "Sötét Mód", "_________________", "Egyéni Szín" });
                    break;
                case "Romanian":
                    skinsComboBox.Items.AddRange(new[] { "Mod Luminos", "Mod Mediu", "Mod Întunecat", "_________________", "Culoare Personalizată" });
                    break;
                default: // English
                    skinsComboBox.Items.AddRange(new[] { "Light Mode", "Medium Mode", "Dark Mode", "_________________", "Custom Color" });
                    break;
            }
        }


        private static readonly Dictionary<string, Dictionary<string, string>> SkinLocalized =
    new(StringComparer.OrdinalIgnoreCase)
{
    { "Light Mode", new Dictionary<string, string>
        {
            { "English", "Light Mode" },
            { "Spanish", "Modo Claro" },
            { "French", "Mode Clair" },
            { "German", "Heller Modus" },
            { "Italian", "Modalità Chiara" },
            { "Portuguese - Portugal", "Modo Claro" },
            { "Portuguese - Brazil", "Modo Claro" },
            { "Dutch", "Lichte Modus" },
            { "Swedish", "Ljust Läge" },
            { "Norwegian", "Lys Modus" },
            { "Danish", "Lys Tilstand" },
            { "Finnish", "Vaalea Tila" },
            { "Polish", "Tryb Jasny" },
            { "Czech", "Světlý Režim" },
            { "Hungarian", "Világos Mód" },
            { "Romanian", "Mod Luminos" }
        }
    },
    { "Medium Mode", new Dictionary<string, string>
        {
            { "English", "Medium Mode" },
            { "Spanish", "Modo Medio" },
            { "French", "Mode Moyen" },
            { "German", "Mittlerer Modus" },
            { "Italian", "Modalità Media" },
            { "Portuguese - Portugal", "Modo Médio" },
            { "Portuguese - Brazil", "Modo Médio" },
            { "Dutch", "Middelmodus" },
            { "Swedish", "Mellanläge" },
            { "Norwegian", "Middels Modus" },
            { "Danish", "Mellem Tilstand" },
            { "Finnish", "Keskitila" },
            { "Polish", "Tryb Średni" },
            { "Czech", "Střední Režim" },
            { "Hungarian", "Közepes Mód" },
            { "Romanian", "Mod Mediu" }
        }
    },
    { "Dark Mode", new Dictionary<string, string>
        {
            { "English", "Dark Mode" },
            { "Spanish", "Modo Oscuro" },
            { "French", "Mode Sombre" },
            { "German", "Dunkler Modus" },
            { "Italian", "Modalità Scura" },
            { "Portuguese - Portugal", "Modo Escuro" },
            { "Portuguese - Brazil", "Modo Escuro" },
            { "Dutch", "Donkere Modus" },
            { "Swedish", "Mörkt Läge" },
            { "Norwegian", "Mørk Modus" },
            { "Danish", "Mørk Tilstand" },
            { "Finnish", "Tumma Tila" },
            { "Polish", "Tryb Ciemny" },
            { "Czech", "Tmavý Režim" },
            { "Hungarian", "Sötét Mód" },
            { "Romanian", "Mod Întunecat" }
        }
    },
    { "Custom Color", new Dictionary<string, string>
        {
            { "English", "Custom Color" },
            { "Spanish", "Color Personalizado" },
            { "French", "Couleur Personnalisée" },
            { "German", "Benutzerdefinierte Farbe" },
            { "Italian", "Colore Personalizzato" },
            { "Portuguese - Portugal", "Cor Personalizada" },
            { "Portuguese - Brazil", "Cor Personalizada" },
            { "Dutch", "Aangepaste Kleur" },
            { "Swedish", "Anpassad Färg" },
            { "Norwegian", "Egendefinert Farge" },
            { "Danish", "Brugerdefineret Farve" },
            { "Finnish", "Mukautettu Väri" },
            { "Polish", "Niestandardowy Kolor" },
            { "Czech", "Vlastní Barva" },
            { "Hungarian", "Egyéni Szín" },
            { "Romanian", "Culoare Personalizată" }
        }
    }
};

        private void InitializeOperationComboBox()
        {
            string selectedLanguage = CopyThatProgram.Properties.Settings.Default.Language;
            // Populate the combo box with the available file operations.
            copyMoveDeleteComboBox.Items.Clear();
            onFinishComboBox.Items.Clear();
            try
            {
                // Normalise the key once
                string langKey = (CopyThatProgram.Properties.Settings.Default.Language ?? "English")
                                 .Trim()
                                 .ToLowerInvariant();
                // reusable string arrays
                string[] copyMoveItems = langKey switch
                {
                    "spanish" or "español" => new[] { "Copiar archivos", "Mover archivos", "Borrado seguro" },
                    "german" or "deutsch" => new[] { "Dateien kopieren", "Dateien verschieben", "Sicher löschen" },
                    "french" or "français" => new[] { "Copier les fichiers", "Déplacer les fichiers", "Suppression sécurisée" },
                    "italian" or "italiano" => new[] { "Copia file", "Sposta file", "Eliminazione sicura" },
                    "portuguese - portugal" or "português (portugal)" => new[] { "Copiar ficheiros", "Mover ficheiros", "Eliminação segura" },
                    "portuguese - brazil" or "português (brasil)" => new[] { "Copiar arquivos", "Mover arquivos", "Exclusão segura" },
                    "dutch" or "nederlands" => new[] { "Bestanden kopiëren", "Bestanden verplaatsen", "Veilig verwijderen" },
                    "swedish" or "svenska" => new[] { "Kopiera filer", "Flytta filer", "Säker radering" },
                    "norwegian" or "norsk" => new[] { "Kopier filer", "Flytt filer", "Sikker sletting" },
                    "danish" or "dansk" => new[] { "Kopier filer", "Flyt filer", "Sikker sletning" },
                    "finnish" or "suomi" => new[] { "Kopioi tiedostot", "Siirrä tiedostot", "Turvallinen poisto" },
                    "polish" or "polski" => new[] { "Kopiuj pliki", "Przenieś pliki", "Bezpieczne usuwanie" },
                    "czech" or "čeština" => new[] { "Kopírovat soubory", "Přesunout soubory", "Bezpečné mazání" },
                    "hungarian" or "magyar" => new[] { "Fájlok másolása", "Fájlok áthelyezése", "Biztonságos törlés" },
                    "romanian" or "română" => new[] { "Copiază fișiere", "Mută fișiere", "Ștergere securizată" },
                    _ => new[] { "Copy Files", "Move Files", "Secure Delete" }
                };
                string[] onFinishItems = langKey switch
                {
                    "spanish" or "español" => new[] { "No hacer nada", "Suspender", "Cerrar sesión", "Salir del programa", "Apagar" },
                    "german" or "deutsch" => new[] { "Nichts tun", "Ruhezustand", "Abmelden", "Programm beenden", "Herunterfahren" },
                    "french" or "français" => new[] { "Ne rien faire", "Mettre en veille", "Se déconnecter", "Quitter le programme", "Arrêter l'ordinateur" },
                    "italian" or "italiano" => new[] { "Non fare nulla", "Sospendi", "Disconnetti", "Esci dal programma", "Spegni" },
                    "portuguese - portugal" or "português (portugal)" => new[] { "Não fazer nada", "Suspender", "Terminar sessão", "Sair do programa", "Encerrar" },
                    "portuguese - brazil" or "português (brasil)" => new[] { "Não fazer nada", "Suspender", "Fazer logoff", "Sair do programa", "Desligar" },
                    "dutch" or "nederlands" => new[] { "Niets doen", "Slaapstand", "Afmelden", "Programma afsluiten", "Afsluiten" },
                    "swedish" or "svenska" => new[] { "Gör ingenting", "Viloläge", "Logga ut", "Avsluta programmet", "Stäng av" },
                    "norwegian" or "norsk" => new[] { "Gjør ingenting", "Dvale", "Logg ut", "Avslutt programmet", "Slå av" },
                    "danish" or "dansk" => new[] { "Gør ingenting", "Dvale", "Log af", "Afslut programmet", "Luk ned" },
                    "finnish" or "suomi" => new[] { "Älä tee mitään", "Lepotila", "Kirjaudu ulos", "Sulje ohjelma", "Sammuta" },
                    "polish" or "polski" => new[] { "Nic nie rób", "Uśpij", "Wyloguj", "Zakończ program", "Zamknij system" },
                    "czech" or "čeština" => new[] { "Nedělat nic", "Režim spánku", "Odhlásit se", "Ukončit program", "Vypnout" },
                    "hungarian" or "magyar" => new[] { "Ne csinálj semmit", "Alvó állapot", "Kijelentkezés", "Kilépés a programból", "Leállítás" },
                    "romanian" or "română" => new[] { "Nu face nimic", "Suspendare", "Deconectare", "Ieșire din program", "Oprire" },
                    _ => new[] { "Do Nothing", "Sleep", "Log Off", "Exit Program", "Shut Down" }
                };
                // fill the combos
                copyMoveDeleteComboBox.Items.Clear();
                copyMoveDeleteComboBox.Items.AddRange(copyMoveItems);
                onFinishComboBox.Items.Clear();
                onFinishComboBox.Items.AddRange(onFinishItems);
                onFinishMultiComboBox.Items.Clear();
                onFinishMultiComboBox.Items.AddRange(onFinishItems);
            }
            catch
            {
            }
            // Attach an event handler to update the UI when the selected item changes.
            copyMoveDeleteComboBox.SelectedIndexChanged += (s, e) => UpdateUIForOperation();
        }

        // ==================== APPLY SKIN ====================
        private void ApplySkin(string englishKey, Color? foreColor = null, Color? backColor = null)
        {
            // FIXED: Guard against both flags
            if (_isUpdatingLanguage || _isLoadingForm) return;

            try
            {
                this.SuspendLayout();

                // Determine the colors to use
                Color fg;
                Color bg;

                switch (englishKey)
                {
                    case "Dark Mode":
                        fg = foreColor ?? Color.White;
                        bg = backColor ?? Color.Black;
                        break;

                    case "Medium Mode":
                        fg = foreColor ?? Color.Black;
                        bg = backColor ?? Color.Gainsboro;
                        break;

                    case "Light Mode":
                        fg = foreColor ?? Color.Black;
                        bg = backColor ?? Color.White;
                        break;

                    case "Custom Color":
                        // For custom color, use provided colors or load from settings
                        if (foreColor.HasValue && backColor.HasValue)
                        {
                            fg = foreColor.Value;
                            bg = backColor.Value;
                        }
                        else
                        {
                            // Load saved custom colors if not provided
                            fg = CopyThatProgram.Properties.Settings.Default.CustomForeColor;
                            bg = CopyThatProgram.Properties.Settings.Default.CustomBackColor;
                        }
                        break;

                    default:
                        fg = foreColor ?? Color.Black;
                        bg = backColor ?? Color.White;
                        break;
                }

                // Apply to form
                this.BackColor = bg;
                this.ForeColor = fg;

                // Apply to all child controls
                foreach (System.Windows.Forms.Control ctrl in this.Controls)
                    ApplyColorsToControl(ctrl, fg, bg);

                // Update title bar
                string displayName = ToDisplay(englishKey);
                this.Text = $"Copy That v1.0 - {displayName}";

                this.ResumeLayout(true);
                this.Refresh();

                System.Diagnostics.Debug.WriteLine($"[ApplySkin] Applied '{englishKey}' - ForeColor: {fg}, BackColor: {bg}");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error applying skin '{englishKey}': {ex.Message}");
            }
        }

        private string ToDisplay(string englishKey)
        {
            if (!SkinLocalized.TryGetValue(englishKey, out var translations))
                return englishKey;

            // Get the current language key from settings
            string currentLangKey = Properties.Settings.Default.Language ?? "English";

            if (translations.TryGetValue(currentLangKey, out var translation))
                return translation;

            return englishKey;
        }

        private string ToEn(string display) => display switch
        {
            // Light Mode translations
            "Light Mode" or "Modo Claro" or "Mode Clair" or "Heller Modus" or "Modalità Chiara" or
            "Lichte Modus" or "Ljust Läge" or "Lys Modus" or "Lys Tilstand" or "Vaalea Tila" or
            "Tryb Jasny" or "Světlý Režim" or "Világos Mód" or "Mod Luminos" => "Light Mode",

            // Medium Mode translations
            "Medium Mode" or "Modo Medio" or "Mode Moyen" or "Mittlerer Modus" or "Modalità Media" or
            "Modo Médio" or "Middelmodus" or "Mellanläge" or "Middels Modus" or "Mellem Tilstand" or
            "Keskitila" or "Tryb Średni" or "Střední Režim" or "Közepes Mód" or "Mod Mediu" => "Medium Mode",

            // Dark Mode translations
            "Dark Mode" or "Modo Oscuro" or "Mode Sombre" or "Dunkler Modus" or "Modalità Scura" or
            "Modo Escuro" or "Donkere Modus" or "Mörkt Läge" or "Mørk Modus" or "Mørk Tilstand" or
            "Tumma Tila" or "Tryb Ciemny" or "Tmavý Režim" or "Sötét Mód" or "Mod Întunecat" => "Dark Mode",

            // Custom Color translations
            "Custom Color" or "Color Personalizado" or "Couleur Personnalisée" or "Benutzerdefinierte Farbe" or
            "Colore Personalizzato" or "Cor Personalizada" or "Aangepaste Kleur" or "Anpassad Färg" or
            "Egendefinert Farge" or "Brugerdefineret Farve" or "Mukautettu Väri" or "Niestandardowy Kolor" or
            "Vlastní Barva" or "Egyéni Szín" or "Culoare Personalizată" => "Custom Color",

            _ => display
        };
        private void SelectSkinInCombo(string englishKey)
        {
            if (skinsComboBox == null || skinsComboBox.Items.Count == 0) return;

            string localizedDisplay = ToDisplay(englishKey);
            int index = skinsComboBox.Items.IndexOf(localizedDisplay);

            if (index != -1)
            {
                skinsComboBox.SelectedIndex = index;
            }
            else
            {
                // Fallback: try English key directly
                index = skinsComboBox.Items.IndexOf(englishKey);
                if (index != -1)
                {
                    skinsComboBox.SelectedIndex = index;
                }
                else
                {
                    // Last resort: default to first item
                    skinsComboBox.SelectedIndex = 0;
                }
            }
        }


        private void ApplyColorsToControl(System.Windows.Forms.Control ctrl, Color fore, Color back)
        {
            ctrl.ForeColor = fore;
            ctrl.BackColor = back;

            foreach (System.Windows.Forms.Control child in ctrl.Controls)
                ApplyColorsToControl(child, fore, back);
        }

        /// <summary>
        /// Translates the header text of the DataGridView columns using a resource manager.
        /// </summary>
        private void TranslateGridHeaders()
        {
            // Creates a new resource manager.
            var rm = new ComponentResourceManager(typeof(mainForm));
            // Iterates through several DataGridViews.
            foreach (var grid in new[] { filesDataGridView, dataGridView1 })
            {
                // Iterates through each column in the current DataGridView.
                foreach (DataGridViewColumn col in grid.Columns)
                    // Retrieves the translated header text from resources; if not found, keeps the original text.
                    col.HeaderText = rm.GetString($"{grid.Name}.Header.{col.Name}") ?? col.HeaderText;
            }
            // Repeats the process for the `skippedDataGridView`.
            foreach (DataGridViewColumn col in skippedDataGridView.Columns)
                col.HeaderText = rm.GetString($"skippedDataGridView.Header.{col.Name}") ?? col.HeaderText;
            // Repeats the process for the `copyHistoryDGV`.
            foreach (DataGridViewColumn col in copyHistoryDGV.Columns)
                col.HeaderText = rm.GetString($"copyHistoryDGV.Header.{col.Name}") ?? col.HeaderText;
        }
        /// <summary>
        /// Gets a list of file and directory paths from the main DataGridView,
        /// based on the state of the "full paths" and "only names" check boxes.
        /// </summary>
        /// <returns>A list of strings representing the file/directory paths.</returns>
        public List<string> GetDataGridViewData()
        {
            // Initializes a new list to store the data.
            List<string> data = new List<string>();

            // Iterates through each row in the `filesDataGridView`.
            foreach (DataGridViewRow row in filesDataGridView.Rows)
            {
                // Checks if the "full paths" check box is checked.
                if (fullPathsCheckBox.Checked == true)
                {
                    // Retrieves the value from the first cell of the current row (assumed to be the full path).
                    object cellValueFullPath = row.Cells[0].Value;

                    // Checks if the cell value is not null.
                    if (cellValueFullPath != null)
                    {
                        // Checks if the path is a directory.
                        if (Directory.Exists(cellValueFullPath.ToString()))
                        {
                            // If it's a directory, it enumerates all files within it and adds their paths to the list.
                            foreach (var sourceFilePath in Directory.EnumerateFiles(cellValueFullPath.ToString(), "*", System.IO.SearchOption.AllDirectories))
                            {
                                data.Add(sourceFilePath.ToString());
                            }
                        }
                        else
                        {
                            // If it's a file, it adds the full path to the list.
                            data.Add(cellValueFullPath.ToString());
                        }
                    }
                }
                // Checks if the "only names" check box is checked.
                else if (onlyNamesCheckBox.Checked == true)
                {
                    // Retrieves the value from the second cell of the current row (assumed to be the file/directory name).
                    object cellValueFileDirNames = row.Cells[1].Value;

                    // Checks if the cell value is not null.
                    if (cellValueFileDirNames != null)
                    {
                        // Checks if the path (name) is a directory. Note: This logic seems flawed as `Directory.Exists`
                        // needs a full path, not just a name.
                        if (Directory.Exists(cellValueFileDirNames.ToString()))
                        {
                            // If it's a directory, it enumerates all files within it and adds their paths to the list.
                            foreach (var sourceFilePath in Directory.EnumerateFiles(cellValueFileDirNames.ToString(), "*", System.IO.SearchOption.AllDirectories))
                            {
                                data.Add(sourceFilePath.ToString());
                            }
                        }
                        else
                        {
                            // If it's a file, it adds the path (name) to the list.
                            data.Add(cellValueFileDirNames.ToString());
                        }
                    }
                }
            }
            // Returns the final list of data.
            return data;
        }

        /// <summary>
        /// Exports a list of strings to a specified file path.
        /// </summary>
        /// <param name="filePath">The path of the file to write to.</param>
        /// <param name="data">The list of strings to export.</param>
        public void ExportDataToFile(string filePath, List<string> data)
        {
            // Uses a `StreamWriter` to write the data to the file, ensuring the writer is properly disposed.
            using (StreamWriter sw = new StreamWriter(filePath))
            {
                // Iterates through the list of strings.
                foreach (var item in data)
                {
                    // Writes each string to a new line in the file.
                    sw.WriteLine(item);
                }
            }
        }
        /// <summary>
        /// Processes a folder, adding its contents to the file list and starting a background worker.
        /// This method also handles UI state changes like enabling/disabling controls.
        /// </summary>
        /// <param name="folderPath">The path of the folder to process.</param>
        private void ProcessFolder(string folderPath)
        {
            // If the "always on top" option is checked, temporarily disables it.
            if (alwaysOnTopCheckBox.Checked == true)
            {
                this.TopMost = false;
            }
            // Sets a flag to prevent drag and drop operations.
            noDragDrop = true;

            // Sets the default foreground color for the rows in the DataGridView.
            this.filesDataGridView.RowTemplate.DefaultCellStyle.ForeColor = System.Drawing.Color.Black;

            // Disables a large number of UI controls to prevent user interaction during processing.
            startButton.Enabled = false;
            clearFileListButton.Enabled = false;
            cancelButton.Enabled = false;
            removeFileButton.Enabled = false;
            skipButton.Enabled = false;
            addFileButton.Enabled = false;
            doNotOverwriteCheckBox.Enabled = false;
            overwriteAllCheckBox.Enabled = false;
            overwriteIfNewerCheckBox.Enabled = false;
            clearTextButton.Enabled = false;
            searchTextBox.Enabled = false;
            sourceDirectoryLabel.Enabled = false;
            targetDirectoryLabel.Enabled = false;
            moveFileUpLabel.Enabled = false;
            moveFileDownLabel.Enabled = false;
            moveToTopLabel.Enabled = false;
            moveToBottomLabel.Enabled = false;

            // Updates the `fromFilesDirLabel` with the path of the folder being processed.
            fromFilesDirLabel.Text = folderPath;
            path = folderPath;
            string folder = new DirectoryInfo(path).Name;

            // Checks if the path is a root directory and shows an error message if so.
            if (folderPath == Directory.GetDirectoryRoot(folderPath))
            {
                MessageBox.Show(Translator.Get("You cannot copy/move/delete the root directory!"), Translator.Get("Copy That v1.0 By: Havoc - Error!"), MessageBoxButtons.OK, MessageBoxIcon.Error);
                noDragDrop = false;
            }
            // Checks if the file list is empty.
            else if (filesDataGridView.Rows.Count == 0)
            {
                // If the background worker is not busy, it starts it to begin processing.
                if (!_copyWorker.IsBusy)
                {
                    _copyWorker.RunWorkerAsync();
                }
                noDragDrop = false;
            }
            // Checks if the file list is not empty.
            else if (filesDataGridView.Rows.Count > 0)
            {
                // Checks if the file/folder has already been added to the list.
                if (!DoesRowExist(path))
                {
                    // If the background worker is not busy, it starts it.
                    if (!_copyWorker.IsBusy)
                    {
                        _copyWorker.RunWorkerAsync();
                    }
                    noDragDrop = false;
                }
                else
                {
                    // Shows a message if the file/folder has already been added.
                    MessageBox.Show(Translator.Get("File/Folder was already added to the file/folder list!"), Translator.Get("Copy That v1.0 - File/Directory Tool - File/Folder Already Added!"), MessageBoxButtons.OK, MessageBoxIcon.Error);
                    noDragDrop = false;
                }
            }

            // Resets the `noDragDrop` flag to false.
            noDragDrop = false;
            // Re-enables the UI controls that were disabled earlier.
            startButton.Enabled = true;
            clearFileListButton.Enabled = true;
            removeFileButton.Enabled = true;
            addFileButton.Enabled = true;
            doNotOverwriteCheckBox.Enabled = true;
            overwriteAllCheckBox.Enabled = true;
            overwriteIfNewerCheckBox.Enabled = true;
            clearTextButton.Enabled = true;
            searchTextBox.Enabled = true;
            sourceDirectoryLabel.Enabled = true;
            targetDirectoryLabel.Enabled = true;
            moveFileUpLabel.Enabled = true;
            moveFileDownLabel.Enabled = true;
            moveToTopLabel.Enabled = true;
            moveToBottomLabel.Enabled = true;

            // Re-enables the "always on top" setting if it was checked.
            if (alwaysOnTopCheckBox.Checked == true)
            {
                this.TopMost = true;
            }
        }

        /// <summary>
        /// A method to update the UI with progress information from a background task.
        /// It ensures thread safety using `InvokeRequired`.
        /// </summary>
        /// <param name="progress">The progress report object containing update information.</param>
        private void UpdateUI(ProgressReport progress)
        {
            // Checks if the method is being called from a different thread than the UI thread.
            if (InvokeRequired)
            {
                // If so, it uses `Invoke` to call the method on the UI thread.
                Invoke(new Action(() => UpdateUI(progress)));
                return;
            }

            modernTotal.Value = progress.PercentComplete;
            modernTotal.Refresh();

            modernTotal.Text = $"{progress.PercentComplete}%";
            modernTotal.Refresh();
            // Updates the text of the `speedLabel`.
            speedLabel.Text = $"Speed: {progress.Speed:0.00} MB/s";

            // Updates the text of the `fromFilesDirLabel`.
            fromFilesDirLabel.Text = string.Format(
                Translator.Get("Current Source: {0}"),
                progress.CurrentFile);
        }

        /// <summary>
        /// Gets a default target directory path based on a source path.
        /// </summary>
        /// <param name="sourcePath">The source file or directory path.</param>
        /// <returns>A default target directory path.</returns>
        private string GetDefaultTargetDirectory(string sourcePath)
        {
            // Defines a hardcoded default directory.
            string defaultDirectory = @"C:\Users\YourUsername\Documents\BackupFiles";

            // If the source path is a directory, it appends the directory name to the default path.
            if (Directory.Exists(sourcePath))
            {
                return System.IO.Path.Combine(defaultDirectory, new DirectoryInfo(sourcePath).Name);
            }

            // If the source path is a file, it appends the file name (without extension) to the default path.
            if (File.Exists(sourcePath))
            {
                string fileNameWithoutExtension = System.IO.Path.GetFileNameWithoutExtension(sourcePath);
                return System.IO.Path.Combine(defaultDirectory, fileNameWithoutExtension);
            }

            // If neither a directory nor a file, it returns the default path.
            return defaultDirectory;
        }
        /// <summary>
        /// An event handler for when a drag-and-drop operation enters the form.
        /// It checks the dropped data and sets the drag-and-drop effect.
        /// </summary>
        /// <param name="sender">The object that triggered the event.</param>
        /// <param name="e">The event arguments, which contain drag-and-drop data.</param>
        private void MainForm_DragEnter(object sender, DragEventArgs e)
        {
            try
            {
                // Checks if the user has enabled the "Confirm Drag and Drop" setting.
                if (CopyThatProgram.Properties.Settings.Default.ConfirmDragDrop)
                {
                    // Checks if the dropped data is a file drop.
                    if (e.Data.GetDataPresent(DataFormats.FileDrop, false))
                    {
                        // Retrieves the array of file/directory paths.
                        string[] files = (string[])e.Data.GetData(DataFormats.FileDrop);

                        // Checks if any of the dropped items are entire drives.
                        if (files.Any(f => DriveInfo.GetDrives().Any(d => d.RootDirectory.FullName.TrimEnd('\\') == f.TrimEnd('\\'))))
                        {
                            // Shows a warning message and disallows the drop if a drive is detected.
                            MessageBox.Show(Translator.Get("Dropping Drives is Not Allowed."), Translator.Get("Invalid Operation"), MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            e.Effect = DragDropEffects.None;
                            return;
                        }

                        // Shows a confirmation dialog to the user.
                        DialogResult result = MessageBox.Show(
                            Translator.Get($"Do You Want to Add {files.Length} File(s) to Copy?"),
                            Translator.Get("Confirm Drag and Drop"),
                            MessageBoxButtons.YesNo,
                            MessageBoxIcon.Question
                        );

                        // Sets the drag-and-drop effect based on the user's response.
                        if (result == DialogResult.Yes)
                        {
                            e.Effect = DragDropEffects.Copy;
                        }
                        else
                        {
                            e.Effect = DragDropEffects.None;
                        }
                    }
                    else
                    {
                        // Disallows the drop if the data format is not a file drop.
                        e.Effect = DragDropEffects.None;
                    }
                }
                else
                {
                    // If the confirmation setting is disabled, it proceeds without asking.
                    if (e.Data.GetDataPresent(DataFormats.FileDrop, false))
                    {
                        // Retrieves the file/directory paths.
                        string[] files = (string[])e.Data.GetData(DataFormats.FileDrop);

                        // Checks for and disallows dropping drives.
                        if (files.Any(f => DriveInfo.GetDrives().Any(d => d.RootDirectory.FullName.TrimEnd('\\') == f.TrimEnd('\\'))))
                        {
                            MessageBox.Show(Translator.Get("Dropping Drives is Not Allowed."), Translator.Get("Invalid Operation"), MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            e.Effect = DragDropEffects.None;
                            return;
                        }

                        // Allows the drop as a copy operation.
                        e.Effect = DragDropEffects.Copy;
                    }
                    else
                    {
                        // Disallows the drop if the data format is not a file drop.
                        e.Effect = DragDropEffects.None;
                    }
                }
            }
            catch (Exception ex)
            {
                // Shows a generic error message if something goes wrong during the drag-and-drop process.
                MessageBox.Show(Translator.Get("Sorry, but the directory or file couldn't be added."), Translator.Get("Copy That v1.0 By: Havoc - Error!"), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        /// <summary>
        /// Adds a single file to the file list.
        /// </summary>
        /// <param name="filePath">The path of the file to add.</param>
        /// <param name="targetPath">The target path (not used in this method).</param>
        private void AddSingleFile(string filePath, string targetPath)
        {
            // Creates a `FileInfo` object for the specified file path.
            FileInfo fileInfo2 = new FileInfo(filePath);

            // Creates a new `FileInfoWrapper` object and populates its properties from the `FileInfo`.
            FileInfoWrapper fileWrapper = new FileInfoWrapper
            {
                FileName = fileInfo2.Name,
                FilePath = fileInfo2.FullName,
                FileSize = FormatBytes(fileInfo2.Length),
                BytesRaw = fileInfo2.Length,
                Status = "Pending",
                IsDirectory = false
            };

            // Adds the newly created wrapper object to the `_fileList`.
            _fileList.Add(fileWrapper);
        }

        /// <summary>
        /// Retrieves the full path of a file.
        /// </summary>
        /// <param name="filePath">The path of the file.</param>
        /// <returns>The full path of the file.</returns>
        private string getFileName(string filePath)
        {
            // Returns the full path for the specified file.
            return System.IO.Path.GetFullPath(filePath);
        }
        /// <summary>
        /// This method is the event handler for the form's `DragDrop` event.
        /// It processes the files and directories that are dropped onto the form.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The event data, which includes the dropped files.</param>
        private void MainForm_DragDrop(object sender, DragEventArgs e)
        {
            // Retrieves the list of dropped file and directory paths.
            string[] droppedFiles = (string[])e.Data.GetData(DataFormats.FileDrop);
            // If no files were dropped, it shows an error message and exits the method.
            if (droppedFiles.Length == 0)
            {
                MessageBox.Show(Translator.Get("Sorry, but the directory or file couldn't be added."), Translator.Get("Copy That v1.0 By: Havoc - Error!"), MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            // Iterates through each dropped file or directory.
            foreach (string file in droppedFiles)
            {
                // Gets the full path of the dropped item.
                string fileName = getFileName(file);
                // Shows a message box to inform the user what they dropped.
                MessageBox.Show(Translator.Get("You dropped " + fileName), Translator.Get("Drppped File"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                // Checks if the dropped item is a directory.
                if (Directory.Exists(file))
                {
                    // If it's a directory, this line is commented out, but it would call a method to add files from that directory.
                    //AddFilesFromDirectory(fileName, targetDirLabel.Text);
                }
                // Checks if the dropped item is a file.
                else if (File.Exists(file))
                {
                    // If it's a file, it calls the `AddSingleFile` method to add it to the list.
                    AddSingleFile(fileName, targetDirLabel.Text);
                }
            }
            // Plays a sound indicating that a file has been added.
            PlaySound("FileAdded");
        }
        /// <summary>
        /// An event handler for the form's `DragEnter` event, specifically with confirmation enabled.
        /// It checks if the dropped data is a file drop and asks the user for confirmation.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The event data.</param>
        private void MainForm_DragEnterWithConfirmation(object sender, DragEventArgs e)
        {
            try
            {
                // Checks if the dropped data is in the `FileDrop` format.
                if (e.Data.GetDataPresent(DataFormats.FileDrop))
                    // If so, it sets the effect to `All`, allowing a copy, move, or link operation.
                    e.Effect = DragDropEffects.All;
                else
                {
                    // If not a file drop, it gets the available data formats (this line doesn't affect the outcome).
                    String[] strGetFormats = e.Data.GetFormats();
                    // It then sets the effect to `None`, disallowing the drop.
                    e.Effect = DragDropEffects.None;
                }

                // It checks the data format again, which is redundant but harmless.
                if (e.Data.GetDataPresent(DataFormats.FileDrop))
                {
                    // Retrieves the array of dropped files.
                    string[] files = (string[])e.Data.GetData(DataFormats.FileDrop);
                    // Displays a message box to confirm with the user if they want to add the files.
                    DialogResult result = MessageBox.Show(
                        Translator.Get($"Do you want to add {files.Length} file(s) to copy?"),
                        Translator.Get("Confirm Drag and Drop"),
                        MessageBoxButtons.YesNo,
                        MessageBoxIcon.Question
                    );

                    // Sets the drag-and-drop effect based on the user's response.
                    if (result == DialogResult.Yes)
                    {
                        e.Effect = DragDropEffects.Copy;
                    }
                    else
                    {
                        e.Effect = DragDropEffects.None;
                    }
                }
            }
            catch (Exception ex)
            {
                // Catches any exceptions and displays a generic error message.
                MessageBox.Show(Translator.Get("Sorry, but the directory or file couldn't be added."), Translator.Get("Copy That v1.0 By: Havoc - Error!"), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }
        /// <summary>
        /// This method is the event handler for the form's `DragDrop` event when confirmation is enabled.
        /// It adds the dropped files and folders to the file list.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The event data.</param>
        private void MainForm_DragDropWithConfirmation(object sender, DragEventArgs e)
        {
            // Retrieves the array of dropped files.
            string[] files = (string[])e.Data.GetData(DataFormats.FileDrop);

            // Checks if the files array is not null and contains items.
            if (files != null && files.Length > 0)
            {
                // Iterates through each dropped file or folder.
                foreach (string file in files)
                {
                    // Checks if the item is a directory.
                    if (Directory.Exists(file))
                    {
                        // If it's a directory, this commented-out line would add its contents.
                        //AddFilesFromDirectory(file, targetDirLabel.Text);
                    }
                    // Checks if the item is a file.
                    else if (File.Exists(file))
                    {
                        // If it's a file, it calls `AddSingleFile`.
                        AddSingleFile(file, targetDirLabel.Text);
                    }
                }
            }
            // Plays a sound.
            PlaySound("FileAdded");
        }

        /// <summary>
        /// An event handler for a button click that restores the default settings.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The event data.</param>
        private void btnRestoreDefaults_Click(object sender, EventArgs e)
        {
            // Calls a method to restore the settings to their default values.
            RestoreDefaultSettings();
        }

        /// <summary>
        /// Saves the current state of the application's settings to the user's configuration file.
        /// </summary>
        private void SaveSettings()
        {
            // Saves settings related to the application window and behavior (e.g., Always on Top, Minimize to Tray).
            CopyThatProgram.Properties.Settings.Default.AlwaysOnTop = alwaysOnTopCheckBox.Checked;
            CopyThatProgram.Properties.Settings.Default.ConfirmDragDrop = confirmDragDropCheckBox.Checked;
            CopyThatProgram.Properties.Settings.Default.MinimizeToTray = minimizeSystemTrayCheckBox.Checked;

            // Saves theme and language settings.
            CopyThatProgram.Properties.Settings.Default.Language = languageComboBox.SelectedItem.ToString();
            CopyThatProgram.Properties.Settings.Default.Skin = skinsComboBox.SelectedItem.ToString();

            // Saves logging settings.
            CopyThatProgram.Properties.Settings.Default.LogToFile = logFileCheckBox.Checked;
            //CopyThatProgram.Properties.Settings.Default.LogRetentionDays = (int)numLogDays.Value;

            // Saves performance-related settings like buffer size and file size filters.
            CopyThatProgram.Properties.Settings.Default.BufferSize = (int)bufferNumUpDown.Value;
            CopyThatProgram.Properties.Settings.Default.CopyFilesOver = overMBCheckBox.Checked;
            CopyThatProgram.Properties.Settings.Default.CopyFilesUnder = underMBCheckBox.Checked;
            CopyThatProgram.Properties.Settings.Default.OverNum = (int)setMBGBOverNumUpDown.Value;
            CopyThatProgram.Properties.Settings.Default.UnderNum = (int)setMBGBUnderNumUpDown.Value;

            // Saves settings related to file and folder handling (e.g., zip options, path types).
            CopyThatProgram.Properties.Settings.Default.ZipSeparately = zipSeparateCheckBox.Checked;
            CopyThatProgram.Properties.Settings.Default.ZipTogether = zipTogetherCheckBox.Checked;
            CopyThatProgram.Properties.Settings.Default.FileOnlyNames = onlyNamesCheckBox.Checked;
            CopyThatProgram.Properties.Settings.Default.FileFullPaths = fullPathsCheckBox.Checked;

            // Saves other operational settings.
            CopyThatProgram.Properties.Settings.Default.RestartOnError = restartCheckBox.Checked;
            CopyThatProgram.Properties.Settings.Default.CloseOnError = closeProgramCheckBox.Checked;
            CopyThatProgram.Properties.Settings.Default.StartWithWindows = startWithWindowsCheckBox.Checked;

            // Saves sound-related settings.
            CopyThatProgram.Properties.Settings.Default.SoundCopyComplete = onFinishCheckBox.Checked;
            CopyThatProgram.Properties.Settings.Default.SoundFileAdded = onAddFilesCheckBox.Checked;
            CopyThatProgram.Properties.Settings.Default.SoundCancel = onCancelCheckBox.Checked;
            CopyThatProgram.Properties.Settings.Default.SoundError = onErrorCheckBox.Checked;

            // Saves the setting for automatic saving.
            CopyThatProgram.Properties.Settings.Default.AutoSaveSettings = saveAutoCheckBox.Checked;
            // Commits the changes to the settings file.
            CopyThatProgram.Properties.Settings.Default.Save();
        }

        /// <summary>
        /// Resets the application's settings to their default values and reloads them.
        /// </summary>
        private void RestoreDefaultSettings()
        {
            // Calls the `Reset` method on the default settings to revert all properties.
            CopyThatProgram.Properties.Settings.Default.Reset();
            // Calls a method to load the newly reset settings into the UI.
            LoadCurrentSettings();
        }

        /// <summary>
        /// An event handler for a button click that applies a set of recommended settings.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The event data.</param>
        private void recSettingsButton_Click(object sender, EventArgs e)
        {
            // Sets the `AlwaysOnTop` setting to false and updates the corresponding checkbox.
            Properties.Settings.Default.AlwaysOnTop = false;
            alwaysOnTopCheckBox.Checked = false;

            // Sets the `MinimizeToTray` setting to false and updates the checkbox.
            Properties.Settings.Default.MinimizeToTray = false;
            minimizeSystemTrayCheckBox.Checked = false;

            // Sets the `ConfirmDragDrop` setting to true and updates the checkbox.
            Properties.Settings.Default.ConfirmDragDrop = true;
            confirmDragDropCheckBox.Checked = true;

            // Sets the `SoundCopyComplete` setting to false but checks the checkbox to true, which is a logic error.
            Properties.Settings.Default.SoundCopyComplete = false;
            onFinishCheckBox.Checked = true;

            // Sets the `SoundCancel` setting to false and updates the checkbox.
            Properties.Settings.Default.SoundCancel = false;
            onCancelCheckBox.Checked = false;

            // Sets the `SoundError` setting to true and updates the checkbox.
            Properties.Settings.Default.SoundError = true;
            onErrorCheckBox.Checked = true;

            // Sets the `SoundFileAdded` setting to false and updates the checkbox.
            Properties.Settings.Default.SoundFileAdded = false;
            onAddFilesCheckBox.Checked = false;

            // Sets the `AutoSaveSettings` setting to true and updates the checkbox.
            Properties.Settings.Default.AutoSaveSettings = true;
            saveAutoCheckBox.Checked = true;

            // Sets the `ContextMenu` setting to true and updates the checkbox.
            Properties.Settings.Default.ContextMenu = true;
            contextMenuCheckBox.Checked = true;

            // Sets the `RestartOnError` setting to true and updates the checkbox.
            Properties.Settings.Default.RestartOnError = true;
            restartCheckBox.Checked = true;

            // Sets the `CopyFilesUnder` setting to false and updates the checkbox.
            Properties.Settings.Default.CopyFilesUnder = false;
            underMBCheckBox.Checked = false;

            // Sets the `CopyFilesOver` setting to false and updates the checkbox.
            Properties.Settings.Default.CopyFilesOver = false;
            overMBCheckBox.Checked = false;

            // Sets the `Multithreading` setting to true and updates the checkbox.
            Properties.Settings.Default.Multithreading = true;
            multithreadCheckBox.Checked = true;
        }
        /// <summary>
        /// Removes duplicate files from a list based on their file path.
        /// </summary>
        /// <param name="list">The list of `FileInfoWrapper` objects to process.</param>
        private static void RemoveDuplicatesByFilePath(BindingList<FileInfoWrapper> list)
        {
            // Creates a `HashSet` to keep track of seen file paths for efficient lookup.
            var seen = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
            // Iterates through the list backwards to safely remove items during the loop.
            for (int i = list.Count - 1; i >= 0; i--)
            {
                // Tries to add the current file's path to the `HashSet`. `Add` returns false if the item already exists.
                if (!seen.Add(list[i].FilePath))
                    // If the path is a duplicate, it removes the item from the list.
                    list.RemoveAt(i);
            }
        }

        private void _updateTimer_Tick(object sender, EventArgs e)
        {
            // Do nothing if the operation is paused or canceled.
            if (_isPaused || _isCanceled) return;
            // Do nothing if the stopwatch hasn't started or no bytes have been processed.
            if (_stopwatch.ElapsedMilliseconds == 0 && _totalBytesProcessed == 0)
                return;

            long elapsedMs = _stopwatch.ElapsedMilliseconds;
            if (elapsedMs == 0)
                return;

            // Calculate bytes processed since the last tick.
            long bytesSinceLastTick = _totalBytesProcessed - _lastProcessedBytesForSpeed;
            // Calculate speed in bytes per second.
            double speedBps = bytesSinceLastTick / ((DateTime.Now - _lastSpeedCalcTime).TotalSeconds);

            // Use a switch expression to format the speed into B/s, KB/s, MB/s, or GB/s.
            string speedText = speedBps switch
            {
                < 1024 => $"{speedBps:F2} B/s",
                < 1024 * 1024 => $"{speedBps / 1024:F2} KB/s",
                < 1024L * 1024 * 1024 => $"{speedBps / (1024.0 * 1024):F2} MB/s",
                _ => $"{speedBps / (1024.0 * 1024 * 1024):F2} GB/s"
            };

            // Calculate the estimated time remaining.
            long bytesRemaining = _totalBytesToProcess - _totalBytesProcessed;
            TimeSpan eta = bytesRemaining <= 0 || speedBps <= 0
                ? TimeSpan.Zero
                : TimeSpan.FromSeconds(bytesRemaining / speedBps);

            TimeSpan elapsed = TimeSpan.FromMilliseconds(elapsedMs);
            // Calculate the total estimated target time.
            TimeSpan target = elapsed + eta;

            // Calculate running grand totals (previous totals + current operation)
            var settings = Properties.Settings.Default;
            TimeSpan grandElapsedRunning = TimeSpan.FromSeconds(settings.TotalElapsedTimeSeconds) + elapsed;
            TimeSpan grandTargetRunning = TimeSpan.FromSeconds(settings.TotalTargetTimeSeconds) + target;

            // Update the UI labels with the new speed and time information
            if (speedLabel != null && !speedLabel.IsDisposed)
                speedLabel.Text = $"Speed: {speedText}";

            // Update current operation time display
            if (elapsedAndTargetTimeLabel != null && !elapsedAndTargetTimeLabel.IsDisposed)
                elapsedAndTargetTimeLabel.Text = string.Format(
                    Translator.Get("Elapsed / Target Time: {0} / {1}"),
                    elapsed.ToString(@"hh\:mm\:ss"),
                    target.ToString(@"hh\:mm\:ss"));

            // Update running totals display
            if (totalElapsedTimeLabel != null && !totalElapsedTimeLabel.IsDisposed)
                totalElapsedTimeLabel.Text = string.Format(
                    Translator.Get("Total Elapsed Time: {0}"),
                    TotalsManager.FormatTimeWithDaysAndYears(_grandElapsedTime));

            if (totalTargetTimeLabel != null && !totalTargetTimeLabel.IsDisposed)
                totalTargetTimeLabel.Text = string.Format(
                    Translator.Get("Total Target Time: {0}"),
                    TotalsManager.FormatTimeWithDaysAndYears(_grandTargetTime));

            // Store the current values for the next calculation.
            _lastProcessedBytesForSpeed = _totalBytesProcessed;
            _lastSpeedCalcTime = DateTime.Now;

            // Update the drive space information.
            UpdateDriveSpaceInfo();
        }

        /// <summary>
        /// An asynchronous event handler for the `startButton` click. This method initiates the file operation (copy, move, or secure delete).
        /// It performs various checks, sets up the UI, and starts the background worker.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The event data.</param>
        private async void startButton_Click(object sender, EventArgs e)
        {
            // Resets the timestamp for speed calculation.
            _lastSpeedCalcTime = DateTime.Now;

            // Initializes the `_updateTimer` if it's null.
            if (_updateTimer == null)
            {
                _updateTimer = new System.Windows.Forms.Timer { Interval = 500 };
                _updateTimer.Tick += _updateTimer_Tick;
            }
            // Resets flags for cancellation and pausing.
            _isCanceled = false;
            _isPaused = false;
            // Sets the pause event to unblock any waiting threads.
            _pauseEvent.Set();

            // Resets various counters for files and bytes processed.
            _totalBytesProcessed = _totalBytesProcessed = 0;
            _multiThreadProcessedFiles = _processedFiles = 0;
            _totalFilesCopied = _totalFilesMoved = _totalFilesDeleted = 0;
            _totalFilesSkipped = _totalFilesFailed = 0;
            _totalFilesCopiedMulti = 0;
            // Clears the list of skipped files.
            _skippedFilesList.Clear();
            // Resets the flag to finish the current file and quit.
            _finishCurrentFileAndQuit = false;

            // Checks if the file list is empty and shows a warning if so.
            if (_fileList == null || _fileList.Count == 0)
            {
                MessageBox.Show(Translator.Get("You must select files or folders to Copy/Move/Delete!"),
                                Translator.Get("No Source Items"), MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            // Clears the current target paths.
            _currentTargetPaths.Clear();
            // Checks if the user wants to create a custom directory.
            if (createCustomDirCheckBox.Checked)
            {
                // Gets the custom directory path from the user.
                string customDir = GetCustomDirectoryFromUser();
                // If the path is invalid, shows a message and exits.
                if (string.IsNullOrWhiteSpace(customDir))
                {
                    MessageBox.Show(Translator.Get("Operation cancelled: Custom directory not specified."),
                                    Translator.Get("Operation Cancelled"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                // Adds the custom directory to the target paths.
                _currentTargetPaths.Add(customDir);
            }
            else
            {
                // If not creating a custom directory, checks if a target path is selected.
                if (this.targetPaths == null || this.targetPaths.Count == 0)
                {
                    MessageBox.Show(Translator.Get("Please select at least one destination folder."),
                                    Translator.Get("Missing Destination"), MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }
                // Adds the existing target paths.
                _currentTargetPaths.AddRange(this.targetPaths);
            }

            // Calculates the total bytes of files to be processed.
            long neededBytes = _fileList.Where(f => !f.IsDirectory).Sum(f => f.BytesRaw);

            // If there are target paths, it checks for sufficient disk space.
            if (_currentTargetPaths.Any())
            {
                // Gets a list of unique drive roots for the target paths.
                var driveRoots = _currentTargetPaths
                                     .Select(tp => System.IO.Path.GetPathRoot(tp))
                                     .Where(r => !string.IsNullOrEmpty(r))
                                     .Distinct(StringComparer.OrdinalIgnoreCase)
                                     .ToList();

                // Defines a minimum amount of free space to keep.
                long keepBytes = 20 * 1024 * 1024;
                // Defines the minimum free space after the operation.
                long minFreeAfter = 100 * 1024 * 1024;

                // Iterates through each unique drive root.
                foreach (var root in driveRoots)
                {
                    DriveInfo drive;
                    try
                    {
                        // Gets a `DriveInfo` object for the current drive root.
                        drive = new DriveInfo(root);
                    }
                    catch
                    {
                        // Skips to the next drive if there's an error.
                        continue;
                    }

                    // If the drive is not ready, it skips to the next one.
                    if (!drive.IsReady) continue;

                    // Calculates the free space after the operation.
                    long freeAfter = drive.AvailableFreeSpace - neededBytes;

                    // Checks if a full overwrite is not selected and if the free space will fall below the minimum.
                    if (!overwriteAllCheckBox.Checked && freeAfter < minFreeAfter)
                    {
                        // Calculates the maximum allowed bytes to copy to maintain the `keepBytes` free space.
                        long maxAllowed = drive.AvailableFreeSpace - keepBytes;
                        long allowedBytes = Math.Min(neededBytes, maxAllowed);

                        // If no space is available, it shows an error message.
                        if (allowedBytes <= 0)
                        {
                            MessageBox.Show(Translator.Get("Not enough space left on drive " + drive.Name + "."),
                                            Translator.Get("Out of space"), MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return;
                        }

                        // Shows a warning message to the user about low disk space and asks for confirmation.
                        var result = MessageBox.Show(
                            Translator.Get($"Drive {drive.Name} will have less than 100 MB free.\n\n" +
                            $"Only {FormatBytes(allowedBytes)} will be copied so that around {FormatBytes(keepBytes)} remain.\n\nContinue?"),
                            Translator.Get("Low disk space"),
                            MessageBoxButtons.YesNo,
                            MessageBoxIcon.Warning);
                        // If the user does not confirm, it exits the method.
                        if (result != DialogResult.Yes) return;

                        // Trims the file list to only include files that will fit within the allowed space.
                        long running = 0;
                        var trimmed = _fileList.Where(f => !f.IsDirectory)
                                                 .TakeWhile(f => (running += f.BytesRaw) <= allowedBytes)
                                                 .ToList();

                        // Clears the original list and adds the trimmed list.
                        _fileList.Clear();
                        foreach (var f in trimmed) _fileList.Add(f);
                    }
                }
            }

            // Checks how many "behavior" options are selected.
            int behaviourOptions = 0;
            if (keepDirStructCheckBox.Checked) behaviourOptions++;
            if (copyFilesDirsCheckBox.Checked) behaviourOptions++;
            if (keepOnlyFilesCheckBox.Checked) behaviourOptions++;
            if (leaveEmptyFoldersCheckBox.Checked) behaviourOptions++;

            // If creating a custom directory, allow up to 3 checkboxes to be selected
            // Otherwise, only allow 1 behavior option
            int maxBehaviorOptions = createCustomDirCheckBox.Checked ? 3 : 2;

            if (behaviourOptions > maxBehaviorOptions)
            {
                string message = createCustomDirCheckBox.Checked
                    ? Translator.Get("When creating a custom directory or keeping only empty folders, you may select up to 3 behavior options.")
                    : Translator.Get("Only one behaviour option may be selected at a time.");

                MessageBox.Show(message, Translator.Get("Invalid Options"), MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
                return;
            }

            // Validate keepEmptyFolders requires either keepDirectoryStructure or copyFilesOnly
            if (leaveEmptyFoldersCheckBox.Checked &&
                !keepDirStructCheckBox.Checked &&
                !copyFilesDirsCheckBox.Checked)
            {
                MessageBox.Show(Translator.Get("'Keep Empty Folders Only' must be used with either 'Keep Directory Structure' or 'Copy Files Only'."),
                               Translator.Get("Invalid Combination"), MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            // When creating a custom directory, ensure at least one overwrite option and one directory structure option are selected
            if (createCustomDirCheckBox.Checked)
            {
                // Check that at least one overwrite option is selected
                int overwriteModes = 0;
                if (overwriteAllCheckBox.Checked) overwriteModes++;
                if (doNotOverwriteCheckBox.Checked) overwriteModes++;
                if (overwriteIfNewerCheckBox.Checked) overwriteModes++;

                if (overwriteModes == 0)
                {
                    MessageBox.Show(Translator.Get("When creating a custom directory, you must select an overwrite option (Overwrite All, Do Not Overwrite, or Overwrite If Newer)."),
                                   Translator.Get("Missing Overwrite Option"), MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                // Check that at least one directory structure option is selected
                if (behaviourOptions == 0)
                {
                    MessageBox.Show(Translator.Get("When creating a custom directory, you must select at least one directory structure option (Keep Directory Structure, Copy Files Only, Keep Only Files, or Keep Empty Folders)."),
                                   Translator.Get("Missing Directory Structure Option"), MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }
            }

            // Checks how many overwrite modes are selected (for normal operations).
            int totalOverwriteModes = 0;
            if (overwriteAllCheckBox.Checked) totalOverwriteModes++;
            if (doNotOverwriteCheckBox.Checked) totalOverwriteModes++;
            if (overwriteIfNewerCheckBox.Checked) totalOverwriteModes++;

            // Shows an error if more than one overwrite mode is selected.
            if (totalOverwriteModes > 1)
            {
                MessageBox.Show(Translator.Get("Only one overwrite behaviour may be selected."),
                               Translator.Get("Invalid Options"), MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            // Sets boolean flags based on the state of the checkboxes.
            _overwriteAll = overwriteAllCheckBox.Checked;
            _doNotOverwrite = doNotOverwriteCheckBox.Checked;
            _overwriteIfNewer = overwriteIfNewerCheckBox.Checked;
            _keepDirectoryStructure = keepDirStructCheckBox.Checked;
            _copyFilesOnly = copyFilesDirsCheckBox.Checked;
            _keepEmptyFolders = leaveEmptyFoldersCheckBox.Checked;
            _keepOnlyFiles = keepOnlyFilesCheckBox.Checked;

            // Determines the file operation based on the selected item in the combo box.
            FileOperation operation;
            string selectedOperation = copyMoveDeleteComboBox.SelectedItem?.ToString();
            string englishOperation = selectedOperation switch
            {
                // Copy Files
                "Copy Files" or "Copiar Archivos" or "Copier des Fichiers" or "Dateien Kopieren" or
                "Copia File" or "Copiar Ficheiros" or "Bestanden Kopiëren" or "Kopiera Filer" or
                "Kopier Filer" or "Kopier Filer" or "Kopioi Tiedostoja" or "Kopiuj Pliki" or
                "Kopírovat Soubory" or "Fájlok Másolása" or "Copiază Fișiere" => "Copy Files",

                // Move Files
                "Move Files" or "Mover Archivos" or "Déplacer des Fichiers" or "Dateien Verschieben" or
                "Sposta File" or "Mover Ficheiros" or "Bestanden Verplaatsen" or "Flytta Filer" or
                "Flytt Filer" or "Flyt Filer" or "Siirrä Tiedostoja" or "Przenieś Pliki" or
                "Přesunout Soubory" or "Fájlok Áthelyezése" or "Mută Fișiere" => "Move Files",

                // Secure Delete Files
                "Secure Delete Files" or "Eliminar Archivos de Forma Segura" or "Supprimer des Fichiers de Manière Sécurisée" or
                "Dateien Sicher Löschen" or "Elimina File in Modo Sicuro" or "Eliminar Ficheiros de Forma Segura" or
                "Bestanden Veilig Verwijderen" or "Radera Filer Säkert" or "Slett Filer Trygt" or
                "Slet Filer Sikkert" or "Poista Tiedostot Turvallisesti" or "Bezpiecznie Usuń Pliki" or
                "Bezpečně Smazat Soubory" or "Fájlok Biztonságos Törlése" or "Șterge Fișiere în Siguranță" => "Secure Delete Files",

                _ => null
            };

            switch (englishOperation)
            {
                case "Copy Files": operation = FileOperation.Copy; break;
                case "Move Files": operation = FileOperation.Move; break;
                case "Secure Delete Files": operation = FileOperation.SecureDelete; break;
                default:
                    MessageBox.Show(Translator.Get("Please select a valid operation."),
                                    Translator.Get("Invalid Operation"), MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
            }
            // Stores the selected operation.
            _currentOperation = operation;

            // Removes any duplicate file paths from the list.
            RemoveDuplicatesByFilePath(_fileList);

            // Calculates the total number of files and total bytes to process.
            _grandTotalFileCount = _fileList.Count(f => !f.IsDirectory);
            _totalBytesToProcess = _fileList.Where(f => !f.IsDirectory)
                                             .Sum(f => f.BytesRaw);

            // Resets progress counters.
            _totalBytesProcessed = 0;
            _filesProcessed = 0;
            // Restarts the stopwatch to time the operation.
            _stopwatch.Restart();
            // Starts the UI update timer.
            _updateTimer.Start();

            // Initializes the progress handler.
            InitializeProgressHandler();

            // Resets pause/resume button text.
            pauseResumeMultiButton.Text = Translator.Get("Pause");

            // Enables and disables buttons.
            startButton.Enabled = false;
            pauseResumeMultiButton.Enabled = true;
            cancelMultiButton.Enabled = true;

            // Sets the enabled state of various buttons.
            cancelButton.Enabled = true;
            pauseResumeButton.Enabled = true;
            skipButton.Enabled = true;

            // Enable/disable controls based on whether custom directory is being used
            bool isCustomDir = createCustomDirCheckBox.Checked;

            // Always disable these during operation
            copyMoveDeleteComboBox.Enabled = false;
            addFileButton.Enabled = false;
            removeFileButton.Enabled = false;
            clearFileListButton.Enabled = false;
            sourceDirectoryLabel.Enabled = false;
            targetDirectoryLabel.Enabled = false;
            moveFileUpLabel.Enabled = false;
            moveFileDownLabel.Enabled = false;
            moveToTopLabel.Enabled = false;
            moveToBottomLabel.Enabled = false;
            minimizeLabel.Enabled = false;
            settingsLabel.Enabled = false;
            allAboutLabel.Enabled = false;

            // These remain enabled during operation
            exitLabel.Enabled = true;
            rollDownLabel.Enabled = true;
            rollUpLabel.Enabled = true;

            // For custom directory operations, keep some checkboxes enabled
            // For normal operations, disable all checkboxes
            if (isCustomDir)
            {
                // Keep overwrite options enabled (user might want to change during operation)
                overwriteAllCheckBox.Enabled = true;
                doNotOverwriteCheckBox.Enabled = true;
                overwriteIfNewerCheckBox.Enabled = true;

                // Keep directory structure options enabled
                keepDirStructCheckBox.Enabled = true;
                leaveEmptyFoldersCheckBox.Enabled = true;
                keepOnlyFilesCheckBox.Enabled = true;
                copyFilesDirsCheckBox.Enabled = true;
            }
            else
            {
                // Normal operation - disable all option checkboxes
                overwriteAllCheckBox.Enabled = false;
                doNotOverwriteCheckBox.Enabled = false;
                overwriteIfNewerCheckBox.Enabled = false;
                keepDirStructCheckBox.Enabled = false;
                leaveEmptyFoldersCheckBox.Enabled = false;
                keepOnlyFilesCheckBox.Enabled = false;
                copyFilesDirsCheckBox.Enabled = false;
            }

            // Always disable the custom directory checkbox during operation
            createCustomDirCheckBox.Enabled = false;

            try
            {
                // A switch statement to start the appropriate background worker based on the selected operation.
                switch (_currentOperation)
                {
                    case FileOperation.Copy:
                        // If multithreading is enabled, it processes files in parallel.
                        if (multithreadCheckBox.Checked)
                        {
                            // --- Calculate Grand Totals Correctly ---
                            int targetCount = _currentTargetPaths.Count;
                            _grandTotalFileCount = _fileList.Count(f => !f.IsDirectory);
                            _totalBytesToProcess = _fileList.Where(f => !f.IsDirectory)
                                                            .Sum(f => f.BytesRaw);

                            // ✅ If copying/moving to multiple targets, multiply totals
                            if (_currentOperation != FileOperation.SecureDelete && targetCount > 1)
                            {
                                _grandTotalFileCount *= targetCount;
                                _totalBytesToProcess *= targetCount;
                            }

                            fileCountOnLabel.Text = string.Format(Translator.Get("File Count: 0 Out of {0}"), _grandTotalFileCount.ToString("N0"));

                            totalCopiedProgressLabel.Text = string.Format(Translator.Get("Total C/M/D: 0 Bytes / {0}"), FormatBytes(_totalBytesToProcess));


                            tabControl1.SelectedTab = cmdMultithread;
                            // Disable all other tabs
                            ShowOnlyCurrentTab();
                            allowTabChanges = false;
                            await ProcessFilesMultiThreaded(_fileList.ToList(), _currentTargetPaths.ToArray());
                            _copyWorker_RunWorkerCompleted(this,
                                new RunWorkerCompletedEventArgs("Parallel copy complete", null, false));
                        }
                        else
                        {
                            // --- Calculate Grand Totals Correctly ---
                            int targetCount2 = _currentTargetPaths.Count;
                            _grandTotalFileCount = _fileList.Count(f => !f.IsDirectory);
                            _totalBytesToProcess = _fileList.Where(f => !f.IsDirectory)
                                                            .Sum(f => f.BytesRaw);

                            // ✅ If copying/moving to multiple targets, multiply totals
                            if (_currentOperation != FileOperation.SecureDelete && targetCount2 > 1)
                            {
                                _grandTotalFileCount *= targetCount2;
                                _totalBytesToProcess *= targetCount2;
                            }

                            fileCountOnLabel.Text = string.Format(Translator.Get("File Count: 0 Out of {0}"), _grandTotalFileCount.ToString("N0"));

                            totalCopiedProgressLabel.Text = string.Format(Translator.Get("Total C/M/D: 0 Bytes / {0}"), FormatBytes(_totalBytesToProcess));


                            // Disable all other tabs
                            ShowOnlyCurrentTab();
                            allowTabChanges = false;
                            // Otherwise, it starts the single-threaded copy worker.
                            _copyWorker?.RunWorkerAsync();
                        }
                        break;

                    case FileOperation.Move:
                        // --- Calculate Grand Totals Correctly ---
                        int targetCount3 = _currentTargetPaths.Count;
                        _grandTotalFileCount = _fileList.Count(f => !f.IsDirectory);
                        _totalBytesToProcess = _fileList.Where(f => !f.IsDirectory)
                                                        .Sum(f => f.BytesRaw);

                        // ✅ If copying/moving to multiple targets, multiply totals
                        if (_currentOperation != FileOperation.SecureDelete && targetCount3 > 1)
                        {
                            _grandTotalFileCount *= targetCount3;
                            _totalBytesToProcess *= targetCount3;
                        }

                        fileCountOnLabel.Text = string.Format(Translator.Get("File Count: 0 Out of {0}"), _grandTotalFileCount.ToString("N0"));

                        totalCopiedProgressLabel.Text = string.Format(Translator.Get("Total C/M/D: 0 Bytes / {0}"), FormatBytes(_totalBytesToProcess));

                        // Starts the move worker.
                        _moveWorker?.RunWorkerAsync();
                        break;

                    case FileOperation.SecureDelete:
                        // --- Calculate Grand Totals Correctly ---
                        int targetCount4 = _currentTargetPaths.Count;
                        _grandTotalFileCount = _fileList.Count(f => !f.IsDirectory);
                        _totalBytesToProcess = _fileList.Where(f => !f.IsDirectory)
                                                        .Sum(f => f.BytesRaw);

                        // ✅ If copying/moving to multiple targets, multiply totals
                        if (_currentOperation != FileOperation.SecureDelete && targetCount4 > 1)
                        {
                            _grandTotalFileCount *= targetCount4;
                            _totalBytesToProcess *= targetCount4;
                        }

                        fileCountOnLabel.Text = string.Format(Translator.Get("File Count: 0 Out of {0}"), _grandTotalFileCount.ToString("N0"));

                        totalCopiedProgressLabel.Text = string.Format(Translator.Get("Total C/M/D: 0 Bytes / {0}"), FormatBytes(_totalBytesToProcess));


                        // Starts the delete worker.
                        _deleteWorker?.RunWorkerAsync();
                        break;
                }
            }
            catch (Exception ex)
            {
                // Catches any exceptions that occur and calls the completion handler with the error.
                _copyWorker_RunWorkerCompleted(this,
                    new RunWorkerCompletedEventArgs(null, ex, false));
            }
        }

        private void StartElapsedTimer()
        {
            if (!_elapsedTimerRunning) // Checks if the timer is not already running.
            {
                _elapsedTimerRunning = true; // Sets the flag to true to indicate the timer is now running.
                _updateTimer.Start(); // Starts the update timer.
            }
        }

        private void StopElapsedTimer()
        {
            if (_elapsedTimerRunning) // Checks if the timer is currently running.
            {
                _elapsedTimerRunning = false; // Sets the flag to false, indicating the timer is stopped.
                _updateTimer.Stop(); // Stops the update timer.
            }
        }

        /// <summary>
        /// Performs a secure file deletion based on U.S. Department of Defense (DoD) standards.
        /// Overwrites the file content with specific patterns multiple times before deletion
        /// to prevent data recovery.
        /// </summary>
        /// <param name="path">The full path of the file to securely delete</param>
        private static void DoDSecureDelete(string path) // A method to perform a secure file deletion based on DoD standards.
        {
            const int BUFFER = 64 * 1024; // Defines a constant for the buffer size (64KB).
            const int PASSES = 3; // Defines a constant for the number of overwrite passes.

            byte[][] patterns = // An array of byte arrays, representing the overwrite patterns.
                    {
        Enumerable.Repeat((byte)0xFF, BUFFER).ToArray(), // Fills a buffer with all 1s (0xFF).
                Enumerable.Repeat((byte)0x00, BUFFER).ToArray(), // Fills a buffer with all 0s (0x00).
                Enumerable.Repeat((byte)0xF6, BUFFER).ToArray() // Fills a buffer with a specific byte pattern (0xF6).
            };

            File.SetAttributes(path, FileAttributes.Normal); // Sets the file attributes to normal, ensuring it can be written to.

            using (FileStream fs = new FileStream(path, FileMode.Open, FileAccess.Write, FileShare.None)) // Opens the file for writing and ensures exclusive access.
            {
                long fileLen = fs.Length; // Gets the total length of the file.

                foreach (byte[] pattern in patterns) // Loops through each of the defined overwrite patterns.
                {
                    fs.Position = 0; // Resets the file stream position to the beginning of the file.
                    long bytesLeft = fileLen; // Initializes a counter for the remaining bytes to write.

                    while (bytesLeft > 0) // Continues looping as long as there are bytes left to write.
                    {
                        int toWrite = (int)Math.Min(BUFFER, bytesLeft); // Determines the number of bytes to write, which is the smaller of the buffer size or the remaining bytes.
                        fs.Write(pattern, 0, toWrite); // Writes the current pattern to the file.
                        bytesLeft -= toWrite; // Decrements the bytes left counter.
                    }
                    fs.Flush(true); // Flushes all buffered data to the underlying file, ensuring the write operation is complete.
                }
            }
            File.Delete(path); // Deletes the file from the file system.
        }



        private void cancelButton_Click(object sender, EventArgs e) // Event handler for the cancel button.
        {
            if (!_copyWorker.IsBusy) return; // Checks if the copy worker is busy. If not, the method exits.

            _cancelDialogEvent.Reset(); // Resets a dialog event, possibly to block a cancel confirmation dialog.

            bool finish = ConfirmCancelCopy(); // Calls a method to show a confirmation dialog and get the result.

            _pauseEvent.Set(); // Sets the pause event, allowing any paused operations to continue.
            _cancelDialogEvent.Set(); // Sets the cancel dialog event, allowing the dialog to close or the blocked thread to proceed.
            _isCanceled = true;
        }

        /// <summary>
        /// Determines whether a file with the specified full path already exists in the file list.
        /// Uses case-insensitive comparison to check for existing file paths.
        /// </summary>
        /// <param name="fullPath">The full file path to check for existence in the list</param>
        /// <returns>True if the file path already exists in the list, false otherwise</returns>
        private bool DoesRowExist(string fullPath)
        {
            // Uses LINQ to check if any item in the list matches the given path.
            return _fileList.Any(w =>
                // Performs a case-insensitive comparison of file paths.
                string.Equals(w.FilePath, fullPath, StringComparison.OrdinalIgnoreCase));
        }

        private void addFileButton_Click(object sender, EventArgs e) // Event handler for the "Add File" button.
        {
            noDragDrop = true; // Sets a flag to disable drag and drop functionality.

            openFileDialog.Multiselect = true; // Allows the user to select multiple files.
            openFileDialog.FileName = ""; // Clears the file name in the dialog.
            openFileDialog.Title = Translator.Get("Select File(s) to Add");
            long totalSizeBytesFile = 0; // Initializes a variable to track the total size of selected files.

            DialogResult dr = this.openFileDialog.ShowDialog(); // Opens the file dialog and stores the user's action.

            if (dr == System.Windows.Forms.DialogResult.OK) // Checks if the user clicked "OK".
            {
                foreach (string file in openFileDialog.FileNames) // Iterates through each file selected by the user.
                {
                    var fileInfoNow = new FileInfo(file); // Creates a new FileInfo object for the current file.

                    if (!DoesRowExist(fileInfoNow.FullName)) // Checks if the file is not already in the list.
                    {

                        if (fileInfoNow.Length <= 0) // Skips the file if its size is zero or less.
                            continue;

                        try // Begins a try-catch block for error handling.
                        {
                            if (File.Exists(file)) // Double-checks if the file still exists on the file system.
                            {
                                totalSizeBytesFile += fileInfoNow.Length; // Adds the file's size to the running total.

                                _fileList.Add(new FileInfoWrapper // Creates a new FileInfoWrapper object and adds it to the list.
                                {
                                    FileName = System.IO.Path.GetFileName(fileInfoNow.FullName), // Gets just the file name.
                                    FilePath = System.IO.Path.GetFullPath(fileInfoNow.FullName), // Gets the full file path.
                                    FileSize = FormatBytes(fileInfoNow.Length), // Formats the file size for display.
                                    BytesRaw = 0, // Sets the raw bytes to 0 (this may be an error, as fileInfoNow.Length should be used).
                                    IsDirectory = false, // Explicitly marks it as not a directory.
                                    Status = "Pending" // Sets the initial status of the file.
                                });

                                _grandTotalFileCount++; // Increments the total file count.
                                _totalBytesToProcess += fileInfoNow.Length; // Adds the file's size to the total bytes to be processed.

                                fileCountOnLabel.Text = string.Format(Translator.Get("File Count: {0} Out of {1}"),
                                    _processedFiles.ToString("N0"),
                                    _grandTotalFileCount.ToString("N0"));
                                totalCopiedProgressLabel.Text = string.Format(
                        Translator.Get("Total C/M/D: 0 Bytes / {0}"),
                        FormatBytes(_totalBytesToProcess));

                                totalSizeBytesFile = 0; // Resets the local size counter.
                            }
                            else // If the file does not exist on the file system.
                            {
                                MessageBox.Show( // Displays a message box to the user.
                                                    Translator.Get("File/Folder was already added to the file/folder list!"),
                                  Translator.Get("Copy That v1.0 By: Havoc - File/Folder Already Added!"),
                                MessageBoxButtons.OK,
                                  MessageBoxIcon.Error);
                                noDragDrop = false; // Re-enables drag and drop.
                                return; // Exits the method.
                            }
                        }
                        catch (SecurityException ex) // Catches a security exception if the user doesn't have permissions.
                        {
                            MessageBox.Show( // Displays a security error message.
                                              Translator.Get($"Security error!\n\nError message: {ex.Message}\n\nDetails:\n\n{ex.StackTrace}"),
                              Translator.Get("Copy That v1.0 By: Havoc - Error!"),
                              MessageBoxButtons.OK,
                              MessageBoxIcon.Error);
                        }
                        catch (Exception ex) // Catches any other general exception.
                        {
                            MessageBox.Show( // Displays a general error message.
                                             Translator.Get($"Cannot display the file: ({fileInfoNow.Name}). You may not have permission to read the file, or it may be corrupt.\n\nReported error: {ex.Message}"),
                              Translator.Get("Copy That v1.0 By: Havoc - Error!"),
                              MessageBoxButtons.OK,
                              MessageBoxIcon.Error);
                        }
                    }
                }
                pauseResumeButton.Enabled = false; // Disables the pause/resume button.
                cancelButton.Enabled = false; // Disables the cancel button.
                skipButton.Enabled = false; // Disables the skip button.
            }
            else // If the user did not click "OK" in the file dialog.
            {
                noDragDrop = false; // Re-enables drag and drop.
            }
            noDragDrop = false; // Re-enables drag and drop again after the loop, redundant but harmless.
        }
        private void removeFileButton_Click(object sender, EventArgs e) // Event handler for the "Remove File" button.
        {
            if (filesDataGridView.SelectedRows.Count == 0) return; // If no row is selected in the grid, the method exits.

            var selected = filesDataGridView.SelectedRows[0].DataBoundItem as FileInfoWrapper; // Gets the selected item from the grid.
            if (selected == null) return; // Exits if the selected item is not a FileInfoWrapper.

            // quick UI lock
            foreach (TabPage tp in tabControl1.TabPages) // Loops through each tab page.
                tp.Enabled = false; // Disables all tab pages to prevent user interaction.

            try // Begins a try-catch-finally block.
            {
                string rootToRemove = selected.FilePath; // Stores the file path of the selected item.

                // Build everything under this directory (files + sub-dirs)
                var toDelete = new List<FileInfoWrapper>(); // Creates a new list to hold items to be deleted.

                if (selected.IsDirectory && Directory.Exists(rootToRemove)) // Checks if the selected item is a directory and exists.
                {
                    toDelete.AddRange( // Adds all entries in the directory (recursively) to the list to be deleted.
                                  Directory.EnumerateFileSystemEntries(rootToRemove, "*", SearchOption.AllDirectories)
                          .Select(p => new FileInfoWrapper // Maps each entry to a new FileInfoWrapper object.
                          {
                              FilePath = p,
                              IsDirectory = (File.GetAttributes(p) & FileAttributes.Directory) != 0,
                              BytesRaw = (File.GetAttributes(p) & FileAttributes.Directory) == 0
                                  ? new FileInfo(p).Length : 0L
                          }));
                }
                toDelete.Add(selected); // Adds the initially selected item to the list to be deleted.

                long bytesRemoved = 0; // Initializes a counter for removed bytes.
                int filesRemoved = 0; // Initializes a counter for removed files.

                foreach (var item in toDelete) // Iterates through the list of items to be deleted.
                {
                    var gridItem = _fileList.FirstOrDefault(f => // Finds the corresponding item in the main file list.
                                  f.FilePath.Equals(item.FilePath, StringComparison.OrdinalIgnoreCase));

                    if (gridItem != null) // If the item is found in the main file list.
                    {
                        if (!gridItem.IsDirectory) // If the item is a file (not a directory).
                        {
                            bytesRemoved += gridItem.BytesRaw; // Adds the file's size to the removed bytes counter.
                            filesRemoved++; // Increments the files removed counter.
                        }
                        _fileList.Remove(gridItem); // Removes the item from the main file list.
                    }
                }

                _totalBytesToProcess -= bytesRemoved; // Subtracts the removed bytes from the total bytes to process.
                _grandTotalFileCount -= filesRemoved; // Subtracts the removed files from the total file count.

                UpdateFileCountLabels(); // Calls a method to refresh the UI labels.
            }
            finally // The finally block always executes, regardless of whether an exception was thrown.
            {
                foreach (TabPage tp in tabControl1.TabPages) // Loops through each tab page again.
                    tp.Enabled = true; // Re-enables all tab pages.
            }
        }

        private void clearFileListButton_Click(object sender, EventArgs e) // Event handler for the "Clear File List" button.
        {
            _cancellationTokenSource?.Cancel();
            _cancellationTokenSource?.Dispose();
            _cancellationTokenSource = null;
            _fileList.Clear();
            _sourceDirectories.Clear();
            _targetDirectories.Clear();
            targetPaths.Clear();
            _sourcePaths.Clear();
            _grandTotalFileCount = 0;
            _totalFolders = 0;
            _totalBytesToProcess = 0;
            _totalBytesProcessed = 0;
            _processedFiles = 0;
            _processedFolders = 0;

            // Use Translator for all labels
            fileCountOnLabel.Text = Translator.Get("File Count: 0 Out of 0");
            totalCMDMultiLabel.Text = Translator.Get("Total C/M/D: 0 Bytes / 0 Bytes");
            totalCopiedProgressLabel.Text = Translator.Get("Total C/M/D: 0 Bytes / 0 Bytes");
            fromFilesDirLabel.Text = Translator.Get("Select Files/Directory");
            targetDirLabel.Text = Translator.Get("Select Target Directory");
            fileCountMultiLabel.Text = Translator.Get("File Count: 0 Out of 0");
            filePathLabel.Text = Translator.Get("Nothing");
            fileProcessedLabel.Text = Translator.Get("Files Processed: 0 Bytes / 0 Bytes");
            speedLabel.Text = Translator.Get("Speed: 0 MB/s");
            speedMultiLabel.Text = Translator.Get("Speed: 0 MB/s");
            elapsedAndTargetTimeLabel.Text = Translator.Get("Elapsed / Target Time: 00:00:00 / 00:00:00");
            totalTimeMultiLabel.Text = Translator.Get("Elapsed / Target Time: 00:00:00 / 00:00:00");
            totalSpaceMultiLabel.Text = Translator.Get("Total Space Used: 0 Bytes / 0 Bytes");
        }
        private void onFinishComboBox_SelectedIndexChanged(object sender, EventArgs e) // Event handler for the "onFinish" combo box selection change.
        {
            if (onFinishMultiComboBox.SelectedIndex == -1) // Checks if the multi-select combo box has no selection.
            {
                onFinishMultiComboBox.SelectedIndex = 0; // Sets a default value.
            }
            if (onFinishComboBox.SelectedIndex == -1) // Checks if the single-select combo box has no selection.
            {
                onFinishComboBox.SelectedIndex = 0;// Sets a default value.
            }
            onFinishMultiComboBox.Text = onFinishComboBox.Text; // Synchronizes the text of the two combo boxes.
        }
        private void copyMoveDeleteComboBox_SelectedIndexChanged(object sender, EventArgs e) // Event handler for the copy/move/delete combo box selection change.
        {
            string selectedOperation = copyMoveDeleteComboBox.SelectedItem?.ToString(); // Gets the selected operation as a string.

            securePassesNumUpDown.Enabled = (selectedOperation == "Secure Delete Files"); // Enables the secure passes numeric up-down control only if "Secure Delete Files" is selected.
            secureDeleteLabel.Enabled = (selectedOperation == "Secure Delete Files"); // Enables the corresponding label.

        }

        /// <summary>
        /// Calculates a contrasting foreground color (black or white) for a given background color
        /// based on perceived brightness using the luminance formula.
        /// </summary>
        /// <param name="backColor">The background color to calculate the contrasting color for</param>
        /// <returns>Black for light background colors, white for dark background colors</returns>
        private System.Drawing.Color GetContrastingColor(System.Drawing.Color backColor)
        {
            // Calculates the perceived brightness of the color using a standard formula.
            // Uses the luminance formula: 0.299*R + 0.587*G + 0.114*B (normalized to 0-1 range)
            double brightness = (0.299 * backColor.R +
                                0.587 * backColor.G +
                                0.114 * backColor.B) / 255.0;

            // Returns black if the background is bright (brightness > 0.5), white if the background is dark.
            return brightness > 0.5
                ? System.Drawing.Color.Black
                : System.Drawing.Color.White;
        }
        private void skinsComboBox_SelectedIndexChanged(object sender, EventArgs e) // Event handler for skin selection changes.
        {
            try
            {
                if (_isUpdatingLanguage || _isLoadingForm) return;
                if (skinsComboBox.SelectedItem == null) return;

                string selectedDisplay = skinsComboBox.SelectedItem.ToString();

                if (selectedDisplay == "_________________")
                {
                    string savedKey = CopyThatProgram.Properties.Settings.Default.Skin ?? "Light Mode";
                    SelectSkinInCombo(savedKey);
                    return;
                }

                string englishKey = ToEn(selectedDisplay);

                switch (englishKey)
                {
                    case "Light Mode":
                        ApplySkin("Light Mode", Color.Black, Color.White);
                        break;

                    case "Dark Mode":
                        ApplySkin("Dark Mode", Color.White, Color.Black);
                        break;

                    case "Medium Mode":
                        ApplySkin("Medium Mode", Color.Black, Color.Gainsboro);
                        break;

                    case "Custom Color":
                        PickCustomColor();
                        return;

                    default:
                        ApplySkin("Light Mode", Color.Black, Color.White);
                        englishKey = "Light Mode";
                        break;
                }

                CopyThatProgram.Properties.Settings.Default.Skin = englishKey;
                CopyThatProgram.Properties.Settings.Default.skinsIndex = skinsComboBox.SelectedIndex;

                if (saveAutoCheckBox.Checked)
                    CopyThatProgram.Properties.Settings.Default.Save();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error applying skin: {ex.Message}");
                MessageBox.Show(Translator.Get($"Error applying skin: {ex.Message}"), Translator.Get("Error"),
                                MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }



        /// <summary>
        /// Recursively changes the foreground color of a control and all its child controls.
        /// </summary>
        /// <param name="control">The parent control to start the color change from</param>
        /// <param name="newColor">The new foreground color to apply</param>
        private void ChangeControlsForeColor(System.Windows.Forms.Control control, System.Drawing.Color newColor) // A recursive method to change the foreground color of a control and all its children.
        {
            foreach (System.Windows.Forms.Control ctrl in control.Controls) // Iterates through all child controls.
            {
                ctrl.ForeColor = newColor; // Sets the foreground color of the current control.

                if (ctrl.HasChildren) // Checks if the current control has child controls.
                {
                    ChangeControlsForeColor(ctrl, newColor); // Recursively calls the method for the child control.
                }
            }
        }

        /// <summary>
        /// Recursively changes the background color of a control and all its child controls.
        /// </summary>
        /// <param name="control">The parent control to start the color change from</param>
        /// <param name="newColor">The new background color to apply</param>
        private void ChangeControlsBackColor(System.Windows.Forms.Control control, System.Drawing.Color newColor) // A recursive method to change the background color of a control and its children.
        {
            foreach (System.Windows.Forms.Control ctrl in control.Controls) // Iterates through all child controls.
            {
                ctrl.BackColor = newColor; // Sets the background color of the current control.

                if (ctrl.HasChildren) // Checks for child controls.
                {
                    ChangeControlsBackColor(ctrl, newColor); // Recursively calls the method.
                }
            }
        }

        /// <summary>
        /// Attempts to change the background color of Label, CheckBox, and TextBox controls.
        /// Note: This method contains a logical flaw - the conditional check will never be true
        /// since a control cannot be all three types simultaneously.
        /// </summary>
        /// <param name="newColor">The new background color to apply</param>
        private void ChangeControlColorsLabelsCheckBoxes(System.Drawing.Color newColor) // A method to change the background color of specific control types.
        {
            foreach (System.Windows.Forms.Control control in Controls) // Iterates through all controls on the form.
            {
                // This conditional check is logically flawed; a control cannot be a Label, CheckBox, and TextBox simultaneously.
                if ((control is Label) && (control is System.Windows.Forms.CheckBox) && (control is TextBox))
                {
                    control.BackColor = newColor; // Sets the background color, but this code block will never execute.
                }
            }
        }
        private void confirmDragDropCheckBox_CheckedChanged(object sender, EventArgs e) // Event handler for the confirm drag and drop checkbox.
        {
            if (confirmDragDropCheckBox.Checked) // If the checkbox is checked.
            {
                CopyThatProgram.Properties.Settings.Default.ConfirmDragDrop = true; // Sets the application setting to true.
                ConfigureDragDropConfirmation(CopyThatProgram.Properties.Settings.Default.ConfirmDragDrop); // Calls a method to configure the drag and drop behavior.
            }
            else // If the checkbox is unchecked.
            {
                CopyThatProgram.Properties.Settings.Default.ConfirmDragDrop = false; // Sets the application setting to false.
                ConfigureDragDropConfirmation(CopyThatProgram.Properties.Settings.Default.ConfirmDragDrop); // Calls the configuration method.
            }
        }
        private void alwaysOnTopCheckBox_CheckedChanged(object sender, EventArgs e) // Event handler for the always-on-top checkbox.
        {
            if (alwaysOnTopCheckBox.Checked) // Checks if the checkbox is checked.
            {
                if (contextMenuCheckBox.Checked) // Checks if the context menu checkbox is also checked.
                {
                    alwaysOnTopCheckBox.Checked = false; // Unchecks the always-on-top box.
                    this.TopMost = false; // Sets the form to not be always on top.
                    MessageBox.Show(Translator.Get("You may not have this form always on top if you add the context menu item."), Translator.Get("Information"), // Shows an informational message box.
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                }

                else // If the context menu checkbox is not checked.
                {
                    Properties.Settings.Default.AlwaysOnTop = true; // Sets the setting to true.
                    alwaysOnTopCheckBox.Checked = true; // Redundant, as this is already true.
                    this.TopMost = true; // Sets the form to be always on top.
                }
            }
            else // If the checkbox is unchecked.
            {
                Properties.Settings.Default.AlwaysOnTop = false; // Sets the setting to false.
                alwaysOnTopCheckBox.Checked = false; // Redundant, as this is already false.
                this.TopMost = false; // Sets the form to not be always on top.
            }
            if (saveAutoCheckBox.Checked) // Checks for auto-save.
            {
                Properties.Settings.Default.Save(); // Saves the settings.
            }
        }

        private void minimizeSystemTrayCheckBox_CheckedChanged(object sender, EventArgs e) // Event handler for the minimize to system tray checkbox.
        {
            if (minimizeSystemTrayCheckBox.Checked) // Checks if the checkbox is checked.
            {
                Properties.Settings.Default.MinimizeToTray = true; // Sets the setting to true.
                minimizeSystemTrayCheckBox.Checked = true; // Redundant, as this is already true.
            }
            else // If the checkbox is unchecked.
            {
                Properties.Settings.Default.MinimizeToTray = false; // Sets the setting to false.
                minimizeSystemTrayCheckBox.Checked = false; // Redundant, as this is already false.
            }

            if (saveAutoCheckBox.Checked) // Checks for auto-save.
            {
                Properties.Settings.Default.Save(); // Saves the settings.
            }
        }

        private void defaultSettingsButton_Click(object sender, EventArgs e) // Event handler for the "Default Settings" button.
        {
            Properties.Settings.Default.MinimizeToTray = true; // Sets the minimize to tray setting to true.
            minimizeSystemTrayCheckBox.Checked = true; // Updates the corresponding checkbox.

            Properties.Settings.Default.ConfirmDragDrop = true; // Sets the confirm drag and drop setting to true.
            confirmDragDropCheckBox.Checked = true; // Updates the checkbox.

            Properties.Settings.Default.SoundCopyComplete = true; // Sets the sound on copy complete setting to true.
            onFinishCheckBox.Checked = true; // Updates the checkbox.

            Properties.Settings.Default.SoundCancel = true; // Sets the sound on cancel setting to true.
            onCancelCheckBox.Checked = true; // Updates the checkbox.

            Properties.Settings.Default.SoundError = true; // Sets the sound on error setting to true.
            onErrorCheckBox.Checked = true; // Updates the checkbox.

            Properties.Settings.Default.SoundFileAdded = false; // Sets the sound on file added setting to false.
            onAddFilesCheckBox.Checked = false; // Updates the checkbox.

            Properties.Settings.Default.AutoSaveSettings = true; // Sets the auto-save settings to true.
            saveAutoCheckBox.Checked = true; // Updates the checkbox.

            Properties.Settings.Default.ContextMenu = true; // Sets the context menu setting to true.
            contextMenuCheckBox.Checked = true; // Updates the checkbox.

            Properties.Settings.Default.RestartOnError = true; // Sets the restart on error setting to true.
            restartCheckBox.Checked = true; // Updates the checkbox.

            Properties.Settings.Default.CopyFilesUnder = false; // Sets the copy files under setting to false.
            underMBCheckBox.Checked = false; // Updates the checkbox.

            Properties.Settings.Default.CopyFilesOver = false; // Sets the copy files over setting to false.
            overMBCheckBox.Checked = false; // Updates the checkbox.

            Properties.Settings.Default.Multithreading = true; // Sets the multithreading setting to true.
            multithreadCheckBox.Checked = true; // Updates the checkbox.

            if (proVersion) // Checks if the "proVersion" is enabled.
            {
                updateAutoCheckBox.Checked = true; // Updates auto-update checkbox.
                updateBetaCheckBox.Checked = true; // Updates beta update checkbox.
                updateAuto = true; // Sets the auto-update flag.
                updateBeta = true; // Sets the beta update flag.
                updateManuallyCheckBox.Checked = false; // Unchecks manual update.
                updateManually = false; // Sets the manual update flag.
                zipTogetherCheckBox.Checked = true; // Checks the zip together checkbox.
                fullPathsCheckBox.Checked = true; // Checks the full paths checkbox.
                emailPathsCheckBox.Checked = true; // Checks the email paths checkbox.
            }
            else // If it's not the "proVersion".
            {
                updateAutoCheckBox.Checked = false; // Unchecks auto-update.
                updateBetaCheckBox.Checked = false; // Unchecks beta update.
                updateAuto = false; // Sets the auto-update flag to false.
                updateBeta = false; // Sets the beta update flag to false.
                updateManuallyCheckBox.Checked = true; // Checks the manual update checkbox.
                updateManually = true; // Sets the manual update flag to true.
            }
        }

        private void clearSettingsButton_Click(object sender, EventArgs e) // Event handler for the "Clear Settings" button.
        {
            // Set the 'alwaysOnTop' setting to false and update the associated checkbox.
            Properties.Settings.Default.AlwaysOnTop = false; // Sets the setting to false.
            alwaysOnTopCheckBox.Checked = false; // Updates the checkbox.

            // Set the 'minimizeToTray' setting to false and update the associated checkbox.
            Properties.Settings.Default.MinimizeToTray = false; // Sets the setting to false.
            minimizeSystemTrayCheckBox.Checked = false; // Updates the checkbox.

            // Set the 'confirmDragDrop' setting to false and update the associated checkbox.
            Properties.Settings.Default.ConfirmDragDrop = false; // Sets the setting to false.
            confirmDragDropCheckBox.Checked = false; // Updates the checkbox.

            // Set the 'contextMenu' setting to false and update the associated checkbox.
            Properties.Settings.Default.ContextMenu = false; // Sets the setting to false.
            contextMenuCheckBox.Checked = false; // Updates the checkbox.

            // Set the 'soundOnFinish' setting to false and update the associated checkbox.
            Properties.Settings.Default.SoundCopyComplete = false; // Sets the setting to false.
            onFinishCheckBox.Checked = false; // Updates the checkbox.

            // Set the 'soundOnCancel' setting to false and update the associated checkbox.
            Properties.Settings.Default.SoundCancel = false; // Sets the setting to false.
            onCancelCheckBox.Checked = false; // Updates the checkbox.

            // Set the 'soundOnError' setting to false and update the associated checkbox.
            Properties.Settings.Default.SoundError = false; // Sets the setting to false.
            onErrorCheckBox.Checked = false; // Updates the checkbox.

            // Set the 'soundOnFilesAdded' setting to false and update the associated checkbox.
            Properties.Settings.Default.SoundFileAdded = false; // Sets the setting to false.
            onAddFilesCheckBox.Checked = false; // Updates the checkbox.

            // Set the 'saveAutomatically' setting to false and update the associated checkbox.
            Properties.Settings.Default.AutoSaveSettings = false; // Sets the setting to false.
            saveAutoCheckBox.Checked = false; // Updates the checkbox.

            // Set the 'updateManually' setting to true and update the associated checkbox.
            Properties.Settings.Default.UpdateManually = true; // Sets the setting to true.
            updateManuallyCheckBox.Checked = true; // Updates the checkbox.

            // Set the 'restartProgram' setting to true and update the associated checkbox.
            Properties.Settings.Default.RestartOnError = true; // Sets the setting to true.
            restartCheckBox.Checked = true; // Updates the checkbox.

            // Set the 'underMB' setting to false and update the associated checkbox.
            Properties.Settings.Default.CopyFilesUnder = false; // Sets the setting to false.
            underMBCheckBox.Checked = false; // Updates the checkbox.

            // Set the 'overMB' setting to false and update the associated checkbox.
            Properties.Settings.Default.CopyFilesOver = false; // Sets the setting to false.
            overMBCheckBox.Checked = false; // Updates the checkbox.

            // Set the 'fileFullPaths' setting to true and update the associated checkbox.
            Properties.Settings.Default.FileFullPaths = true; // Sets the setting to true.
            fullPathsCheckBox.Checked = true; // Updates the checkbox.

            // Set the 'emailFullPaths' setting to true and update the associated checkbox.
            Properties.Settings.Default.EmailFullPaths = true; // Sets the setting to true.
            emailPathsCheckBox.Checked = true; // Updates the checkbox.
        }
        private void saveSettingsButton_Click(object sender, EventArgs e) // Event handler for the "Save Settings" button.
        {
            Properties.Settings.Default.Save(); // Calls the Save method on the application's settings to persist them.
        }

        /// <summary>
        /// Determines whether the specified path represents the root directory of a drive.
        /// </summary>
        /// <param name="path">The path to check (e.g., "C:\", "D:\")</param>
        /// <returns>True if the path is a drive root, false otherwise</returns>
        private bool IsDriveRoot(string path)
        {
            try
            {
                if (path.Length == 3 && path[1] == ':' && path[2] == '\\') // Checks if the path has a length of 3 and a specific format (e.g., C:\).
                    return true; // Returns true if it matches the format.

                var dir = new DirectoryInfo(path); // Creates a DirectoryInfo object.
                return dir.Parent == null; // Returns true if the directory has no parent, indicating it's a root directory.
            }
            catch // Catches any exceptions that occur.
            {
                return false; // Returns false if an exception occurs, indicating it's not a valid drive root.
            }
        }

        /// <summary>
        /// Removes duplicate file items from a list based on file path comparison.
        /// Uses case-insensitive comparison to identify duplicates efficiently.
        /// </summary>
        /// <param name="existingList">The binding list containing existing file items</param>
        /// <param name="newItems">The list of new file items to filter for duplicates</param>
        private static void RemoveDuplicatesByFilePath(BindingList<FileInfoWrapper> existingList, List<FileInfoWrapper> newItems)
        {
            // Create a hash set to store file paths of existing items for fast lookup.
            var existingPaths = new HashSet<string>(existingList.Select(x => x.FilePath), StringComparer.OrdinalIgnoreCase);

            // Loop through the new items in reverse to safely remove duplicates without affecting the loop's index.
            for (int i = newItems.Count - 1; i >= 0; i--)
            {
                // Check if the current new item's file path already exists in the hash set.
                if (existingPaths.Contains(newItems[i].FilePath))
                {
                    // If a duplicate is found, remove the item from the list.
                    newItems.RemoveAt(i);
                }
            }
        }

        //private void AddFilesFromDirectory(string directoryPath, string targetDirectoryBase, bool recursive = true)
        //{
        //    if (Directory.Exists(directoryPath))
        //    {
        //        Invoke(new Action(() =>
        //        {
        //            _fileList.Add(new FileInfoWrapper
        //            {
        //                FileName = Path.GetFileName(directoryPath),
        //                FilePath = Path.GetFullPath(directoryPath),
        //                FileSize = FormatBytes(0),
        //                BytesRaw = 0,
        //                IsDirectory = true,
        //                Status = "Queued"
        //            });
        //        }));
        //    }

        //    foreach (string filePath in Directory.EnumerateFiles(directoryPath, "*", SearchOption.TopDirectoryOnly))
        //    {
        //        try
        //        {
        //            FileInfo file = new FileInfo(filePath);
        //            Invoke(new Action(() =>
        //            {
        //                Invoke(new Action(() =>
        //                {
        //                    _fileList.Add(new FileInfoWrapper
        //                    {
        //                        FileName = file.Name,
        //                        FilePath = file.FullName,
        //                        FileSize = FormatBytes(file.Length),
        //                        BytesRaw = file.Length,
        //                        IsDirectory = false,
        //                        Status = "Queued"
        //                    });
        //                }));
        //            }));
        //        }
        //        catch (UnauthorizedAccessException ex)
        //        {
        //            Debug.WriteLine($"Access denied to file: {filePath} - {ex.Message}");
        //        }
        //        catch (PathTooLongException ex)
        //        {
        //            Debug.WriteLine($"Path too long: {filePath} - {ex.Message}");
        //        }
        //        catch (Exception ex)
        //        {
        //            Debug.WriteLine($"Error adding file {filePath}: {ex.Message}");
        //        }
        //    }

        //    if (recursive)
        //    {
        //        foreach (string subDirectoryPath in Directory.EnumerateDirectories(directoryPath, "*", SearchOption.TopDirectoryOnly))
        //        {
        //            try
        //            {
        //                AddFilesFromDirectory(subDirectoryPath, targetDirectoryBase, recursive);
        //            }
        //            catch (UnauthorizedAccessException ex)
        //            {
        //                Debug.WriteLine($"Access denied to directory: {subDirectoryPath} - {ex.Message}");
        //            }
        //            catch (PathTooLongException ex)
        //            {
        //                Debug.WriteLine($"Path too long: {subDirectoryPath} - {ex.Message}");
        //            }
        //            catch (Exception ex)
        //            {
        //                Debug.WriteLine($"Error adding directory {subDirectoryPath}: {ex.Message}");
        //            }
        //        }
        //    }
        //}
        private async void fromDirPicBox_Click(object sender, EventArgs e)
        {
            // Set the default text and selection color for the DataGridView.
            filesDataGridView.DefaultCellStyle.ForeColor = System.Drawing.Color.Black;
            filesDataGridView.DefaultCellStyle.SelectionForeColor = System.Drawing.Color.White;

            // Use a FolderBrowserDialog to allow the user to select a source folder.
            using (FolderBrowserDialog folderDialog = new FolderBrowserDialog())
            {
                folderDialog.Description = Translator.Get("Select a source folder to copy/move/delete from:");
                folderDialog.ShowNewFolderButton = false;

                // Check if the user selected a folder and clicked OK.
                if (folderDialog.ShowDialog() == DialogResult.OK)
                {
                    string sourceDir = folderDialog.SelectedPath;

                    _sourceDirectories.Add(folderDialog.SelectedPath);
                    // Prevent the user from selecting a source folder that is also a target folder.
                    if (targetPaths.Any(tp => string.Equals(tp, sourceDir, StringComparison.OrdinalIgnoreCase)))
                    {
                        MessageBox.Show(Translator.Get("The source folder cannot be the same as one of the target folders."),
                                        Translator.Get("Invalid Selection"), MessageBoxButtons.OK, MessageBoxIcon.Warning);

                        // Temporarily disable various UI controls to prevent user interaction during the scan.
                        startButton.Enabled = false;
                        clearFileListButton.Enabled = false;
                        removeFileButton.Enabled = false;
                        cancelButton.Enabled = false;
                        skipButton.Enabled = false;
                        addFileButton.Enabled = false;

                        // Enable labels to show progress and information.
                        filePathLabel.Enabled = true;
                        totalCopiedProgressLabel.Enabled = true;
                        fileCountOnLabel.Enabled = true;
                        totalHDSpaceLeftLabel.Enabled = true;

                        // Create a Progress object to update the UI label asynchronously.
                        var progress = new Progress<string>(msg => fromFilesDirLabel.Text = msg);

                        try
                        {
                            // Asynchronously scan the selected directory for files.
                            await ScanDirectoryWithUpdatesAsync(sourceDir, updateIntervalMs: 50);
                            _bindingSource.ResetBindings(false);
                        }
                        catch (Exception ex)
                        {
                            // Handle and display any errors that occur during the scanning process.
                            fromFilesDirLabel.Text = string.Format(Translator.Get("Error: {0}"), ex.Message);
                            MessageBox.Show(Translator.Get($"An error occurred during scanning: {ex.Message}"), Translator.Get("Error"), MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        finally
                        {
                            // Re-enable all controls and update the UI to reflect the end of the scan.
                            EnableAllControls(cmdHomePage);
                            startButton.Enabled = true;
                            pauseResumeButton.Enabled = false;
                            cancelButton.Enabled = false;
                            skipButton.Enabled = false;
                            addFileButton.Enabled = true;
                            clearFileListButton.Enabled = true;
                            removeFileButton.Enabled = true;
                            sourceDirectoryLabel.Enabled = true;
                        }

                        // Play a sound to indicate that files have been added.
                        PlaySound("FileAdded");
                    }

                    // Reset the file path label and update the data bindings.
                    filePathLabel.Text = Translator.Get("Nothing");
                    _bindingSource.ResetBindings(false);
                }
            }
        }

        private void contextMenuCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            // Check if the context menu checkbox is checked.
            if (contextMenuCheckBox.Checked == true)
            {
                // Set the ContextMenu setting to true.
                Properties.Settings.Default.ContextMenu = true;
                contextMenuCheckBox.Checked = true;
                alwaysOnTopCheckBox.Checked = false;
            }
            else
            {
                // Set the ContextMenu setting to false.
                Properties.Settings.Default.ContextMenu = false;
                contextMenuCheckBox.Checked = false;
            }

            // If the auto-save checkbox is checked, save the settings.
            if (saveAutoCheckBox.Checked == true)
            {
                Properties.Settings.Default.Save();
            }
        }
        void editSavedCheckBoxes()
        {
            // GENERAL SETTINGS SECTION
            // Check and set the "Always on Top" setting.
            bool onTop = Properties.Settings.Default.AlwaysOnTop;
            if (onTop == true)
            {
                Properties.Settings.Default.AlwaysOnTop = true;
                this.TopMost = true;
                alwaysOnTopCheckBox.Checked = true;
            }
            else
            {
                Properties.Settings.Default.AlwaysOnTop = false;
                this.TopMost = false;
                alwaysOnTopCheckBox.Checked = false;
            }

            // Check and set the "Confirm Drag and Drop" setting.
            bool alwaysConfirmDragAndDrop = Properties.Settings.Default.ConfirmDragDrop;
            if (alwaysConfirmDragAndDrop == true)
            {
                Properties.Settings.Default.ConfirmDragDrop = true;
                confirmDragDropCheckBox.Checked = true;
            }
            else
            {
                Properties.Settings.Default.ConfirmDragDrop = false;
                confirmDragDropCheckBox.Checked = false;
            }

            // Check and set the "Minimize to System Tray" setting.
            bool minimizeToSystemTray = Properties.Settings.Default.MinimizeToTray;
            if (minimizeToSystemTray == true)
            {
                Properties.Settings.Default.MinimizeToTray = true;
                minimizeSystemTrayCheckBox.Checked = true;
            }
            else
            {
                Properties.Settings.Default.MinimizeToTray = false;
                minimizeSystemTrayCheckBox.Checked = false;
            }

            // Check and set the "Context Menu" setting.
            bool contextmenu = Properties.Settings.Default.ContextMenu;
            if (contextmenu == true)
            {
                Properties.Settings.Default.ContextMenu = true;
                contextMenuCheckBox.Checked = true;
            }
            else
            {
                Properties.Settings.Default.ContextMenu = false;
                contextMenuCheckBox.Checked = false;
            }

            // SOUND SETTINGS SECTION
            // Check and set the "Sound on Add Files" setting.
            bool soundAddFiles = Properties.Settings.Default.SoundFileAdded;
            if (soundAddFiles == true)
            {
                Properties.Settings.Default.SoundFileAdded = true;
                onAddFilesCheckBox.Checked = true;
            }
            else
            {
                Properties.Settings.Default.SoundFileAdded = false;
                onAddFilesCheckBox.Checked = false;
            }

            // Check and set the "Sound on Cancel" setting.
            bool soundCancel = Properties.Settings.Default.SoundCancel;
            if (soundCancel)
            {
                Properties.Settings.Default.SoundCancel = true;
                onCancelCheckBox.Checked = true;
            }
            else
            {
                Properties.Settings.Default.SoundCancel = false;
                onCancelCheckBox.Checked = false;
            }

            // Check and set the "Sound on Error" setting.
            bool soundError = Properties.Settings.Default.SoundError;
            if (soundError == true)
            {
                Properties.Settings.Default.SoundError = true;
                onErrorCheckBox.Checked = true;
            }
            else
            {
                Properties.Settings.Default.SoundError = false;
                onErrorCheckBox.Checked = false;
            }

            // Check and set the "Sound on Finish" setting.
            bool soundFinish = Properties.Settings.Default.SoundCopyComplete;
            if (soundFinish == true)
            {
                Properties.Settings.Default.SoundCopyComplete = true;
                onFinishCheckBox.Checked = true;
            }
            else
            {
                Properties.Settings.Default.SoundCopyComplete = false;
                onFinishCheckBox.Checked = false;
            }

            // OTHER SETTINGS SECTION
            // Check if the application is the "pro version" and enable/disable the register button accordingly.
            if (proVersion == true)
            {
                registerButton.Enabled = false;
            }
            else
            {
                registerButton.Enabled = true;
            }

            // Check and set the "Close on Error" and "Restart on Error" settings.
            if (closeProgram == true)
            {
                restartCheckBox.Checked = false;
                Properties.Settings.Default.CloseOnError = true;
                Properties.Settings.Default.RestartOnError = false;
            }
            else
            {
                restartCheckBox.Checked = true;
                Properties.Settings.Default.CloseOnError = false;
                Properties.Settings.Default.RestartOnError = true;
            }

            // This section seems to be a duplicate of the previous one, managing the same settings.
            if (restartProgram == true)
            {
                closeProgramCheckBox.Checked = false;
                Properties.Settings.Default.CloseOnError = false;
                Properties.Settings.Default.RestartOnError = true;
            }
            else
            {
                closeProgramCheckBox.Checked = true;
                Properties.Settings.Default.CloseOnError = true;
                Properties.Settings.Default.RestartOnError = false;
            }

            // Check and set the "Start with Windows" setting.
            bool startUp = Properties.Settings.Default.StartWithWindows;
            if (startUp == true)
            {
                startWithWindowsCheckBox.Checked = true;
            }
            else
            {
                startWithWindowsCheckBox.Checked = false;
            }

            // UPDATE SETTINGS SECTION
            // If it's the pro version, enable and set update settings checkboxes.
            if (proVersion == true)
            {
                bool updateAuto = Properties.Settings.Default.UpdateAuto;
                if (updateAuto == true)
                {
                    updateAutoCheckBox.Checked = true;
                    updateManuallyCheckBox.Checked = false;
                }

                bool updateBeta = Properties.Settings.Default.UpdateBeta;
                if (updateBeta == true)
                {
                    updateBetaCheckBox.Checked = true;
                    updateManuallyCheckBox.Checked = false;
                }

                bool updateManual = Properties.Settings.Default.UpdateManually;
                if (updateManual == true)
                {
                    updateManuallyCheckBox.Checked = true;
                    updateAutoCheckBox.Checked = false;
                    updateBetaCheckBox.Checked = false;
                }
            }
            else
            {
                // If not the pro version, disable beta and auto updates, and force manual updates.
                updateBetaCheckBox.Enabled = false;
                updateAutoCheckBox.Enabled = false;
                updateManuallyCheckBox.Checked = true;
                updateManually = true;
            }

            // EMAIL SETTINGS SECTION
            // If it's the pro version, enable the email settings group box.
            if (proVersion == true)
            {
                emailGroupBox.Enabled = true;
                // The following lines appear to be redundant or have conflicting logic.
                emailNamesCheckBox.Checked = true;
                emailPathsCheckBox.Checked = true;
                setUpEmailButton.Enabled = true;
                bool emailDirNames = Properties.Settings.Default.EmailOnlyNames;
                if (emailDirNames == true)
                {
                    emailPathsCheckBox.Checked = false;
                    Properties.Settings.Default.EmailOnlyNames = true;
                    Properties.Settings.Default.EmailFullPaths = false;
                }
                else
                {
                    emailPathsCheckBox.Checked = true;
                    Properties.Settings.Default.EmailOnlyNames = false;
                    Properties.Settings.Default.EmailFullPaths = true;
                }

                bool emailFull = Properties.Settings.Default.EmailFullPaths;
                if (emailFull == true)
                {
                    Properties.Settings.Default.EmailOnlyNames = false;
                    Properties.Settings.Default.EmailFullPaths = true;
                    emailNamesCheckBox.Checked = false;
                }
                else
                {
                    emailNamesCheckBox.Checked = true;
                    Properties.Settings.Default.EmailOnlyNames = true;
                    Properties.Settings.Default.EmailFullPaths = false;
                }

                // More redundant code for email settings.
                if (emailDirNames == true)
                {
                    Properties.Settings.Default.EmailOnlyNames = true;
                    emailPathsCheckBox.Checked = false;
                }
                else
                {
                    Properties.Settings.Default.EmailOnlyNames = false;
                    emailPathsCheckBox.Checked = true;
                }

                bool emailfullPaths = Properties.Settings.Default.EmailFullPaths;
                if (emailfullPaths == true)
                {
                    Properties.Settings.Default.EmailFullPaths = true;
                    emailNamesCheckBox.Checked = false;
                }
                else
                {
                    Properties.Settings.Default.EmailFullPaths = false;
                    emailNamesCheckBox.Checked = true;
                }
            }
            else
            {
                // If not the pro version, disable the email settings group box.
                emailGroupBox.Enabled = false;
            }

            // FILE/FOLDER SETTINGS SECTION
            // If it's the pro version, enable file/folder settings and set the 'only names' vs 'full paths' settings.
            if (proVersion == true)
            {
                fileDirSettingsGroupBox.Enabled = true;
                emailNamesCheckBox.Checked = true;
                emailPathsCheckBox.Checked = true;
                setUpEmailButton.Enabled = true;

                bool onlyNames = Properties.Settings.Default.FileOnlyNames;
                if (onlyNames == true)
                {
                    Properties.Settings.Default.FileOnlyNames = true;
                    fullPathsCheckBox.Checked = false;
                    onlyNamesCheckBox.Checked = true;
                }
                else
                {
                    Properties.Settings.Default.FileOnlyNames = false;
                    fullPathsCheckBox.Checked = true;
                    onlyNamesCheckBox.Checked = false;
                }

                // Duplicate logic for full paths.
                bool fullPaths = Properties.Settings.Default.FileFullPaths;
                if (fullPaths == true)
                {
                    Properties.Settings.Default.FileFullPaths = true;
                    onlyNamesCheckBox.Checked = false;
                    fullPathsCheckBox.Checked = true;
                }
                else
                {
                    Properties.Settings.Default.FileFullPaths = false;
                    onlyNamesCheckBox.Checked = true;
                    fullPathsCheckBox.Checked = false;
                }

                // Set the "Zip Separately" vs "Zip Together" settings.
                bool zipItSep = Properties.Settings.Default.ZipSeparately;
                if (zipItSep == true)
                {
                    Properties.Settings.Default.ZipSeparately = true;
                    Properties.Settings.Default.ZipTogether = false;
                    zipTogetherCheckBox.Checked = false;
                    zipSeparateCheckBox.Checked = true;
                }
                else
                {
                    Properties.Settings.Default.ZipSeparately = false;
                    Properties.Settings.Default.ZipTogether = true;
                    zipTogetherCheckBox.Checked = true;
                    zipSeparateCheckBox.Checked = false;
                }
            }
            else
            {
                // If not the pro version, disable the file/folder settings group box.
                fileDirSettingsGroupBox.Enabled = false;
            }

            // PERFORMANCE SETTINGS SECTION
            // Set the "Copy Files Under MB" setting.
            bool underMBY = Properties.Settings.Default.CopyFilesUnder;
            if (underMBY == true)
            {
                Properties.Settings.Default.CopyFilesUnder = true;
                underMBCheckBox.Checked = true;
            }
            else if (underMBY == false)
            {
                Properties.Settings.Default.CopyFilesUnder = false;
                underMBCheckBox.Checked = false;
            }

            // Set the "Copy Files Over MB" setting.
            bool overMBY = Properties.Settings.Default.CopyFilesOver;
            if (overMBY == true)
            {
                Properties.Settings.Default.CopyFilesOver = true;
                saveAutoCheckBox.Checked = true;
                overMBCheckBox.Checked = true;
            }
            else if (overMBY == false)
            {
                Properties.Settings.Default.CopyFilesOver = false;
                overMBCheckBox.Checked = false;
            }

            // Set the "Multithreading" setting.
            if (Properties.Settings.Default.Multithreading == true)
            {
                multithreadCheckBox.Checked = true;
                multiThread = true;
                Properties.Settings.Default.Multithreading = multiThread;
            }
            else
            {
                multithreadCheckBox.Checked = false;
                multiThread = false;
                Properties.Settings.Default.Multithreading = multiThread;
            }

            // THEMES AND LANGUAGES SETTINGS SECTION
            // Set the application's theme (skin) based on the saved setting.

            ApplyThemeSettings();

            //Modo Oscuro
            //Modo Medio
            //Modo Claro
            //_________________
            //Color Personalizado

            //Inglés
            //Español
            //Alemán
            //Francés

            // Set background color of various labels to transparent.
            nLabel.BackColor = System.Drawing.Color.Transparent;
            neLabel.BackColor = System.Drawing.Color.Transparent;
            eLabel.BackColor = System.Drawing.Color.Transparent;
            seLabel.BackColor = System.Drawing.Color.Transparent;
            sLabel.BackColor = System.Drawing.Color.Transparent;
            swLabel.BackColor = System.Drawing.Color.Transparent;
            wLabel.BackColor = System.Drawing.Color.Transparent;
            nwLabel.BackColor = System.Drawing.Color.Transparent;

            // AUTOMATICALLY SAVE, LOGGING, PRIORITY, & TRANSPARENCY SETTINGS
            // Set the "Auto Save Settings" setting.
            bool saveAuto = Properties.Settings.Default.AutoSaveSettings;
            if (saveAuto == true)
            {
                Properties.Settings.Default.AutoSaveSettings = true;
                saveAutoCheckBox.Checked = true;
            }
            else
            {
                Properties.Settings.Default.AutoSaveSettings = false;
                saveAutoCheckBox.Checked = false;
            }

            // Set the "Save to Log File" setting.
            bool saveLog = Properties.Settings.Default.LogToFile;
            if (saveLog == true)
            {
                Properties.Settings.Default.LogToFile = true;
                logFileCheckBox.Checked = true;
            }
            else
            {
                Properties.Settings.Default.LogToFile = false;
                logFileCheckBox.Checked = false;
            }

            // Set the program's priority.
            // Set the program's priority.
            if (priority == "Below Normal")
            {
                priorityTrackBar.Value = 0;
                priorityLabel.Text = Translator.Get("Program Priority:\nBelow Normal");
                Properties.Settings.Default.Priority = "Below Normal";
                using (Process p = Process.GetCurrentProcess()) { p.PriorityClass = ProcessPriorityClass.BelowNormal; }
            }
            else if (priority == "Normal")
            {
                priorityTrackBar.Value = 1;
                priorityLabel.Text = Translator.Get("Program Priority:\nNormal");
                Properties.Settings.Default.Priority = "Normal";
                using (Process p = Process.GetCurrentProcess()) { p.PriorityClass = ProcessPriorityClass.Normal; }
            }
            else if (priority == "Above Normal")
            {
                priorityTrackBar.Value = 2;
                priorityLabel.Text = Translator.Get("Program Priority:\nAbove Normal");
                Properties.Settings.Default.Priority = "Above Normal";
                using (Process p = Process.GetCurrentProcess()) { p.PriorityClass = ProcessPriorityClass.AboveNormal; }
            }
            else if (priority == "High")
            {
                priorityTrackBar.Value = 3;
                priorityLabel.Text = Translator.Get("Program Priority:\nHigh");
                Properties.Settings.Default.Priority = "High";
                using (Process p = Process.GetCurrentProcess()) { p.PriorityClass = ProcessPriorityClass.High; }
            }
            else if (priority == "Real Time")
            {
                priorityTrackBar.Value = 4;
                priorityLabel.Text = Translator.Get("Program Priority:\nReal Time");
                Properties.Settings.Default.Priority = "Real Time";
                using (Process p = Process.GetCurrentProcess()) { p.PriorityClass = ProcessPriorityClass.RealTime; }
            }

            // Set the form's opacity.
            int opacity = Properties.Settings.Default.Opacity;
            opacityTrackBar.Value = opacity;
            double opacityValue = opacityTrackBar.Value / 100.0;
            int opacityText = Convert.ToInt32(opacityValue * 100);
            opacityLabel.Text = Translator.Get("Opacity: \n" + opacityText.ToString() + "%");
            Properties.Settings.Default.Opacity = opacityText;
            this.Opacity = opacityValue;

            // Save settings if auto-save is enabled.
            if (saveAutoCheckBox.Checked)
            {
                Properties.Settings.Default.Save();
            }

            // Final color adjustments for directional labels.
            nLabel.BackColor = System.Drawing.Color.Transparent;
            neLabel.BackColor = System.Drawing.Color.Transparent;
            eLabel.BackColor = System.Drawing.Color.Transparent;
            seLabel.BackColor = System.Drawing.Color.Transparent;
            sLabel.BackColor = System.Drawing.Color.Transparent;
            swLabel.BackColor = System.Drawing.Color.Transparent;
            wLabel.BackColor = System.Drawing.Color.Transparent;
            nwLabel.BackColor = System.Drawing.Color.Transparent;

            nLabel.ForeColor = System.Drawing.Color.Black;
            neLabel.ForeColor = System.Drawing.Color.Black;
            eLabel.ForeColor = System.Drawing.Color.Black;
            seLabel.ForeColor = System.Drawing.Color.Black;
            sLabel.ForeColor = System.Drawing.Color.Black;
            swLabel.ForeColor = System.Drawing.Color.Black;
            wLabel.ForeColor = System.Drawing.Color.Black;
            nwLabel.ForeColor = System.Drawing.Color.Black;
        }
        private void InitializeScrolling()
        {
            // Starts a timer to handle scrolling functionality.
            scrollTimer.Start();
        }
        void exitPlease()
        {
            // Checks if the "save automatically" checkbox is checked.
            if (saveAutoCheckBox.Checked)
            {
                // Upgrades the user settings from the previous version.
                Properties.Settings.Default.Upgrade();
                // Saves the user settings.
                Properties.Settings.Default.Save();
            }
            // Sets a flag to indicate that the operation has been canceled.
            _isCanceled = true;


            // Checks if a background worker is currently busy.
            if (_copyWorker.IsBusy)
            {
                // Requests the background worker to cancel its asynchronous operation.
                _copyWorker.CancelAsync();

                // Pauses the current thread for a short period to allow time for cancellation.
                Thread.Sleep(12);

                // Re-checks if the background worker is still busy.
                if (_copyWorker.IsBusy)
                {
                    // Outputs a message to the console.
                    Console.WriteLine("Background worker is still busy. Waiting for completion...");

                    // Subscribes to the RunWorkerCompleted event to exit the application after the worker finishes.
                    _copyWorker.RunWorkerCompleted += (s, e) => { Environment.Exit(0); };
                }
                else
                {
                    // Outputs a message to the console indicating the worker completed.
                    Console.WriteLine("Background worker completed after cancellation. Exiting...");
                    // Exits the application.
                    Environment.Exit(0);
                }
            }
            else
            {
                // Outputs a message to the console.
                Console.WriteLine("Background worker is not busy. Exiting...");
                // Exits the application.
                Environment.Exit(0);
            }

            // Pauses the thread for a short period.
            Thread.Sleep(12);
            // Closes the current form.
            this.Close();
        }

        public const int WM_NCLBUTTONDOWN = 0xA1;
        public const int HT_CAPTION = 0x2;

        // Imports a function from a Windows DLL to send messages to a window.
        [System.Runtime.InteropServices.DllImport("user32.dll")]
        public static extern int SendMessage(IntPtr hWnd, int Msg, int wParam, int lParam);
        // Imports a function from a Windows DLL to release the mouse capture.
        [System.Runtime.InteropServices.DllImport("user32.dll")]
        public static extern bool ReleaseCapture();

        private void titleLabel_MouseDown(object sender, MouseEventArgs e)
        {
            // Checks if the left mouse button was pressed.
            if (e.Button == MouseButtons.Left)
            {
                // Releases the mouse capture.
                ReleaseCapture();
                // Sends a message to the window to enable dragging.
                SendMessage(Handle, WM_NCLBUTTONDOWN, HT_CAPTION, 0);
            }
        }
        private void filePathLabel_MouseDown(object sender, MouseEventArgs e)
        {
            // Checks if the left mouse button was pressed.
            if (e.Button == MouseButtons.Left)
            {
                // Releases the mouse capture.
                ReleaseCapture();

                // Sends a message to the window to enable dragging.
                SendMessage(Handle, WM_NCLBUTTONDOWN, HT_CAPTION, 0);
            }
        }
        private void fromFilesDirLabel_MouseDown(object sender, MouseEventArgs e)
        {
            // Checks if the left mouse button was pressed.
            if (e.Button == MouseButtons.Left)
            {
                // Releases the mouse capture.
                ReleaseCapture();

                // Sends a message to the window to enable dragging.
                SendMessage(Handle, WM_NCLBUTTONDOWN, HT_CAPTION, 0);
            }
        }

        private void targetDirLabel_MouseDown(object sender, MouseEventArgs e)
        {
            // Checks if the left mouse button was pressed.
            if (e.Button == MouseButtons.Left)
            {
                // Releases the mouse capture.
                ReleaseCapture();

                // Sends a message to the window to enable dragging.
                SendMessage(Handle, WM_NCLBUTTONDOWN, HT_CAPTION, 0);
            }
        }

        private void overwriteIfNewerCHKBOX_CheckedChanged(object sender, EventArgs e)
        {
            // Checks if this checkbox is selected.
            if (overwriteIfNewerCheckBox.Checked)
            {
                // Sets the overwrite option string.
                overwriteOption = "Overwrite Type: If Newer";

                // Unchecks the other two overwrite options.
                overwriteAllCheckBox.Checked = false;
                doNotOverwriteCheckBox.Checked = false;
            }
            // If all three overwrite options are unchecked, this one is automatically selected.
            else if (!overwriteIfNewerCheckBox.Checked && !overwriteAllCheckBox.Checked && !doNotOverwriteCheckBox.Checked)
            {
                doNotOverwriteCheckBox.Checked = true;
                overwriteIfNewerCheckBox.Checked = false;
                overwriteAllCheckBox.Checked = false;
            }

            // Manages the state of the "restart" and "close" checkboxes.
            if (!restartCheckBox.Checked)
            {
                closeProgramCheckBox.Checked = true;
            }
            else if (restartCheckBox.Checked)
            {
                closeProgramCheckBox.Checked = false;
            }
            else if (!closeProgramCheckBox.Checked && !restartCheckBox.Checked)
            {
                restartCheckBox.Checked = true;
            }
        }
        private void keepDirStructCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            // If this checkbox is selected, it unchecks other related options.
            if (keepDirStructCheckBox.Checked)
            {
                keepOnlyFilesCheckBox.Checked = false;
                copyFilesDirsCheckBox.Checked = false;
            }
            else if (!leaveEmptyFoldersCheckBox.Checked && !keepOnlyFilesCheckBox.Checked && !copyFilesDirsCheckBox.Checked)
            {
                keepDirStructCheckBox.Checked = true;
            }
            // If all related options are unchecked, this one is automatically selected.
            else if (!leaveEmptyFoldersCheckBox.Checked && !keepOnlyFilesCheckBox.Checked && !copyFilesDirsCheckBox.Checked && !createCustomDirCheckBox.Checked)
            {
                keepDirStructCheckBox.Checked = true;
            }
        }

        private void overwriteAllCHKBOX_CheckedChanged(object sender, EventArgs e)
        {
            // If this checkbox is selected, it unchecks the other two overwrite options.
            if (overwriteAllCheckBox.Checked == true)
            {
                // Sets the overwrite option string.
                overwriteOption = "Overwrite: All Files";

                overwriteIfNewerCheckBox.Checked = false;
                doNotOverwriteCheckBox.Checked = false;
            }
            // If all three overwrite options are unchecked, the "do not overwrite" one is automatically selected.
            else if (!overwriteIfNewerCheckBox.Checked && !overwriteAllCheckBox.Checked && !doNotOverwriteCheckBox.Checked)
            {
                doNotOverwriteCheckBox.Checked = true;
                overwriteIfNewerCheckBox.Checked = false;
                overwriteAllCheckBox.Checked = false;
            }
        }

        private void createCustomDirCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            // If this checkbox is selected, it unchecks all other directory structure options.
            if (createCustomDirCheckBox.Checked)
            {
                if (keepDirStructCheckBox.Checked && leaveEmptyFoldersCheckBox.Checked)
                {
                    createCustomDirCheckBox.Checked = false;
                }
                else if (leaveEmptyFoldersCheckBox.Checked && copyFilesDirsCheckBox.Checked)
                {
                    createCustomDirCheckBox.Checked = false;
                }
            }
            // If all directory structure options are unchecked, the "keep directory structure" option is selected.
            else if (!leaveEmptyFoldersCheckBox.Checked && !keepOnlyFilesCheckBox.Checked && !copyFilesDirsCheckBox.Checked && !createCustomDirCheckBox.Checked)
            {
                keepDirStructCheckBox.Checked = true;
            }
        }

        private void doNotOverwriteCHKBOX_CheckedChanged(object sender, EventArgs e)
        {
            // If this checkbox is selected, it unchecks the other two overwrite options.
            if (doNotOverwriteCheckBox.Checked == true)
            {
                // Sets the overwrite option string.
                overwriteOption = "Overwrite: Do Not Overwrite";

                overwriteIfNewerCheckBox.Checked = false;
                overwriteAllCheckBox.Checked = false;
            }
            // If all three overwrite options are unchecked, this one is automatically selected.
            else if (!overwriteIfNewerCheckBox.Checked && !overwriteAllCheckBox.Checked && !doNotOverwriteCheckBox.Checked)
            {
                doNotOverwriteCheckBox.Checked = true;
                overwriteIfNewerCheckBox.Checked = false;
                overwriteAllCheckBox.Checked = false;
            }
        }

        private void copyFilesDirsCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            // If this checkbox is selected, it unchecks all other directory structure options.
            if (copyFilesDirsCheckBox.Checked)
            {
                keepDirStructCheckBox.Checked = false;
                keepOnlyFilesCheckBox.Checked = false;
                createCustomDirCheckBox.Checked = false;

            }
            // If all directory structure options are unchecked, the "keep directory structure" option is selected.
            else if (!leaveEmptyFoldersCheckBox.Checked && !keepOnlyFilesCheckBox.Checked && !copyFilesDirsCheckBox.Checked && !createCustomDirCheckBox.Checked)
            {
                keepDirStructCheckBox.Checked = true;
            }
        }

        private void clearTextButton_Click(object sender, EventArgs e)
        {
            // Clears the text in the search text box.
            searchTextBox.Text = string.Empty;
            // Sets the focus to the search text box.
            searchTextBox.Focus();
        }

        private void searchTextBox_TextChanged(object sender, EventArgs e)
        {
            // Gets the search string and converts it to lowercase for a case-insensitive search.
            string searchString = searchTextBox.Text.ToLower();

            // Loops through each row in the files data grid view.
            foreach (DataGridViewRow row in filesDataGridView.Rows)
            {
                // Gets the values from two specific cells in the current row and converts them to lowercase.
                string cellValue1 = row.Cells[2].Value.ToString().ToLower();
                string cellValue2 = row.Cells[3].Value.ToString().ToLower();

                // Checks if either cell value contains the search string.
                if (cellValue1.Contains(searchString) || cellValue2.Contains(searchString))
                {
                    // Selects the row if a match is found.
                    row.Selected = true;

                    // Scrolls the data grid view to display the found row.
                    filesDataGridView.FirstDisplayedScrollingRowIndex = row.Index;

                    // Exits the loop after finding the first match.
                    break;
                }
                else
                {
                    // Deselects the row if no match is found.
                    row.Selected = false;
                }
            }
        }

        private void moveBottomPicBox_Click(object sender, EventArgs e)
        {
            try
            {
                // Gets the index of the currently selected row.
                int index = filesDataGridView.SelectedRows[0].Index;
                DataGridViewRow row = new DataGridViewRow();

                // Checks if the selected row is already the last one.
                if (index == filesDataGridView.Rows.Count - 1)
                {
                    // If so, it returns without doing anything.
                    return;
                }
                else
                {
                    // Scrolls to the last row.
                    filesDataGridView.FirstDisplayedScrollingRowIndex = filesDataGridView.RowCount - 1;
                    // Gets the index of the last row.
                    int lastRowIndex = filesDataGridView.Rows.Count - 1;
                    // If the last row index is valid, it selects the last row.
                    if (lastRowIndex >= 0)
                    {
                        filesDataGridView.Rows[lastRowIndex].Selected = true;
                    }
                }
            }
            // Catches any exceptions and ignores them.
            catch { }
        }

        private void fileDownPicBox_Click(object sender, EventArgs e)
        {
            try
            {
                DataGridViewRow row = new DataGridViewRow();
                // Gets the index of the currently selected row.
                int index = filesDataGridView.SelectedRows[0].Index;

                // Checks if the selected row is the last one.
                if (index == filesDataGridView.Rows.Count - 1)
                {
                    // If so, it returns without doing anything.
                    return;
                }
                else
                {
                    row = filesDataGridView.SelectedRows[0];

                    // Clears any existing selection.
                    filesDataGridView.ClearSelection();
                    // Selects the next row.
                    filesDataGridView.Rows[index + 1].Selected = true;
                    // Scrolls the data grid view to display the newly selected row.
                    filesDataGridView.FirstDisplayedScrollingRowIndex = index + 1;
                }
            }
            // Catches any exceptions and ignores them.
            catch { }
        }

        /// <summary>
        /// Scrolls the files DataGridView to the top row and selects the first item.
        /// This method ensures the grid view is positioned at the beginning of the file list
        /// with the first row visibly selected.
        /// </summary>
        private void ScrollToTopRow()
        {
            // Checks if the data grid view has any rows.
            if (filesDataGridView.Rows.Count > 0)
            {
                // Clears the current selection.
                filesDataGridView.ClearSelection();
                // Selects the first row.
                filesDataGridView.Rows[0].Selected = true;
                // Sets the current cell to the first cell of the first row.
                filesDataGridView.CurrentCell = filesDataGridView.Rows[0].Cells[0];
                // Scrolls the data grid view to the top.
                filesDataGridView.FirstDisplayedScrollingRowIndex = 0;
            }
        }

        private void fileUpPicBox_Click(object sender, EventArgs e)
        {
            try
            {
                DataGridViewRow row = new DataGridViewRow();
                // Gets the index of the currently selected row.
                int index = filesDataGridView.SelectedRows[0].Index;

                // Checks if the selected row is the second or first row.
                if (index == 1 || index == 0)
                {
                    // If the data grid view has rows.
                    if (filesDataGridView.Rows.Count > 0)
                    {
                        // Selects the first row.
                        filesDataGridView.Rows[0].Selected = true;
                        // Scrolls to the top.
                        filesDataGridView.FirstDisplayedScrollingRowIndex = 0;
                    }
                    // Returns without further action.
                    return;
                }
                // Checks if the selected row is the third or fourth row.
                else if (index == 2 || index == 3)
                {
                    // Clears the current selection.
                    filesDataGridView.ClearSelection();
                    // Selects the previous row.
                    filesDataGridView.Rows[index - 1].Selected = true;
                    // Scrolls to the newly selected row.
                    filesDataGridView.FirstDisplayedScrollingRowIndex = index - 1;
                }
                else
                {
                    // For all other cases, clears selection.
                    filesDataGridView.ClearSelection();
                    // Selects the previous row.
                    filesDataGridView.Rows[index - 1].Selected = true;
                    // Scrolls to the newly selected row.
                    filesDataGridView.FirstDisplayedScrollingRowIndex = index - 1;
                }
            }
            // Catches any exceptions and ignores them.
            catch { }
        }

        private void removeDirBGW_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            // Sets the text of a label to a default value.
            fromFilesDirLabel.Text = Translator.Get("Select Files/Directory");

            // Sets the selected tab to the command home page.
            tabControl1.SelectedTab = cmdHomePage;
        }

        private void priorityTrackBar_Scroll(object sender, EventArgs e)
        {
            // Checks the value of the track bar to set the process priority.
            if (priorityTrackBar.Value == 0)
            {
                priorityLabel.Text = Translator.Get("Program Priority:\nBelow Normal");
                Properties.Settings.Default.Priority = "Below Normal";
                using (Process p = Process.GetCurrentProcess()) { p.PriorityClass = ProcessPriorityClass.BelowNormal; }
            }
            else if (priorityTrackBar.Value == 1)
            {
                priorityLabel.Text = Translator.Get("Program Priority:\nNormal");
                Properties.Settings.Default.Priority = "Normal";
                using (Process p = Process.GetCurrentProcess()) { p.PriorityClass = ProcessPriorityClass.Normal; }
            }
            else if (priorityTrackBar.Value == 2)
            {
                priorityLabel.Text = Translator.Get("Program Priority:\nAbove Normal");
                Properties.Settings.Default.Priority = "Above Normal";
                using (Process p = Process.GetCurrentProcess()) { p.PriorityClass = ProcessPriorityClass.AboveNormal; }
            }
            else if (priorityTrackBar.Value == 3)
            {
                priorityLabel.Text = Translator.Get("Program Priority:\nHigh");
                Properties.Settings.Default.Priority = "High";
                using (Process p = Process.GetCurrentProcess()) { p.PriorityClass = ProcessPriorityClass.High; }
            }
            else if (priorityTrackBar.Value == 4)
            {
                priorityLabel.Text = Translator.Get("Program Priority:\nReal Time");
                Properties.Settings.Default.Priority = "Real Time";
                using (Process p = Process.GetCurrentProcess()) { p.PriorityClass = ProcessPriorityClass.RealTime; }
            }

            // If auto-save is enabled, saves the settings.
            if (saveAutoCheckBox.Checked) Properties.Settings.Default.Save();
        }

        private void opacityTrackBar_Scroll(object sender, EventArgs e)
        {
            // Calculates the opacity value from the track bar value.
            double opacityValue = opacityTrackBar.Value / 100.0;

            // Converts the opacity value to an integer percentage.
            int opacityText = Convert.ToInt32(opacityValue * 100);

            // Updates the opacity label text.
            opacityLabel.Text = string.Format(Translator.Get("Opacity:\n{0}%"), opacityText);

            // Saves the opacity setting.
            Properties.Settings.Default.Opacity = opacityText;

            // Sets the form's opacity.
            this.Opacity = opacityValue;

            // If auto-save is enabled, saves the settings.
            if (saveAutoCheckBox.Checked)
            {
                Properties.Settings.Default.Save();
            }
        }

        private void onFinishCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            // Checks if the checkbox is selected.
            if (onFinishCheckBox.Checked)
            {
                // Sets the corresponding application setting to true.
                Properties.Settings.Default.SoundCopyComplete = true;
                onFinishCheckBox.Checked = true;
            }
            else
            {
                // Sets the corresponding application setting to false.
                Properties.Settings.Default.SoundCopyComplete = false;
                onFinishCheckBox.Checked = false;
            }

            // If auto-save is enabled, saves the settings.
            if (saveAutoCheckBox.Checked)
            {
                Properties.Settings.Default.Save();
            }
        }

        private void onAddFilesCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            // Checks if the checkbox is selected.
            if (onAddFilesCheckBox.Checked)
            {
                // Sets the corresponding application setting to true.
                Properties.Settings.Default.SoundFileAdded = true;
                onAddFilesCheckBox.Checked = true;
            }
            else
            {
                // Sets the corresponding application setting to false.
                Properties.Settings.Default.SoundFileAdded = false;
                onAddFilesCheckBox.Checked = false;
            }
            // If auto-save is enabled, saves the settings.
            if (saveAutoCheckBox.Checked)
            {
                Properties.Settings.Default.Save();
            }
        }

        private void onCancelCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            // Checks if the checkbox is selected.
            if (onCancelCheckBox.Checked)
            {
                // Sets the corresponding application setting to true.
                Properties.Settings.Default.SoundCancel = true;
                onCancelCheckBox.Checked = true;
            }
            else
            {
                // Sets the corresponding application setting to false.
                Properties.Settings.Default.SoundCancel = false;
                onCancelCheckBox.Checked = false;
            }

            // If auto-save is enabled, saves the settings.
            if (saveAutoCheckBox.Checked)
            {
                Properties.Settings.Default.Save();
            }
        }

        private void onErrorCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            // Checks if the checkbox is selected.
            if (onErrorCheckBox.Checked)
            {
                // Sets the corresponding application setting to true.
                Properties.Settings.Default.SoundError = true;
                onErrorCheckBox.Checked = true;
            }
            else
            {
                // Sets the corresponding application setting to false.
                Properties.Settings.Default.SoundError = false;
                onErrorCheckBox.Checked = false;
            }

            // If auto-save is enabled, saves the settings.
            if (saveAutoCheckBox.Checked)
            {
                Properties.Settings.Default.Save();
            }
        }
        private void updateManuallyCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            // Checks if the checkbox is selected.
            if (updateManuallyCheckBox.Checked)
            {
                updateManuallyCheckBox.Checked = true;
                // Sets the corresponding application setting to true.
                Properties.Settings.Default.UpdateManually = true;
                // Unchecks the other two update options.
                updateBetaCheckBox.Checked = false;
                updateAutoCheckBox.Checked = false;
            }
            // If all three update options are unchecked, this one is automatically selected.
            else if (!updateAutoCheckBox.Checked && !updateBetaCheckBox.Checked)
            {
                Properties.Settings.Default.UpdateManually = true;
                updateManuallyCheckBox.Checked = true;
            }
            else
            {
                // Sets the corresponding application setting to false.
                Properties.Settings.Default.UpdateManually = false;
                updateManuallyCheckBox.Checked = false;
            }
            // If auto-save is enabled, saves the settings.
            if (saveAutoCheckBox.Checked)
            {
                Properties.Settings.Default.Save();
            }
        }

        private void updateAutoCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            // If the program is not the "Pro" version, this option is disabled.
            if (proVersion == false)
            {
                updateAutoCheckBox.Checked = false;
                updateManuallyCheckBox.Checked = true;
                Properties.Settings.Default.UpdateManually = true;
            }
            else
            {
                // If the checkbox is checked, it sets the setting to true.
                if (updateAutoCheckBox.Checked)
                {
                    Properties.Settings.Default.UpdateAuto = true;
                }
                else
                {
                    // Otherwise, it sets the setting to false.
                    Properties.Settings.Default.UpdateAuto = false;
                    updateAutoCheckBox.Checked = false;
                }
                // Checks if either auto or beta update is selected.
                if (updateBetaCheckBox.Checked || updateAutoCheckBox.Checked)
                {
                    // Unchecks the manual update option.
                    updateManuallyCheckBox.Checked = false;
                    Properties.Settings.Default.UpdateManually = false;
                }
                else
                {
                    // Otherwise, it checks the manual update option.
                    updateManuallyCheckBox.Checked = true;
                    Properties.Settings.Default.UpdateManually = true;
                }
            }
            // If auto-save is enabled, saves the settings.
            if (saveAutoCheckBox.Checked)
            {
                Properties.Settings.Default.Save();
            }
        }

        private void updateBetaCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            // If the program is not the "Pro" version, this option is disabled.
            if (proVersion == false)
            {
                updateBetaCheckBox.Checked = false;
                updateManuallyCheckBox.Checked = true;
                Properties.Settings.Default.UpdateManually = true;
            }
            else
            {
                // If the checkbox is checked, it sets the setting to true.
                if (updateBetaCheckBox.Checked)
                {
                    Properties.Settings.Default.UpdateBeta = true;
                }
                else
                {
                    // Otherwise, it sets the setting to false.
                    Properties.Settings.Default.UpdateBeta = false;
                    updateBetaCheckBox.Checked = false;
                }
                // Checks if either beta or auto update is selected.
                if (updateBetaCheckBox.Checked || updateAutoCheckBox.Checked)
                {
                    // Unchecks the manual update option.
                    updateManuallyCheckBox.Checked = false;
                    Properties.Settings.Default.UpdateManually = false;
                }
                else
                {
                    // Otherwise, it checks the manual update option.
                    updateManuallyCheckBox.Checked = true;
                    Properties.Settings.Default.UpdateManually = true;
                }

                // If auto-save is enabled, saves the settings.
                if (saveAutoCheckBox.Checked)
                {
                    Properties.Settings.Default.Save();
                }
            }
        }

        /// <summary>
        /// Syncs registry with saved setting at startup.
        /// </summary>
        private void SyncStartupSetting()
        {
            try
            {
                using (RegistryKey key = Registry.CurrentUser.OpenSubKey(RUN_KEY, true))
                {
                    bool registryHasEntry = key.GetValue(APP_Name) != null;
                    bool settingEnabled = Properties.Settings.Default.StartWithWindows;

                    if (settingEnabled && !registryHasEntry)
                    {
                        // Setting says enabled but registry missing -> add it
                        key.SetValue(APP_Name, Application.ExecutablePath);
                    }
                    else if (!settingEnabled && registryHasEntry)
                    {
                        // Setting says disabled but registry has entry -> remove it
                        key.DeleteValue(APP_Name);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(Translator.Get($"Startup sync failed: {ex.Message}"),
                    Translator.Get("Warning"), MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
        }


        private void startWithWindowsCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                using (RegistryKey key = Registry.CurrentUser.OpenSubKey(RUN_KEY, true))
                {
                    if (startWithWindowsCheckBox.Checked)
                    {
                        // Add to startup
                        key.SetValue(APP_Name, Application.ExecutablePath);
                        Properties.Settings.Default.StartWithWindows = true;
                    }
                    else
                    {
                        // Remove from startup
                        if (key.GetValue(APP_Name) != null)
                            key.DeleteValue(APP_Name);
                        Properties.Settings.Default.StartWithWindows = false;
                    }

                    // Save setting
                    Properties.Settings.Default.Save();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(Translator.Get($"Failed to update startup setting: {ex.Message}"),
                    Translator.Get("Error"), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void restartCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            // Checks if the checkbox is selected.
            if (restartCheckBox.Checked)
            {
                // Unchecks the other checkbox and sets the corresponding settings.
                closeProgramCheckBox.Checked = false;
                Properties.Settings.Default.CloseOnError = false;
                Properties.Settings.Default.RestartOnError = true;
            }
            else
            {
                // Checks the other checkbox and sets the corresponding settings.
                closeProgramCheckBox.Checked = true;
                Properties.Settings.Default.CloseOnError = true;
                Properties.Settings.Default.RestartOnError = false;
            }

            // If auto-save is enabled, saves the settings.
            if (saveAutoCheckBox.Checked)
            {
                Properties.Settings.Default.Save();
            }
        }

        private void closeProgramCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            // Checks if the checkbox is selected.
            if (closeProgramCheckBox.Checked)
            {
                // Unchecks the other checkbox and sets the corresponding settings.
                restartCheckBox.Checked = false;
                Properties.Settings.Default.CloseOnError = true;
                Properties.Settings.Default.RestartOnError = false;
            }
            else
            {
                // Checks the other checkbox and sets the corresponding settings.
                restartCheckBox.Checked = true;
                Properties.Settings.Default.CloseOnError = false;
                Properties.Settings.Default.RestartOnError = true;
            }
            // If auto-save is enabled, saves the settings.
            if (saveAutoCheckBox.Checked == true)
            {
                Properties.Settings.Default.Save();
            }
        }

        private void registerButton_Click(object sender, EventArgs e)
        {
            // Checks if the serial number is a specific value.
            if (serialMaskedTextBox.Text == "ABCD-EFGH-IJKL-MN12")
            {
                // If correct, enables the pro version, disables the register button, and clears the text box.
                proVersion = true;
                registerButton.Enabled = false;
                editSavedCheckBoxes();
                serialMaskedTextBox.Text = "";
            }
            else
            {
                // If incorrect, sets the pro version to false and enables the register button.
                proVersion = false;
                registerButton.Enabled = true;
                editSavedCheckBoxes();
            }
        }

        // Returns the value of the globalMODE string variable.
        public string GetStringVariable()
        {
            return globalMODE;
        }
        private void setUpEmailButton_Click(object sender, EventArgs e)
        {
            if (dataGridView1.Rows.Count > 0 && skinsComboBox.SelectedItem != null)
            {
                string selectedDisplay = skinsComboBox.SelectedItem.ToString();
                globalMODE = ToEn(selectedDisplay); // Convert to English key for consistency
                new emailForm().ShowDialog();
            }
        }

        private void setUpSMSButton_Click(object sender, EventArgs e)
        {
            if (skinsComboBox.SelectedItem != null)
            {
                string selectedDisplay = skinsComboBox.SelectedItem.ToString();
                globalMODE = ToEn(selectedDisplay); // Convert to English key for consistency
                new smsForm().ShowDialog();
            }
        }

        private void emailPathsCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            // Checks if the checkbox is selected.
            if (emailPathsCheckBox.Checked)
            {
                // Sets the corresponding settings and unchecks the other checkbox.
                Properties.Settings.Default.EmailOnlyNames = false;
                Properties.Settings.Default.EmailFullPaths = true;
                emailNamesCheckBox.Checked = false;
            }
            else
            {
                // Sets the corresponding settings and checks the other checkbox.
                emailNamesCheckBox.Checked = true;
                Properties.Settings.Default.EmailOnlyNames = true;
                Properties.Settings.Default.EmailFullPaths = false;
            }

            // If auto-save is enabled, saves the settings.
            if (saveAutoCheckBox.Checked)
            {
                Properties.Settings.Default.Upgrade();
                Properties.Settings.Default.Save();
            }
        }

        private void emailNamesCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            // Checks if the checkbox is selected.
            if (emailNamesCheckBox.Checked)
            {
                // Unchecks the other checkbox and sets the corresponding settings.
                emailPathsCheckBox.Checked = false;
                Properties.Settings.Default.EmailOnlyNames = true;
                Properties.Settings.Default.EmailFullPaths = false;
            }
            else
            {
                // Checks the other checkbox and sets the corresponding settings.
                emailPathsCheckBox.Checked = true;
                Properties.Settings.Default.EmailOnlyNames = false;
                Properties.Settings.Default.EmailFullPaths = true;
            }
            // If auto-save is enabled, saves the settings.
            if (saveAutoCheckBox.Checked)
            {
                Properties.Settings.Default.Save();
            }
        }

        private void zipTogetherCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            // Checks if the checkbox is selected.
            if (zipTogetherCheckBox.Checked)
            {
                // Sets the corresponding settings and unchecks the other checkbox.
                Properties.Settings.Default.ZipTogether = true;
                Properties.Settings.Default.ZipSeparately = false;
                zipTogetherCheckBox.Checked = true;
                zipSeparateCheckBox.Checked = false;
            }
            else
            {
                // Sets the corresponding settings and checks the other checkbox.
                Properties.Settings.Default.ZipTogether = false;
                Properties.Settings.Default.ZipSeparately = true;
                zipTogetherCheckBox.Checked = false;
                zipSeparateCheckBox.Checked = true;
            }
            // If auto-save is enabled, saves the settings.
            if (saveAutoCheckBox.Checked)
            {
                Properties.Settings.Default.Save();
            }
        }

        private void zipSeparateCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            // Checks if the checkbox is selected.
            if (zipSeparateCheckBox.Checked)
            {
                // Sets the corresponding setting and unchecks the other checkbox.
                Properties.Settings.Default.ZipSeparately = true;
                zipTogetherCheckBox.Checked = false;
            }
            else
            {
                // Sets the corresponding setting and checks the other checkbox.
                Properties.Settings.Default.ZipTogether = false;
                zipTogetherCheckBox.Checked = true;
            }

            // If auto-save is enabled, saves the settings.
            if (saveAutoCheckBox.Checked)
            {
                Properties.Settings.Default.Save();
            }
        }

        private void fullPathsCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            // Checks if the checkbox is selected.
            if (fullPathsCheckBox.Checked)
            {
                // Sets the corresponding setting and unchecks the other checkbox.
                Properties.Settings.Default.FileFullPaths = true;
                fullPathsCheckBox.Checked = true;
                onlyNamesCheckBox.Checked = false;
            }
            else
            {
                // Sets the corresponding setting and checks the other checkbox.
                Properties.Settings.Default.FileFullPaths = false;
                fullPathsCheckBox.Checked = false;
                onlyNamesCheckBox.Checked = true;
            }

            // If auto-save is enabled, saves the settings.
            if (saveAutoCheckBox.Checked)
            {
                Properties.Settings.Default.Save();
            }
        }

        private void exportButton_Click(object sender, EventArgs e)
        {
            // Checks if the data grid view is empty.
            if (dataGridView1.Rows.Count == 0)
            {
                // Displays a message box if there is no data to export.
                MessageBox.Show(Translator.Get("There is no data to export."), Translator.Get("Copy That v1.0 File/Directory Tool - Information"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            // Calls a method to update the total count label.
            UpdateTotalCountLabel();

            // Displays the export menu at the location of the export button.
            exportMenu.Show(exportButton, new System.Drawing.Point(0, exportButton.Height));
        }

        private void onlyNamesCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            // Checks if the checkbox is selected.
            if (onlyNamesCheckBox.Checked)
            {
                // Sets the corresponding setting and unchecks the other checkbox.
                Properties.Settings.Default.FileOnlyNames = true;
                onlyNamesCheckBox.Checked = true;
                fullPathsCheckBox.Checked = false;
            }
            else
            {
                // Sets the corresponding setting and checks the other checkbox.
                Properties.Settings.Default.FileOnlyNames = false;
                onlyNamesCheckBox.Checked = false;
                fullPathsCheckBox.Checked = true;
            }

            // If auto-save is enabled, saves the settings.
            if (saveAutoCheckBox.Checked)
            {
                Properties.Settings.Default.Save();
            }
        }

        private void multithreadCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            // Checks if the checkbox is selected.
            if (multithreadCheckBox.Checked)
            {
                // Sets the corresponding setting to true.
                Properties.Settings.Default.Multithreading = true;
            }
            else
            {
                // Sets the corresponding setting to false.
                Properties.Settings.Default.Multithreading = false;
            }
            // If auto-save is enabled, saves the settings.
            if (saveAutoCheckBox.Checked == true)
            {
                Properties.Settings.Default.Save();
            }
        }

        private void cmbOnFinishMulti_SelectedIndexChanged(object sender, EventArgs e)
        {
            // If no item is selected, it defaults to the first item.
            if (onFinishMultiComboBox.SelectedIndex == -1)
            {
                onFinishMultiComboBox.SelectedIndex = 0;
            }
            // If no item is selected, it defaults to the first item.
            if (onFinishComboBox.SelectedIndex == -1)
            {
                onFinishComboBox.SelectedIndex = 0;
            }
            // Synchronizes the text of the two combo boxes.
            onFinishComboBox.Text = onFinishMultiComboBox.Text;
        }

        private void nLabel_Click(object sender, EventArgs e)
        {
            // Sets the form's start position to manual.
            this.StartPosition = FormStartPosition.Manual;

            // Gets the primary screen's working area.
            Screen primaryScreen = Screen.PrimaryScreen;
            System.Drawing.Rectangle workingArea = primaryScreen.WorkingArea;

            // Calculates the top and centered left position.
            int top = workingArea.Top;
            int left = (workingArea.Width - this.Width) / 2;

            // Sets the form's location.
            this.Location = new System.Drawing.Point(left, top);
        }

        private void neLabel_Click(object sender, EventArgs e)
        {
            // Sets the form's start position to manual.
            this.StartPosition = FormStartPosition.Manual;

            // Gets the primary screen's working area.
            Screen primaryScreen = Screen.PrimaryScreen;
            System.Drawing.Rectangle workingArea = primaryScreen.WorkingArea;

            // Calculates the top-right position.
            int left = workingArea.Right - this.Width;
            int top = workingArea.Top;

            // Sets the form's location.
            this.Location = new System.Drawing.Point(left, top);
        }

        private void eLabel_Click(object sender, EventArgs e)
        {
            // Sets the form's start position to manual.
            this.StartPosition = FormStartPosition.Manual;

            // Gets the primary screen's working area.
            Screen primaryScreen = Screen.PrimaryScreen;
            System.Drawing.Rectangle workingArea = primaryScreen.WorkingArea;

            // Calculates the right and centered vertical position.
            int left = workingArea.Right - this.Width;
            int top = (workingArea.Height - this.Height) / 2;

            // Sets the form's location.
            this.Location = new System.Drawing.Point(left, top);
        }

        private void seLabel_Click(object sender, EventArgs e)
        {
            // Sets the form's start position to manual.
            this.StartPosition = FormStartPosition.Manual;
            // Gets the primary screen's working area.
            Screen primaryScreen = Screen.PrimaryScreen;
            System.Drawing.Rectangle workingArea = primaryScreen.WorkingArea;

            // Calculates the bottom-right position.
            int left = workingArea.Right - this.Width;
            int top = workingArea.Bottom - this.Height;

            // Sets the form's location.
            this.Location = new System.Drawing.Point(left, top);
        }

        private void sLabel_Click(object sender, EventArgs e)
        {
            // Sets the form's starting position to be manually controlled.
            this.StartPosition = FormStartPosition.Manual;

            // Gets the primary screen and its working area (excluding the taskbar).
            Screen primaryScreen = Screen.PrimaryScreen;
            System.Drawing.Rectangle workingArea = primaryScreen.WorkingArea;

            // Calculates the 'top' position to place the form at the bottom of the screen.
            int top = workingArea.Bottom - this.Height;
            // Calculates the 'left' position to center the form horizontally.
            int left = (workingArea.Width - this.Width) / 2;

            // Sets the form's new location.
            this.Location = new System.Drawing.Point(left, top);
        }

        private void swLabel_Click(object sender, EventArgs e)
        {
            // Sets the form's starting position to be manually controlled.
            this.StartPosition = FormStartPosition.Manual;

            // Gets the primary screen and its working area (excluding the taskbar).
            Screen primaryScreen = Screen.PrimaryScreen;
            System.Drawing.Rectangle workingArea = primaryScreen.WorkingArea;

            // Calculates the 'left' position to place the form at the far left of the screen.
            int left = workingArea.Left;
            // Calculates the 'top' position to place the form at the bottom of the screen.
            int top = workingArea.Bottom - this.Height;

            // Sets the form's new location.
            this.Location = new System.Drawing.Point(left, top);
        }

        private void wLabel_Click(object sender, EventArgs e)
        {
            // Sets the form's starting position to be manually controlled.
            this.StartPosition = FormStartPosition.Manual;

            // Gets the primary screen and its working area.
            Screen primaryScreen = Screen.PrimaryScreen;
            System.Drawing.Rectangle workingArea = primaryScreen.WorkingArea;

            // Calculates the 'left' position to place the form at the far left of the screen.
            int left = workingArea.Left;
            // Calculates the 'top' position to vertically center the form.
            int top = (workingArea.Height - this.Height) / 2;

            // Sets the form's new location.
            this.Location = new System.Drawing.Point(left, top);
        }

        private void nwLabel_Click(object sender, EventArgs e)
        {
            // Sets the form's starting position to be manually controlled.
            this.StartPosition = FormStartPosition.Manual;

            // Gets the primary screen and its working area.
            Screen primaryScreen = Screen.PrimaryScreen;
            System.Drawing.Rectangle workingArea = primaryScreen.WorkingArea;

            // Sets the 'left' and 'top' positions to place the form in the top-left corner.
            int left = workingArea.Left;
            int top = workingArea.Top;

            // Sets the form's new location.
            this.Location = new System.Drawing.Point(left, top);
        }

        private void StoreOriginalSize()
        {
            // Stores the current size of the form in a variable.
            originalSize = this.Size;
        }

        private void RollTimer_Tick(object sender, EventArgs e)
        {
            // Calculates the new height for the form based on the animation direction and step.
            int newHeight = this.Height + animationStep * animationDirection;

            // Checks if the form has reached its target height.
            if ((animationDirection < 0 && newHeight <= targetHeight) ||
        (animationDirection > 0 && newHeight >= targetHeight))
            {
                // Sets the form's height to the exact target height.
                this.Height = targetHeight;
                // Stops the animation timer.
                rollTimer.Stop();
                // Sets the animating flag to false.
                isAnimating = false;

                // If rolling down, makes the tab control visible and updates the rolled-up flag.
                if (animationDirection > 0)
                {
                    tabControl1.Visible = true;
                    isRolledUp = false;
                }
                // If rolling up, updates the rolled-up flag.
                else
                {
                    isRolledUp = true;
                }
            }
            else
            {
                // Continues the animation by setting the form's height to the new height.
                this.Height = newHeight;
            }
        }

        /// <summary>
        /// Animates the form to roll down to its original full height.
        /// This method expands the form from a rolled-up state to show all content.
        /// </summary>
        private void ToggleRollDown()
        {
            // Prevents rolling down if already animating or not rolled up.
            if (isAnimating || !isRolledUp) return;

            // Sets the target height to the original form size.
            targetHeight = originalSize.Height;
            // Sets the animation direction to 'down'.
            animationDirection = +1;
            // Sets the animating flag to true.
            isAnimating = true;
            // Starts the roll timer.
            rollTimer.Start();
        }

        /// <summary>
        /// Animates the form to roll up to a compact height, showing only the title area.
        /// This method collapses the form to hide content while keeping the title visible.
        /// </summary>
        private void ToggleRollUp()
        {
            // Prevents rolling up if already animating.
            if (isAnimating) return;

            // Undocks and unanchors the tab control to allow precise height control.
            tabControl1.Dock = DockStyle.None;
            tabControl1.Anchor = AnchorStyles.Top | AnchorStyles.Left;

            // Calculates the bottom edge of the title label in the form's coordinate system.
            int labelBottom = this.PointToClient(
                 titleLabel.Parent.PointToScreen(titleLabel.Location)).Y
               + titleLabel.Height;
            // Sets the target height to the label's bottom edge plus one pixel.
            targetHeight = labelBottom + 1;

            // Sets the animation direction to 'up'.
            animationDirection = -1;
            // Sets the animating flag to true.
            isAnimating = true;
            // Starts the roll timer.
            rollTimer.Start();
        }

        private void btnGoToInExplorer_Click(object sender, EventArgs e)
        {
            // Gets the index of the currently selected row in the DataGridView.
            int currentRow = skippedDataGridView.SelectedRows[0].Index;

            // Retrieves the file path from the fourth cell of the selected row.
            string file = skippedDataGridView.Rows[currentRow].Cells[3].Value.ToString();

            // Checks if the file path is a valid file.
            if (File.Exists(file))
            {
                // If it exists, opens Windows Explorer and selects the file.
                SelectFileInExplorer(file);
            }
        }

        /// <summary>
        /// Opens Windows Explorer and selects the specified file, highlighting it in the file browser.
        /// </summary>
        /// <param name="filePath">The full path of the file to select in Windows Explorer</param>
        private static void SelectFileInExplorer(string filePath)
        {
            Process.Start(new ProcessStartInfo()
            {
                FileName = "explorer.exe",
                Arguments = @$"/select,""{filePath}"""
            });
        }

        private void btnClearSkippedList_Click(object sender, EventArgs e)
        {
            // Clears all rows from the skipped files DataGridView.
            skippedDataGridView.Rows.Clear();
            // Resets the "Total Skipped Files" label to 0.
            totalSkippedLabel.Text = string.Format(Translator.Get("Total Skipped Files: {0}"), 0);
        }

        private void clearHistoryButton_Click(object sender, EventArgs e)
        {
            // Clears all rows from the copy history DataGridView.
            copyHistoryDGV.Rows.Clear();
            // Resets the "Total History Items" label to 0.
            totalHistoryLabel.Text = string.Format(Translator.Get("Total History Items: {0}"), 0);
        }

        private void btnAddAllowed_Click(object sender, EventArgs e)
        {
            // Gets the text from the allowed extensions text box.
            string newText = allowedTextBox.Text;

            // Checks if the text box is not empty and has a valid length (5 or 6 characters).
            if (allowedTextBox.Text != string.Empty && (allowedTextBox.TextLength == 5 || allowedTextBox.TextLength == 6))
            {
                // If the list of allowed extensions contains a wildcard, it clears the list and adds the new extension.
                if (!allowedExtListBox.Items.Contains(newText) && !excludedExtListBox.Items.Contains(newText) && allowedExtListBox.Items.Contains("*.*"))
                {
                    allowedExtListBox.Items.Clear();
                    allowedExtListBox.Items.Add(newText);

                    // Resets the text box and sets the cursor position.
                    allowedTextBox.Text = "*.";
                    allowedTextBox.SelectionStart = 2;
                    allowedTextBox.Focus();
                }
                // If the extension doesn't exist in either list, adds it to the allowed list.
                else if (!allowedExtListBox.Items.Contains(newText) && !excludedExtListBox.Items.Contains(newText))
                {
                    allowedExtListBox.Items.Add(newText);

                    // Resets the text box and sets the cursor position.
                    allowedTextBox.Text = "*.";
                    allowedTextBox.SelectionStart = 2;
                }
                else
                {
                    // Shows a message box if the extension already exists.
                    MessageBox.Show(Translator.Get("This extension already exists in the excluded extensions or in the added extensions."),
            Translator.Get("Copy That v1.0 File/Directory Tool - Information"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    allowedTextBox.Focus();
                }
            }
        }

        private void btnRemoveAllowed_Click(object sender, EventArgs e)
        {
            // Checks if an item is selected in the allowed extensions list box.
            if (allowedExtListBox.SelectedIndex != -1)
            {
                // Removes the selected item.
                allowedExtListBox.Items.RemoveAt(allowedExtListBox.SelectedIndex);

                // If the list becomes empty, adds the wildcard and clears the excluded list.
                if (allowedExtListBox.Items.Count == 0)
                {
                    excludedExtListBox.Items.Clear();
                    allowedExtListBox.Items.Add("*.*");
                    allowedTextBox.Focus();
                }
            }
            else
            {
                // Shows a message box if no item is selected to remove.
                MessageBox.Show(Translator.Get("Please select an item to remove."),
                Translator.Get("Copy That v1.0 File/Directory Tool - Information"),
                MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void btnClearAllowed_Click(object sender, EventArgs e)
        {
            // Checks if there are items in the allowed list box.
            if (allowedExtListBox.Items.Count > 0)
            {
                // Clears both the allowed and excluded lists.
                allowedExtListBox.Items.Clear();
                allowedExtListBox.Items.Add("*.*");
                excludedExtListBox.Items.Clear();
            }

            // Sets the focus to the allowed text box.
            allowedTextBox.Focus();
        }

        private void btnAddExcluded_Click(object sender, EventArgs e)
        {
            // Gets the text from the excluded extensions text box.
            string newText = excludedTextBox.Text;

            // Checks if the text box is not empty and has a valid length.
            if (excludedTextBox.Text != string.Empty && (excludedTextBox.TextLength == 5 || excludedTextBox.TextLength == 6))
            {
                // Checks if the extension doesn't already exist in either list.
                if (!excludedExtListBox.Items.Contains(newText) && !allowedExtListBox.Items.Contains(newText))
                {
                    // Adds the new extension to the excluded list.
                    excludedExtListBox.Items.Add(newText);

                    // Resets the text box and sets the cursor position.
                    excludedTextBox.Text = "*.";
                    excludedTextBox.SelectionStart = 2;
                    excludedTextBox.Focus();
                }
                else
                {
                    // Shows a message box if the extension already exists.
                    MessageBox.Show(Translator.Get("This extension already exists in the excluded extensions or in the added extensions."),
            Translator.Get("Copy That v1.0 File/Directory Tool - Information"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                    excludedTextBox.Focus();
                }
            }
        }

        private void btnRemoveExcluded_Click(object sender, EventArgs e)
        {
            // Checks if an item is selected in the excluded extensions list box.
            if (excludedExtListBox.SelectedIndex != -1)
            {
                // Removes the selected item.
                excludedExtListBox.Items.RemoveAt(excludedExtListBox.SelectedIndex);

                // If the list becomes empty, sets the focus to the text box.
                if (excludedExtListBox.Items.Count == 0)
                {
                    excludedTextBox.Focus();
                }
            }
            else
            {
                // Shows a message box if no item is selected to remove.
                MessageBox.Show(Translator.Get("Please select an item to remove."),
            Translator.Get("Copy That v1.0 File/Directory Tool - Information"), MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void btnClearExcluded_Click(object sender, EventArgs e)
        {
            // Checks if there are items in the excluded list box.
            if (excludedExtListBox.Items.Count > 0)
            {
                // Clears all items from the excluded list box.
                excludedExtListBox.Items.Clear();
            }
            // Sets the focus to the excluded text box.
            excludedTextBox.Focus();
        }

        private void allowedTextBox_TextChanged(object sender, EventArgs e)
        {
            // If the text box contains only a wildcard, it adds a period to create a valid extension pattern.
            if (allowedTextBox.Text == "*")
            {
                allowedTextBox.Text = "*.";
                // Sets the cursor position to the end.
                allowedTextBox.SelectionStart = 2;
            }
        }

        private void excludedTextBox_TextChanged(object sender, EventArgs e)
        {
            // If the text box contains only a wildcard, it adds a period.
            if (excludedTextBox.Text == "*")
            {
                excludedTextBox.Text = "*.";
                // Sets the cursor position to the end.
                excludedTextBox.SelectionStart = 2;
            }
        }

        private void excludedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            // If the text length is less than 2, it handles the key press to prevent invalid input.
            if (excludedTextBox.Text.Length < 2)
            {
                e.Handled = true;
                excludedTextBox.Text = "*.";
                excludedTextBox.SelectionStart = 2;
            }
            // Resets the text to "*. " if it's just a wildcard.
            if (excludedTextBox.Text == "*")
            {
                excludedTextBox.Text = "*.";
            }
        }

        private void excludedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            // Suppresses key presses for invalid characters if the text length is less than 3.
            if ((!(char.IsLetter((char)e.KeyValue) || e.KeyCode == Keys.Back)) && excludedTextBox.TextLength < 3)
            {
                e.SuppressKeyPress = true;
            }
            // If a letter is pressed, ensures the text starts with "*. ".
            else if (char.IsLetter((char)e.KeyValue))
            {
                if (excludedTextBox.SelectionStart <= 2)
                {
                    excludedTextBox.Text = "*.";
                    excludedTextBox.SelectionStart = 2;
                }
            }
            // Suppresses the delete key and resets the text if it's pressed.
            if (e.KeyCode == Keys.Delete)
            {
                e.SuppressKeyPress = true;
                excludedTextBox.Text = "*.";
                excludedTextBox.SelectionStart = 2;
            }
        }

        private void allowedTextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            // If the text length is less than 2, handles the key press and forces the text to start with "*. ".
            if (allowedTextBox.Text.Length < 2)
            {
                e.Handled = true;
                allowedTextBox.Text = "*.";
                allowedTextBox.SelectionStart = 2;
            }
        }

        private void allowedTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            // Suppresses key presses for invalid characters if the text length is less than 3.
            if ((!(char.IsLetter((char)e.KeyValue) || e.KeyCode == Keys.Back)) && allowedTextBox.TextLength < 3)
            {
                e.SuppressKeyPress = true;
            }
            // If a letter is pressed, ensures the text starts with "*. ".
            else if (char.IsLetter((char)e.KeyValue))
            {
                if (allowedTextBox.SelectionStart <= 2)
                {
                    allowedTextBox.Text = "*.";
                    allowedTextBox.SelectionStart = 2;
                }
            }
            // Suppresses the delete key and resets the text if it's pressed.
            if (e.KeyCode == Keys.Delete)
            {
                e.SuppressKeyPress = true;
                allowedTextBox.Text = "*.";
                allowedTextBox.SelectionStart = 2;
            }
        }

        private void MainForm_Resize(object sender, EventArgs e)
        {
            // If the form is minimized and the system tray option is checked, hides the form.
            if (FormWindowState.Minimized == this.WindowState && minimizeSystemTrayCheckBox.Checked == true)
            {
                notifyIcon1.Visible = true;
                this.Hide();
            }
            // If the form is normalized and the system tray option is unchecked, hides the tray icon.
            else if (FormWindowState.Normal == this.WindowState && minimizeSystemTrayCheckBox.Checked == false)
            {
                notifyIcon1.Visible = false;
            }
        }

        private void notifyIcon1_DoubleClick(object sender, EventArgs e)
        {
            // Shows the form.
            Show();

            // Restores the form to its normal state.
            this.WindowState = FormWindowState.Normal;

            // Hides the system tray icon and clears its tag.
            notifyIcon1.Visible = false;
            notifyIcon1.Tag = "";
        }

        private void logFileCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            // Updates the LogToFile setting based on the checkbox state.
            if (logFileCheckBox.Checked)
            {
                Properties.Settings.Default.LogToFile = true;
            }
            else
            {
                Properties.Settings.Default.LogToFile = false;
            }

            // Saves the settings if the auto-save checkbox is checked.
            if (saveAutoCheckBox.Checked)
            {
                Properties.Settings.Default.Save();
            }
        }

        private void tabControl1_Selected(object sender, TabControlEventArgs e)
        {
            // Checks which tab page has been selected.
            if (e.TabPage == cmdHomePage)
            {
                // Stops and disposes of the scroll timer.
                scrollTimer.Stop();
                scrollTimer.Dispose();

                titleLabel.Text = Translator.Get(proVersion
                    ? "Copy That v1.0 Pro By: Havoc - Home"
                    : "Copy That v1.0 By: Havoc - Home");

                // Saves settings if auto-save is enabled.
                if (saveAutoCheckBox.Checked)
                {
                    Properties.Settings.Default.Save();
                }
            }

            // Handles the case when the Multithread tab is selected.
            else if (e.TabPage == cmdMultithread)
            {
                // Stops and disposes of the scroll timer.
                scrollTimer.Stop();
                scrollTimer.Dispose();
                titleLabel.Text = Translator.Get(proVersion
                    ? "Copy That v1.0 Pro By: Havoc - Multi-Threading"
                    : "Copy That v1.0 By: Havoc - Multi-Threading");

                // Saves settings if auto-save is enabled.
                if (saveAutoCheckBox.Checked)
                {
                    Properties.Settings.Default.Save();
                }
            }

            // Handles the case when the Exclusions tab is selected.
            else if (e.TabPage == cmdExclusions)
            {
                // Sets the selected tab.
                tabControl1.SelectedTab = cmdExclusions;
                // Stops and disposes of the scroll timer.
                scrollTimer.Stop();
                scrollTimer.Dispose();

                titleLabel.Text = Translator.Get(proVersion
                    ? "Copy That v1.0 Pro By: Havoc - Allow/Exclude"
                    : "Copy That v1.0 By: Havoc - Allow/Exclude");

                // Saves settings if auto-save is enabled.
                if (saveAutoCheckBox.Checked)
                {
                    Properties.Settings.Default.Save();
                }
            }


            // Handles the case when the Skipped Files tab is selected.
            else if (e.TabPage == cmdSkipPage)
            {
                // Sets the selected tab.
                tabControl1.SelectedTab = cmdSkipPage;
                // Stops and disposes of the scroll timer.
                scrollTimer.Stop();
                scrollTimer.Dispose();

                titleLabel.Text = Translator.Get(proVersion
                    ? "Copy That v1.0 Pro By: Havoc - Skipped Files/Dirs."
                    : "Copy That v1.0 By: Havoc - Skipped Files/Dirs.");

                // Saves settings if auto-save is enabled.
                if (saveAutoCheckBox.Checked)
                {
                    Properties.Settings.Default.Save();
                }
            }
            // Handles the case when the About tab is selected.
            else if (e.TabPage == cmdAboutPage)
            {
                // Sets the selected tab.
                tabControl1.SelectedTab = cmdAboutPage;
                // Stops and disposes of the scroll timer.
                scrollTimer.Stop();
                scrollTimer.Dispose();

                // Defines logo dimensions and padding.
                int logoWidth = 300;
                int logoHeight = 300;
                int logoPadding = 10;

                // Sets the size and size mode for the PictureBoxes.
                copyThatPB.Width = logoWidth;
                copyThatPB.Height = logoHeight;
                copyThatPB.SizeMode = PictureBoxSizeMode.Zoom;

                havocSoftwarePB.Width = logoWidth;
                havocSoftwarePB.Height = logoHeight;
                havocSoftwarePB.SizeMode = PictureBoxSizeMode.Zoom;

                // Calculates the total width of the logos and the starting X position to center them.
                int totalLogoWidth = (logoWidth * 2) + logoPadding;
                int startX = (aboutPanel.Width - totalLogoWidth) / 2;

                // Positions the first logo.
                copyThatPB.Left = startX;
                copyThatPB.Top = aboutPanel.Height;

                // Positions the second logo with padding.
                havocSoftwarePB.Left = startX + logoWidth + logoPadding;
                havocSoftwarePB.Top = aboutPanel.Height;


                // Configures the About label properties.
                aboutLabel.AutoSize = true;
                aboutLabel.MaximumSize = new Size(aboutPanel.Width - 20, 0);
                aboutLabel.TextAlign = ContentAlignment.TopCenter;

                // Positions the About label.
                aboutLabel.Left = (aboutPanel.Width - aboutLabel.Width) / 2;
                aboutLabel.Top = copyThatPB.Top + logoHeight + 10;

                // Adds controls to the panel if they aren't already there.
                if (!aboutPanel.Controls.Contains(copyThatPB))
                    aboutPanel.Controls.Add(copyThatPB);
                if (!aboutPanel.Controls.Contains(havocSoftwarePB))
                    aboutPanel.Controls.Add(havocSoftwarePB);
                if (!aboutPanel.Controls.Contains(aboutLabel))
                    aboutPanel.Controls.Add(aboutLabel);

                // Initializes and starts a new scroll timer.
                scrollTimer = new Timer();
                scrollTimer.Interval = 25;
                scrollTimer.Tick += ScrollTimer_Tick;
                scrollTimer.Start();

                // Saves settings if auto-save is enabled.
                if (saveAutoCheckBox.Checked)
                {
                    Properties.Settings.Default.Save();
                }
            }

            // Handles the case when the Settings tab is selected.
            else if (e.TabPage == cmdSettingsPage)
            {
                // Stops and disposes of the scroll timer.
                scrollTimer.Stop();
                scrollTimer.Dispose();

                // Calls a method to update saved checkboxes.
                editSavedCheckBoxes();
                titleLabel.Text = Translator.Get(proVersion
                    ? "Copy That v1.0 Pro By: Havoc - Settings"
                    : "Copy That v1.0 By: Havoc - Settings");


                //ApplyThemeSettings();

                // Sets the back color of directional labels to transparent.
                nLabel.BackColor = System.Drawing.Color.Transparent;
                neLabel.BackColor = System.Drawing.Color.Transparent;
                eLabel.BackColor = System.Drawing.Color.Transparent;
                seLabel.BackColor = System.Drawing.Color.Transparent;
                sLabel.BackColor = System.Drawing.Color.Transparent;
                swLabel.BackColor = System.Drawing.Color.Transparent;
                wLabel.BackColor = System.Drawing.Color.Transparent;
                nwLabel.BackColor = System.Drawing.Color.Transparent;

                // Saves settings if auto-save is enabled.
                if (saveAutoCheckBox.Checked)
                {
                    Properties.Settings.Default.Save();
                }
            }
            // Handles the case when the Copy History tab is selected.
            else if (e.TabPage == cmdCopyHistory)
            {

                // Sets the selected tab.
                tabControl1.SelectedTab = cmdCopyHistory;
                // Stops and disposes of the scroll timer.
                scrollTimer.Stop();
                scrollTimer.Dispose();

                titleLabel.Text = Translator.Get(proVersion
                    ? "Copy That v1.0 Pro By: Havoc - History"
                    : "Copy That v1.0 By: Havoc - History");

                // Saves settings if auto-save is enabled.
                if (saveAutoCheckBox.Checked)
                {
                    Properties.Settings.Default.Save();
                }
            }
        }



        /// <summary>
        /// Form class that monitors clipboard operations and detects when files are about to be pasted
        /// from Windows Explorer or Desktop. Displays notifications via system tray and message boxes.
        /// </summary>
        public class FilePasteMonitor : Form
        {
            // Constant for the Windows message indicating a clipboard update.
            private const int WM_CLIPBOARDUPDATE = 0x031D;
            private IntPtr _clipboardViewerNext;

            // Imports external functions from user32.dll for clipboard listener.
            [DllImport("user32.dll", SetLastError = true)]
            private static extern bool AddClipboardFormatListener(IntPtr hwnd);

            [DllImport("user32.dll", SetLastError = true)]
            private static extern bool RemoveClipboardFormatListener(IntPtr hwnd);

            [DllImport("user32.dll")]
            private static extern IntPtr GetForegroundWindow();

            [DllImport("user32.dll", CharSet = CharSet.Auto)]
            private static extern int GetClassName(IntPtr hWnd, StringBuilder lpClassName, int nMaxCount);

            /// <summary>
            /// Initializes a new instance of the FilePasteMonitor class.
            /// Registers for clipboard updates and creates a system tray icon.
            /// </summary>
            public FilePasteMonitor()
            {
                // Registers the form to listen for clipboard updates.
                AddClipboardFormatListener(this.Handle);

                // Creates a system tray icon.
                var trayIcon = new NotifyIcon
                {
                    Icon = SystemIcons.Information,
                    Text = Translator.Get("File Paste Monitor"),
                    Visible = true
                };

                // Sets up a context menu for the tray icon with an "Exit" option.
                trayIcon.ContextMenuStrip = new ContextMenuStrip();
                trayIcon.ContextMenuStrip.Items.Add(Translator.Get("Exit"), null, (s, e) => Application.Exit());
            }

            /// <summary>
            /// Processes Windows messages, specifically handling clipboard update notifications.
            /// </summary>
            /// <param name="m">The Windows message to process</param>
            protected override void WndProc(ref System.Windows.Forms.Message m)
            {
                // Overrides the Windows procedure to handle custom messages.
                // If the message is a clipboard update, it checks the clipboard for files.
                if (m.Msg == WM_CLIPBOARDUPDATE)
                {
                    CheckClipboardForFiles();
                }
                // Calls the base method to handle other messages.
                base.WndProc(ref m);
            }

            /// <summary>
            /// Checks the clipboard for file drop operations and displays a notification
            /// if files are being pasted from Explorer or Desktop.
            /// </summary>
            private void CheckClipboardForFiles()
            {
                try
                {
                    // Checks if the clipboard contains a file drop list and if the active window is Explorer or the Desktop.
                    if (Clipboard.ContainsFileDropList() && IsExplorerOrDesktopActive())
                    {
                        // Gets the list of files from the clipboard.
                        StringCollection files = Clipboard.GetFileDropList();
                        StringBuilder fileList = new StringBuilder();
                        fileList.AppendLine("Files about to be pasted:");

                        // Iterates through the list of files and appends them to a string builder.
                        foreach (string file in files)
                        {
                            fileList.AppendLine($"- {System.IO.Path.GetFileName(file)}");
                            fileList.AppendLine($"  (From: {System.IO.Path.GetDirectoryName(file)})");
                        }

                        // Displays a message box with the list of files.
                        MessageBox.Show(fileList.ToString(),
               Translator.Get("Paste Operation Detected"),
               MessageBoxButtons.OK,
               MessageBoxIcon.Information);
                    }
                }
                catch (Exception ex)
                {
                    // Writes an error message to the debug output if an exception occurs.
                    Debug.WriteLine($"Error checking clipboard: {ex.Message}");
                }
            }

            /// <summary>
            /// Determines whether the currently active window is Windows Explorer or Desktop.
            /// </summary>
            /// <returns>True if the active window is Explorer or Desktop, otherwise false</returns>
            private bool IsExplorerOrDesktopActive()
            {
                // Gets a handle to the foreground window.
                IntPtr foregroundWindow = GetForegroundWindow();
                // Returns false if no foreground window is found.
                if (foregroundWindow == IntPtr.Zero)
                    return false;

                // Gets the class name of the foreground window.
                StringBuilder className = new StringBuilder(256);
                GetClassName(foregroundWindow, className, className.Capacity);

                // Checks if the window class name is associated with Explorer or the Desktop.
                string windowClass = className.ToString();
                return windowClass.Contains("ExplorerWClass") ||
                   windowClass.Contains("Progman") ||
                   windowClass.Contains("CabinetWClass");
            }

            /// <summary>
            /// Clean up any resources being used, specifically removing clipboard monitoring.
            /// </summary>
            /// <param name="disposing">true if managed resources should be disposed; otherwise, false</param>
            protected override void Dispose(bool disposing)
            {
                // Removes the form from the clipboard listener list.
                RemoveClipboardFormatListener(this.Handle);
                // Calls the base Dispose method.
                base.Dispose(disposing);
            }
        }


        private void autoScrollCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            // If the DataGridView is empty, unchecks the auto-scroll checkbox and returns.
            if (filesDataGridView.Rows.Count == 0)
            {
                autoScrollCheckBox.Checked = false;
                return;
            }

            // If auto-scroll is being enabled, scroll to and select the first row
            if (autoScrollCheckBox.Checked)
            {
                // Start from the first row and ensure it's visible
                filesDataGridView.FirstDisplayedScrollingRowIndex = 0;
                filesDataGridView.ClearSelection();
                filesDataGridView.Rows[0].Selected = true;
                _walkCounter = 0; // Reset counter if needed
            }
        }

        /// <summary>
        /// Attaches custom sorting functionality to the BytesRaw column in the files DataGridView.
        /// Configures the column for programmatic sorting and prepares it for custom comparison logic.
        /// </summary>
        private void AttachCustomSort()
        {
            // Gets the "BytesRaw" column.
            var col = filesDataGridView.Columns["BytesRaw"];
            // If the column is not found, returns.
            if (col == null) return;

            // Sets the sort mode for the column to be handled programmatically.
            col.SortMode = DataGridViewColumnSortMode.Programmatic;
        }

        /// <summary>
        /// Custom comparer class for sorting DataGridView rows based on file size and directory status.
        /// Implements IComparer to provide custom sorting logic for file items.
        /// </summary>
        private sealed class FileRowComparer : System.Collections.IComparer
        {
            // Stores the sort direction.
            private readonly ListSortDirection _dir;

            /// <summary>
            /// Initializes a new instance of the FileRowComparer with the specified sort direction.
            /// </summary>
            /// <param name="dir">The direction to sort (ascending or descending)</param>
            public FileRowComparer(ListSortDirection dir) => _dir = dir;

            /// <summary>
            /// Compares two DataGridView rows based on directory status and file size.
            /// Directories are always sorted before files, then files are sorted by size.
            /// </summary>
            /// <param name="x">The first DataGridViewRow to compare</param>
            /// <param name="y">The second DataGridViewRow to compare</param>
            /// <returns>
            /// Less than zero if x is less than y, zero if equal, greater than zero if x is greater than y
            /// </returns>
            public int Compare(object x, object y)
            {
                // Casts the objects to DataGridViewRows.
                var row1 = (DataGridViewRow)x;
                var row2 = (DataGridViewRow)y;

                // Gets the data-bound items.
                var item1 = (FileInfoWrapper)row1.DataBoundItem;
                var item2 = (FileInfoWrapper)row2.DataBoundItem;

                // Sorts directories first.
                if (item1.IsDirectory && !item2.IsDirectory) return -1;
                if (!item1.IsDirectory && item2.IsDirectory) return 1;

                // Gets the raw byte sizes.
                long v1 = item1.BytesRaw;
                long v2 = item2.BytesRaw;

                // Compares the byte sizes.
                int cmp = v1.CompareTo(v2);
                // Returns the comparison result based on the sort direction.
                return _dir == ListSortDirection.Ascending ? cmp : -cmp;
            }
        }

        private void filesDataGridView_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            // If the DataGridView is empty or the wrong column is clicked, returns.
            if (filesDataGridView.Rows.Count == 0) return;
            if (e.ColumnIndex != 3) return; // Size column

            // Sorts the file list: directories first, then by size.
            var sorted = _fileList
        .OrderBy(item => item.IsDirectory ? 0 : 1)
        .ThenBy(item => sortAscendingBytes ? item.BytesRaw : -item.BytesRaw)
        .ToList();

            // Clears the original list and adds the sorted items.
            _fileList.Clear();
            foreach (var item in sorted)
            {
                _fileList.Add(item);
            }

            // Refreshes the data bindings and toggles the sort direction.
            _bindingSource.ResetBindings(false);
            sortAscendingBytes = !sortAscendingBytes;
        }

        /// <summary>
        /// Populates and standardizes the byte size information for all files in both main and export lists.
        /// Converts between formatted size strings (e.g., "1.5 MB") and raw byte values as needed.
        /// </summary>
        private void PopulateBytesRawAndFormat()
        {
            // Iterates through the main file list.
            foreach (var item in _fileList)
            {
                // Skips directories.
                if (item.IsDirectory) continue;

                // If the raw bytes are not set, it tries to parse the formatted size string.
                if (item.BytesRaw == 0 && !string.IsNullOrWhiteSpace(item.FileSize))
                {
                    if (TryParseFormattedSize(item.FileSize, out long bytes))
                        item.BytesRaw = bytes;
                    // Tries to parse as a raw long if the formatted parsing fails.
                    else if (long.TryParse(item.FileSize, out bytes))
                        item.BytesRaw = bytes;
                }
                // Updates the formatted size string from the raw byte value.
                item.FileSize = FormatBytes(item.BytesRaw);
            }
            // Refreshes the binding for the main list.
            _bindingSource.ResetBindings(false);

            // Repeats the process for the export list.
            foreach (var item in _exportList)
            {
                if (item.IsDirectory) continue;

                if (item.BytesRaw == 0 && !string.IsNullOrWhiteSpace(item.FileSize))
                {
                    if (TryParseFormattedSize(item.FileSize, out long bytes))
                        item.BytesRaw = bytes;
                    else if (long.TryParse(item.FileSize, out bytes))
                        item.BytesRaw = bytes;
                }
                item.FileSize = FormatBytes(item.BytesRaw);
            }
            // Refreshes the binding for the export list.
            _bindingSourceExport.ResetBindings(false);
        }

        private void skipButton_Click(object sender, EventArgs e)
        {
            // Check if there are still files left to process in the list.
            if (_currentFileIndex < _fileList.Count)
            {
                // Get the file wrapper object for the current file being processed.
                FileInfoWrapper currentFileWrapper = _fileList[_currentFileIndex];
                // Extract the full source path and the file name.
                string currentSourceFile = currentFileWrapper.FilePath;
                string fileName = System.IO.Path.GetFileName(currentSourceFile);

                // Check if a destination folder has been selected.
                if (this.targetPaths == null || this.targetPaths.Count == 0)
                {
                    // Show a user-friendly error message box.
                    MessageBox.Show(
    Translator.Get("No destination folder selected. Cannot skip and log file with intended destination."),
    Translator.Get("Skip Error"),
    MessageBoxButtons.OK,
    MessageBoxIcon.Error);
                    // Update the status of the file in the list to "Skipped (No Target)".
                    UpdateFileStatus(_fileList[_currentFileIndex], Translator.Get("Skipped (No Target)"));
                    // Increment the counters for files processed and skipped.
                    System.Threading.Interlocked.Increment(ref _processedFiles);
                    System.Threading.Interlocked.Increment(ref _totalFilesSkipped);
                    // Move to the next file in the list.
                    _currentFileIndex++;
                    return;
                }
                // Get the first target directory from the list of target paths.
                string targetRoot = this.targetPaths.First();
                // Determine the intended destination path for the current file.
                string intendedDestinationFile = GetTargetDirectory(currentSourceFile, targetRoot, currentFileWrapper.IsDirectory, _currentSourceRootPath);

                // If the file is not a directory and a file with the same name exists at the destination, attempt to securely delete it.
                if (!currentFileWrapper.IsDirectory && File.Exists(intendedDestinationFile))
                {
                    try
                    {
                        // Call a method to securely delete the file.
                        DoDSecureDelete(intendedDestinationFile);
                    }
                    catch (Exception delEx)
                    {
                        // Log a warning if the secure deletion fails.
                        LogWarning(string.Format(
                            Translator.Get("Could not securely delete partial file {0}: {1}"),
                            intendedDestinationFile,
                            delEx.Message));
                    }
                }

                // If the intended destination file path is null or empty, log a "No Destination" skip reason.
                if (string.IsNullOrEmpty(intendedDestinationFile))
                {
                    AddToSkippedFiles(
                        Translator.Get("Skipped: No Destination"),
                        currentFileWrapper.FileName,
                        currentFileWrapper.BytesRaw,
                        currentFileWrapper.FilePath,
                        Translator.Get("N/A (empty target)"),
                        Translator.Get("Destination path not determined")
                    );
                }
                else
                {
                    AddToSkippedFiles(
                        Translator.Get("Skipped By User"),
                        currentFileWrapper.FileName,
                        currentFileWrapper.BytesRaw,
                        currentFileWrapper.FilePath,
                        intendedDestinationFile,
                        ""
                    );
                }

                // Update the file status to "Skipped" in the UI.
                UpdateFileStatus(_fileList[_currentFileIndex], Translator.Get("Skipped"));
                // Increment the total files processed and skipped counters.
                System.Threading.Interlocked.Increment(ref _processedFiles);
                System.Threading.Interlocked.Increment(ref _totalFilesSkipped);

                // Move to the next file.
                _currentFileIndex++;
            }
        }

        /// <summary>
        /// Overloaded method to simplify logging and skipping when an exception occurs.
        /// Logs the exception details and adds the file to the skipped files list.
        /// </summary>
        /// <param name="item">The file item wrapper containing file information</param>
        /// <param name="ex">The exception that caused the file to be skipped</param>
        private void LogAndSkip(FileInfoWrapper item, Exception ex)
            // Overloaded method to simplify logging and skipping when an exception occurs.
            => LogAndSkip(item, $"{ex.GetType().Name}: {ex.Message}", ex);

        /// <summary>
        /// Logs a file skip operation, updates counters, and refreshes UI elements.
        /// Handles both exception-based and reason-based skipping.
        /// </summary>
        /// <param name="item">The file item wrapper containing file information</param>
        /// <param name="reason">The reason why the file was skipped</param>
        /// <param name="ex">Optional exception that caused the skip</param>
        private void LogAndSkip(FileInfoWrapper item, string reason, Exception ex = null)
        {
            // Determine the destination path for the item.
            string dst = GetDestinationPath(item, _currentTargetPaths.FirstOrDefault() ?? "");

            // Add the file to the skipped files list with the given reason.
            AddToSkippedFiles(reason,
                item.FileName,
                item.BytesRaw,
                item.FilePath,
                dst,
                ex?.Message ?? reason);
            // Increment the total number of skipped and failed files.
            _totalFilesSkipped++;
            // Update the UI label showing the total number of skipped files.
            totalSkippedLabel.Text = string.Format(
    Translator.Get("Total Skipped Files: {0}"),
    _totalFilesSkipped.ToString("N0"));

            UpdateFileStatus(item, Translator.Get("Failed"));
            _totalFilesFailed++;
        }

        /// <summary>
        /// Updates overall progress labels on the UI thread with current operation statistics.
        /// Displays processed file count and bytes processed vs total bytes.
        /// </summary>
        private void UpdateOverallLabels()
        {
            // Check if an Invoke is required to update the UI from a different thread.
            if (InvokeRequired) { Invoke(new Action(UpdateOverallLabels)); return; }

            // Update the file count label with the number of processed files out of the grand total.
            fileCountOnLabel.Text = string.Format(Translator.Get("File Count: {0} Out of {1}"),
                _processedFiles.ToString("N0"),
                _grandTotalFileCount.ToString("N0"));
            // Update the label showing total bytes copied, moved, or deleted.
            //totalCopiedProgressLabel.Text = $"Total C/M/D: {FormatBytes(_totalBytesProcessed)} / {FormatBytes(_totalBytesToProcess)}";
        }

        /// <summary>
        /// Reports file copy progress to the UI with percentage completion and byte counts.
        /// Ensures thread-safe UI updates through Invoke if necessary.
        /// </summary>
        /// <param name="pct10k">Progress percentage in hundredths (e.g., 5000 = 50.00%)</param>
        /// <param name="fileName">The name of the file being processed</param>
        /// <param name="bytesDone">The number of bytes processed so far</param>
        /// <param name="bytesTotal">The total number of bytes to process</param>
        private void ReportFileProgress(int pct10k, string fileName,
                    long bytesDone, long bytesTotal)
        {
            // Check if an Invoke is required to update the UI.
            if (InvokeRequired)
            {
                Invoke(new Action(() => ReportFileProgress(pct10k, fileName,
                                     bytesDone, bytesTotal)));
                return;
            }

            modernFile.Value = Math.Min((int)(pct10k * 100), modernFile.Maximum);
            modernFile.Refresh();

            // Update the label with the percentage of the current file processed.
            modernFile.Text = $"{pct10k / 100.0:F2}%";
            modernFile.Refresh();

        }

        private void _copyWorker_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            // Check if the progress information is of type ProgressInfo.
            if (e.UserState is ProgressInfo pi)
            {
                // Ensure the total progress value doesn't exceed the maximum.
                pi.TotalProgress = Math.Min(pi.TotalProgress, modernTotal.Maximum);

                // Update the UI based on the progress information.
                UpdateUI(pi);
                // Update the file count labels.
                UpdateFileCountLabels();
            }
            else
            {
                // If not a ProgressInfo object, use the progress percentage.
                int pct = Math.Min(e.ProgressPercentage, modernTotal.Maximum);

                modernTotal.Value = pct;
                modernTotal.Refresh();

                modernTotal.Text = $"{(pct / 100.0):F2}%";
                modernTotal.Refresh();
            }
        }

        public class ProgressInfo
        {
            // A class to hold various progress information.
            // Overall progress for the main progress bar (0-10000 scale).
            public int TotalProgress { get; set; }
            // Total number of files planned to be processed.
            public long TotalFiles { get; set; }
            // Number of files that have been processed so far.
            public int ProcessedFiles { get; set; }
            // Total bytes expected to be processed for all files.
            public long TotalBytes { get; set; }
            // Total bytes that have been processed across all files.
            public long ProcessedBytes { get; set; }
            // Alternative property names for total and processed bytes.
            public long TotalBytesToProcess { get; set; }
            public long BytesProcessed { get; set; }
            // Properties for current file progress.
            public string CurrentFileName { get; set; }
            public long CurrentFileBytesProcessed { get; set; }
            public long CurrentFileTotalBytes { get; set; }
        }

        /// <summary>
        /// Logs an error message with optional source path, target path, and exception details to a log file.
        /// </summary>
        /// <param name="message">The main error message to log</param>
        /// <param name="sourcePath">Optional source file path related to the error</param>
        /// <param name="targetPath">Optional target file path related to the error</param>
        /// <param name="exceptionMessage">Optional exception message or details</param>
        private void LogError(string message, string sourcePath = "", string targetPath = "", string exceptionMessage = "")
        {
            // Create a timestamped log entry string with the provided message.
            string logEntry = string.Format(Translator.Get("[{0}] ERROR: {1}"),
                                            DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"),
                                            message);

            // Append source and target paths to the log entry if they are provided.
            if (!string.IsNullOrEmpty(sourcePath))
                logEntry += string.Format(Translator.Get("  Source: {0}"), sourcePath);

            if (!string.IsNullOrEmpty(targetPath))
                logEntry += string.Format(Translator.Get("  Target: {0}"), targetPath);

            // Append exception details if they are provided.
            if (!string.IsNullOrEmpty(exceptionMessage))
                logEntry += string.Format(Translator.Get("  Details: {0}"), exceptionMessage);

            // Define the path for the log file.
            string logFilePath = System.IO.Path.Combine(System.Windows.Forms.Application.StartupPath, "application_errors.log");

            try
            {
                // Append the log entry to the log file.
                File.AppendAllText(logFilePath, logEntry + Environment.NewLine + Environment.NewLine);
            }
            catch (Exception ex)
            {
                // If logging fails, write a debug message to the output.
                Debug.WriteLine($"Failed to write to log file '{logFilePath}': {ex.Message}");
                Debug.WriteLine($"Original Log Entry: {logEntry}");
            }
        }

        /// <summary>
        /// Resets the status of all files in the file list to "Pending..." and updates the UI.
        /// </summary>
        private void ResetAllFileStatuses()
        {
            foreach (var f in _fileList)
                f.Status = Translator.Get("Pending...");

            // Make sure the grid redraws with the new values
            Invoke(() =>
            {
                filesDataGridView.Refresh();
            });

            Invoke(() =>
            {
                if (filesDataGridView.Rows.Count > 0)
                    filesDataGridView.ClearSelection();
            });
        }

        /// <summary>
        /// Updates the status of a specific file in the file list.
        /// </summary>
        /// <param name="fileInfo">The file information wrapper containing the file path</param>
        /// <param name="status">The new status to set for the file</param>
        private void UpdateFileStatus(FileInfoWrapper fileInfo, string status)
        {
            // Find the file in the file list by its file path.
            var itemToUpdate = _fileList.FirstOrDefault(f => f.FilePath == fileInfo.FilePath);
            // If the file is found, update its status.
            if (itemToUpdate != null)
            {
                itemToUpdate.Status = status;
            }
        }

        /// <summary>
        /// Adds a file to the skipped files list with detailed information about why it was skipped.
        /// </summary>
        /// <param name="reason">The reason why the file was skipped</param>
        /// <param name="fileName">The name of the skipped file</param>
        /// <param name="rawFileSize">The size of the file in bytes</param>
        /// <param name="sourceFilePath">The full source file path</param>
        /// <param name="destinationFilePath">The intended destination file path</param>
        /// <param name="errorMessage">Optional error message details</param>
        private void AddToSkippedFiles(string reason, string fileName, long rawFileSize, string sourceFilePath, string destinationFilePath, string errorMessage = "")
        {
            // Format the raw file size into a human-readable string.
            string formattedFileSize = FormatBytes(rawFileSize);

            // Check if an Invoke is required to update the UI from a different thread.
            if (filesDataGridView.InvokeRequired)
            {
                filesDataGridView.Invoke(new Action(() =>
                {
                    // Add a new SkippedFileInfo object to the list.
                    _skippedFilesList.Add(new SkippedFileInfo
                    {
                        Reason = reason,
                        FileName = fileName,
                        FileSize = formattedFileSize,
                        SourceFilePath = sourceFilePath,
                        DestinationFilePath = destinationFilePath,
                        ErrorMessage = errorMessage
                    });
                }));
            }
            else
            {
                // If no Invoke is needed, add the new SkippedFileInfo object directly.
                _skippedFilesList.Add(new SkippedFileInfo
                {
                    Reason = reason,
                    FileName = fileName,
                    FileSize = formattedFileSize,
                    SourceFilePath = sourceFilePath,
                    DestinationFilePath = destinationFilePath,
                    ErrorMessage = errorMessage
                });
            }
        }

        /// <summary>
        /// Placeholder method for file integrity verification. Currently always returns true.
        /// </summary>
        /// <param name="sourceFile">The source file path</param>
        /// <param name="destinationFile">The destination file path</param>
        /// <returns>Always returns true (verification not implemented)</returns>
        private bool VerifyFileIntegrity(string sourceFile, string destinationFile)
        {
            // Log a debug message indicating the start of file integrity verification.
            Debug.WriteLine($"Verifying integrity: {sourceFile} vs {destinationFile}");
            // This is a placeholder; the method currently always returns true.
            return true;
        }

        /// <summary>
        /// Updates drive space information for all target paths and displays it in the UI.
        /// </summary>
        private void UpdateDriveSpaceInfo()
        {
            try
            {
                // Check if there are target paths to update drive space information for.
                if (this.targetPaths != null && this.targetPaths.Any())
                {
                    // Get a distinct list of drive roots from the target paths.
                    var driveRoots = this.targetPaths
                        .Select(tp => System.IO.Path.GetPathRoot(tp))
                        .Where(r => !string.IsNullOrEmpty(r))
                        .Distinct(StringComparer.OrdinalIgnoreCase)
                        .ToList();

                    // If no drive roots are found, set the label to indicate an invalid path.
                    if (driveRoots.Count == 0)
                    {
                        SetDriveInfoLabel(Translator.Get("Invalid Target Path"));
                        return;
                    }

                    long totalSpaceAll = 0;
                    long usedSpaceAll = 0;
                    var driveNames = new List<string>();

                    // Iterate through each unique drive root.
                    foreach (var root in driveRoots)
                    {
                        try
                        {
                            // Create a DriveInfo object for the current drive.
                            DriveInfo drive = new DriveInfo(root);

                            // Skip drives that are not ready (e.g., disconnected network drives).
                            if (!drive.IsReady)
                            {
                                continue;
                            }

                            // Get the total and available free space.
                            long totalSpace = drive.TotalSize;
                            long availableFreeSpace = drive.AvailableFreeSpace;
                            // Calculate used space and add it to the totals.
                            long usedSpace = totalSpace - availableFreeSpace;

                            totalSpaceAll += totalSpace;
                            usedSpaceAll += usedSpace;

                            // Add the drive name to the list.
                            string driveName = drive.Name.TrimEnd(System.IO.Path.DirectorySeparatorChar);
                            driveNames.Add($"{driveName} ({drive.DriveType})");
                        }
                        catch (Exception ex)
                        {
                            // Log an error if reading drive information fails.
                            LogError(string.Format(Translator.Get("Error reading drive '{0}': {1}"), root, ex.Message));
                        }
                    }

                    // If at least one drive name was found, update the UI labels.
                    if (driveNames.Count > 0)
                    {
                        string drivesCombined = string.Join(", ", driveNames);
                        string text =
string.Format(Translator.Get("Total Space ({0}): {1} / {2}"),
                                drivesCombined,
                                FormatBytes(usedSpaceAll),
                                FormatBytes(totalSpaceAll));

                        // Check and use InvokeRequired to update the labels safely.
                        if (totalHDSpaceLeftLabel != null)
                        {
                            if (totalHDSpaceLeftLabel.InvokeRequired)
                            {
                                totalHDSpaceLeftLabel.Invoke(new Action(() =>
                                {
                                    totalHDSpaceLeftLabel.Text = text;
                                    totalSpaceMultiLabel.Text = text;
                                }));
                            }
                            else
                            {
                                totalHDSpaceLeftLabel.Text = text;
                                totalSpaceMultiLabel.Text = text;
                            }
                        }
                    }
                    // If no drive names were found, indicate that no drives are ready.
                    else
                    {
                        SetDriveInfoLabel(Translator.Get("No drives ready"));
                    }
                }
                // If no target paths are set, prompt the user to select one.
                else
                {
                    SetDriveInfoLabel(Translator.Get("Select a Destination to see Drive Space"));
                }
            }
            catch (Exception ex)
            {
                // Log any exceptions that occur during the process.

                LogError(string.Format(Translator.Get("Error updating drive space information: {0}"), ex.Message));
                // Set the UI label to indicate an error.

                SetDriveInfoLabel(Translator.Get("Error Getting Drive Space"));
            }
        }

        /// <summary>
        /// Safely updates the drive information label text from any thread.
        /// </summary>
        /// <param name="text">The text to display in the drive information label</param>
        private void SetDriveInfoLabel(string text)
        {
            // Check if the totalHDSpaceLeftLabel object exists.
            if (totalHDSpaceLeftLabel != null)
            {
                // Use InvokeRequired to safely update the label's text from a different thread.
                if (totalHDSpaceLeftLabel.InvokeRequired)
                {
                    totalHDSpaceLeftLabel.Invoke(new Action(() =>
                    {
                        totalHDSpaceLeftLabel.Text = text;
                        totalSpaceMultiLabel.Text = text;
                    }));
                }
                else
                {
                    // If not required, set the text directly.
                    totalHDSpaceLeftLabel.Text = text;
                    totalSpaceMultiLabel.Text = text;
                }
            }
        }

        /// <summary>
        /// Creates the target directory structure by replicating the source directory hierarchy.
        /// </summary>
        /// <param name="sourceDirs">List of source directory paths to replicate</param>
        /// <param name="targetDirs">List of target directory paths where structure should be created</param>
        private void CreateTargetDirectoryStructure(List<string> sourceDirs, List<string> targetDirs)
        {
            // Check if source or target directories are null or empty.
            if (sourceDirs == null || !sourceDirs.Any() || targetDirs == null || !targetDirs.Any())
            {
                // Log an error if the directory paths are not specified.
                LogError(Translator.Get("Cannot create target directory structure: Source or target directories are not specified."));
                return;
            }

            // Get the base target directory.
            string targetBaseDir = targetDirs[0];

            // Loop through each source base path.
            foreach (string sourceBasePath in sourceDirs)
            {
                // Check if the source path exists.
                if (!Directory.Exists(sourceBasePath) && !File.Exists(sourceBasePath))
                {
                    // Log an error if the source path does not exist.
                    LogError($"Source path does not exist: '{sourceBasePath}'");
                    continue;
                }

                // Get the parent directory of the source path.
                string sourceBasePathParent = System.IO.Path.GetDirectoryName(sourceBasePath.TrimEnd(System.IO.Path.DirectorySeparatorChar, System.IO.Path.AltDirectorySeparatorChar));

                // If the parent path is empty, get the drive root.
                if (string.IsNullOrEmpty(sourceBasePathParent))
                {
                    sourceBasePathParent = System.IO.Path.GetPathRoot(sourceBasePath);
                }

                // Use a Stack to manage directories to process.
                Stack<string> directoriesToProcess = new Stack<string>();

                // Push the source base path onto the stack if it's a directory.
                if (Directory.Exists(sourceBasePath))
                {
                    directoriesToProcess.Push(sourceBasePath);
                }
                // If it's a file, get its parent directory.
                else if (File.Exists(sourceBasePath))
                {
                    string parentOfFile = System.IO.Path.GetDirectoryName(sourceBasePath);
                    if (!string.IsNullOrEmpty(parentOfFile))
                    {
                        // Note: This section appears to have incomplete logic
                    }
                }

                // Process directories from the stack until it is empty.
                while (directoriesToProcess.Count > 0)
                {
                    // Pop the next directory to process.
                    string currentSourceDir = directoriesToProcess.Pop();

                    // Determine the relative path and combine it with the target base directory.
                    string relativePath = currentSourceDir.Substring(sourceBasePathParent.Length).TrimStart(System.IO.Path.DirectorySeparatorChar, System.IO.Path.AltDirectorySeparatorChar);
                    string currentTargetDir = System.IO.Path.Combine(targetBaseDir, relativePath);

                    // If the target directory does not exist, create it.
                    if (!Directory.Exists(currentTargetDir))
                    {
                        try
                        {
                            Directory.CreateDirectory(currentTargetDir);
                        }
                        catch (Exception ex)
                        {
                            LogError(string.Format(
                                Translator.Get("Failed to create directory '{0}': {1}"),
                                currentTargetDir,
                                ex.Message));
                        }
                    }
                    try
                    {
                        foreach (string subDir in Directory.GetDirectories(currentSourceDir))
                        {
                            directoriesToProcess.Push(subDir);
                        }
                    }
                    catch (UnauthorizedAccessException ex)
                    {
                        LogError(string.Format(
                            Translator.Get("Access denied to directory '{0}': {1}"),
                            currentSourceDir,
                            ex.Message));
                    }
                    catch (Exception ex)
                    {
                        LogError(string.Format(
                            Translator.Get("Error enumerating subdirectories in '{0}': {1}"),
                            currentSourceDir,
                            ex.Message));
                    }
                }
            }
        }

        private void MoveWorker_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            // Check if the totalCopiedProgressLabel object is valid and not disposed.
            if (totalCopiedProgressLabel != null && !totalCopiedProgressLabel.IsDisposed)
            {
                // Update the label text with the total bytes processed.
                totalCopiedProgressLabel.Text = string.Format(
    Translator.Get("Total C/M/D: {0} / {1}"),
    FormatBytes(_totalBytesProcessed),
    FormatBytes(_totalBytesToProcess));
            }
        }

        private void DeleteWorker_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            // Check if the totalCopiedProgressLabel object is valid and not disposed.
            if (totalCopiedProgressLabel != null && !totalCopiedProgressLabel.IsDisposed)
            {
                // Update the label text with the total bytes processed.
                totalCopiedProgressLabel.Text = string.Format(
     Translator.Get("Total C/M/D: {0} / {1}"),
     FormatBytes(_totalBytesProcessed),
     FormatBytes(_totalBytesToProcess));
            }
        }
        private void Worker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            // Reset the UI and variables related to progress.
            ResetProgressUIAndVariables();
            // Stop the UI update timer.
            _updateTimer.Stop();

            // Check if an error occurred during the worker's execution.
            if (e.Error != null)
            {
                // Show a message box with the error.
                MessageBox.Show(Translator.Get($"Copy operation completed with errors: {e.Error.Message}"), Translator.Get("Copy Error"), MessageBoxButtons.OK, MessageBoxIcon.Error);
                // Log the error.
                LogError($"Copy Worker Error: {e.Error}");
            }
            // Check if the operation was cancelled.
            else if (e.Cancelled)
            {
                // Show a message box confirming cancellation.
                MessageBox.Show(Translator.Get("Copy operation cancelled by user."), Translator.Get("Operation Cancelled"), MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            // If no errors or cancellations, show a summary of the completed operation.
            else
            {
                // Create a summary message string with the results.
                string summaryMessage = string.Format(
                    Translator.Get("Copy Operation Completed!\n\nFiles Copied: {0}\nFiles Skipped: {1}\nFiles Failed: {2}\nTotal Files Processed: {3} / {4}\nTotal Bytes Processed: {5} / {6}"),
                    _totalFilesCopied,
                    _totalFilesSkipped,
                    _totalFilesFailed,
                    _processedFiles,
                    _grandTotalFileCount.ToString("N0"),
                    FormatBytes(_totalBytesProcessed),
                    FormatBytes(_totalBytesToProcess));

                MessageBox.Show(summaryMessage, Translator.Get("Copy Operation Summary"), MessageBoxButtons.OK, MessageBoxIcon.Information);

                // If the verify checkbox is checked and the operation was "Copy Files", start file verification.
                if (verifyCheckBox != null && verifyCheckBox.Checked && copyMoveDeleteComboBox != null && copyMoveDeleteComboBox.SelectedItem != null && copyMoveDeleteComboBox.SelectedItem.ToString() == "Copy Files")
                {
                    VerifyFiles();
                }

            }
            // Always update the drive space information after the operation completes.
            UpdateDriveSpaceInfo();
        }

        /// <summary>
        /// Updates the file count label on the UI thread, displaying the current count out of total files.
        /// </summary>
        private void UpdateFileCountLabel()
        {
            // Check if Invoke is required and call the method recursively on the UI thread.
            if (InvokeRequired)
                Invoke((Action)UpdateFileCountLabel);
            // Otherwise, update the label directly.
            else
                fileCountOnLabel.Text = string.Format(Translator.Get("File Count: {0} Out of {1}"),
      _processedFiles.ToString("N0"),
      _grandTotalFileCount.ToString("N0"));
        }

        /// <summary>
        /// Calculates the target directory path for a source file or directory based on relative path calculation.
        /// </summary>
        /// <param name="sourcePath">The full path of the source file or directory</param>
        /// <param name="targetRootPath">The root target directory path</param>
        /// <param name="isDirectory">True if the source is a directory, false if it's a file</param>
        /// <param name="sourceRootPathForRelativeCalculation">Optional source root path for relative path calculation</param>
        /// <returns>The calculated target directory path</returns>
        public string GetTargetDirectory(string sourcePath,
                     string targetRootPath,
                     bool isDirectory,
                     string sourceRootPathForRelativeCalculation)
        {
            // Determine the source root path for calculating the relative path.
            string srcRoot = string.IsNullOrWhiteSpace(sourceRootPathForRelativeCalculation)
              ? (isDirectory ? sourcePath : System.IO.Path.GetDirectoryName(sourcePath))
              : sourceRootPathForRelativeCalculation;

            // Normalize the source root path.
            srcRoot = System.IO.Path.GetFullPath(srcRoot).TrimEnd(System.IO.Path.DirectorySeparatorChar,
                              System.IO.Path.AltDirectorySeparatorChar);

            // Get the full path of the source.
            string fullPath = System.IO.Path.GetFullPath(sourcePath);

            // Get the relative path from the source root to the full path.
            string relative = System.IO.Path.GetRelativePath(srcRoot, isDirectory ? fullPath
                                  : System.IO.Path.GetDirectoryName(fullPath));

            // Combine the target root path with the relative path to get the final destination.
            string targetDir = System.IO.Path.Combine(targetRootPath, relative);

            // Ensure the target path ends with a directory separator if it's a directory.
            if (isDirectory && !targetDir.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))
                targetDir += System.IO.Path.DirectorySeparatorChar;

            return targetDir;
        }

        /// <summary>
        /// Attempts to open a file with retry logic for handling temporary IO errors and access issues.
        /// </summary>
        /// <param name="path">The file path to open</param>
        /// <param name="mode">The file mode for opening</param>
        /// <param name="access">The file access permissions</param>
        /// <param name="share">The file sharing mode</param>
        /// <returns>A FileStream if successful, null if all retries fail or access is denied</returns>
        private FileStream RetryOpen(string path, FileMode mode, FileAccess access, FileShare share)
        {
            // Constants for the retry logic.
            const int MAX_RETRIES = 5;
            const int RETRY_DELAY_MS = 100;

            // Loop a maximum number of times to attempt to open the file.
            for (int i = 0; i <= MAX_RETRIES; i++)
            {
                try
                {
                    // Attempt to create and return a new FileStream.
                    return new FileStream(path, mode, access, share);
                }
                // Catch IOException and retry after a delay.
                catch (IOException) when (i < MAX_RETRIES)
                {
                    Thread.Sleep(RETRY_DELAY_MS * (i + 1));
                }
                // Catch UnauthorizedAccessException and handle the error.
                catch (UnauthorizedAccessException ex)
                {
                    // Call a method to handle the file error.
                    HandleErrorFile(
                        new FileInfoWrapper { FileName = System.IO.Path.GetFileName(path), FilePath = System.IO.Path.GetFullPath(path) },
                        string.Format(Translator.Get("Access denied: {0}"), ex.Message),
                        path);
                    // Increment the total failed files counter and return null.
                    Interlocked.Increment(ref _totalFilesFailed);
                    return null;
                }
            }
            // Return null if all retries fail.
            return null;
        }



        private async Task<FileStream> RetryOpenAsync(
        string path,
        FileMode mode,
        FileAccess access,
        FileShare share,
        int bufferSize,
        FileOptions options)
        {
            // Constants for the retry logic.
            const int MAX_RETRIES = 5;
            const int RETRY_DELAY_MS = 100;

            // Loop a maximum number of times to attempt to open the file.
            for (int i = 0; i <= MAX_RETRIES; i++)
            {
                try
                {
                    // Attempt to create and return a new FileStream with all parameters.
                    return new FileStream(path, mode, access, share, bufferSize, options);
                }
                // Catch IOException and retry after an ASYNCHRONOUS delay.
                catch (IOException) when (i < MAX_RETRIES)
                {
                    // ✅ Use await Task.Delay() instead of Thread.Sleep()
                    await Task.Delay(RETRY_DELAY_MS * (i + 1));
                }
                // Catch UnauthorizedAccessException and handle the error.
                catch (UnauthorizedAccessException ex)
                {
                    // Call a method to handle the file error.
                    HandleErrorFile(
                        new FileInfoWrapper { FileName = System.IO.Path.GetFileName(path), FilePath = System.IO.Path.GetFullPath(path) },
                        string.Format(Translator.Get("Access denied: {0}"), ex.Message),
                        path);
                    // Increment the total failed files counter and return null.
                    Interlocked.Increment(ref _totalFilesFailed);
                    return null;
                }
            }
            // Return null if all retries fail.
            return null;
        }

        /// <summary>
        /// Determines whether a file should be overwritten based on user preferences and file timestamps.
        /// </summary>
        /// <param name="source">The source file path</param>
        /// <param name="destination">The destination file path</param>
        /// <returns>True if the file should be overwritten, false otherwise</returns>
        private bool HandleOverwriteLogic(string source, string destination)
        {
            // If the destination file does not exist, there's no need to overwrite, so return true.
            if (!File.Exists(destination)) return true;

            // If "overwrite all" is checked, return true to overwrite.
            if (overwriteAllCheckBox.Checked)
                return true;

            // If "do not overwrite" is checked, return false to skip.
            if (doNotOverwriteCheckBox.Checked)
                return false;

            // If "overwrite if newer" is checked, compare last write times.
            if (overwriteIfNewerCheckBox.Checked)
            {
                // Get file info for both source and destination.
                var srcInfo = new FileInfo(source);
                var destInfo = new FileInfo(destination);
                // Return true if the source file is newer than the destination file.
                return srcInfo.LastWriteTime > destInfo.LastWriteTime;
            }

            // Default to not overwriting if no option is selected.
            return false;
        }

        /// <summary>
        /// Prompts the user to create a custom directory name and validates the input.
        /// </summary>
        /// <returns>The full path of the created custom directory, or null if cancelled</returns>
        private string GetCustomDirectoryFromUser()
        {
            string inputDir = null;

            // Check if we have any target paths available
            if (this.targetPaths == null || this.targetPaths.Count == 0)
            {
                MessageBox.Show(Translator.Get("No target paths available for custom directory creation."),
                               Translator.Get("Error"), MessageBoxButtons.OK, MessageBoxIcon.Error);
                return null;
            }

            // Use the first target path as the base for custom directory
            string baseTargetPath = this.targetPaths[0];

            // Loop until a valid directory is chosen or the user cancels.
            while (true)
            {
                // Show a custom dialog box to prompt for a directory name.
                inputDir = Prompt.ShowDialog(
    Translator.Get("Enter custom directory name:"),
    Translator.Get("Custom Directory"));

                // If the input is null or whitespace, return null to indicate cancellation.
                if (string.IsNullOrWhiteSpace(inputDir))
                    return null;

                // Validate the directory name for invalid characters
                if (inputDir.IndexOfAny(System.IO.Path.GetInvalidFileNameChars()) >= 0)
                {
                    MessageBox.Show(Translator.Get("Directory name contains invalid characters. Please try again."),
                                   Translator.Get("Invalid Directory Name"), MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    continue;
                }

                // Combine the input with the target path to get the full path.
                string fullPath = System.IO.Path.Combine(baseTargetPath, inputDir);

                // Show a confirmation message box to the user.
                var result = MessageBox.Show(Translator.Get($"Copy files into:\n\n{fullPath}?\n\nYes = Use This\nNo = Edit Again\nCancel = Abort"),
                    Translator.Get("Confirm Directory"),
                    MessageBoxButtons.YesNoCancel,
                    MessageBoxIcon.Question);

                // If the user confirms, create the directory and return the path.
                if (result == DialogResult.Yes)
                {
                    try
                    {
                        Directory.CreateDirectory(fullPath);
                        return fullPath;
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(Translator.Get($"Failed to create directory:\n{ex.Message}\n\nPlease try a different name."),
                                       Translator.Get("Directory Creation Failed"), MessageBoxButtons.OK, MessageBoxIcon.Error);
                        // Continue the loop to let user try again
                    }
                }
                // If the user cancels, return null.
                else if (result == DialogResult.Cancel)
                {
                    return null;
                }
                // If user clicked No, continue the loop to edit again
            }
        }

        /// <summary>
        /// Static class providing a simple input dialog prompt for user input.
        /// </summary>
        public static class Prompt
        {
            // A static class to display a simple input dialog.
            /// <summary>
            /// Displays a modal dialog box with a prompt and text input field.
            /// </summary>
            /// <param name="text">The prompt text to display</param>
            /// <param name="caption">The dialog caption/title</param>
            /// <returns>The user's input text, or null if cancelled</returns>
            public static string ShowDialog(string text, string caption)
            {
                // Create a new Form for the dialog box.
                Form prompt = new Form()
                {
                    Width = 400,
                    Height = 160,
                    FormBorderStyle = FormBorderStyle.FixedDialog,
                    Text = caption,
                    StartPosition = FormStartPosition.CenterParent
                };

                // Create a label for the prompt text and a text box for user input.
                Label textLabel = new Label() { Left = 20, Top = 20, Text = text, Width = 340 };
                TextBox inputBox = new TextBox() { Left = 20, Top = 50, Width = 340 };

                // Create an "OK" button for confirmation.
                System.Windows.Forms.Button confirmation = new System.Windows.Forms.Button() { Text = "OK", Left = 280, Width = 80, Top = 80, DialogResult = DialogResult.OK };

                // Add the controls to the form.
                prompt.Controls.Add(textLabel);
                prompt.Controls.Add(inputBox);
                prompt.Controls.Add(confirmation);
                // Set the OK button as the default accept button for the form.
                prompt.AcceptButton = confirmation;

                // Show the dialog and return the text from the input box if the result is OK.
                return prompt.ShowDialog() == DialogResult.OK ? inputBox.Text : null;
            }
        }

        /// <summary>
        /// Determines if a file should be excluded from processing based on operation type and file path.
        /// Currently a placeholder method that always returns false (no exclusions).
        /// </summary>
        /// <param name="filePath">The path of the file to check</param>
        /// <param name="operation">The type of file operation being performed</param>
        /// <returns>True if the file should be excluded, false otherwise</returns>
        private bool IsFileExcluded(string filePath, FileOperation operation)
        {
            // Placeholder for file exclusion logic.
            // The comments within the method show examples of how to implement exclusion rules.
            // Currently, it always returns false, meaning no files are excluded by default.
            return false;
        }

        /// <summary>
        /// Enumeration defining the types of file operations supported by the application.
        /// </summary>
        private enum FileOperation
        {
            // An enumeration to define the types of file operations.
            Copy,
            Move,
            SecureDelete
        }

        /// <summary>
        /// Determines whether a file should be skipped during processing based on overwrite rules and file timestamps.
        /// </summary>
        /// <param name="sourceFilePath">The source file path</param>
        /// <param name="destinationFilePath">The destination file path</param>
        /// <returns>True if the file should be skipped, false otherwise</returns>
        private bool ShouldSkipFile(string sourceFilePath, string destinationFilePath)
        {
            // Determine if a file should be skipped based on overwrite rules.
            // If the destination file does not exist, it should not be skipped.
            if (!File.Exists(destinationFilePath))
            {
                return false;
            }

            // If the "overwrite all" option is enabled, don't skip.
            if (_overwriteAll)
            {
                return false;
            }
            // If the "do not overwrite" option is enabled, always skip.
            else if (_doNotOverwrite)
            {
                return true;
            }
            // If the "overwrite if newer" option is enabled, compare timestamps.
            else if (_overwriteIfNewer)
            {
                try
                {
                    // Get the last write times for both source and destination files.
                    DateTime sourceLastWriteTime = File.GetLastWriteTimeUtc(sourceFilePath);
                    DateTime destLastWriteTime = File.GetLastWriteTimeUtc(destinationFilePath);

                    // Skip the file if the source is older or the same age as the destination.
                    return sourceLastWriteTime <= destLastWriteTime;
                }
                catch (Exception ex)
                {
                    // Log an error if there's an issue checking timestamps.
                    LogError(
    string.Format(Translator.Get("Error checking file timestamps for skipping: {0}"), ex.Message),
    sourceFilePath,
    destinationFilePath,
    ex.Message);
                    // Default to skipping the file on error to prevent data loss.
                    return true;
                }
            }
            // Default to skipping if no specific rule is matched.
            return true;
        }

        /// <summary>
        /// Marks a file as currently being copied by adding it to the copying indices list and updating UI selection.
        /// </summary>
        /// <param name="index">The index of the file in the file list</param>
        //private void MarkFileAsCopying(int index)
        //{
        //    // Use Invoke to ensure UI updates are on the correct thread.
        //    Invoke(() =>
        //    {
        //        // Add the file index to the list of currently copying files.
        //        _currentlyCopyingIndices.Add(index);
        //        // Update the DataGridView selection to highlight the file.
        //        //UpdateDataGridViewSelection();
        //    });
        //}

        /// <summary>
        /// Marks a file as completed copying by removing it from the copying indices list and updating UI selection.
        /// </summary>
        /// <param name="index">The index of the file in the file list</param>
        //private void MarkFileAsCopied(int index)
        //{
        //    // Use Invoke to ensure UI updates are on the correct thread.
        //    Invoke(() =>
        //    {
        //        // Remove the file index from the list of currently copying files.
        //        _currentlyCopyingIndices.Remove(index);
        //        // Unselect the row in the DataGridView.
        //        if (index >= 0 && index < dataGridView2.Rows.Count)
        //            dataGridView2.Rows[index].Selected = false;
        //        // Update the DataGridView selection.
        //        UpdateDataGridViewSelection();
        //    });
        //}

        /// <summary>
        /// Clears all file selection states in the UI by emptying the copying indices list and deselecting all rows.
        /// </summary>
        //private void ClearAllSelections()
        //{
        //    // Use Invoke to ensure UI updates are on the correct thread.
        //    Invoke(() =>
        //    {
        //        // Clear the list of copying indices and clear all selections in the DataGridView.
        //        _currentlyCopyingIndices.Clear();
        //        dataGridView2.ClearSelection();
        //    });
        //}

        /// <summary>
        /// Updates the DataGridView selection to highlight all files currently being copied.
        /// </summary>
        //private void UpdateDataGridViewSelection()
        //{
        //    // Clear previous selections and highlight rows based on the current copying indices list.
        //    dataGridView2.ClearSelection();
        //    foreach (int idx in _currentlyCopyingIndices)
        //    {
        //        if (idx >= 0 && idx < dataGridView2.Rows.Count)
        //            dataGridView2.Rows[idx].Selected = true;
        //    }
        //}

        /// <summary>
        /// Marks a file as currently being copied in single-file mode by adding it to the single-file copying list.
        /// </summary>
        /// <param name="index">The index of the file in the file list</param>
        private void MarkFileAsCopyingSingle(int index)
        {
            // Use Invoke to safely update the UI from a different thread.
            Invoke(() =>
            {
                // Add the index to a list for single file copying.
                _currentlyCopyingIndicesSingle.Add(index);
                // Update the single file DataGridView selection.
                UpdateDataGridViewSelectionSingle();
            });
        }

        /// <summary>
        /// Marks a file as completed copying in single-file mode by removing it from the single-file copying list.
        /// </summary>
        /// <param name="index">The index of the file in the file list</param>
        private void MarkFileAsCopiedSingle(int index)
        {
            // Use Invoke to safely update the UI from a different thread.
            Invoke((Delegate)(() =>
            {
                // Remove the index from the single file copying list.
                _currentlyCopyingIndicesSingle.Remove(index);
                // Unselect the corresponding row in the DataGridView.
                if (index >= 0 && index < filesDataGridView.Rows.Count)
                    filesDataGridView.Rows[index].Selected = false;
                // Update the single file DataGridView selection.
                UpdateDataGridViewSelectionSingle();
            }));
        }

        /// <summary>
        /// Clears all file selection states in single-file mode UI.
        /// </summary>
        private void ClearAllSelectionsSingle()
        {
            // Use Invoke to safely update the UI from a different thread.
            Invoke((Delegate)(() =>
            {
                // Clear the list and the DataGridView selections.
                _currentlyCopyingIndicesSingle.Clear();
                filesDataGridView.ClearSelection();
            }));
        }

        /// <summary>
        /// Updates the single-file DataGridView selection to highlight files currently being copied.
        /// </summary>
        private void UpdateDataGridViewSelectionSingle()
        {
            // Clear previous selections and highlight the rows specified in the list.
            filesDataGridView.ClearSelection();
            foreach (int idx in _currentlyCopyingIndicesSingle)
            {
                if (idx >= 0 && idx < filesDataGridView.Rows.Count)
                    filesDataGridView.Rows[idx].Selected = true;
            }
        }

        /// <summary>
        /// Processes files using multi-threaded copying with semaphore-based concurrency control.
        /// Handles directory creation, progress tracking, and parallel file operations.
        /// </summary>
        /// <param name="files">The list of files to process</param>
        /// <param name="targetPaths">The target directory paths for copying</param>
        /// <returns>A task representing the asynchronous operation</returns>
        /// 

        private readonly System.Windows.Forms.Timer _multiThreadUiTimer = new System.Windows.Forms.Timer();


        #region ----------  multi-thread copy with per-slot objects  ----------

        private record Slot(int Id,
                            ModernCircularProgressBar Bar,
                            Label NameLabel);

        private Slot[] _slots;

        public async Task ProcessFilesMultiThreaded(List<FileInfoWrapper> files, string[] targetPaths)
        {
            try
            {
                _stopwatch.Restart();

                _cancellationTokenSource?.Dispose();
                _cancellationTokenSource = new CancellationTokenSource();
                var token = _cancellationTokenSource.Token;

                if (files == null || files.Count == 0) return;

                ToggleControlsForOperation(false);
                _multiThreadUiTimer.Start();

                using var writeSlots = new SemaphoreSlim(4, 4);

                string sourceRoot = _currentSourceRootPath;
                string targetBase = targetPaths[0];

                // ---- pre-create directories ----
                foreach (var dir in files.Where(f => f.IsDirectory))
                {
                    string destDir = ComputeDestinationPath(dir.FilePath, true, targetBase, sourceRoot);
                    if (!string.IsNullOrEmpty(destDir)) Directory.CreateDirectory(destDir);
                }

                // ---- build work queue ----
                var todo = files
                    .Where(f => !f.IsDirectory)
                    .Select(f => new
                    {
                        Item = f,
                        Src = f.FilePath,
                        Dest = ComputeDestinationPath(f.FilePath, false, targetBase, sourceRoot)
                    })
                    .Where(x => !string.IsNullOrEmpty(x.Dest))
                    .ToList();

                _grandTotalFileCount = todo.Count;
                _totalBytesToProcess = todo.Sum(x => new FileInfo(x.Src).Length);
                _totalBytesProcessed = 0;
                _multiThreadProcessedFiles = 0;
                _totalFilesSkipped = 0;
                _totalFilesFailed = 0;

                // SLOT-QUEUE: 4 slots that get recycled
                var slotQ = new System.Collections.Concurrent.ConcurrentQueue<Slot>();
                foreach (var s in _slots) slotQ.Enqueue(s);

                await Parallel.ForEachAsync(todo,
                    new ParallelOptions
                    {
                        CancellationToken = token,
                        MaxDegreeOfParallelism = 4
                    },
                    async (job, ct) =>
                    {
                        // 1.  pick next free slot (will be returned later)
                        slotQ.TryDequeue(out Slot slot);

                        // 2.  acquire semaphore
                        await writeSlots.WaitAsync(ct);

                        try
                        {
                            // 3. show which file we are about to copy
                            Invoke(() => UpdateMultiSlotStatus(slot.Id, Translator.Get("Copying…"), job.Src));
                            // 4. do the copy
                            await CopyFileWithSlotAsync(slot.Id, job.Src, job.Dest, token);
                            // 5. success
                            Invoke(() => UpdateMultiSlotStatus(slot.Id, Translator.Get("Done"), job.Src));
                            Interlocked.Increment(ref _totalFilesCopiedMulti);
                            System.Threading.Interlocked.Increment(ref _processedFiles);
                        }
                        catch (OperationCanceledException)
                        {
                            Invoke(() => UpdateMultiSlotStatus(slot.Id, Translator.Get("Canceled"), job.Src));
                            Interlocked.Increment(ref _totalFilesSkipped);
                        }
                        catch (Exception ex)
                        {
                            Invoke(() => UpdateMultiSlotStatus(slot.Id, Translator.Get("Failed"), $"{job.Src} — {ex.Message}"));
                            Interlocked.Increment(ref _totalFilesFailed);
                            System.Threading.Interlocked.Increment(ref _processedFiles);
                        }
                        finally
                        {
                            writeSlots.Release();   // always release semaphore
                            slotQ.Enqueue(slot);    // always return slot to pool
                        }
                    });

                _multiThreadUiTimer.Stop();
                _stopwatch.Stop();

                Invoke(() =>
                {
                    progressBarMultiTotal.Value = 0;
                    progressBarMultiTotal.Text = "0.00%";
                    fileCountMultiLabel.Text = Translator.Get("File Count: 0 Out of 0");
                    speedMultiLabel.Text = Translator.Get("Speed: 0 MB/s");
                    totalCMDMultiLabel.Text = Translator.Get("Total C/M/D: 0 Bytes / 0 Bytes");
                    totalTimeMultiLabel.Text = Translator.Get("Elapsed / Target Time: 00:00:00 / 00:00:00");
                    totalSpaceMultiLabel.Text = Translator.Get("Total Space Used: 0 Bytes / 0 Bytes");

                    foreach (var s in _slots) UpdateMultiSlotStatus(s.Id, "Idle", string.Empty);

                    ToggleControlsForOperation(true);
                    //ClearAllSelections();
                });

                //_copyWorker_RunWorkerCompleted(this,
                //new RunWorkerCompletedEventArgs("Multi-threaded copy complete", null, false));
            }
            catch (OperationCanceledException)
            {
                _multiThreadUiTimer.Stop();
                Invoke(() =>
                {
                    speedMultiLabel.Text = Translator.Get("Operation canceled.");
                    ToggleControlsForOperation(true);
                });
            }
            catch (Exception ex)
            {
                _multiThreadUiTimer.Stop();
                Invoke(() =>
                {
                    speedMultiLabel.Text = string.Format(Translator.Get("Error: {0}"), ex.Message);
                    ToggleControlsForOperation(true);
                });
            }
        }
        #endregion

        private void ApplySkin(string skinName, Color foreColor, Color backColor)
        {
            try
            {
                // Apply to form
                this.BackColor = backColor;
                this.ForeColor = foreColor;

                // Apply to all controls recursively
                ApplyColorsToControls(this.Controls, foreColor, backColor);

                // ✅ Apply contrasting color to ModernCircularProgressBars (passing backColor)
                ApplyProgressBarColors(backColor);

                System.Diagnostics.Debug.WriteLine($"Applied skin: {skinName}, ForeColor: {foreColor}, BackColor: {backColor}");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error in ApplySkin: {ex.Message}");
                throw;
            }
        }

        // ✅ NEW: Apply colors specifically to ModernCircularProgressBars
        private void ApplyProgressBarColors(Color backgroundColor)
        {
            try
            {
                // Get the contrasting color based on the background
                Color contrastingColor = GetContrastingTextColor(backgroundColor);

                // Create gradient colors for the progress arc based on contrasting color
                Color progressStart = Color.FromArgb(200, contrastingColor);
                Color progressEnd = Color.FromArgb(200, contrastingColor);

                System.Diagnostics.Debug.WriteLine($"Applying progress bar colors - Background: {backgroundColor}, Contrasting: {contrastingColor}");

                // Apply to single-threaded progress bars (if they exist)
                if (this.Controls.Find("modernFile", true).FirstOrDefault() is ModernProgress.ModernCircularProgressBar fileBar)
                {
                    fileBar.ForeColor = contrastingColor;
                    fileBar.ProgressStartColor = progressStart;
                    fileBar.ProgressEndColor = progressEnd;
                    fileBar.Invalidate(); // Force redraw
                    System.Diagnostics.Debug.WriteLine($"Applied to modernFile - ForeColor: {fileBar.ForeColor}");
                }

                if (this.Controls.Find("modernTotal", true).FirstOrDefault() is ModernProgress.ModernCircularProgressBar totalBar)
                {
                    totalBar.ForeColor = contrastingColor;
                    totalBar.ProgressStartColor = progressStart;
                    totalBar.ProgressEndColor = progressEnd;
                    totalBar.Invalidate(); // Force redraw
                    System.Diagnostics.Debug.WriteLine($"Applied to modernTotal - ForeColor: {totalBar.ForeColor}");
                }

                // ✅ Apply contrasting color to multithreaded progress bars (text AND arc)
                if (progressBarMulti1 != null)
                {
                    progressBarMulti1.ForeColor = contrastingColor;
                    progressBarMulti1.ProgressStartColor = progressStart;
                    progressBarMulti1.ProgressEndColor = progressEnd;
                    progressBarMulti1.Invalidate(); // Force redraw
                }
                if (progressBarMulti2 != null)
                {
                    progressBarMulti2.ForeColor = contrastingColor;
                    progressBarMulti2.ProgressStartColor = progressStart;
                    progressBarMulti2.ProgressEndColor = progressEnd;
                    progressBarMulti2.Invalidate(); // Force redraw
                }
                if (progressBarMulti3 != null)
                {
                    progressBarMulti3.ForeColor = contrastingColor;
                    progressBarMulti3.ProgressStartColor = progressStart;
                    progressBarMulti3.ProgressEndColor = progressEnd;
                    progressBarMulti3.Invalidate(); // Force redraw
                }
                if (progressBarMulti4 != null)
                {
                    progressBarMulti4.ForeColor = contrastingColor;
                    progressBarMulti4.ProgressStartColor = progressStart;
                    progressBarMulti4.ProgressEndColor = progressEnd;
                    progressBarMulti4.Invalidate(); // Force redraw
                }
                if (progressBarMultiTotal != null)
                {
                    progressBarMultiTotal.ForeColor = contrastingColor;
                    progressBarMultiTotal.ProgressStartColor = progressStart;
                    progressBarMultiTotal.ProgressEndColor = progressEnd;
                    progressBarMultiTotal.Invalidate(); // Force redraw
                }

                System.Diagnostics.Debug.WriteLine($"Applied contrasting progress bar colors: {contrastingColor} for background: {backgroundColor}");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error applying progress bar colors: {ex.Message}");
            }
        }

        // Recursive helper to apply colors to all controls
        private void ApplyColorsToControls(System.Windows.Forms.Control.ControlCollection controls, Color foreColor, Color backColor)
        {
            foreach (System.Windows.Forms.Control control in controls)
            {
                // Skip certain control types that shouldn't inherit colors
                if (control is Button || control is TextBox || control is ComboBox)
                {
                    // These typically maintain their own appearance
                    continue;
                }

                // Apply colors
                control.ForeColor = foreColor;
                control.BackColor = backColor;

                // Recursively apply to child controls
                if (control.HasChildren)
                {
                    ApplyColorsToControls(control.Controls, foreColor, backColor);
                }
            }
        }


        private void PickCustomColor()
        {
            using (ColorDialog colorDialog = new ColorDialog())
            {
                colorDialog.Color = this.BackColor;
                colorDialog.AllowFullOpen = true;
                colorDialog.FullOpen = true;

                if (colorDialog.ShowDialog() == DialogResult.OK)
                {
                    Color selectedColor = colorDialog.Color;
                    Color textColor = GetContrastingTextColor(selectedColor);

                    ApplySkin("Custom Color", textColor, selectedColor);

                    CopyThatProgram.Properties.Settings.Default.Skin = "Custom Color";
                    CopyThatProgram.Properties.Settings.Default.CustomBackColor = selectedColor;
                    CopyThatProgram.Properties.Settings.Default.CustomForeColor = textColor;
                    CopyThatProgram.Properties.Settings.Default.skinsIndex = skinsComboBox.SelectedIndex;

                    CopyThatProgram.Properties.Settings.Default.Save();

                    System.Diagnostics.Debug.WriteLine($"Saved Custom Color - Fore: {textColor}, Back: {selectedColor}");
                }
                else
                {
                    string savedKey = CopyThatProgram.Properties.Settings.Default.Skin ?? "Light Mode";
                    SelectSkinInCombo(savedKey);
                }
            }
        }

        private Color GetContrastingTextColor(Color backgroundColor)
        {
            double brightness = (0.299 * backgroundColor.R +
                                0.587 * backgroundColor.G +
                                0.114 * backgroundColor.B) / 255;

            return brightness > 0.5 ? Color.Black : Color.White;
        }



        private void UpdateMultiThreadUiTimer_Tick(object? sender, EventArgs e)
        {
            if (_totalBytesToProcess == 0) return;

            double totalPct = (_totalBytesProcessed / (double)_totalBytesToProcess) * 100.0;
            double elapsedSec = _stopwatch.Elapsed.TotalSeconds;
            double bytesPerSec = elapsedSec > 0 ? _totalBytesProcessed / elapsedSec : 0;
            double remainingSec = bytesPerSec > 0
                ? (_totalBytesToProcess - _totalBytesProcessed) / bytesPerSec
                : 0;

            TimeSpan elapsed = TimeSpan.FromSeconds(elapsedSec);
            TimeSpan target = TimeSpan.FromSeconds(elapsedSec + remainingSec);

            progressBarMultiTotal.Value = Math.Min((int)(totalPct * 100), 10000);
            progressBarMultiTotal.Text = $"{totalPct:F2}%";

            fileCountMultiLabel.Text = string.Format(
                Translator.Get("Files Processed: {0} Out of {1}"),
                _multiThreadProcessedFiles.ToString("N0"),
                _grandTotalFileCount.ToString("N0"));

            totalCMDMultiLabel.Text = string.Format(
    Translator.Get("Total C/M/D: {0} / {1}"),
    FormatBytes(_totalBytesProcessed),
    FormatBytes(_totalBytesToProcess));
            speedMultiLabel.Text = string.Format(Translator.Get("Speed: {0}"), FormatSpeed(bytesPerSec));

            totalTimeMultiLabel.Text = string.Format(
                Translator.Get("Elapsed / Target Time: {0} / {1}"),
                elapsed.ToString(@"hh\:mm\:ss"),
                target.ToString(@"hh\:mm\:ss"));
        }


        private async Task CopyFileWithSlotAsync(
            int slotIndex,
            string sourceFile,
            string destinationFile,
            CancellationToken token)
        {
            try
            {
                Directory.CreateDirectory(System.IO.Path.GetDirectoryName(destinationFile)!);

                var srcInfo = new FileInfo(sourceFile);
                long totalBytes = srcInfo.Length;

                if (File.Exists(destinationFile))
                {
                    var dstInfo = new FileInfo(destinationFile);

                    if (_doNotOverwrite)
                    {
                        Invoke(() => UpdateMultiSlotStatus(slotIndex, Translator.Get("Skipped (exists)"), sourceFile));
                        Interlocked.Increment(ref _totalFilesSkipped);
                        string reason = Translator.Get("File exists and 'Do Not Overwrite' is selected.");
                        var skippedItem = new FileInfoWrapper { FileName = srcInfo.Name, BytesRaw = totalBytes, FilePath = sourceFile };
                        HandleSkippedFile(skippedItem, reason, destinationFile);
                        return;
                    }
                    if (_overwriteIfNewer && srcInfo.LastWriteTime <= dstInfo.LastWriteTime)
                    {
                        Invoke(() => UpdateMultiSlotStatus(slotIndex, Translator.Get("Skipped (not newer)"), sourceFile));
                        Interlocked.Increment(ref _totalFilesSkipped);
                        string reason = Translator.Get("Destination file is newer or the same age.");
                        var skippedItem = new FileInfoWrapper { FileName = srcInfo.Name, BytesRaw = totalBytes, FilePath = sourceFile };
                        HandleSkippedFile(skippedItem, reason, destinationFile);
                        return;
                    }
                    File.Delete(destinationFile);
                }

                int bufferBytes = (int)(bufferNumUpDown.Value * 1024);
                byte[] buffer = new byte[bufferBytes];
                long bytesCopied = 0;

                var sw = Stopwatch.StartNew();
                long lastBytes = 0;
                double lastUpdateTime = 0;

                await using var src = await RetryOpenAsync(
                    sourceFile, FileMode.Open, FileAccess.Read, FileShare.ReadWrite,
                    bufferBytes, FileOptions.SequentialScan);
                if (src == null) return;

                await using var dst = await RetryOpenAsync(
                    destinationFile, FileMode.CreateNew, FileAccess.Write, FileShare.None,
                    bufferBytes, FileOptions.SequentialScan);
                if (dst == null) return;

                while (true)
                {
                    token.ThrowIfCancellationRequested();
                    _pauseEvent.WaitOne();

                    int bytesRead = await src.ReadAsync(buffer.AsMemory(0, buffer.Length), token);
                    if (bytesRead == 0)
                        break;

                    await dst.WriteAsync(buffer.AsMemory(0, bytesRead), token);

                    bytesCopied += bytesRead;
                    Interlocked.Add(ref _totalBytesProcessed, bytesRead);

                    double pct = totalBytes > 0 ? (bytesCopied / (double)totalBytes) * 100 : 100;

                    double currentTime = sw.Elapsed.TotalSeconds;
                    double deltaTime = currentTime - lastUpdateTime;

                    if (deltaTime < 0.1)
                        continue;

                    double bytesThisInterval = bytesCopied - lastBytes;
                    double speedBytesPerSec = deltaTime > 0 ? bytesThisInterval / deltaTime : 0;
                    double speedMBps = speedBytesPerSec / (1024 * 1024);

                    double remainingBytes = totalBytes - bytesCopied;
                    double etaSeconds = speedBytesPerSec > 0 ? remainingBytes / speedBytesPerSec : 0;

                    lastBytes = bytesCopied;
                    lastUpdateTime = currentTime;

                    string currentFileName = System.IO.Path.GetFileName(sourceFile);
                    string processedStr = FormatBytes(bytesCopied);
                    string totalStr = FormatBytes(totalBytes);
                    string speedStr = $"{speedMBps:F2} MB/s";

                    string etaStr;
                    if (etaSeconds > 3600)
                        etaStr = $"{etaSeconds / 3600:F1} Hr(s).";
                    else if (etaSeconds > 60)
                        etaStr = $"{etaSeconds / 60:F1} Min(s).";
                    else
                        etaStr = $"{etaSeconds:F1} Sec(s).";

                    string displayText = string.Format(
    Translator.Get("File: {0} || Processed: {1} / {2} || Speed: {3} || ETA: {4}"),
    currentFileName,
    processedStr,
    totalStr,
    speedStr,
    etaStr);

                    Invoke(() =>
                    {
                        UpdateMultiSlotProgress(slotIndex, pct, sourceFile);
                        UpdateMultiSlotLabel(slotIndex, displayText);
                    });
                }

                sw.Stop();
                Interlocked.Increment(ref _multiThreadProcessedFiles);
                Invoke(() => UpdateMultiSlotStatus(slotIndex, Translator.Get("Done"), sourceFile));
            }
            catch (OperationCanceledException)
            {
                Invoke(() => UpdateMultiSlotStatus(slotIndex, Translator.Get("Canceled"), sourceFile));
                Interlocked.Increment(ref _totalFilesSkipped);
            }
            catch (Exception ex)
            {
                Invoke(() => UpdateMultiSlotStatus(slotIndex, Translator.Get("Failed"), $"{sourceFile}\n{ex.Message}"));
                Interlocked.Increment(ref _totalFilesFailed);
            }
        }

        private void UpdateMultiSlotLabel(int slot, string text)
        {
            Label label = slot switch
            {
                1 => filesNameLabel1,
                2 => filesNameLabel2,
                3 => filesNameLabel3,
                4 => filesNameLabel4,
                _ => filesNameLabel1
            };

            label.Text = text;
        }

        private void UpdateMultiSlotProgress(int slot, double percent, string fileName)
        {
            ModernProgress.ModernCircularProgressBar bar = slot switch
            {
                1 => progressBarMulti1,
                2 => progressBarMulti2,
                3 => progressBarMulti3,
                4 => progressBarMulti4,
                _ => progressBarMulti1
            };

            Label fileLabel = slot switch
            {
                1 => filesNameLabel1,
                2 => filesNameLabel2,
                3 => filesNameLabel3,
                4 => filesNameLabel4,
                _ => filesNameLabel1
            };

            bar.Value = Math.Min((int)(percent * 100), 10000);
            bar.Text = $"{percent:F2}%";
        }

        private void UpdateMultiSlotStatus(int slot, string status, string file)
        {
            Label label = slot switch
            {
                1 => filesNameLabel1,
                2 => filesNameLabel2,
                3 => filesNameLabel3,
                4 => filesNameLabel4,
                _ => filesNameLabel1
            };

            string fileName = string.IsNullOrEmpty(file) ? "" : System.IO.Path.GetFileName(file);
            label.Text = string.IsNullOrEmpty(fileName) ? status : $"{fileName} — {status}";
        }

        /// <summary>
        /// Converts a file path to extended length format to support paths longer than MAX_PATH.
        /// </summary>
        /// <param name="path">The original file path</param>
        /// <returns>The path in extended length format</returns>
        private static string ToExtendedLengthPath(string path)
        {
            // Checks if the path is already in extended length format
            if (path.StartsWith(@"\\?\"))
                return path;
            // If it's a UNC path (starts with \\), converts it to the extended UNC format
            if (path.StartsWith(@"\\"))
                return @"\\?\UNC\" + path.Substring(2);
            // For all other paths, adds the extended length prefix
            return @"\\?\" + path;
        }

        /// <summary>
        /// Copies files to a single target directory with retry logic, progress reporting, and directory structure creation.
        /// </summary>
        /// <param name="bw">The background worker for cancellation support</param>
        /// <param name="e">DoWorkEventArgs for cancellation handling</param>
        /// <param name="targetBase">The base target directory path</param>
        /// <returns>A task representing the asynchronous copy operation</returns>
        private async Task CopyToSingleTarget(BackgroundWorker bw,
                                         DoWorkEventArgs e,
                                         string targetBase)
        {
            const int MAX_RETRIES = 3;
            _finishCurrentFileAndQuit = false;

            // --- separate directories and files ---
            var dirs = _fileList.Where(i => i.IsDirectory).ToList();
            var files = _fileList.Where(i => !i.IsDirectory).ToList();

            _filesToProcess = files.Count;

            _copyStopwatch.Restart();
            _lastSpeedBytes = 0;
            _startTick = Environment.TickCount64;

            // ===== Create directory skeleton =====
            var allDirs = new HashSet<string>(StringComparer.OrdinalIgnoreCase);

            if (!Directory.Exists(targetBase))
                allDirs.Add(targetBase);

            foreach (var item in _fileList)
            {
                if (_keepOnlyFiles && item.IsDirectory) continue;

                string dest = ComputeDestinationPath(item.FilePath, item.IsDirectory,
                                                     targetBase, _currentSourceRootPath);
                if (string.IsNullOrEmpty(dest)) continue;

                string dirToCreate = item.IsDirectory
                                     ? dest
                                     : System.IO.Path.GetDirectoryName(dest);
                if (!string.IsNullOrEmpty(dirToCreate))
                    allDirs.Add(dirToCreate);
            }

            var finalDirs = new HashSet<string>(allDirs, StringComparer.OrdinalIgnoreCase);
            foreach (var d in allDirs)
            {
                string parent = System.IO.Path.GetDirectoryName(d);
                while (!string.IsNullOrEmpty(parent) && parent.Length >= targetBase.Length)
                {
                    finalDirs.Add(parent);
                    parent = System.IO.Path.GetDirectoryName(parent);
                }
            }

            var sortedDirs = finalDirs.OrderBy(d => d.Length).ToList();
            // Around line where you create directories
            foreach (string dirPath in sortedDirs)
            {
                _pauseEvent.WaitOne();
                if (bw.CancellationPending) { e.Cancel = true; return; }

                try
                {
                    if (!Directory.Exists(dirPath))
                    {
                        Directory.CreateDirectory(dirPath);

                        Invoke((System.Windows.Forms.MethodInvoker)(() =>
                        {
                            fromFilesDirLabel.Text = dirPath;
                            statusLabel.Text = string.Format(
                                Translator.Get("Creating folder – {0}"),
                                System.IO.Path.GetFileName(dirPath));

                            var dirItem = _fileList.FirstOrDefault(d =>
                                d.IsDirectory && d.FilePath.Equals(dirPath, StringComparison.OrdinalIgnoreCase));

                            if (dirItem != null)
                            {
                                UpdateFileStatus(dirItem, Translator.Get("Folder Created..."));
                            }
                            else
                            {
                                MessageBox.Show(Translator.Get($"Directory not found in the file list:\n{dirPath}"), Translator.Get("Directory Not Found"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }

                            _bindingSource.ResetBindings(false); // ✅ Force refresh
                        }));
                    }
                }
                catch (Exception ex)
                {
                    LogWarning(string.Format(
                        Translator.Get("Failed to create directory {0}: {1}"),
                        dirPath,
                        ex.Message));
                }
            }

            // ===== Copy each file =====
            foreach (var item in files)
            {
                Interlocked.Increment(ref _processedFiles);
                UpdateOverallLabels();
                if (bw.CancellationPending) { e.Cancel = true; return; }

                string dstPath = ComputeDestinationPath(item.FilePath, false,
                                                        targetBase, _currentSourceRootPath);
                if (string.IsNullOrEmpty(dstPath))
                {
                    LogAndSkip(item, Translator.Get("Could not compute destination path."));
                    Interlocked.Increment(ref _processedFiles);
                    continue;
                }

                _pauseEvent.WaitOne();

                int gridIndex = _fileList.IndexOf(item);
                long fileSize = new FileInfo(item.FilePath).Length;

                Invoke(() =>
                {
                    filePathLabel.Text = item.FilePath;
                    fromFilesDirLabel.Text = System.IO.Path.GetDirectoryName(item.FilePath);

                    // NEW: show the target directory
                    string targetDir = System.IO.Path.GetDirectoryName(
                        ComputeDestinationPath(item.FilePath, false, targetBase, _currentSourceRootPath)
                    );
                    targetDirLabel.Text = targetDir;
                    statusLabel.Text = string.Format(
                        Translator.Get("Copying – {0}"),
                        System.IO.Path.GetFileName(item.FilePath));
                    SelectCurrentFileInGrid(gridIndex);
                });


                bool copied = false;
                Exception lastEx = null;

                for (int attempt = 1; attempt <= MAX_RETRIES; attempt++)
                {
                    try
                    {
                        await CopyFileWithProgress(item, fileSize, 0, targetBase);
                        copied = true;
                        break;
                    }
                    catch (IOException ex) when (attempt < MAX_RETRIES)
                    {
                        Invoke(() => UpdateFileStatus(item, string.Format(
     Translator.Get("Failed: Retry #{0}"),
     attempt)));

                        LogWarning(string.Format(
                            Translator.Get("Retry {0}/{1} – {2}"),
                            attempt,
                            MAX_RETRIES,
                            ex.Message));
                        await Task.Delay(500);
                    }
                    catch (Exception ex)
                    {
                        lastEx = ex;
                        break;
                    }
                }

                if (copied)
                {
                    Interlocked.Increment(ref _totalFilesCopied);
                    Invoke(() => UpdateFileStatus(item, Translator.Get("File Copied...")));
                }
                else
                {
                    LogAndSkip(item, lastEx);
                }
                // Checks if the user requested to quit
                if (_finishCurrentFileAndQuit) break;
            }
        }

        /// <summary>
        /// Background worker DoWork event handler that coordinates file copying to multiple target directories.
        /// Handles iteration through target paths, cancellation, and final UI updates.
        /// </summary>
        /// <param name="sender">The event sender (background worker)</param>
        /// <param name="e">DoWorkEventArgs containing event data</param>
        private void _copyWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            var worker = sender as BackgroundWorker;

            try
            {
                new Func<BackgroundWorker, Task>(async bw =>
                {
                    // 🔑 iterate over every target folder
                    foreach (string targetBase in targetPaths)
                    {
                        if (string.IsNullOrWhiteSpace(targetBase))
                            continue;

                        //ResetAllFileStatuses();

                        // --- Update header labels for this target ---
                        Invoke(() =>
                        {
                            //fromFilesDirLabel.Text = $"Target: {targetBase}";
                            statusLabel.Text = string.Format(
                                Translator.Get("Starting copy to {0}"),
                                targetBase);
                        });

                        // --- Perform the actual copy for this target ---
                        await CopyToSingleTarget(bw, e, targetBase);

                        if (bw.CancellationPending || e.Cancel)
                            break;
                    }

                    // Final UI update
                    Invoke(() =>
                    {
                        statusLabel.Text = bw.CancellationPending
                            ? Translator.Get("Cancelled")
                            : Translator.Get("All targets complete");
                        modernTotal.Value = modernTotal.Maximum;
                        modernTotal.Text = "100.00%";
                    });

                })(worker).GetAwaiter().GetResult();
            }
            catch (OperationCanceledException)
            {
                e.Cancel = true;
            }
        }


        private void MoveWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            // Casts the sender to a BackgroundWorker
            var worker = sender as BackgroundWorker;
            try
            {
                // Defines and executes an async function on the worker thread
                new Func<BackgroundWorker, Task>(async bw =>
                {
                    // Gets the first target path
                    string targetBase = _currentTargetPaths.FirstOrDefault();
                    // If no target path exists, cancels the operation
                    if (string.IsNullOrEmpty(targetBase)) { e.Cancel = true; return; }

                    // Defines the maximum number of retries
                    const int MAX_RETRIES = 3;
                    // Resets the quit flag
                    _finishCurrentFileAndQuit = false;

                    // Separates files into directories and non-directories
                    var dirs = _fileList.Where(i => i.IsDirectory).ToList();
                    var files = _fileList.Where(i => !i.IsDirectory).ToList();

                    _filesToProcess = files.Count;

                    // Restarts the stopwatch
                    _copyStopwatch.Restart();

                    // Creates all the destination directories before starting file moves
                    foreach (var dirItem in dirs)
                    {
                        // Waits for a pause signal and checks for cancellation
                        _pauseEvent.WaitOne();
                        if (bw.CancellationPending) { e.Cancel = true; return; }

                        // Computes the destination directory path
                        string dstDir = ComputeDestinationPath(dirItem.FilePath, true,
                                                                targetBase, _currentSourceRootPath);
                        // Creates the directory and updates the UI status
                        Directory.CreateDirectory(dstDir);
                        UpdateFileStatus(dirItem, Translator.Get("Folder Created..."));
                    }

                    // Loops through each file to be moved
                    foreach (var item in files)
                    {
                        // Waits for a pause signal and checks for cancellation
                        _pauseEvent.WaitOne();
                        if (bw.CancellationPending) { e.Cancel = true; return; }

                        // Gets the index of the current file and its size
                        int gridIndex = _fileList.IndexOf(item);
                        long fileSize = new FileInfo(item.FilePath).Length;
                        long bytesThisFile = 0;

                        // Updates UI labels with move progress
                        Invoke(() =>
                        {
                            fileCountOnLabel.Text = string.Format(Translator.Get("File Count: {0} Out of {1}"),
                                _processedFiles.ToString("N0"),
                                _grandTotalFileCount.ToString("N0"));
                            filePathLabel.Text = item.FilePath;
                            statusLabel.Text = string.Format(
                                Translator.Get("Moving – {0}"),
                                System.IO.Path.GetFileName(item.FilePath));
                        });

                        // Selects the current file in the grid
                        SelectCurrentFileInGrid(gridIndex);

                        // Flag to check if the move was successful and an exception variable
                        bool moved = false;
                        Exception lastEx = null;

                        // Retries the move operation up to MAX_RETRIES times
                        for (int attempt = 0; attempt <= MAX_RETRIES; attempt++)
                        {
                            try
                            {
                                // Computes the destination path
                                string dest = ComputeDestinationPath(item.FilePath, false,
                                                                      targetBase, _currentSourceRootPath);
                                // Ensures the destination directory exists
                                EnsureDirectoryExistsForFile(dest);

                                // Moves the file from the source to the destination
                                File.Move(item.FilePath, dest);
                                // Sets the moved flag and breaks the loop on success
                                moved = true;
                                break;
                            }
                            // Catches any exception and stores it
                            catch (Exception ex) { lastEx = ex; }
                        }

                        // If the file was moved successfully
                        if (moved)
                        {
                            // Updates the file status and waits briefly
                            item.Status = Translator.Get("Moved");
                            await Task.Delay(25);
                        }
                        // If the move failed, logs and skips the file
                        else
                        {
                            LogAndSkip(item, lastEx);
                        }

                        // Increments the processed files count
                        Interlocked.Increment(ref _processedFiles);
                        // Checks if the user requested to quit
                        if (_finishCurrentFileAndQuit) break;
                    }

                    // Updates the UI to show 100% completion
                    Invoke((Delegate)(() =>
                    {
                        modernFile.Value = modernFile.Maximum;
                        modernFile.Text = "100.00%";
                        modernTotal.Value = modernTotal.Maximum;
                        modernTotal.Text = "100.00%";
                    }));
                    // Ensures the async method runs synchronously
                })(worker).GetAwaiter().GetResult();
            }
            // Catches a cancellation exception and sets the cancel flag
            catch (OperationCanceledException) { e.Cancel = true; }
        }

        private void DeleteWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            // Casts the sender to a BackgroundWorker
            var worker = sender as BackgroundWorker;
            try
            {
                // Defines and executes an async function
                new Func<BackgroundWorker, Task>(async bw =>
                {
                    // Defines the maximum number of retries
                    const int MAX_RETRIES = 3;
                    // Resets the quit flag
                    _finishCurrentFileAndQuit = false;

                    // Confirms secure deletion with the user
                    if (copyMoveDeleteComboBox.SelectedItem?.ToString() == "Secure Delete Files")
                    {
                        // Gets the root folder of the first file
                        string rootFolder = System.IO.Path.GetDirectoryName(_fileList.FirstOrDefault()?.FilePath ?? "");
                        // Shows a confirmation message box
                        var confirm = MessageBox.Show(
                            Translator.Get($"Secure deletion is about to take place on folder:\n\n{rootFolder}\n\nWould you like to continue?"),
                            Translator.Get("Confirm Secure Delete"),
                            MessageBoxButtons.YesNo,
                            MessageBoxIcon.Warning);

                        // If the user does not confirm, cancels the operation
                        if (confirm != DialogResult.Yes) { e.Cancel = true; return; }
                    }

                    // Separates files into directories and non-directories
                    var dirs = _fileList.Where(i => i.IsDirectory).ToList();
                    var files = _fileList.Where(i => !i.IsDirectory).ToList();

                    _filesToProcess = files.Count;

                    // Restarts the stopwatch
                    _copyStopwatch.Restart();

                    // Loops through each file to be deleted
                    foreach (var item in files)
                    {
                        // Waits for a pause signal and checks for cancellation
                        _pauseEvent.WaitOne();
                        if (bw.CancellationPending) { e.Cancel = true; return; }

                        // Gets the index of the current file and its size
                        int gridIndex = _fileList.IndexOf(item);
                        long fileSize = new FileInfo(item.FilePath).Length;

                        // Updates UI labels with delete progress
                        Invoke(() =>
                        {
                            fileCountOnLabel.Text = string.Format(Translator.Get("File Count: {0} Out of {1}"),
                                _processedFiles.ToString("N0"),
                                _grandTotalFileCount.ToString("N0"));
                            filePathLabel.Text = item.FilePath;
                            statusLabel.Text = string.Format(
                                Translator.Get("Secure deleting – {0}"),
                                System.IO.Path.GetFileName(item.FilePath));
                        });

                        // Selects the current file in the grid
                        SelectCurrentFileInGrid(gridIndex);

                        // Flag to check if the delete was successful and an exception variable
                        bool deleted = false;
                        Exception lastEx = null;

                        // Retries the delete operation up to MAX_RETRIES times
                        for (int attempt = 0; attempt <= MAX_RETRIES; attempt++)
                        {
                            try
                            {
                                // Calls the secure delete method
                                SecureDeleteFile(item.FilePath);
                                // Sets the deleted flag and breaks the loop on success
                                deleted = true;
                                break;
                            }
                            // Catches any exception and stores it
                            catch (Exception ex) { lastEx = ex; }
                        }

                        // If the file was deleted successfully
                        if (deleted)
                        {
                            // Updates the file status and waits briefly
                            item.Status = Translator.Get("Securely Deleted");


                            await Task.Delay(25);
                        }
                        // If the delete failed, logs and skips the file
                        else
                        {
                            LogAndSkip(item, lastEx);
                        }

                        // Increments the processed files count
                        Interlocked.Increment(ref _processedFiles);
                        // Checks if the user requested to quit
                        if (_finishCurrentFileAndQuit) break;
                    }

                    // Deletes empty directories, starting from the deepest level
                    foreach (var dirItem in dirs.OrderByDescending(d => d.FilePath.Length))
                    {
                        var dir = dirItem.FilePath;
                        // Checks if the directory exists and is empty
                        if (Directory.Exists(dir) && !Directory.EnumerateFileSystemEntries(dir).Any())
                        {
                            try { Directory.Delete(dir, false); }
                            // Ignores any exceptions during directory deletion
                            catch { /* ignore */ }
                        }
                    }

                    // Updates the UI to show 100% completion
                    Invoke((Delegate)(() =>
                    {
                        modernFile.Value = modernFile.Maximum;
                        modernFile.Text = "100.00%";
                        modernTotal.Value = modernTotal.Maximum;
                        modernTotal.Text = "100.00%";
                    }));
                    // Ensures the async method runs synchronously
                })(worker).GetAwaiter().GetResult();
            }
            // Catches a cancellation exception and sets the cancel flag
            catch (OperationCanceledException) { e.Cancel = true; }
        }







        // ADD THIS HELPER
        [System.Runtime.InteropServices.DllImport("shell32.dll", CharSet = CharSet.Auto)]
        private static extern IntPtr SHGetFileInfo(string pszPath, uint dwFileAttributes,
                                                   ref SHFILEINFO psfi, uint cbFileInfo, uint uFlags);

        private struct SHFILEINFO
        {
            public IntPtr hIcon;
            public int iIcon;
            public uint dwAttributes;
            [System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.ByValTStr, SizeConst = 260)]
            public string szDisplayName;
            [System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.ByValTStr, SizeConst = 80)]
            public string szTypeName;
        }

        private const uint SHGFI_ICON = 0x100;
        private const uint SHGFI_SMALLICON = 0x0;


        // ADD THIS SMALL WRAPPER
        private void SetFileIcon(string filePath)
        {
            if (multithreadCheckBox.Checked) return;          // ignore in multi-thread
            if (string.IsNullOrEmpty(filePath) || !File.Exists(filePath))
            {
                fileIconPicBox.Image = null;                  // blank when no file
                return;
            }

            SHFILEINFO shfi = new SHFILEINFO();
            SHGetFileInfo(filePath, 0, ref shfi, (uint)System.Runtime.InteropServices.Marshal.SizeOf(shfi),
                          SHGFI_ICON | SHGFI_SMALLICON);

            if (shfi.hIcon != IntPtr.Zero)
            {
                using (System.Drawing.Icon ico = System.Drawing.Icon.FromHandle(shfi.hIcon))
                    fileIconPicBox.Image = ico.ToBitmap();
                // release native handle to avoid leak
                DestroyIcon(shfi.hIcon);
            }
        }

        [System.Runtime.InteropServices.DllImport("user32.dll")]
        private static extern bool DestroyIcon(IntPtr hIcon);

        /// <summary>
        /// Asynchronously copies a single file with detailed progress reporting, UI updates, and performance monitoring.
        /// Handles extended length paths, progress throttling, and real-time statistics display.
        /// </summary>
        /// <param name="item">The file item wrapper containing file metadata and source information</param>
        /// <param name="fileSize">The total size of the file in bytes</param>
        /// <param name="fileBytesDone">The number of bytes already processed for this file (for resuming)</param>
        /// <param name="targetBase">The base target directory where the file should be copied</param>
        /// <returns>A task representing the asynchronous file copy operation</returns>
        private async Task CopyFileWithProgress(FileInfoWrapper item,
                                                     long fileSize,
                                                     long fileBytesDone,
                                                     string targetBase)
        {
            string srcPath = ToExtendedLengthPath(item.FilePath);
            string dstPath = ToExtendedLengthPath(
                ComputeDestinationPath(item.FilePath, false, targetBase, _currentSourceRootPath));
            if (string.IsNullOrEmpty(dstPath)) return;

            if (File.Exists(dstPath))
            {
                var srcInfo = new FileInfo(srcPath);
                var dstInfo = new FileInfo(dstPath);

                if (_doNotOverwrite)
                {
                    string reason = Translator.Get("File exists and 'Do Not Overwrite' is selected.");
                    Invoke(() => UpdateFileStatus(item, Translator.Get("Skipped (exists)")));
                    Interlocked.Increment(ref _totalFilesSkipped);
                    HandleSkippedFile(item, reason, dstPath);
                    return;
                }
                if (_overwriteIfNewer && srcInfo.LastWriteTime <= dstInfo.LastWriteTime)
                {
                    string reason = Translator.Get("Destination file is newer or the same age.");
                    Invoke(() => UpdateFileStatus(item, Translator.Get("Skipped (not newer)")));
                    Interlocked.Increment(ref _totalFilesSkipped);
                    HandleSkippedFile(item, reason, dstPath);
                    return;
                }
                File.Delete(dstPath);
            }

            Directory.CreateDirectory(System.IO.Path.GetDirectoryName(dstPath)!);

            int bufferBytes = (int)(bufferNumUpDown.Value * 1024);
            byte[] buffer = new byte[bufferBytes];
            long lastTick = Environment.TickCount64;

            // ✅ Use RetryOpenAsync and check for null
            await using var src = await RetryOpenAsync(srcPath, FileMode.Open, FileAccess.Read,
                                                 FileShare.ReadWrite, bufferBytes,
                                                 FileOptions.SequentialScan);
            if (src == null) return; // Error was handled by RetryOpenAsync

            // ✅ Use RetryOpenAsync and check for null
            await using var dst = await RetryOpenAsync(dstPath, FileMode.CreateNew, FileAccess.Write,
                                                 FileShare.None, bufferBytes,
                                                 FileOptions.SequentialScan);
            if (dst == null) return; // Error was handled by RetryOpenAsync

            while (true)
            {
                SetFileIcon(item.FilePath);
                _pauseEvent.WaitOne();
                _cancelDialogEvent.WaitOne();

                int read = await src.ReadAsync(buffer, 0, buffer.Length);
                if (read == 0) break;

                await dst.WriteAsync(buffer, 0, read);
                fileBytesDone += read;
                _totalBytesProcessed += read;

                double filePct = fileSize > 0 ? fileBytesDone * 100.0 / fileSize : 100.0;
                double overallPct = _totalBytesToProcess > 0
                                    ? _totalBytesProcessed * 100.0 / _totalBytesToProcess
                                    : 100.0;

                // Update the label with the bytes processed for the current file.
                fileProcessedLabel.Text = string.Format(
                    Translator.Get("File Processed: {0} / {1}"),
                    FormatBytes(fileBytesDone),
                    FormatBytes(fileSize));
                fileProcessedLabel.Refresh();
                UpdateFileCountLabels();
                Invoke(() =>
                {
                    modernFile.Value = Math.Min((int)(filePct * 100), 10_000);
                    modernTotal.Value = Math.Min((int)(overallPct * 100), 10_000);
                    UpdateFileStatus(item, string.Format(Translator.Get("{0}% done"), filePct.ToString("F2")));
                });
            }
        }




        private void MoveWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            // Checks if there are any skipped files in the list.
            if (_skippedFilesList.Any())
            {
                // If the current thread is not the UI thread, it invokes a delegate
                // to set the selected tab to the second one (index 2) on the UI thread.
                if (InvokeRequired)
                    Invoke(new Action(() => tabControl1.SelectedIndex = 2));
                // Otherwise, it directly sets the selected tab.
                else
                    tabControl1.SelectedIndex = 2;
            }

            // Ensures that the following UI updates are performed on the UI thread.
            Invoke((Delegate)(() =>
            {

                modernFile.Value = modernFile.Maximum;
                // Updates the file progress label to "100.00%".
                modernFile.Text = "100.00%";
                // Sets the total progress bar to its maximum value.
                modernTotal.Value = modernTotal.Maximum;
                // Updates the total progress label to "100.00%".
                modernTotal.Text = "100.00%";
            }));

            // Checks if the background worker completed with an error.
            if (e.Error != null)
            {
                // Displays a message box with the error message.
                MessageBox.Show(Translator.Get($"Move operation completed with errors: {e.Error.Message}"), Translator.Get("Move Error"), MessageBoxButtons.OK, MessageBoxIcon.Error);
                // Logs the error.
                LogError(string.Format(Translator.Get("Move Worker Error: {0}"), e.Error));
                // Invokes a delegate to show operation statistics and reset the UI.
                Invoke(() =>
                {
                    ShowOperationStatisticsSummary(false);
                    ResetProgressUIAndVariables();
                });
                // Stops the stopwatch that measures the operation duration.
                _stopwatch.Stop();
                // Stops the timer used for updating the UI.
                _updateTimer.Stop();
            }
            // Checks if the operation was cancelled by the user.
            else if (e.Cancelled)
            {
                // Displays a message box informing the user of the cancellation.
                MessageBox.Show(Translator.Get("Move operation cancelled by user."), Translator.Get("Operation Cancelled"), MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            // If the operation completed without errors or cancellation.
            else
            {
                // Invokes a delegate to show the operation summary and reset the UI.
                Invoke(() =>
                {
                    ShowOperationStatisticsSummary(false);
                    ResetProgressUIAndVariables();
                });
                // Stops the stopwatch.
                _stopwatch.Stop();
                // Stops the update timer.
                _updateTimer.Stop();
            }

            // Updates the drive space information on the UI.
            UpdateDriveSpaceInfo();

            // Loads the application icon from the embedded resources.
            using (var ms = new System.IO.MemoryStream(Properties.Resources.CopyThatIcon))
            {
                this.Icon = new System.Drawing.Icon(ms);
            }

            // Stops the operation timer if it's not null.
            _operationTimer?.Stop();
            // Signals the pause event, unblocking any waiting threads.
            _pauseEvent.Set();
            // Updates the NotifyIcon text based on the application version and user settings.
            if (proVersion)
            {
                if (minimizeSystemTrayCheckBox.Checked)
                {
                    notifyIcon1.Text = Translator.Get("Copy That v1.0 Pro By: Havoc || Double-Click To Open");
                }
                else
                {
                    notifyIcon1.Text = Translator.Get("Copy That v1.0 Pro By: Havoc");
                }
            }
            else
            {
                if (minimizeSystemTrayCheckBox.Checked)
                {
                    notifyIcon1.Text = Translator.Get("Copy That v1.0 By: Havoc || Double-Click To Open");
                }
                else
                {
                    notifyIcon1.Text = Translator.Get("Copy That v1.0 By: Havoc");
                }
            }

            // Resets the text of the pause/resume button.
            pauseResumeMultiButton.Text = Translator.Get("Pause");

            // Enables and disables various UI controls after the operation.
            startButton.Enabled = true;
            pauseResumeMultiButton.Enabled = false;
            cancelMultiButton.Enabled = false;


            modernTotal.Text = "0.00%";
            modernFile.Text = "0.00%";


            modernTotal.Value = 0;
            modernFile.Value = 0;
            // Resets various progress-related labels.
            fileProcessedLabel.Text = Translator.Get("Files Processed: 0 Bytes / 0 Bytes");
            totalCopiedProgressLabel.Text = string.Format(
    Translator.Get("Total C/M/D: 0 Bytes / {0}"),
    FormatBytes(_totalBytesToProcess));
            speedLabel.Text = Translator.Get("Speed: N/A");
            elapsedAndTargetTimeLabel.Text = Translator.Get("Elapsed / Target Time: 00:00:00 / 00:00:00");

            // Resets internal counters and variables.
            _totalBytesProcessed = 0;
            _totalBytesToProcess = 0;
            // Disposes of the CancellationTokenSource and sets it to null.
            _cancellationTokenSource?.Dispose();
            _cancellationTokenSource = null;

            // Sets the enabled state of various buttons.
            cancelButton.Enabled = false;
            pauseResumeButton.Enabled = false;
            startButton.Enabled = true;
            skipButton.Enabled = false;

            // Re-enables a large number of UI controls.
            addFileButton.Enabled = true;
            removeFileButton.Enabled = true;
            clearFileListButton.Enabled = true;
            sourceDirectoryLabel.Enabled = true;
            targetDirectoryLabel.Enabled = true;
            moveFileUpLabel.Enabled = true;
            moveFileDownLabel.Enabled = true;
            moveToTopLabel.Enabled = true;
            moveToBottomLabel.Enabled = true;
            exitLabel.Enabled = true;
            minimizeLabel.Enabled = true;
            rollDownLabel.Enabled = true;
            rollUpLabel.Enabled = true;
            settingsLabel.Enabled = true;
            allAboutLabel.Enabled = true;
            overwriteAllCheckBox.Enabled = true;
            doNotOverwriteCheckBox.Enabled = true;
            overwriteIfNewerCheckBox.Enabled = true;
            keepDirStructCheckBox.Enabled = true;
            leaveEmptyFoldersCheckBox.Enabled = true;
            keepOnlyFilesCheckBox.Enabled = true;
            copyFilesDirsCheckBox.Enabled = true;
            createCustomDirCheckBox.Enabled = true;

            // Calls a method to reset the UI and variables again. This seems redundant but is in the original code.
            ResetProgressUIAndVariables();
            // Stops the update timer again.
            _updateTimer.Stop();

            // Updates drive space info again. Also seems redundant.
            UpdateDriveSpaceInfo();
        }

        private void DeleteWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            // Checks if there are any skipped files.
            if (_skippedFilesList.Any())
            {
                // Invokes the UI thread to set the selected tab to 2.
                if (InvokeRequired)
                    Invoke(new Action(() => tabControl1.SelectedIndex = 2));
                // Directly sets the tab if already on the UI thread.
                else
                    tabControl1.SelectedIndex = 2;
            }
            // Ensures UI updates are on the main thread.
            Invoke((Delegate)(() =>
            {

                modernFile.Value = modernFile.Maximum;

                // Sets file progress label to "100.00%".

                modernFile.Text = "100.00%";

                // Sets total progress bar to 100%.
                modernTotal.Value = modernTotal.Maximum;
                // Sets total progress label to "100.00%".

                modernTotal.Text = "100.00%";
            }));

            // Checks for errors during deletion.
            if (e.Error != null)
            {
                // Displays error message.
                MessageBox.Show(Translator.Get($"Secure Delete operation completed with errors: {e.Error.Message}"), Translator.Get("Secure Delete Error"), MessageBoxButtons.OK, MessageBoxIcon.Error);
                // Logs the error.
                LogError(string.Format(Translator.Get("Secure Delete Worker Error: {0}"), e.Error));
                // Invokes a method to show stats and reset UI.
                Invoke(() =>
                {
                    ShowOperationStatisticsSummary(false);
                    ResetProgressUIAndVariables();
                });
                // Stops the stopwatch and update timer.
                _stopwatch.Stop();
                _updateTimer.Stop();
            }
            // Checks if deletion was cancelled.
            else if (e.Cancelled)
            {
                // Displays cancellation message.
                MessageBox.Show(Translator.Get("Secure Delete operation cancelled by user."), Translator.Get("Operation Cancelled"), MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            // If deletion completed successfully.
            else
            {
                // Invokes a method to show stats and reset UI.
                Invoke(() =>
                {
                    ShowOperationStatisticsSummary(false);
                    ResetProgressUIAndVariables();
                });
                // Stops the stopwatch and update timer.
                _stopwatch.Stop();
                _updateTimer.Stop();
            }

            // Updates drive space information.
            UpdateDriveSpaceInfo();

            // Sets the application icon.
            using (var ms = new System.IO.MemoryStream(Properties.Resources.CopyThatIcon))
            {
                this.Icon = new System.Drawing.Icon(ms);
            }
            // Stops the operation timer.
            _operationTimer?.Stop();
            // Unblocks paused threads.
            _pauseEvent.Set();
            // Updates the notify icon text based on version and settings.
            if (proVersion)
            {
                if (minimizeSystemTrayCheckBox.Checked)
                {
                    notifyIcon1.Text = Translator.Get("Copy That v1.0 Pro By: Havoc || Double-Click To Open");
                }
                else
                {
                    notifyIcon1.Text = Translator.Get("Copy That v1.0 Pro By: Havoc");
                }
            }
            else
            {
                if (minimizeSystemTrayCheckBox.Checked)
                {
                    notifyIcon1.Text = Translator.Get("Copy That v1.0 By: Havoc || Double-Click To Open");
                }
                else
                {
                    notifyIcon1.Text = Translator.Get("Copy That v1.0 By: Havoc");
                }
            }

            // Resets the pause/resume button text.
            pauseResumeMultiButton.Text = Translator.Get("Pause");

            // Enables and disables buttons.
            startButton.Enabled = true;
            pauseResumeMultiButton.Enabled = false;
            cancelMultiButton.Enabled = false;

            // Resets progress labels.
            modernTotal.Text = "0.00%";
            modernFile.Text = "0.00%";

            modernTotal.Value = 0;
            modernFile.Value = 0;
            // Resets status labels.
            fileProcessedLabel.Text = Translator.Get("Files Processed: 0 Bytes / 0 Bytes");
            totalCopiedProgressLabel.Text = string.Format(
    Translator.Get("Total C/M/D: 0 Bytes / {0}"),
    FormatBytes(_totalBytesToProcess));
            speedLabel.Text = Translator.Get("Speed: N/A");
            elapsedAndTargetTimeLabel.Text = Translator.Get("Elapsed / Target Time: 00:00:00 / 00:00:00");

            // Resets internal state variables.
            _totalBytesProcessed = 0;
            _totalBytesToProcess = 0;
            // Disposes the cancellation token source.
            _cancellationTokenSource?.Dispose();
            _cancellationTokenSource = null;

            // Sets the enabled state of various buttons.
            cancelButton.Enabled = false;
            pauseResumeButton.Enabled = false;
            startButton.Enabled = true;
            skipButton.Enabled = false;

            // Re-enables a large number of UI controls.
            sourceDirectoryLabel.Enabled = true;
            targetDirectoryLabel.Enabled = true;
            moveFileUpLabel.Enabled = true;
            moveFileDownLabel.Enabled = true;
            moveToTopLabel.Enabled = true;
            moveToBottomLabel.Enabled = true;
            addFileButton.Enabled = true;
            removeFileButton.Enabled = true;
            clearFileListButton.Enabled = true;
            exitLabel.Enabled = true;
            minimizeLabel.Enabled = true;
            rollDownLabel.Enabled = true;
            rollUpLabel.Enabled = true;
            settingsLabel.Enabled = true;
            allAboutLabel.Enabled = true;
            overwriteAllCheckBox.Enabled = true;
            doNotOverwriteCheckBox.Enabled = true;
            overwriteIfNewerCheckBox.Enabled = true;
            keepDirStructCheckBox.Enabled = true;
            leaveEmptyFoldersCheckBox.Enabled = true;
            keepOnlyFilesCheckBox.Enabled = true;
            copyFilesDirsCheckBox.Enabled = true;
            createCustomDirCheckBox.Enabled = true;

            // Resets UI and variables.
            ResetProgressUIAndVariables();
            // Stops update timer.
            _updateTimer.Stop();

            // Updates drive space info.
            UpdateDriveSpaceInfo();
        }

        private int _totalCopyOps = 0;
        private int _totalMoveOps = 0;
        private int _totalDeleteOps = 0;
        private int _totalCancelledOps = 0;
        private int _totalCompletedOps = 0;

        // File counters
        private long _grandFilesConsidered = 0;
        private long _grandFilesCopied = 0;
        private long _grandFilesMoved = 0;
        private long _grandFilesDeleted = 0;
        private long _grandFilesSkipped = 0;
        private long _grandFilesFailed = 0;

        // Byte counters
        private long _grandBytesProcessed = 0;
        private long _grandBytesToProcess = 0;

        // Timing
        private TimeSpan _grandElapsedTime = TimeSpan.Zero;
        private TimeSpan _grandTargetTime = TimeSpan.Zero;

        TimeSpan elapsed = TimeSpan.Zero;
        private DateTime _lastUpdateTime = DateTime.Now;
        private long _lastBytesProcessed = 0;



        /// <summary>
        /// Updates running totals for file operations, accumulating statistics for the current operation
        /// and updating both in-memory counters and the UI display.
        /// </summary>
        /// <param name="operation">The type of file operation being performed (Copy, Move, or SecureDelete)</param>
        /// <param name="cancelled">Indicates whether the operation was cancelled</param>
        private void UpdateRunningTotals(FileOperation operation, bool cancelled)
        {
            // Operation counters
            switch (operation)
            {
                case FileOperation.Copy:
                    _totalCopyOps++;
                    _grandFilesCopied += _processedFiles;
                    break;
                case FileOperation.Move:
                    _totalMoveOps++;
                    _grandFilesMoved += _processedFiles;
                    break;
                case FileOperation.SecureDelete:
                    _totalDeleteOps++;
                    _grandFilesDeleted += _processedFiles;
                    break;
            }

            if (_isCanceled)
                _totalCancelledOps++;
            else
                _totalCompletedOps++;

            // Files
            _grandFilesConsidered += _grandTotalFileCount;
            _grandFilesSkipped += _totalFilesSkipped;
            _grandFilesFailed += _totalFilesFailed;

            // Bytes
            _grandBytesProcessed += _totalBytesProcessed;
            _grandBytesToProcess += _totalBytesToProcess;

            // Time - capture the current operation's time
            if (_stopwatch != null && _stopwatch.IsRunning)
            {
                _grandElapsedTime += _stopwatch.Elapsed;

                // Calculate target time for this operation
                long bytesRemaining = _totalBytesToProcess - _totalBytesProcessed;
                if (bytesRemaining > 0 && _totalBytesProcessed > 0)
                {
                    double avgSpeed = _totalBytesProcessed / _stopwatch.Elapsed.TotalSeconds;
                    TimeSpan remainingTime = TimeSpan.FromSeconds(bytesRemaining / avgSpeed);
                    _grandTargetTime += _stopwatch.Elapsed + remainingTime;
                }
                else
                {
                    _grandTargetTime += _stopwatch.Elapsed;
                }
            }

            // Update UI
            UpdateRunningTotalsTab();
        }

        /// <summary>
        /// Updates the running totals tab UI with current accumulated statistics.
        /// This method must be called on the UI thread and stops timers before updating labels.
        /// </summary>
        private void UpdateRunningTotalsTab()
        {
            if (InvokeRequired)
            {
                Invoke(new Action(UpdateRunningTotalsTab));
                return;
            }

            // Stop the timer and stopwatch
            _updateTimer.Stop();
            _stopwatch.Stop();

            // Update all the labels...
            totalCopyOperationsLabel.Text = $"Copying Operations Total: {_totalCopyOps}";
            totalMoveOperationsLabel.Text = $"Moving Operations Total: {_totalMoveOps}";
            totalDeleteOperationsLabel.Text = $"Secure Delete Operations Total: {_totalDeleteOps}";
            totalCancelledOperationsLabel.Text = $"Cancelled Operations Total: {_totalCancelledOps}";
            totalCompletedOperationsLabel.Text = $"Completed Operations Total: {_totalCompletedOps}";
            totalFilesConsideredLabel.Text = $"Total Files Considered: {_grandFilesConsidered:N0}";
            totalFilesCopiedLabel.Text = $"Files Copied: {_grandFilesCopied:N0}";
            totalFilesMovedLabel.Text = $"Files Moved: {_grandFilesMoved:N0}";
            totalFilesDeletedLabel.Text = $"Files Securely Deleted: {_grandFilesDeleted:N0}";
            totalFilesSkippedLabel.Text = $"Files Skipped: {_grandFilesSkipped:N0}";
            totalFilesFailedLabel.Text = $"Files Failed: {_grandFilesFailed:N0}";
            totalBytesProcessedLabel.Text = $"Total Bytes Processed: {FormatBytes(_grandBytesProcessed)}";
            totalBytesToProcessLabel.Text = $"Total Bytes To Process (est): {FormatBytes(_grandBytesToProcess)}";

            // Use the static method from TotalsManager for time display
            totalElapsedTimeLabel.Text = $"Total Elapsed Time: {TotalsManager.FormatTimeWithDaysAndYears(_grandElapsedTime)}";
            totalTargetTimeLabel.Text = $"Total Target Time: {TotalsManager.FormatTimeWithDaysAndYears(_grandTargetTime)}";

            // Update reset button state
            resetTotalsButton.Enabled = TotalsManager.HasAnyTotals();
        }

        /// <summary>
        /// Initializes the reset totals button state based on whether any totals exist in persistent storage.
        /// Enables the button only if there are totals to reset.
        /// </summary>
        private void InitializeResetButton()
        {
            resetTotalsButton.Enabled = TotalsManager.HasAnyTotals();
        }


        /// <summary>
        /// Static class responsible for managing and persisting operation totals and statistics
        /// across application sessions using application settings.
        /// </summary>
        public static class TotalsManager
        {
            // Add this helper method to format TimeSpan with days and years
            /// <summary>
            /// Formats a TimeSpan into a human-readable string that includes years, days, and time components
            /// when applicable. Formats as "Xy Yd HH:MM:SS", "Xd HH:MM:SS", or "HH:MM:SS" depending on duration.
            /// </summary>
            /// <param name="timeSpan">The TimeSpan to format</param>
            /// <returns>Formatted time string with appropriate time components</returns>
            public static string FormatTimeWithDaysAndYears(TimeSpan timeSpan)
            {
                if (timeSpan.TotalSeconds < 1)
                    return "00:00:00";

                int totalDays = (int)timeSpan.TotalDays;
                int years = totalDays / 365;
                int remainingDays = totalDays % 365;
                int hours = timeSpan.Hours;
                int minutes = timeSpan.Minutes;
                int seconds = timeSpan.Seconds;

                if (years > 0)
                {
                    return $"{years}y {remainingDays}d {hours:00}:{minutes:00}:{seconds:00}";
                }
                else if (remainingDays > 0)
                {
                    return $"{remainingDays}d {hours:00}:{minutes:00}:{seconds:00}";
                }
                else
                {
                    return $"{hours:00}:{minutes:00}:{seconds:00}";
                }
            }

            // Add this method to check if there are any totals
            /// <summary>
            /// Checks if any operation totals have been recorded in the application settings.
            /// </summary>
            /// <returns>True if any total values are non-zero, otherwise false</returns>
            public static bool HasAnyTotals()
            {
                var settings = Properties.Settings.Default;

                return settings.TotalCopyOperations > 0 ||
                       settings.TotalMoveOperations > 0 ||
                       settings.TotalDeleteOperations > 0 ||
                       settings.TotalCancelledOperations > 0 ||
                       settings.TotalCompletedOperations > 0 ||
                       settings.TotalFilesConsidered > 0 ||
                       settings.TotalFilesCopied > 0 ||
                       settings.TotalFilesMoved > 0 ||
                       settings.TotalFilesDeleted > 0 ||
                       settings.TotalFilesSkipped > 0 ||
                       settings.TotalFilesFailed > 0 ||
                       settings.TotalBytesProcessed > 0 ||
                       settings.TotalBytesToProcess > 0 ||
                       settings.TotalElapsedTimeSeconds > 0 ||
                       settings.TotalTargetTimeSeconds > 0;
            }

            /// <summary>
            /// Saves operation statistics to application settings by accumulating values with existing totals.
            /// </summary>
            /// <param name="copyOps">Number of copy operations to add</param>
            /// <param name="moveOps">Number of move operations to add</param>
            /// <param name="deleteOps">Number of delete operations to add</param>
            /// <param name="cancelledOps">Number of cancelled operations to add</param>
            /// <param name="completedOps">Number of completed operations to add</param>
            /// <param name="filesConsidered">Number of files considered to add</param>
            /// <param name="filesCopied">Number of files copied to add</param>
            /// <param name="filesMoved">Number of files moved to add</param>
            /// <param name="filesDeleted">Number of files deleted to add</param>
            /// <param name="filesSkipped">Number of files skipped to add</param>
            /// <param name="filesFailed">Number of files failed to add</param>
            /// <param name="bytesProcessed">Number of bytes processed to add</param>
            /// <param name="bytesToProcess">Number of bytes to process to add</param>
            /// <param name="elapsedTime">Elapsed time to add to total elapsed time</param>
            /// <param name="targetTime">Target time to add to total target time</param>
            public static void SaveTotals(
                int copyOps, int moveOps, int deleteOps, int cancelledOps, int completedOps,
                long filesConsidered, long filesCopied, long filesMoved, long filesDeleted, long filesSkipped, long filesFailed,
                long bytesProcessed, long bytesToProcess,
                TimeSpan elapsedTime, TimeSpan targetTime)
            {
                var settings = Properties.Settings.Default;

                // Operations
                settings.TotalCopyOperations += copyOps;
                settings.TotalMoveOperations += moveOps;
                settings.TotalDeleteOperations += deleteOps;
                settings.TotalCancelledOperations += cancelledOps;
                settings.TotalCompletedOperations += completedOps;

                // Files
                settings.TotalFilesConsidered += filesConsidered;
                settings.TotalFilesCopied += filesCopied;
                settings.TotalFilesMoved += filesMoved;
                settings.TotalFilesDeleted += filesDeleted;
                settings.TotalFilesSkipped += filesSkipped;
                settings.TotalFilesFailed += filesFailed;

                // Bytes
                settings.TotalBytesProcessed += bytesProcessed;
                settings.TotalBytesToProcess += bytesToProcess;

                // Time (store as seconds)
                settings.TotalElapsedTimeSeconds += elapsedTime.TotalSeconds;
                settings.TotalTargetTimeSeconds += targetTime.TotalSeconds;

                settings.Save();
            }

            /// <summary>
            /// Loads saved totals from application settings and populates the corresponding UI labels.
            /// Optionally updates the enabled state of a reset button based on whether totals exist.
            /// </summary>
            /// <param name="totalCopyOperationsLabel">Label for total copy operations count</param>
            /// <param name="totalMoveOperationsLabel">Label for total move operations count</param>
            /// <param name="totalDeleteOperationsLabel">Label for total delete operations count</param>
            /// <param name="totalCancelledOperationsLabel">Label for total cancelled operations count</param>
            /// <param name="totalCompletedOperationsLabel">Label for total completed operations count</param>
            /// <param name="totalFilesConsideredLabel">Label for total files considered count</param>
            /// <param name="totalFilesCopiedLabel">Label for total files copied count</param>
            /// <param name="totalFilesMovedLabel">Label for total files moved count</param>
            /// <param name="totalFilesDeletedLabel">Label for total files deleted count</param>
            /// <param name="totalFilesSkippedLabel">Label for total files skipped count</param>
            /// <param name="totalFilesFailedLabel">Label for total files failed count</param>
            /// <param name="totalBytesProcessedLabel">Label for total bytes processed</param>
            /// <param name="totalBytesToProcessLabel">Label for total bytes to process</param>
            /// <param name="totalElapsedTimeLabel">Label for total elapsed time</param>
            /// <param name="totalTargetTimeLabel">Label for total target time</param>
            /// <param name="resetTotalsButton">Optional reset button to enable/disable based on totals existence</param>
            public static void LoadTotalsIntoLabels(
                Label totalCopyOperationsLabel, Label totalMoveOperationsLabel, Label totalDeleteOperationsLabel,
                Label totalCancelledOperationsLabel, Label totalCompletedOperationsLabel,
                Label totalFilesConsideredLabel, Label totalFilesCopiedLabel, Label totalFilesMovedLabel,
                Label totalFilesDeletedLabel, Label totalFilesSkippedLabel, Label totalFilesFailedLabel,
                Label totalBytesProcessedLabel, Label totalBytesToProcessLabel,
                Label totalElapsedTimeLabel, Label totalTargetTimeLabel,
                Button resetTotalsButton = null) // Add optional parameter for reset button
            {
                var settings = Properties.Settings.Default;

                // Operations
                totalCopyOperationsLabel.Text = $"{settings.TotalCopyOperations:N0}";
                totalMoveOperationsLabel.Text = $"{settings.TotalMoveOperations:N0}";
                totalDeleteOperationsLabel.Text = $"{settings.TotalDeleteOperations:N0}";
                totalCancelledOperationsLabel.Text = $"{settings.TotalCancelledOperations:N0}";
                totalCompletedOperationsLabel.Text = $"{settings.TotalCompletedOperations:N0}";

                // Files
                totalFilesConsideredLabel.Text = $"{settings.TotalFilesConsidered:N0}";
                totalFilesCopiedLabel.Text = $"{settings.TotalFilesCopied:N0}";
                totalFilesMovedLabel.Text = $"{settings.TotalFilesMoved:N0}";
                totalFilesDeletedLabel.Text = $"{settings.TotalFilesDeleted:N0}";
                totalFilesSkippedLabel.Text = $"{settings.TotalFilesSkipped:N0}";
                totalFilesFailedLabel.Text = $"{settings.TotalFilesFailed:N0}";

                // Bytes
                totalBytesProcessedLabel.Text = FormatBytes(settings.TotalBytesProcessed);
                totalBytesToProcessLabel.Text = FormatBytes(settings.TotalBytesToProcess);

                // Time
                TimeSpan elapsed = TimeSpan.FromSeconds(settings.TotalElapsedTimeSeconds);
                TimeSpan target = TimeSpan.FromSeconds(settings.TotalTargetTimeSeconds);

                totalElapsedTimeLabel.Text = FormatTimeWithDaysAndYears(elapsed);
                totalTargetTimeLabel.Text = FormatTimeWithDaysAndYears(target);

                // Update reset button state if provided
                if (resetTotalsButton != null)
                {
                    resetTotalsButton.Enabled = HasAnyTotals();
                }
            }

            /// <summary>
            /// Resets all operation totals to zero in application settings and updates the corresponding UI labels.
            /// Optionally updates the enabled state of a reset button.
            /// </summary>
            /// <param name="totalCopyOperationsLabel">Label for total copy operations count</param>
            /// <param name="totalMoveOperationsLabel">Label for total move operations count</param>
            /// <param name="totalDeleteOperationsLabel">Label for total delete operations count</param>
            /// <param name="totalCancelledOperationsLabel">Label for total cancelled operations count</param>
            /// <param name="totalCompletedOperationsLabel">Label for total completed operations count</param>
            /// <param name="totalFilesConsideredLabel">Label for total files considered count</param>
            /// <param name="totalFilesCopiedLabel">Label for total files copied count</param>
            /// <param name="totalFilesMovedLabel">Label for total files moved count</param>
            /// <param name="totalFilesDeletedLabel">Label for total files deleted count</param>
            /// <param name="totalFilesSkippedLabel">Label for total files skipped count</param>
            /// <param name="totalFilesFailedLabel">Label for total files failed count</param>
            /// <param name="totalBytesProcessedLabel">Label for total bytes processed</param>
            /// <param name="totalBytesToProcessLabel">Label for total bytes to process</param>
            /// <param name="totalElapsedTimeLabel">Label for total elapsed time</param>
            /// <param name="totalTargetTimeLabel">Label for total target time</param>
            /// <param name="resetTotalsButton">Optional reset button to disable after reset</param>
            public static void ResetTotals(
                Label totalCopyOperationsLabel, Label totalMoveOperationsLabel, Label totalDeleteOperationsLabel,
                Label totalCancelledOperationsLabel, Label totalCompletedOperationsLabel,
                Label totalFilesConsideredLabel, Label totalFilesCopiedLabel, Label totalFilesMovedLabel,
                Label totalFilesDeletedLabel, Label totalFilesSkippedLabel, Label totalFilesFailedLabel,
                Label totalBytesProcessedLabel, Label totalBytesToProcessLabel,
                Label totalElapsedTimeLabel, Label totalTargetTimeLabel,
                Button resetTotalsButton = null) // Add optional parameter for reset button
            {
                var settings = Properties.Settings.Default;

                // Reset values
                settings.TotalCopyOperations = 0;
                settings.TotalMoveOperations = 0;
                settings.TotalDeleteOperations = 0;
                settings.TotalCancelledOperations = 0;
                settings.TotalCompletedOperations = 0;

                settings.TotalFilesConsidered = 0;
                settings.TotalFilesCopied = 0;
                settings.TotalFilesMoved = 0;
                settings.TotalFilesDeleted = 0;
                settings.TotalFilesSkipped = 0;
                settings.TotalFilesFailed = 0;

                settings.TotalBytesProcessed = 0;
                settings.TotalBytesToProcess = 0;

                settings.TotalElapsedTimeSeconds = 0;
                settings.TotalTargetTimeSeconds = 0;

                settings.Save();

                // Immediately refresh labels and button state
                LoadTotalsIntoLabels(
                    totalCopyOperationsLabel, totalMoveOperationsLabel, totalDeleteOperationsLabel,
                    totalCancelledOperationsLabel, totalCompletedOperationsLabel,
                    totalFilesConsideredLabel, totalFilesCopiedLabel, totalFilesMovedLabel,
                    totalFilesDeletedLabel, totalFilesSkippedLabel, totalFilesFailedLabel,
                    totalBytesProcessedLabel, totalBytesToProcessLabel,
                    totalElapsedTimeLabel, totalTargetTimeLabel,
                    resetTotalsButton // Pass the button to update its state
                );
            }
        }
        void PlayRes(System.IO.Stream wavStream)   // accept any Stream
        {
            if (wavStream == null) return;
            try
            {
                using var ms = new System.IO.MemoryStream();
                wavStream.CopyTo(ms);          // copy resource stream
                ms.Position = 0;
                using var sp = new System.Media.SoundPlayer(ms);
                sp.Play();
            }
            catch { }
        }
        private void _copyWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs isCancelled)
        {
            bool isMultiThreaded = multithreadCheckBox.Checked;

            UpdateRunningTotals(FileOperation.Copy, _isCanceled);

            TotalsManager.SaveTotals(
                _totalCopyOps, _totalMoveOps, _totalDeleteOps, _totalCancelledOps, _totalCompletedOps,
                _grandFilesConsidered, _grandFilesCopied, _grandFilesMoved, _grandFilesDeleted, _grandFilesSkipped, _grandFilesFailed,
                _grandBytesProcessed, _grandBytesToProcess,
                _grandElapsedTime, _grandTargetTime
            );

            TotalsManager.LoadTotalsIntoLabels(
                totalCopyOperationsLabel, totalMoveOperationsLabel, totalDeleteOperationsLabel,
                totalCancelledOperationsLabel, totalCompletedOperationsLabel,
                totalFilesConsideredLabel, totalFilesCopiedLabel, totalFilesMovedLabel,
                totalFilesDeletedLabel, totalFilesSkippedLabel, totalFilesFailedLabel,
                totalBytesProcessedLabel, totalBytesToProcessLabel,
                totalElapsedTimeLabel, totalTargetTimeLabel,
                resetTotalsButton
            );

            allowTabChanges = true;

            if (_skippedFilesList.Any())
            {
                if (InvokeRequired)
                    Invoke(new Action(() => tabControl1.SelectedIndex = 2));
                else
                    tabControl1.SelectedIndex = 2;
            }

            Invoke((Delegate)(() =>
            {
                modernFile.Value = 0;
                modernTotal.Value = 0;
                modernTotal.Text = "0.00%";
                modernFile.Text = "0.00%";
                modernFile.Value = modernFile.Minimum;
                modernTotal.Value = modernTotal.Minimum;

                if (isMultiThreaded)
                {
                    progressBarMultiTotal.Value = 0;
                    progressBarMultiTotal.Text = "0.00%";
                }
            }));



            if (isCancelled.Error != null)
            {
                status = "Error";
                _stopwatch.Stop();
                _updateTimer.Stop();
                elapsedAndTargetTimeLabel.Text = Translator.Get("Elapsed / Target Time: 00:00:00 / 00:00:00");
                MessageBox.Show(Translator.Get($"Copy operation completed with errors: {isCancelled.Error.Message}"), Translator.Get("Copy Error"), MessageBoxButtons.OK, MessageBoxIcon.Error);
                LogError($"Copy Worker Error: {isCancelled.Error}");
                if (onErrorCheckBox.Checked) PlayRes(Properties.Resources.OnError);
                Invoke(() => { ShowOperationStatisticsSummary(isMultiThreaded); ResetProgressUIAndVariables(); });
            }
            else if (isCancelled.Cancelled)
            {
                status = "Cancelled";
                _stopwatch.Stop();
                _updateTimer.Stop();
                elapsedAndTargetTimeLabel.Text = Translator.Get("Elapsed / Target Time: 00:00:00 / 00:00:00");
                MessageBox.Show(Translator.Get("Copy operation cancelled by user."), Translator.Get("Operation Cancelled"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                if (onCancelCheckBox.Checked) PlayRes(Properties.Resources.OnCancel);
                ShowOperationStatisticsSummary(isMultiThreaded);
                ResetProgressUIAndVariables();
            }
            else
            {
                status = "Completed";
                if (onFinishCheckBox.Checked) PlayRes(Properties.Resources.OnFinish);
                Invoke((Delegate)(() =>
                {
                    modernFile.Value = 0;
                    modernTotal.Value = 0;
                    modernTotal.Text = "0.00%";
                    modernFile.Text = "0.00%";
                    modernFile.Value = modernFile.Minimum;
                    modernTotal.Value = modernTotal.Minimum;

                    if (isMultiThreaded)
                    {
                        progressBarMultiTotal.Value = 0;
                        progressBarMultiTotal.Text = "0.00%";
                    }
                }));
                Invoke(() => { ShowOperationStatisticsSummary(isMultiThreaded); ResetProgressUIAndVariables(); });
                _stopwatch.Stop();
                _updateTimer.Stop();
                elapsedAndTargetTimeLabel.Text = Translator.Get("Elapsed / Target Time: 00:00:00 / 00:00:00");
            }

            UpdateDriveSpaceInfo();

            using (var ms = new System.IO.MemoryStream(Properties.Resources.CopyThatIcon))
            {
                this.Icon = new System.Drawing.Icon(ms);
            }

            _operationTimer?.Stop();
            _pauseEvent.Set();

            if (proVersion)
            {
                if (minimizeSystemTrayCheckBox.Checked)
                {
                    notifyIcon1.Text = Translator.Get("Copy That v1.0 Pro By: Havoc || Double-Click To Open");
                }
                else
                {
                    notifyIcon1.Text = Translator.Get("Copy That v1.0 Pro By: Havoc");
                }
            }
            else
            {
                if (minimizeSystemTrayCheckBox.Checked)
                {
                    notifyIcon1.Text = Translator.Get("Copy That v1.0 By: Havoc || Double-Click To Open");
                }
                else
                {
                    notifyIcon1.Text = Translator.Get("Copy That v1.0 By: Havoc");
                }
            }

            Invoke((Delegate)(() =>
            {
                modernFile.Value = 0;
                modernTotal.Value = 0;
                modernTotal.Text = "0.00%";
                modernFile.Text = "0.00%";
                modernFile.Value = modernFile.Minimum;
                modernTotal.Value = modernTotal.Minimum;
            }));

            pauseResumeMultiButton.Text = Translator.Get("Pause");

            startButton.Enabled = true;
            pauseResumeMultiButton.Enabled = false;
            cancelMultiButton.Enabled = false;

            modernTotal.Text = "0.00%";
            modernFile.Text = "0.00%";

            modernTotal.Value = 0;
            modernFile.Value = 0;

            fileProcessedLabel.Text = Translator.Get("Files Processed: 0 Bytes / 0 Bytes");
            totalCopiedProgressLabel.Text = string.Format(
    Translator.Get("Total C/M/D: 0 Bytes / {0}"),
    FormatBytes(_totalBytesToProcess));
            speedLabel.Text = Translator.Get("Speed: N/A");

            _totalBytesProcessed = 0;
            _totalBytesToProcess = 0;

            _cancellationTokenSource?.Dispose();
            _cancellationTokenSource = null;

            cancelButton.Enabled = false;
            pauseResumeButton.Enabled = false;
            skipButton.Enabled = false;

            copyMoveDeleteComboBox.Enabled = true;
            addFileButton.Enabled = true;
            removeFileButton.Enabled = true;
            clearFileListButton.Enabled = true;
            sourceDirectoryLabel.Enabled = true;
            targetDirectoryLabel.Enabled = true;
            moveFileUpLabel.Enabled = true;
            moveFileDownLabel.Enabled = true;
            moveToTopLabel.Enabled = true;
            moveToBottomLabel.Enabled = true;
            exitLabel.Enabled = true;
            minimizeLabel.Enabled = true;
            rollDownLabel.Enabled = true;
            rollUpLabel.Enabled = true;
            settingsLabel.Enabled = true;
            allAboutLabel.Enabled = true;
            overwriteAllCheckBox.Enabled = true;
            doNotOverwriteCheckBox.Enabled = true;
            overwriteIfNewerCheckBox.Enabled = true;
            keepDirStructCheckBox.Enabled = true;
            leaveEmptyFoldersCheckBox.Enabled = true;
            keepOnlyFilesCheckBox.Enabled = true;
            copyFilesDirsCheckBox.Enabled = true;
            createCustomDirCheckBox.Enabled = true;

            ResetProgressUIAndVariables();
            _updateTimer.Stop();

            UpdateDriveSpaceInfo();

            ShowAllTabs();
        }

        /// <summary>
        /// Toggles the enabled state of UI controls based on whether an operation is in progress.
        /// Disables controls during an active operation and re-enables them when operations are stopped.
        /// </summary>
        /// <param name="enabled">True to enable controls (no operation in progress), false to disable controls (operation in progress)</param>
        private void ToggleControlsForOperation(bool enabled)
        {
            // If not on the UI thread, invokes a delegate to run this method on the UI thread.
            if (InvokeRequired)
            {
                Invoke(new Action(() => ToggleControlsForOperation(enabled)));
                return;
            }

            // Sets the enabled state of various buttons based on the 'enabled' parameter.
            startButton.Enabled = enabled;
            pauseResumeButton.Enabled = !enabled;
            cancelButton.Enabled = !enabled;
            addFileButton.Enabled = enabled;
            removeFileButton.Enabled = enabled;
            clearFileListButton.Enabled = enabled;
            sourceDirectoryLabel.Enabled = enabled;
            targetDirectoryLabel.Enabled = enabled;
            moveFileUpLabel.Enabled = enabled;
            moveFileDownLabel.Enabled = enabled;
            moveToTopLabel.Enabled = enabled;
            moveToBottomLabel.Enabled = enabled;
            exitLabel.Enabled = enabled;
            minimizeLabel.Enabled = enabled;
            rollDownLabel.Enabled = enabled;
            rollUpLabel.Enabled = enabled;
            settingsLabel.Enabled = enabled;
            allAboutLabel.Enabled = enabled;

            // Sets the enabled state of various checkboxes.
            overwriteAllCheckBox.Enabled = enabled;
            doNotOverwriteCheckBox.Enabled = enabled;
            overwriteIfNewerCheckBox.Enabled = enabled;
            keepDirStructCheckBox.Enabled = enabled;
            leaveEmptyFoldersCheckBox.Enabled = enabled;
            keepOnlyFilesCheckBox.Enabled = enabled;
            copyFilesDirsCheckBox.Enabled = enabled;
            createCustomDirCheckBox.Enabled = enabled;
        }

        /// <summary>
        /// Computes the destination path for a file or directory based on various copy mode flags
        /// and directory structure preferences.
        /// </summary>
        /// <param name="sourcePath">The full path of the source file or directory</param>
        /// <param name="isDirectory">True if the source path is a directory, false if it's a file</param>
        /// <param name="targetBase">The base target directory where items should be copied</param>
        /// <param name="sourceRoot">The root source directory used for calculating relative paths</param>
        /// <returns>The computed destination path, or null if the item should be skipped</returns>
        private string ComputeDestinationPath(string sourcePath, bool isDirectory, string targetBase, string sourceRoot)
        {
            if (string.IsNullOrEmpty(sourcePath) || string.IsNullOrEmpty(targetBase) || string.IsNullOrEmpty(sourceRoot))
                return null;

            string destinationPath;

            if (_keepDirectoryStructure)
            {
                // Keep full directory structure - include the parent directory name
                string sourceRootName = System.IO.Path.GetFileName(sourceRoot.TrimEnd(System.IO.Path.DirectorySeparatorChar));

                // Create relative path including the source root directory name
                string relativePath = sourcePath.Substring(sourceRoot.Length);
                if (!string.IsNullOrEmpty(relativePath))
                {
                    // Include the source root name in the path
                    relativePath = System.IO.Path.Combine(sourceRootName, relativePath.TrimStart(System.IO.Path.DirectorySeparatorChar));
                }
                else
                {
                    // This is the source root directory itself
                    relativePath = sourceRootName;
                }

                destinationPath = System.IO.Path.Combine(targetBase, relativePath);
            }
            else if (_copyFilesOnly)
            {
                // Copy Files Only - copy everything inside top folder but not the top folder itself
                if (isDirectory)
                {
                    // For directories, remove the top level directory from the path
                    string relativePath = sourcePath.Substring(sourceRoot.Length);
                    string[] pathParts = relativePath.TrimStart(System.IO.Path.DirectorySeparatorChar).Split(System.IO.Path.DirectorySeparatorChar);
                    if (pathParts.Length > 1)
                    {
                        // This is a subdirectory, include it
                        string subPath = string.Join(System.IO.Path.DirectorySeparatorChar.ToString(), pathParts, 1, pathParts.Length - 1);
                        destinationPath = System.IO.Path.Combine(targetBase, subPath);
                    }
                    else
                    {
                        // This is the top directory itself, skip it
                        return null;
                    }
                }
                else
                {
                    // For files, place them directly in target base (no subfolders)
                    destinationPath = System.IO.Path.Combine(targetBase, System.IO.Path.GetFileName(sourcePath));
                }
            }
            else if (_keepEmptyFolders)
            {
                // Keep Empty Folders Only - copy directory structure but only empty folders
                if (isDirectory)
                {
                    // Check if directory is empty
                    bool isEmpty = !Directory.EnumerateFileSystemEntries(sourcePath).Any();
                    if (isEmpty)
                    {
                        string relativePath = sourcePath.Substring(sourceRoot.Length);
                        destinationPath = System.IO.Path.Combine(targetBase, relativePath.TrimStart(System.IO.Path.DirectorySeparatorChar));
                    }
                    else
                    {
                        return null; // Skip non-empty directories
                    }
                }
                else
                {
                    return null; // Skip all files
                }
            }
            else if (_keepOnlyFiles)
            {
                // Keep Only Files - copy only files, no directory structure
                if (!isDirectory)
                {
                    // Files go directly to target base with their original names
                    string fileName = System.IO.Path.GetFileName(sourcePath);
                    destinationPath = System.IO.Path.Combine(targetBase, fileName);
                    // Check for duplicates and rename if necessary
                    if (File.Exists(destinationPath) || Directory.Exists(destinationPath))
                    {
                        string nameWithoutExt = System.IO.Path.GetFileNameWithoutExtension(fileName);
                        string extension = System.IO.Path.GetExtension(fileName);
                        int counter = 1;
                        do
                        {
                            string newFileName = $"{nameWithoutExt} ({counter}){extension}";
                            destinationPath = System.IO.Path.Combine(targetBase, newFileName);
                            counter++;
                        } while (File.Exists(destinationPath) || Directory.Exists(destinationPath));
                    }
                }
                else
                {
                    return null; // Skip all directories
                }
            }
            else
            {
                // Default behavior - flat copy to target base
                destinationPath = System.IO.Path.Combine(targetBase, System.IO.Path.GetFileName(sourcePath));
            }

            return destinationPath;
        }

        /// <summary>
        /// Creates the directory structure in the target location based on the computed destination paths
        /// for all directories and files that will be copied.
        /// </summary>
        /// <param name="targetBase">The base target directory</param>
        /// <param name="sourceRoot">The root source directory</param>
        /// <param name="dirs">List of directory items to process</param>
        /// <param name="files">List of file items to process</param>
        private void CreateDirectoryStructure(string targetBase, string sourceRoot, List<FileItem> dirs, List<FileItem> files)
        {
            var allDirectories = new HashSet<string>(StringComparer.OrdinalIgnoreCase);

            // Add target base first
            allDirectories.Add(targetBase);

            // Process directories
            foreach (var dir in dirs)
            {
                string destPath = ComputeDestinationPath(dir.FilePath, true, targetBase, sourceRoot);
                if (!string.IsNullOrEmpty(destPath))
                {
                    AddDirectoryAndParents(allDirectories, destPath, targetBase);
                }
            }

            // Process files
            foreach (var file in files)
            {
                string destPath = ComputeDestinationPath(file.FilePath, false, targetBase, sourceRoot);
                if (!string.IsNullOrEmpty(destPath))
                {
                    string parentDir = System.IO.Path.GetDirectoryName(destPath);
                    if (!string.IsNullOrEmpty(parentDir))
                    {
                        AddDirectoryAndParents(allDirectories, parentDir, targetBase);
                    }
                }
            }

            // Create directories in order (deepest first)
            var sortedDirs = allDirectories.OrderByDescending(d => d.Count(c => c == '\\' || c == '/')).ToList();
            foreach (var dir in sortedDirs)
            {
                if (!Directory.Exists(dir))
                {
                    Directory.CreateDirectory(dir);
                }
            }
        }

        /// <summary>
        /// Recursively adds a directory and all its parent directories to the hash set,
        /// ensuring all necessary directory paths are included for creation.
        /// </summary>
        /// <param name="directories">Hash set containing all directories to be created</param>
        /// <param name="path">The directory path to add</param>
        /// <param name="targetBase">The base target directory to stop recursion</param>
        private void AddDirectoryAndParents(HashSet<string> directories, string path, string targetBase)
        {
            string current = path;
            while (!string.IsNullOrEmpty(current) &&
                   current.StartsWith(targetBase, StringComparison.OrdinalIgnoreCase) &&
                   current != targetBase)
            {
                directories.Add(current);
                current = System.IO.Path.GetDirectoryName(current);
            }
            directories.Add(targetBase);
        }



        /// <summary>
        /// Gets the progress bar control for the specified slot index.
        /// </summary>
        /// <param name="index">The slot index (0-3)</param>
        /// <returns>The corresponding ModernCircularProgressBar control</returns>
        private ModernProgress.ModernCircularProgressBar GetProgressBar(int index) => index switch
        {
            // Returns the correct progress bar based on the index.
            0 => progressBarMulti1,
            1 => progressBarMulti2,
            2 => progressBarMulti3,
            3 => progressBarMulti4,
            // Throws an exception for an out-of-range index.
            _ => throw new ArgumentOutOfRangeException()
        };

        /// <summary>
        /// Gets the file name label control for the specified slot index.
        /// </summary>
        /// <param name="index">The slot index (0-3)</param>
        /// <returns>The corresponding Label control</returns>
        private Label GetFileNameLabel(int index) => index switch
        {
            // Returns the correct label based on the index.
            0 => filesNameLabel1,
            1 => filesNameLabel2,
            2 => filesNameLabel3,
            3 => filesNameLabel4,
            // Throws an exception for an out-of-range index.
            _ => throw new ArgumentOutOfRangeException()
        };

        /// <summary>
        /// Gets the destination path for a file item, optionally incorporating a custom directory name.
        /// </summary>
        /// <param name="item">The file item wrapper</param>
        /// <param name="targetBaseDirectory">The base target directory</param>
        /// <returns>The computed destination path including custom directory if specified</returns>
        private string GetDestinationPath(FileInfoWrapper item, string targetBaseDirectory)
        {
            // Checks if the user wants to create a custom directory.
            if (_createCustomDirectory && !string.IsNullOrWhiteSpace(_customDirectoryName))
                // Combines the target base with the custom directory name.
                targetBaseDirectory = System.IO.Path.Combine(targetBaseDirectory, _customDirectoryName);

            // Returns the final target directory path.
            return GetTargetDirectory(item.FilePath,
                                      targetBaseDirectory,
                                      item.IsDirectory,
                                      item.SourceRoot ?? _currentSourceRootPath);
        }

        /// <summary>
        /// Reports file copy progress to the UI, updating the progress bar and file name display.
        /// </summary>
        /// <param name="fileProgress10k">Progress value in hundredths of a percent (0-10000)</param>
        /// <param name="fileName">The name of the file being processed</param>
        private void ReportFileProgress(int fileProgress10k, string fileName)
        {
            // Checks if an Invoke is required to run on the UI thread.
            if (InvokeRequired) { Invoke(new Action(() => ReportFileProgress(fileProgress10k, fileName))); return; }

            modernFile.Value = Math.Min(fileProgress10k, modernFile.Maximum);
            // Updates the file path label with the file name.
            filePathLabel.Text = fileName;
            modernFile.Text = $"{(fileProgress10k / 100.0):F2}%";
        }




        /// <summary>
        /// Securely deletes a file by overwriting its contents with random data for a specified number of passes before final deletion.
        /// </summary>
        /// <param name="filePath">The path of the file to be securely deleted.</param>
        private void SecureDeleteFile(string filePath)
        {
            // Checks if the file exists at the given path.
            if (!File.Exists(filePath))
                return; // If it doesn't exist, exit the method.

            // Creates a FileInfo object to get information about the file.
            FileInfo fileInfo = new FileInfo(filePath);
            // Gets the size of the file in bytes.
            long fileSize = fileInfo.Length;
            // Gets the number of overwrite passes from a numeric up-down control.
            int overwritePasses = (int)securePassesNumUpDown.Value;

            // Opens the file for writing in a FileStream, ensuring it's closed properly.
            using (FileStream stream = new FileStream(filePath, FileMode.Open, FileAccess.Write))
            {
                // Creates a buffer to hold data for overwriting.
                byte[] buffer = new byte[bufferSize];
                // Initializes a Random object to generate random data.
                Random random = new Random();

                // Loop for the specified number of overwrite passes.
                for (int pass = 0; pass < overwritePasses; pass++)
                {
                    // Moves the stream's position to the beginning of the file for each pass.
                    stream.Seek(0, SeekOrigin.Begin);
                    // Initializes a counter for the number of bytes written in the current pass.
                    long bytesWritten = 0;

                    // Loops until the entire file is overwritten.
                    while (bytesWritten < fileSize)
                    {
                        // Checks for a pause signal without blocking.
                        if (!_pauseEvent.WaitOne(0))
                        {
                            // If a pause is not requested, check for cancellation.
                            _cancellationTokenSource.Token.ThrowIfCancellationRequested();
                        }
                        // Checks if cancellation has been requested.
                        if (_cancellationTokenSource?.IsCancellationRequested == true)
                            return; // If so, exit the method.

                        // Determines the number of bytes to write in the current chunk.
                        int bytesToWrite = (int)Math.Min(bufferSize, fileSize - bytesWritten);
                        // Fills the buffer with random bytes.
                        random.NextBytes(buffer);
                        // Writes the buffer to the file.
                        stream.Write(buffer, 0, bytesToWrite);
                        // Updates the count of bytes written.
                        bytesWritten += bytesToWrite;

                        // Adds the number of bytes written to a total processed counter.
                        _totalBytesProcessed += bytesToWrite;
                    }

                    // Flushes the stream buffer to ensure all data is written to the file system.
                    stream.Flush();
                }
            }

            // After overwriting, deletes the file from the disk.
            File.Delete(filePath);
        }

        /// <summary>
        /// Ensures that the directory for a given file path exists, creating it if it does not.
        /// </summary>
        /// <param name="destinationFile">The full path of the file for which the directory should be created.</param>
        private static void EnsureDirectoryExistsForFile(string destinationFile)
        {
            // Gets the directory path from the full file path.
            string dir = System.IO.Path.GetDirectoryName(destinationFile);
            // Checks if the directory path is null or whitespace.
            if (string.IsNullOrWhiteSpace(dir)) return;

            // Tries to create the directory.
            try
            {
                // Checks if the directory already exists.
                if (!Directory.Exists(dir))
                    Directory.CreateDirectory(dir); // Creates the directory if it doesn't exist.
            }
            catch (Exception ex)
            {
                // Catches any exceptions during directory creation.
                // Throws a new IOException with a custom error message and the original exception.
                throw new IOException(
     string.Format(
         Translator.Get("Failed to create destination directory '{0}' for file '{1}'. Reason: {2}"),
         dir,
         System.IO.Path.GetFileName(destinationFile),
         ex.Message),
     ex);
            }
        }

        /// <summary>
        /// Finds the zero-based index of a row in a DataGridView that corresponds to a specific file path.
        /// </summary>
        /// <param name="grid">The DataGridView to search.</param>
        /// <param name="filePath">The file path to find.</param>
        /// <returns>The row index if a match is found; otherwise, -1.</returns>
        private int FindRowIndexForFile(DataGridView grid, string filePath)
        {
            // Iterates through each row in the DataGridView.
            foreach (DataGridViewRow row in grid.Rows)
            {
                // Checks if the "FilePath" cell value is not null.
                if (row.Cells["FilePath"].Value != null &&
                    // Compares the file path in the cell with the provided file path, ignoring case.
                    string.Equals(row.Cells["FilePath"].Value.ToString(), filePath, StringComparison.OrdinalIgnoreCase))
                {
                    return row.Index; // Returns the index of the row if a match is found.
                }
            }
            return -1; // Returns -1 if no matching row is found.
        }

        /// <summary>
        /// Logs an error message to the debug console.
        /// </summary>
        /// <param name="message">The error message to log.</param>
        private void LogError(string message)
        {
            // Writes an error message to the debug output.
            Debug.WriteLine("[ERROR] " + message);
        }

        /// <summary>
        /// Logs a warning message to the debug console.
        /// </summary>
        /// <param name="message">The warning message to log.</param>
        private void LogWarning(string message)
        {
            // Writes a warning message to the debug output.
            Debug.WriteLine("[WARN] " + message);
        }

        /// <summary>
        /// Sets the file name text for a specific thread's UI label.
        /// </summary>
        /// <param name="index">The 0-based index of the thread.</param>
        /// <param name="name">The file name to display.</param>
        private void SetThreadFileNameLabel(int index, string name)
        {
            // Uses a switch statement to update the text of a specific file name label based on the thread index.
            switch (index)
            {
                case 0: filesNameLabel1.Text = name; break;
                case 1: filesNameLabel2.Text = name; break;
                case 2: filesNameLabel3.Text = name; break;
                case 3: filesNameLabel4.Text = name; break;
            }
        }

        /// <summary>
        /// Sets the progress text for a specific thread's UI label.
        /// </summary>
        /// <param name="index">The 0-based index of the thread.</param>
        /// <param name="text">The progress text to display.</param>
        private void SetThreadProgressLabel(int index, string text)
        {
            // Uses a switch statement to update the text of a specific progress label based on the thread index.
            switch (index)
            {
                //case 0: totalPCTMultiLabel1.Text = text; break;
                //case 1: totalPCTMultiLabel2.Text = text; break;
                //case 2: totalPCTMultiLabel3.Text = text; break;
                //case 3: totalPCTMultiLabel4.Text = text; break;
            }
        }

        /// <summary>
        /// Sets the value for a specific thread's UI progress bar.
        /// </summary>
        /// <param name="index">The 0-based index of the thread.</param>
        /// <param name="value">The value to set the progress bar to.</param>
        private void SetThreadProgressBar(int index, int value)
        {
            // Uses a switch statement to update the value of a specific progress bar based on the thread index.
            switch (index)
            {
                case 0: progressBarMulti1.Value = value; break;
                case 1: progressBarMulti2.Value = value; break;
                case 2: progressBarMulti3.Value = value; break;
                case 3: progressBarMulti4.Value = value; break;
            }
        }

        /// <summary>
        /// Updates the overall UI elements for a multi-threaded operation, including progress bar, speed, and time labels.
        /// </summary>
        private void UpdateOverallMultiThreadProgressUI()
        {
            // Returns if the total bytes to process are zero or less.
            if (_totalBytesToProcess <= 0) return;

            // Reads the total bytes processed in a thread-safe manner.
            long processedBytes = Interlocked.Read(ref _totalBytesProcessed);
            // Calculates the percentage of completion.
            double percent = (double)processedBytes / _totalBytesToProcess * 100;

            // Updates a label with the formatted percentage.
            //multiThreadTotalProgressLabel.Text = $"{percent:F2}%";

            // Calculates the progress bar value scaled to 10000.
            int progressBarValue = (int)(percent * 100);
            // Clamps the progress bar value to be within the valid range of 0 to 10000.
            progressBarValue = Math.Max(0, Math.Min(progressBarValue, 10000));

            // Updates the progress bar value, with a check to avoid exceptions.
            try
            {
                progressBarMultiTotal.Value = progressBarValue;
            }
            catch
            {
                // If an exception occurs, checks the value and updates again.
                if (progressBarMultiTotal.Value != progressBarValue)
                {
                    progressBarMultiTotal.Value = progressBarValue;
                }
            }

            // Updates the label showing total bytes copied/moved/deleted.
            totalCMDMultiLabel.Text = string.Format(
                Translator.Get("Total C/M/D: {0} / {1}"),
                FormatBytes(_totalBytesProcessed),
                FormatBytes(_totalBytesToProcess));


            // Calls a method to update drive space information.
            UpdateDriveSpaceInfo();

            double mbPerSec = 0;
            // Checks if the stopwatch has been started and has a positive elapsed time.
            if (_stopwatch != null && _stopwatch.Elapsed.TotalSeconds > 0)
            {
                // Calculates the speed in MB per second.
                mbPerSec = processedBytes / 1024d / 1024d / _stopwatch.Elapsed.TotalSeconds;
            }

            // Gets the elapsed time from the stopwatch.
            TimeSpan elapsed = _stopwatch.Elapsed;

            // Calculates the estimated total time for the operation.
            TimeSpan estTotal = TimeSpan.FromSeconds(_totalBytesToProcess / Math.Max(_totalBytesProcessed / Math.Max(elapsed.TotalSeconds, 0.1), 1));
            // Updates a label with the elapsed and estimated total time.
            totalTimeMultiLabel.Text = string.Format(
                Translator.Get("Elapsed / Target Time: {0} / {1}"),
                elapsed.ToString(@"hh\:mm\:ss"),
                estTotal.ToString(@"hh\:mm\:ss"));
            // Updates a label with the calculated speed.
            speedMultiLabel.Text = string.Format(Translator.Get("Speed: {0} MB/s"), mbPerSec.ToString("F2"));
        }

        /// <summary>
        /// Resets all UI components related to the multi-threaded operation to their initial state.
        /// </summary>
        private void ResetMultiThreadedUI()
        {
            // Resets the text of all file name labels to "Nothing".
            filesNameLabel1.Text = Translator.Get("Nothing");
            filesNameLabel2.Text = Translator.Get("Nothing");
            filesNameLabel3.Text = Translator.Get("Nothing");
            filesNameLabel4.Text = Translator.Get("Nothing");

            // Resets the text of all percentage labels to "0.00%".
            //totalPCTMultiLabel1.Text = "0.00%";
            //totalPCTMultiLabel2.Text = "0.00%";
            //totalPCTMultiLabel3.Text = "0.00%";
            //totalPCTMultiLabel4.Text = "0.00%";

            // Resets the value of all individual progress bars to 0.
            progressBarMulti1.Value = 0;
            progressBarMulti2.Value = 0;
            progressBarMulti3.Value = 0;
            progressBarMulti4.Value = 0;

            // Resets the overall progress bar and label.
            progressBarMultiTotal.Value = 0;
            //multiThreadTotalProgressLabel.Text = "0.00%";
            // Resets the source directory label.
            fromFilesDirLabel.Text = Translator.Get("Current Source: None");
            // Resets all counters and stopwatch.
            _multiThreadProcessedFiles = 0;
            _totalBytesToProcess = 0;
            _stopwatch.Reset();
            // Resets all status labels to their initial values.
            fileCountMultiLabel.Text = Translator.Get("File Count: 0 Out of 0");
            totalTimeMultiLabel.Text = Translator.Get("Elapsed / Target Time: 00:00:00 / 00:00:00");
            totalCMDMultiLabel.Text = Translator.Get("Total C/M/D: 0 Bytes / 0 Bytes");
            totalSpaceMultiLabel.Text = Translator.Get("Total Space Used: 0 Bytes / 0 Bytes");
            speedMultiLabel.Text = string.Format(Translator.Get("Speed: {0} MB/s"));
        }

        /// <summary>
        /// Displays a message box showing a summary of statistics for the completed file operation.
        /// </summary>
        /// <param name="isMultiThreaded">Indicates if the summary is for a multi-threaded operation.</param>
        private void ShowOperationStatisticsSummary(bool isMultiThreaded)
        {
            // Gets the name of the current operation from a variable.
            string operationName = _currentOperation.ToString();
            // Sets the status based on whether the operation was cancelled.

            // Checks if the multi-threaded checkbox is checked and if the operation was multi-threaded.
            if (multithreadCheckBox.Checked && isMultiThreaded)
            {
                // Prepends "Multi-threaded" to the operation name.
                operationName = "Multi-Threaded " + operationName;

                string tmpl = Translator.Get("- {0} Operation Summary ({1}) -\n\n" +
                                      "Files Copied: {2:N0}\nFiles Skipped: {3:N0}\nFiles Failed: {4:N0}\n" +
                                      "Total Files Processed: {5:N0} / {6:N0}\nTotal Bytes Processed: {7} / {8}");

                string message = string.Format(tmpl,
                               operationName, status,
                               _totalFilesCopiedMulti, _totalFilesSkipped, _totalFilesFailed,
                               _processedFiles, _grandTotalFileCount,
                               FormatBytes(_totalBytesProcessed),
                               FormatBytes(_grandBytesToProcess));

                string title = string.Format(Translator.Get("Operation {0}"), status);

                MessageBoxIcon icon = _isCanceled ? MessageBoxIcon.Warning : MessageBoxIcon.Information;
                MessageBox.Show(message, title, MessageBoxButtons.OK, icon);

                // Sends an SMS notification with the summary.
                //smsForm.SendOperationSummaryNotification(message);
            }
            // Checks if the multi-threaded checkbox is not checked and the operation was single-threaded.
            else if (!multithreadCheckBox.Checked && !isMultiThreaded)
            {
                // Prepends "Single-threaded" to the operation name.
                operationName = string.Format(Translator.Get("Single-Threaded {0}"), operationName);

                string tmpl = Translator.Get("- {0} Operation Summary ({1}) -\n\n" +
                                      "Files Copied: {2:N0}\nFiles Skipped: {3:N0}\nFiles Failed: {4:N0}\n" +
                                      "Total Files Processed: {5:N0} / {6:N0}\nTotal Bytes Processed: {7} / {8}");

                string message = string.Format(tmpl,
                               operationName, status,
                               _totalFilesCopied, _totalFilesSkipped, _totalFilesFailed,
                               _processedFiles, _grandTotalFileCount,
                               FormatBytes(_totalBytesProcessed),
                               FormatBytes(_grandBytesToProcess));

                string title = string.Format(Translator.Get("Operation {0}"), status);

                MessageBoxIcon icon = _isCanceled ? MessageBoxIcon.Warning : MessageBoxIcon.Information;
                MessageBox.Show(message, title, MessageBoxButtons.OK, icon);

                // Sends an SMS notification with the summary.
                //smsForm.SendOperationSummaryNotification(message);
            }

        }

        /// <summary>
        /// Handles a file processing error by attempting a limited number of retries.
        /// If retries fail, the file is marked as skipped.
        /// </summary>
        /// <param name="filePath">The path of the file that failed to process.</param>
        /// <param name="ex">The exception that occurred.</param>
        /// <param name="fileIndex">The index of the failed file in the file list.</param>
        private void HandleFileError(string filePath, Exception ex, int fileIndex)
        {
            // Increments the retry count.
            _retryCount++;

            // Checks if the retry count is within the maximum limit.
            if (_retryCount <= MAX_RETRIES)
            {
                try
                {
                    // Pauses the thread for a short duration before retrying.
                    Thread.Sleep(12);
                    // Sets the current file index to retry.
                    _currentFileIndex = fileIndex;
                    return; // Exits the method to allow for a retry.
                }
                catch
                {
                    // Catches any exceptions from Thread.Sleep.
                }
            }

            // Gets the file name from the path.
            string fileName = System.IO.Path.GetFileName(filePath);
            // Gets the file size, or 0 if the file doesn't exist.
            long fileSizeRaw = File.Exists(filePath) ? new FileInfo(filePath).Length : 0;
            // Gets the reason for the error, prioritizing the inner exception message.
            string reason = ex.InnerException?.Message ?? ex.Message;


            // Constructs the intended destination path.
            string intendedDestination = System.IO.Path.Combine(_targetDirectories[0], fileName);
            // Adds the file to a list of skipped files with a reason.
            AddToSkippedFiles(
      Translator.Get("Skipped"),  // The general reason for the operation status
      fileName,                   // The name of the file
      fileSizeRaw,                // The raw size of the file (long)
      filePath,                   // The source path of the file
      intendedDestination,        // The intended destination path
      reason                      // The specific reason/error message provided
  );
            // Updates the status of the file in a UI component (likely a DataGridView).
            UpdateFileStatus(_fileList[fileIndex], Translator.Get("Skipped"));

            // Resets the retry count after the file has been handled as skipped.
            _retryCount = 0;
        }
        public class SkippedFile
        {
            // Defines a public property for the file name.
            public string FileName { get; set; }
            // Defines a public property for the file size.
            public long FileSize { get; set; }
            // Defines a public property for the source file path.
            public string SourceFilePath { get; set; }
            // Defines a public property for the destination file path.
            public string DestinationFilePath { get; set; }
            // Defines a public property for the reason the file was skipped.
            public string Reason { get; set; }
        }
        /// <summary>
        /// Converts a file size in bytes into a human-readable string (e.g., "1.23 MB").
        /// </summary>
        /// <param name="bytes">The size in bytes to format.</param>
        /// <returns>A formatted string with the appropriate size unit (B, KB, MB, etc.).</returns>
        private string FormatFileSize(long bytes)
        {
            // An array of size units.
            string[] sizes = { "B", "KB", "MB", "GB", "TB" };
            // The length to be converted.
            double len = bytes;
            // The index for the size units.
            int order = 0;

            // Loops while the size is greater than or equal to 1024 and there are more units.
            while (len >= 1024 && order < sizes.Length - 1)
            {
                order++; // Increments the unit index.
                len = len / 1024; // Divides the size by 1024.
            }

            // Formats the size to two decimal places and appends the unit.
            return $"{len:0.##} {sizes[order]}";
        }

        /// <summary>
        /// Gathers current progress statistics and reports them to any active background worker.
        /// </summary>
        private void ReportProgress()
        {
            // Calculates the total progress percentage, or sets it to 0 if no files are being processed.
            int totalProgress = _grandTotalFileCount > 0 ? (int)Math.Round(((double)_processedFiles / _grandTotalFileCount) * 100.0) : 0;

            // Creates a new ProgressInfo object to hold progress details.
            var progressInfo = new ProgressInfo
            {
                TotalProgress = totalProgress,
                ProcessedFiles = _processedFiles,
                TotalFiles = _grandTotalFileCount,
                ProcessedBytes = _totalBytesProcessed,
                TotalBytes = _totalBytesToProcess
            };

            // Reports progress to the relevant background worker.
            _copyWorker?.ReportProgress(totalProgress, progressInfo);
            _moveWorker?.ReportProgress(totalProgress, progressInfo);
            _deleteWorker?.ReportProgress(totalProgress, progressInfo);
        }

        /// <summary>
        /// Selects a specified row in the files DataGridView, optionally scrolling it into view.
        /// This method is thread-safe.
        /// </summary>
        /// <param name="rowIndex">The zero-based index of the row to select.</param>
        private void SelectCurrentFileInGrid(int rowIndex)
        {
            // Invokes the method on the UI thread if necessary.
            if (InvokeRequired)
            {
                Invoke(new Action(() => SelectCurrentFileInGrid(rowIndex)));
                return;
            }

            // Returns if the row index is out of bounds.
            if (rowIndex < 0 || rowIndex >= filesDataGridView.RowCount)
                return;

            // Returns if auto-scrolling is not enabled.
            if (!autoScrollCheckBox.Checked)
            {
                // Just select without scrolling
                filesDataGridView.ClearSelection();
                filesDataGridView.Rows[rowIndex].Selected = true;
                return;
            }

            // Gets the first visible row index and the number of visible rows.
            int firstVisible = filesDataGridView.FirstDisplayedScrollingRowIndex;
            int visibleCount = filesDataGridView.DisplayedRowCount(true);
            int lastVisible = firstVisible + visibleCount - 1;

            // Check if the current row is not visible
            if (rowIndex > lastVisible)
            {
                // Scroll to make this row the first visible row
                filesDataGridView.FirstDisplayedScrollingRowIndex = rowIndex;
            }
            // If the row is before the first visible row, scroll to make it visible at top
            else if (rowIndex < firstVisible)
            {
                filesDataGridView.FirstDisplayedScrollingRowIndex = rowIndex;
            }

            // Clears any existing selection.
            filesDataGridView.ClearSelection();

            // Selects the row at the specified index.
            filesDataGridView.Rows[rowIndex].Selected = true;

            // Optional: Ensure the selected row is fully visible
            filesDataGridView.CurrentCell = filesDataGridView.Rows[rowIndex].Cells[0];

            _walkCounter++; // Increments a counter.
        }

        /// <summary>
        /// Updates the overall progress bar's value and text based on the total bytes processed.
        /// This method is thread-safe.
        /// </summary>
        private void UpdateOverallProgress()
        {
            // Invokes the method on the UI thread if necessary.
            if (InvokeRequired) { Invoke(new Action(UpdateOverallProgress)); return; }

            // Calculates the progress percentage scaled to 10000.
            int pct = _totalBytesToProcess > 0
                ? (int)Math.Round(_totalBytesProcessed / (double)_totalBytesToProcess * 10000)
                : 0;
            modernTotal.Value = Math.Min(pct, 10000);

            modernTotal.Text = $"{pct / 100.0:F2}%";
        }

        /// <summary>
        /// Updates various UI elements based on the data in a ProgressInfo object.
        /// This method is thread-safe.
        /// </summary>
        /// <param name="pi">An object containing the current progress details.</param>
        private void UpdateUI(ProgressInfo pi)
        {
            // Invokes the method on the UI thread if necessary.
            if (InvokeRequired)
            {
                Invoke(new Action(() => UpdateUI(pi)));
                return;
            }

            modernTotal.Value = pi.TotalProgress;
            modernTotal.Refresh();

            modernTotal.Text = $"{(pi.TotalProgress / 100.0):F2}%";
            modernTotal.Refresh();
            // Sets the text of the file path label to the current file name.
            filePathLabel.Text = $"{pi.CurrentFileName}";
        }

        /// <summary>
        /// Updates the file count and total size labels on the UI.
        /// This method is thread-safe.
        /// </summary>
        private void UpdateFileCountLabels()
        {
            // Invokes the method on the UI thread if necessary.
            if (InvokeRequired)
            {
                Invoke(new Action(UpdateFileCountLabels));
                return;
            }

            // Updates the file count label with processed and total file counts.
            fileCountOnLabel.Text = string.Format(Translator.Get("File Count: {0} Out of {1}"),
                _processedFiles.ToString("N0"),
                _grandTotalFileCount.ToString("N0"));
            // Updates the label for total bytes copied/moved/deleted.
            totalCopiedProgressLabel.Text = $"Total C/M/D: {FormatFileSize(_totalBytesProcessed)} / {FormatFileSize(_totalBytesToProcess)}";
        }

        /// <summary>
        /// Resets the progress bars on the user interface to zero.
        /// This method is thread-safe.
        /// </summary>
        private void UpdateProgressBars()
        {
            // Invokes the method on the UI thread if necessary.
            if (InvokeRequired)
            {
                Invoke(new Action(UpdateProgressBars));
                return;
            }

            // Resets both file and total progress bars to 0.

            modernFile.Value = 0;
            modernTotal.Value = 0;
            modernFile.Text = "0.00%";
            modernTotal.Text = "0.00%";
        }

        /// <summary>
        /// Initiates a background process to verify that source files match destination files.
        /// </summary>
        private void VerifyFiles()
        {
            // Creates a new BackgroundWorker to perform file verification in the background.
            BackgroundWorker verifyWorker = new BackgroundWorker();
            // Enables progress reporting for the worker.
            verifyWorker.WorkerReportsProgress = true;
            // Attaches a handler for the DoWork event.
            verifyWorker.DoWork += (s, e) =>
            {
                // Initializes a counter for verified files.
                int verifiedFiles = 0;
                // Gets the total number of files to verify.
                long totalFiles = _grandTotalFileCount;

                // Checks if a destination folder is selected.
                if (this.targetPaths == null || this.targetPaths.Count == 0)
                {
                    // Displays a message box if no destination is selected.
                    MessageBox.Show(Translator.Get("No destination folder selected. Cannot verify files."), Translator.Get("Verification Error"), MessageBoxButtons.OK, MessageBoxIcon.Error);
                    e.Cancel = true; // Cancels the operation.
                    return;
                }

                // Gets the first target directory.
                string targetRoot = this.targetPaths.First();

                // Iterates through each file in the list to verify.
                foreach (FileInfoWrapper sourceFileWrapper in _fileList)
                {
                    if (verifyWorker.CancellationPending)
                    {
                        e.Cancel = true;
                        break;
                    }

                    string sourceFile = sourceFileWrapper.FilePath;
                    string destinationFile = GetTargetDirectory(sourceFile, targetRoot, sourceFileWrapper.IsDirectory, _currentSourceRootPath);

                    if (string.IsNullOrEmpty(destinationFile))
                    {
                        AddToSkippedFiles(
                            Translator.Get("Verification Skipped"),
                            System.IO.Path.GetFileName(sourceFile),
                            sourceFileWrapper.BytesRaw,
                            sourceFile,
                            Translator.Get("N/A (empty target)"),
                            Translator.Get("Destination path not determined")
                        );
                        continue;
                    }

                    if (!sourceFileWrapper.IsDirectory)
                    {
                        if (File.Exists(destinationFile))
                        {
                            if (VerifyFileIntegrity(sourceFile, destinationFile))
                            {
                                verifiedFiles++;
                            }
                            else
                            {
                                AddToSkippedFiles(
                                    Translator.Get("Verification Failed"),
                                    System.IO.Path.GetFileName(sourceFile),
                                    new FileInfo(sourceFile).Length,
                                    sourceFile,
                                    destinationFile,
                                    Translator.Get("Integrity check failed")
                                );
                            }
                        }
                        else
                        {
                            AddToSkippedFiles(
                                Translator.Get("Verification Failed"),
                                System.IO.Path.GetFileName(sourceFile),
                                sourceFileWrapper.BytesRaw,
                                sourceFile,
                                destinationFile,
                                Translator.Get("Destination file not found")
                            );
                        }
                    }
                    else
                    {
                        AddToSkippedFiles(
                            Translator.Get("Verification Skipped"),
                            System.IO.Path.GetFileName(sourceFile),
                            0,
                            sourceFile,
                            destinationFile,
                            Translator.Get("Is a Directory")
                        );
                    }

                    int progress = (int)((verifiedFiles * 100.0) / _grandTotalFileCount);
                    verifyWorker.ReportProgress(progress);
                }
            };

            // Attaches a handler for the ProgressChanged event.
            verifyWorker.ProgressChanged += (s, e) =>
            {
                // This is where you would update the UI with progress, if needed.
            };

            // Attaches a handler for the RunWorkerCompleted event.
            verifyWorker.RunWorkerCompleted += (s, e) =>
            {
                // Checks if an error occurred during verification.
                if (e.Error != null)
                {
                    // Displays a message box about the error.
                    MessageBox.Show(Translator.Get($"File verification completed with errors: {e.Error.Message}"), Translator.Get("Verification Error"), MessageBoxButtons.OK, MessageBoxIcon.Error);
                    LogError($"Verification Worker Error: {e.Error}"); // Logs the error.
                }
                else if (e.Cancelled) // Checks if the operation was cancelled.
                {
                    // Displays a message box about the cancellation.
                    MessageBox.Show(Translator.Get("File verification cancelled."), Translator.Get("Verification Cancelled"), MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else // The operation completed successfully.
                {
                    // Displays a message box about successful completion.
                    MessageBox.Show(Translator.Get("File verification completed."), Translator.Get("Verification Complete"),
                                      MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            };

            // Starts the background worker asynchronously.
            verifyWorker.RunWorkerAsync();
        }

        /// <summary>
        /// Logs a specified error message to a file, if logging is enabled.
        /// </summary>
        /// <param name="message">The error message to write to the log.</param>
        private void LogError2(string message)
        {
            // Checks if the 'logFileCheckBox' is checked to determine if logging should occur.
            if (logFileCheckBox.Checked)
            {
                try
                {
                    // Combines the application's startup path with the "Logs" directory name to create a full path.
                    string logPath = System.IO.Path.Combine(System.Windows.Forms.Application.StartupPath, "Logs");
                    // Creates the "Logs" directory if it doesn't already exist.
                    Directory.CreateDirectory(logPath);

                    // Creates a log file name with the prefix "CopyThat_" and the current date in yyyyMMdd format.
                    string logFile = System.IO.Path.Combine(logPath, $"CopyThat_{DateTime.Now:yyyyMMdd}.log");

                    // Formats the log entry string with the current timestamp, "ERROR:", the provided message, and a new line.
                    string logEntry = string.Format(
                        Translator.Get("[{0}] ERROR: {1}"),
                        DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"),
                        message) + Environment.NewLine;
                    // Appends the formatted log entry to the log file.
                    File.AppendAllText(logFile, logEntry);

                    // Calls a separate method to clean up old log files.
                    CleanOldLogFiles(logPath);
                }
                catch
                {
                    // An empty catch block, which silently handles any exceptions during the logging process.
                }
            }
        }

        /// <summary>
        /// Deletes log files in a specified directory that are older than a configured number of days.
        /// </summary>
        /// <param name="logPath">The path to the directory containing log files.</param>
        private void CleanOldLogFiles(string logPath)
        {
            try
            {
                // Retrieves the number of days to keep log files from the 'logDaysNumUpDown' control.
                int keepDays = (int)logDaysNumUpDown.Value;
                // Calculates the cutoff date by subtracting the number of days to keep from the current date.
                DateTime cutoffDate = DateTime.Now.AddDays(-keepDays);

                // Creates a DirectoryInfo object for the log path to easily work with its contents.
                DirectoryInfo logDir = new DirectoryInfo(logPath);
                // Loops through all files in the directory that match the "CopyThat_*.log" pattern.
                foreach (FileInfo file in logDir.GetFiles("CopyThat_*.log"))
                {
                    // Checks if a file's creation time is older than the calculated cutoff date.
                    if (file.CreationTime < cutoffDate)
                    {
                        // Deletes the file if it is older than the cutoff date.
                        file.Delete();
                    }
                }
            }
            catch
            {
                // An empty catch block to silently handle any exceptions that occur during the cleanup process.
            }
        }
        private void btnPauseResumeMulti_Click(object sender, EventArgs e)
        {
            _isPaused = !_isPaused;

            if (_isPaused)
            {
                _pauseEvent.Reset();
                pauseResumeButton.Text = Translator.Get("Resume");
                StopElapsedTimer();
            }
            else
            {
                _pauseEvent.Set();
                pauseResumeButton.Text = Translator.Get("Pause");
                StartElapsedTimer();
            }
        }
        private void cancelMultiButton_Click(object sender, EventArgs e)
        {
            // Requests cancellation on the CancellationTokenSource.
            _cancellationTokenSource?.Cancel();
            // Sets the pause event, which unblocks any paused threads.
            _pauseEvent.Set();

            // Checks if the copy worker is busy and requests it to cancel asynchronously.
            if (_copyWorker.IsBusy)
                _copyWorker.CancelAsync();
            // Checks if the move worker is busy and requests it to cancel asynchronously.
            if (_moveWorker.IsBusy)
                _moveWorker.CancelAsync();
            // Checks if the delete worker is busy and requests it to cancel asynchronously.
            if (_deleteWorker.IsBusy)
                _deleteWorker.CancelAsync();
        }
        /// <summary>
        /// Updates the user interface to reflect the progress of a specific background thread.
        /// This method is thread-safe; it handles calls from non-UI threads by marshaling them
        /// to the UI thread.
        /// </summary>
        /// <param name="threadIndex">The 0-based index of the thread reporting progress.</param>
        /// <param name="progress">The current progress value (expected to be between 0 and 10000).</param>
        /// <param name="fileName">The name of the file the thread is currently processing.</param>
        private void UpdateMultiThreadProgress(int threadIndex, int progress, string fileName)
        {
            // This block ensures that UI updates are always performed on the main UI thread,
            // preventing cross-thread exceptions.
            // Checks if the call is from a different thread.
            if (InvokeRequired)
            {
                // If so, it marshals the call back to the UI thread.
                Invoke(new Action(() => UpdateMultiThreadProgress(threadIndex, progress, fileName)));
                return;
            }

            // This block updates the specific set of UI controls (progress bar and labels)
            // that correspond to the reporting thread's index.
            // A switch statement to update UI elements based on the thread index.
            switch (threadIndex)
            {
                case 0:
                    // Sets the value of the first progress bar, ensuring it doesn't exceed 10000.
                    progressBarMulti1.Value = Math.Min(progress, 10000);
                    // Updates the percentage label for the first thread.
                    progressBarMulti1.Text = $"{(progress / 100.0):F2}%";
                    // Updates the file name label for the first thread.
                    filesNameLabel1.Text = fileName;
                    break;
                case 1:
                    // Sets the value of the second progress bar.
                    progressBarMulti2.Value = Math.Min(progress, 10000);
                    // Updates the percentage label for the second thread.
                    progressBarMulti2.Text = $"{(progress / 100.0):F2}%";
                    // Updates the file name label for the second thread.
                    filesNameLabel2.Text = fileName;
                    break;
                case 2:
                    // Sets the value of the third progress bar.
                    progressBarMulti3.Value = Math.Min(progress, 10000);
                    // Updates the percentage label for the third thread.
                    progressBarMulti3.Text = $"{(progress / 100.0):F2}%";
                    // Updates the file name label for the third thread.
                    filesNameLabel3.Text = fileName;
                    break;
                case 3:
                    // Sets the value of the fourth progress bar.
                    progressBarMulti4.Value = Math.Min(progress, 10000);
                    // Updates the percentage label for the fourth thread.
                    progressBarMulti4.Text = $"{(progress / 100.0):F2}%";
                    // Updates the file name label for the fourth thread.
                    filesNameLabel4.Text = fileName;
                    break;
            }
        }
        private void bufferNumUpDown_ValueChanged(object sender, EventArgs e)
        {
            // Updates the bufferSize variable based on the value of the 'bufferNumUpDown' control, converting it to kilobytes.
            bufferSize = (int)bufferNumUpDown.Value * 1024;
        }
        private class progressInfo
        {
            // Defines a class to hold progress information.
            public int TotalProgress { get; set; }
            public int ProcessedFiles { get; set; }
            public long TotalFiles { get; set; }
            public long ProcessedBytes { get; set; }
            public long TotalBytes { get; set; }
            public string CurrentFileName { get; set; }
            public int FileProgress { get; set; }
        }
        /// <summary>
        /// Handles cleanup and cancellation when the form is closing.
        /// Cancels any ongoing operations (copy, move, delete) and stops timers
        /// before calling the base <see cref="Form.OnFormClosing(FormClosingEventArgs)"/> method.
        /// </summary>
        /// <param name="e">Provides data for the <see cref="Form.FormClosing"/> event.</param>
        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            // Cancels the operation using the CancellationTokenSource.
            _cancellationTokenSource?.Cancel();
            // Stops the update timer.
            _updateTimer?.Stop();

            // Checks if the copy worker is busy and requests it to cancel.
            if (_copyWorker?.IsBusy == true)
                _copyWorker.CancelAsync();
            // Checks if the move worker is busy and requests it to cancel.
            if (_moveWorker?.IsBusy == true)
                _moveWorker.CancelAsync();
            // Checks if the delete worker is busy and requests it to cancel.
            if (_deleteWorker?.IsBusy == true)
                _deleteWorker.CancelAsync();

            // Calls the base class method to continue with the form closing process.
            base.OnFormClosing(e);
        }

        /// <summary>
        /// Initializes UI elements when the form loads, including setting
        /// progress bar limits and initial button states.
        /// </summary>
        /// <param name="e">Provides data for the <see cref="Form.Load"/> event.</param>
        protected override void OnLoad(EventArgs e)
        {
            // Calls the base class method.
            base.OnLoad(e);

            // Sets the maximum value for various progress bars to 10000 for a granular progress display.
            progressBarMulti1.Maximum = 10000;
            progressBarMulti2.Maximum = 10000;
            progressBarMulti3.Maximum = 10000;
            progressBarMulti4.Maximum = 10000;
            progressBarMultiTotal.Maximum = 10000;

            modernTotal.Minimum = 0;
            modernTotal.Maximum = 10000;
            modernFile.Minimum = 0;
            modernFile.Maximum = 10000;
            // Sets the initial text for the pause/resume buttons.
            pauseResumeButton.Text = Translator.Get("Pause");
            pauseResumeMultiButton.Text = Translator.Get("Pause");
        }

        /// <summary>
        /// Saves the current operation state (file list, progress, settings)
        /// to a JSON file so the operation can be resumed later if needed.
        /// </summary>
        private void SaveOperationState()
        {
            try
            {
                // Creates the path for the state file.
                string stateFile = System.IO.Path.Combine(System.Windows.Forms.Application.StartupPath, "operation_state.json");
                // Creates an anonymous object to hold the current operation state.
                var state = new
                {
                    FileList = _fileList,
                    CurrentIndex = _currentFileIndex,
                    ProcessedBytes = _totalBytesProcessed,
                    ProcessedFiles = _processedFiles,
                    Operation = copyMoveDeleteComboBox.SelectedItem?.ToString(),
                    SourcePath = sourcePath,
                    DestinationPath = destinationPath,
                    Settings = new
                    {
                        BufferSize = bufferSize,
                        IsMultiThreaded = _isMultiThreaded,
                        OverwriteAll = overwriteAllCheckBox.Checked,
                        DoNotOverwrite = doNotOverwriteCheckBox.Checked,
                        OverwriteOlderFiles = overwriteIfNewerCheckBox.Checked,
                        KeepDirectoryStructure = keepDirStructCheckBox.Checked,
                        CreateDirectoryPrior = createCustomDirCheckBox.Checked,
                        VerifyAfterTransfer = verifyCheckBox.Checked
                    }
                };

                // Serializes the state object to a JSON string with indentation.
                string json = Newtonsoft.Json.JsonConvert.SerializeObject(state, Newtonsoft.Json.Formatting.Indented);
                // Writes the JSON string to the state file.
                File.WriteAllText(stateFile, json);
            }
            catch
            {
                // An empty catch block to handle any exceptions during saving.
            }
        }

        /// <summary>
        /// Attempts to restore a previously saved operation state from disk.
        /// Prompts the user to resume the operation and, if confirmed,
        /// restores the file list, progress, and settings.
        /// </summary>
        private void RestoreOperationState()
        {
            try
            {
                // Creates the path for the state file.
                string stateFile = System.IO.Path.Combine(System.Windows.Forms.Application.StartupPath, "operation_state.json");
                // Checks if the state file exists and returns if it does not.
                if (!File.Exists(stateFile)) return;

                // Reads the entire content of the state file into a string.
                string json = File.ReadAllText(stateFile);

                // Displays a message box asking the user if they want to resume the operation.
                if (MessageBox.Show(Translator.Get("Previous operation state found. Do you want to resume?"),
                                     Translator.Get("Resume Operation"), MessageBoxButtons.YesNo,
                                     MessageBoxIcon.Question) != DialogResult.Yes)
                {
                    // If the user chooses not to resume, deletes the state file and returns.
                    File.Delete(stateFile);
                    return;
                }

                // Deserializes the JSON string into a dynamic object.
                var state = JsonConvert.DeserializeObject<dynamic>(json);

                // Deserializes the FileList from the dynamic object to a List<FileInfoWrapper>.
                var temp = state.FileList != null
                    ? ((Newtonsoft.Json.Linq.JToken)state.FileList).ToObject<List<FileInfoWrapper>>()
                    : new List<FileInfoWrapper>();
                // Clears the existing file list and adds the restored files.
                _fileList.Clear();
                foreach (var f in temp) _fileList.Add(f);

                // Restores other state variables from the deserialized object.
                _currentFileIndex = state.CurrentIndex ?? 0;
                _totalBytesProcessed = state.ProcessedBytes ?? 0L;
                _processedFiles = state.ProcessedFiles ?? 0;

                // Restores UI control selections and values.
                copyMoveDeleteComboBox.SelectedItem = (string)state.Operation;
                sourcePath = state.SourcePath;
                destinationPath = state.DestinationPath;

                // Restores settings from the nested 'Settings' object.
                var s = state.Settings;
                if (s != null)
                {
                    bufferSize = s.BufferSize ?? 1024 * 1024;
                    _isMultiThreaded = s.IsMultiThreaded ?? false;
                    overwriteAllCheckBox.Checked = s.OverwriteAll ?? false;
                    doNotOverwriteCheckBox.Checked = s.DoNotOverwrite ?? false;
                    overwriteIfNewerCheckBox.Checked = s.OverwriteOlderFiles ?? false;
                    keepDirStructCheckBox.Checked = s.KeepDirectoryStructure ?? true;
                    createCustomDirCheckBox.Checked = s.CreateDirectoryPrior ?? false;
                    verifyCheckBox.Checked = s.VerifyAfterTransfer ?? false;
                }

                // Calls a method to rebuild the data grid view with the restored data.
                RebuildDataGridView();
                // Deletes the state file after successful restoration.
                File.Delete(stateFile);
            }
            catch
            {
                // An empty catch block to handle any exceptions during restoration.
            }
        }

        /// <summary>
        /// Rebuilds the DataGridView to reflect the current file list and progress,
        /// ensuring all file entries and their statuses are correctly displayed.
        /// </summary>
        private void RebuildDataGridView()
        {
            // Resets the data bindings for the binding source.
            _bindingSource.ResetBindings(false);
            // Loops through each file wrapper in the file list.
            foreach (FileInfoWrapper fileWrapper in _fileList)
            {
                // Checks if the file exists on the disk.
                if (File.Exists(fileWrapper.FilePath))
                {
                    // Creates a FileInfo object to get file details.
                    FileInfo fileInfo = new FileInfo(fileWrapper.FilePath);
                    // Determines the status of the file based on the current progress index.
                    string status = _fileList.IndexOf(fileWrapper) < _currentFileIndex ? "Complete" : "Pending";
                    // Adds the file information to the DataGridView.
                    AddToDataGridView(fileInfo.Name, fileWrapper.FilePath, fileInfo.Length, status);
                }
            }
            // Updates the total file count.
            _grandTotalFileCount = _fileList.Count;
            // Updates the file count labels on the UI.
            UpdateFileCountLabels();
        }

        /// <summary>
        /// Adds a new file entry to both DataGridViews and scrolls to the latest row,
        /// performing UI-thread marshaling if needed.
        /// </summary>
        /// <param name="fileName">The display name of the file.</param>
        /// <param name="filePath">The full file path.</param>
        /// <param name="fileSize">The file size in bytes.</param>
        /// <param name="status">The processing status of the file (e.g., Pending, Complete).</param>
        private void AddToDataGridView(string fileName, string filePath, long fileSize, string status)
        {
            // Checks if the call is from a different thread.
            if (InvokeRequired)
            {
                // If so, it marshals the call back to the UI thread.
                Invoke(new Action(() => AddToDataGridView(fileName, filePath, fileSize, status)));
                return;
            }

            // Adds a new row to the main files DataGridView with file information.
            filesDataGridView.Rows.Add(fileName, filePath, FormatFileSize(fileSize), status);

            // Checks if the DataGridView has any rows.
            if (filesDataGridView.Rows.Count > 0)
            {
                // Scrolls the DataGridView to the last added row.
                filesDataGridView.FirstDisplayedScrollingRowIndex = filesDataGridView.Rows.Count - 1;
            }

            // Adds a new row to a second DataGridView (dataGridView1).
            dataGridView1.Rows.Add(fileName, filePath, FormatFileSize(fileSize), status);

            // Checks if the second DataGridView has any rows.
            if (dataGridView1.Rows.Count > 0)
            {
                // Scrolls the second DataGridView to the last added row.
                dataGridView1.FirstDisplayedScrollingRowIndex = filesDataGridView.Rows.Count - 1;
            }
        }

        private void keepOnlyFilesCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            // Checks if the 'keepOnlyFilesCheckBox' is checked.
            if (keepOnlyFilesCheckBox.Checked)
            {
                // If it is, unchecks all other related checkboxes to ensure mutually exclusive options.
                keepDirStructCheckBox.Checked = false;
                leaveEmptyFoldersCheckBox.Checked = false;
                copyFilesDirsCheckBox.Checked = false;
            }
            // If the checkbox is unchecked, and all other related checkboxes are also unchecked...
            else if (!leaveEmptyFoldersCheckBox.Checked && !keepOnlyFilesCheckBox.Checked && !copyFilesDirsCheckBox.Checked && !createCustomDirCheckBox.Checked)
            {
                // ...re-checks the 'keepDirStructCheckBox' by default.
                keepDirStructCheckBox.Checked = true;
            }
        }
        private void keepEmptyFoldersCheckBox_CheckedChanged(object sender, EventArgs e)
        {

            // Checks if the 'keepEmptyFoldersCheckBox' is checked.
            if (leaveEmptyFoldersCheckBox.Checked)
            {
                // If it is, unchecks all other related checkboxes to ensure mutually exclusive options.
                keepOnlyFilesCheckBox.Checked = false;
                createCustomDirCheckBox.Checked = false;
            }
            // If the checkbox is unchecked, and all other related checkboxes are also unchecked...
            else if (!leaveEmptyFoldersCheckBox.Checked && !keepOnlyFilesCheckBox.Checked && !copyFilesDirsCheckBox.Checked && !createCustomDirCheckBox.Checked)
            {
                // ...re-checks the 'keepDirStructCheckBox' by default.
                keepDirStructCheckBox.Checked = true;
            }
        }
        private void filesDataGridView_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            // Ensures a valid row and column index were clicked.
            if (e.RowIndex >= 0 && e.ColumnIndex >= 0 &&
     e.RowIndex < filesDataGridView.Rows.Count &&
     e.ColumnIndex < filesDataGridView.Columns.Count)
            {
                var cell = filesDataGridView.Rows[e.RowIndex].Cells[0];
                if (cell?.Value != null)
                {
                    filePathLabel.Text = string.Format(
                        Translator.Get("Current Selection: {0}"),
                        cell.Value.ToString());
                }
                else
                {
                    filePathLabel.Text = Translator.Get("No File Selected");
                }
            }
            else
            {
                filePathLabel.Text = Translator.Get("No File Selected");
            }
        }

        /// <summary>
        /// Displays a confirmation dialog to cancel the ongoing copy operation.
        /// If the user selects "Yes", the current file finishes copying before the process stops.
        /// Uses <see cref="InvokeRequired"/> to ensure thread-safe UI updates.
        /// </summary>
        /// <returns>
        /// <c>true</c> if the user confirmed cancellation (current file will complete, then stop);
        /// <c>false</c> if the user declined.
        /// </returns>
        private bool ConfirmCancelCopy()
        {
            bool finish = false;

            DialogResult dr = DialogResult.None;

            if (InvokeRequired)
            {
                Invoke(new Action(() =>
                {
                    cancelButton.Enabled = false;
                    dr = MessageBox.Show(
                            Translator.Get("Cancel the copy?\n\nChoosing ‘Yes’ will finish the current file and then stop."),
                            Translator.Get("Confirm cancel"),
                            MessageBoxButtons.YesNo,
                            MessageBoxIcon.Question);
                }));
            }
            else
            {
                cancelButton.Enabled = false;
                dr = MessageBox.Show(
                        Translator.Get("Cancel the copy?\n\nChoosing ‘Yes’ will finish the current file and then stop."),
                        Translator.Get("Confirm cancel"),
                        MessageBoxButtons.YesNo,
                        MessageBoxIcon.Question);
            }

            // ---- handle the answer ----
            if (dr == DialogResult.No)
            {
                // user clicked No – do whatever you need here
                cancelButton.Enabled = true;
                return false;               // don’t cancel
            }

            // user clicked Yes – proceed with cancel
            _finishCurrentFileAndQuit = true;
            return true;
        }

        private void tabControl1_MouseEnter(object sender, EventArgs e)
        {
            // Updates the status label with a descriptive text about the tab control.
            statusLabel.Text = Translator.Get("Tab Control: This control allows you to switch between different operation modes and settings.");
        }

        private void fileNamePicBox_MouseEnter(object sender, EventArgs e)
        {
            // Updates the status label with a description of the file icon picture box.
            statusLabel.Text = Translator.Get("File's Icon PictureBox: The file's icon which reflect the current file will be shown here.");
        }

        private void fromDirPicBox_MouseEnter(object sender, EventArgs e)
        {
            // Updates the status label with a description of the source directory button.
            statusLabel.Text = Translator.Get("Source Directory Button: This is the button to select your source directory from which files will be copied/moved/securely deleted.");
        }

        private void targetDirPicBox_MouseEnter(object sender, EventArgs e)
        {
            // Updates the status label with a description of the target directory button.
            statusLabel.Text = Translator.Get("Target Directory Button: This is the button to select your target directory to which your files will be copied/moved.");
        }

        private void copyMoveDeleteComboBox_MouseEnter(object sender, EventArgs e)
        {
            // Updates the status label with a description of the operation dropdown.
            statusLabel.Text = Translator.Get("Copy/Move/Secure Delete ComboBox: This dropdown combobox is to select the operation of Copy/Move/Secure Delete.");
        }

        private void onFinishComboBox_MouseEnter(object sender, EventArgs e)
        {
            // Updates the status label with a description of the "on finish" dropdown.
            statusLabel.Text = Translator.Get("On Finish ComboBox: This dropdown combobox is to select the action to perform when the operation finishes.");
        }

        private void startButton_MouseEnter(object sender, EventArgs e)
        {
            // Updates the status label with a description of the start button.
            statusLabel.Text = Translator.Get("Start Button: This button starts the operation of Copy/Move/Secure Delete.");
        }

        private void pauseResumeButton_MouseEnter(object sender, EventArgs e)
        {
            // Updates the status label with a description of the pause/resume button.
            statusLabel.Text = Translator.Get("Pause/Resume Button: This button pauses/resumes the current operation.");
        }

        private void cancelButton_MouseEnter(object sender, EventArgs e)
        {
            // Updates the status label with a description of the cancel button.
            statusLabel.Text = Translator.Get("Cancel Button: This button cancels the current operation.");
        }

        private void skipButton_MouseEnter(object sender, EventArgs e)
        {
            // Updates the status label with a description of the skip button.
            statusLabel.Text = Translator.Get("This button skips the current file and moves to the next one in the operation.");
        }

        private void addFileButton_MouseEnter(object sender, EventArgs e)
        {
            // Updates the status label with a description of the add file button.
            statusLabel.Text = Translator.Get("Add File Button: This button adds files to the list for the current operation.");
        }

        private void removeFileButton_MouseEnter(object sender, EventArgs e)
        {
            // Updates the status label with a description of the remove file button.
            statusLabel.Text = Translator.Get("Remove File Button: This button removes the selected file from the list for the current operation.");
        }

        private void clearFileListButton_MouseEnter(object sender, EventArgs e)
        {
            // Updates the status label with a description of the clear file list button.
            statusLabel.Text = Translator.Get("Clear File List Button: This button clears the entire file list for the current operation.");
        }

        private void fileCountOnLabel_MouseEnter(object sender, EventArgs e)
        {
            // Updates the status label with a description of the file count label.
            statusLabel.Text = Translator.Get("File Count Label: This label shows the total number of files in the current operation.");
        }

        private void fileProcessedLabel_MouseEnter(object sender, EventArgs e)
        {
            // Updates the status label with a description of the file processed label.
            statusLabel.Text = Translator.Get("File Processed Label: This label shows the number of converted bytes that have been processed in the current operation.");
        }

        private void totalCopiedProgressLabel_MouseEnter(object sender, EventArgs e)
        {
            // Updates the status label with a description of the total copied progress label.
            statusLabel.Text = Translator.Get("Total Copied Progress Label: This label shows the total bytes processed and the total bytes to process in the current operation.");
        }

        private void elapsedAndTargetTimeLabel_MouseEnter(object sender, EventArgs e)
        {
            // Updates the status label with a description of the elapsed and target time label.
            statusLabel.Text = Translator.Get("Elapsed Out of Target Time Label: This label shows the elapsed time and the estimated target time for the current operation.");
        }

        private void speedLabel_MouseEnter(object sender, EventArgs e)
        {
            // Updates the status label with a description of the speed label.
            statusLabel.Text = Translator.Get("Speed Label: This label shows the current speed of the operation in bytes per second.");
        }

        private void totalHDSpaceLeftLabel_MouseEnter(object sender, EventArgs e)
        {
            // Updates the status label with a description of the total hard drive space left label.
            statusLabel.Text = Translator.Get("Total HD Space Left Label: This label shows the total hard drive space left on the target drive.");
        }

        private void overwriteIfNewerCheckBox_MouseDown(object sender, MouseEventArgs e)
        {
            // Updates the status label with a description of the overwrite if newer checkbox.
            statusLabel.Text = Translator.Get("Overwrite If Newer CheckBox: This checkbox determines whether to overwrite files only if the source file is newer than the destination file.");
        }

        private void overwriteAllCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Updates the status label with a description of the overwrite all checkbox.
            statusLabel.Text = Translator.Get("Overwrite All CheckBox: This checkbox determines whether to overwrite all files in the target directory without checking their timestamps.");
        }

        private void doNotOverwriteCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Updates the status label with a description of the do not overwrite checkbox.
            statusLabel.Text = Translator.Get("Do Not Overwrite CheckBox: This checkbox determines whether to skip files that already exist in the target directory.");
        }

        private void keepEmptyFoldersCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Updates the status label with a description of the keep empty folders checkbox.
            statusLabel.Text = Translator.Get("Keep Empty Folders CheckBox: This checkbox determines whether to keep empty folders in the target directory after the operation.");
        }

        private void keepDirStructCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Updates the status label with a description of the keep directory structure checkbox.
            statusLabel.Text = Translator.Get("Keep Directory Structure CheckBox: This checkbox determines whether to keep the directory structure of the source files in the target directory.");
        }

        private void createCustomDirCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Updates the status label with a description of the create custom directory checkbox.
            statusLabel.Text = Translator.Get("Create Custom Directory Prior CheckBox: This checkbox determines whether to create a custom directory structure in the target directory based on the source files.");
        }

        private void copyFilesDirsCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Updates the status label with a description of the copy files and directories checkbox.
            statusLabel.Text = Translator.Get("Copy Only Files CheckBox: This checkbox determines whether to copy files and no directories from the source directory to the target directory.");
        }

        private void keepOnlyFilesCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Updates the status label with a description of the keep only files checkbox.
            statusLabel.Text = Translator.Get("Keep Only Files CheckBox: This checkbox determines whether to keep ONLY files inside the main directory.");
        }

        private void tabControl1_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                titleLabel.Text = Translator.Get(proVersion
                    ? "Copy That v1.0 Pro By: Havoc"
                    : "Copy That v1.0 By: Havoc");
            }
            catch
            {

            }




            // Checks if the selected tab is the "About" page.
            if (tabControl1.SelectedTab == cmdAboutPage)
            {
                // Stops the scroll timer if it's running.
                scrollTimer?.Stop();
                // Removes the event handler for the timer.
                if (scrollTimer != null)
                {
                    scrollTimer.Tick -= ScrollTimer_Tick;
                }

                // Disposes of the old timer.
                scrollTimer?.Dispose();

                // Creates and starts a new timer for scrolling.
                scrollTimer = new Timer();
                scrollTimer.Interval = 25;
                scrollTimer.Tick += ScrollTimer_Tick;
                scrollTimer.Start();

                // Ensures the "About" page is the selected tab.
                tabControl1.SelectedTab = cmdAboutPage;

                // Updates the title label based on whether it's the "Pro" version.
                titleLabel.Text = Translator.Get(proVersion
                   ? "Copy That v1.0 Pro By: Havoc - About"
                   : "Copy That v1.0 By: Havoc - About");

                // Defines constants for logo size and padding.
                int logoWidth = 300;
                int logoHeight = 300;
                int logoPadding = 10;

                // Sets the size and picture box mode for the logos.
                copyThatPB.Width = logoWidth;
                copyThatPB.Height = logoHeight;
                copyThatPB.SizeMode = PictureBoxSizeMode.Zoom;

                havocSoftwarePB.Width = logoWidth;
                havocSoftwarePB.Height = logoHeight;
                havocSoftwarePB.SizeMode = PictureBoxSizeMode.Zoom;

                // Calculates the total width of both logos and the padding.
                int totalLogoWidth = (logoWidth * 2) + logoPadding;
                // Calculates the starting X position to center the logos.
                int startX = (aboutPanel.Width - totalLogoWidth) / 2;

                // Sets the position of the first logo.
                copyThatPB.Left = startX;
                copyThatPB.Top = aboutPanel.Height;

                // Sets the position of the second logo.
                havocSoftwarePB.Left = startX + logoWidth + logoPadding;
                havocSoftwarePB.Top = aboutPanel.Height;



                // Configures the size and alignment of the "about" label.
                aboutCTLabel.AutoSize = true;
                aboutCTLabel.MaximumSize = new Size(aboutPanel.Width - 20, 0);
                aboutCTLabel.TextAlign = ContentAlignment.TopCenter;

                // Centers the "about" label horizontally and positions it below the logos.
                aboutCTLabel.Left = (aboutPanel.Width - aboutCTLabel.Width) / 2;
                aboutCTLabel.Top = copyThatPB.Top + logoHeight + 10;

                // Adds the picture boxes and label to the about panel if they are not already there.
                if (!aboutPanel.Controls.Contains(copyThatPB))
                    aboutPanel.Controls.Add(copyThatPB);
                if (!aboutPanel.Controls.Contains(havocSoftwarePB))
                    aboutPanel.Controls.Add(havocSoftwarePB);
                if (!aboutPanel.Controls.Contains(aboutLabel))
                    aboutPanel.Controls.Add(aboutLabel);
            }

            // Handles other tab selections by updating the status label.
            else if (tabControl1.SelectedTab == cmdCopyHistory)
            {
                statusLabel.Text = Translator.Get("Current tab page: Copy History Page.");
            }
            else if (tabControl1.SelectedTab == cmdExclusions)
            {
                statusLabel.Text = Translator.Get("Current tab page: Exclusions Page.");
            }
            else if (tabControl1.SelectedTab == cmdHomePage)
            {
                statusLabel.Text = Translator.Get("Current tab page: Home Page.");
            }
            else if (tabControl1.SelectedTab == cmdSettingsPage)
            {
                statusLabel.Text = Translator.Get("Current tab page: Settings Page.");
            }
            else if (tabControl1.SelectedTab == cmdSkipPage)
            {
                statusLabel.Text = Translator.Get("Current tab page: Skipped Files Page.");
            }
            else if (tabControl1.SelectedTab == cmdExclusions)
            {
                statusLabel.Text = Translator.Get("Current tab page: Allowed/Excluded Page.");
            }
            else
            {
                statusLabel.Text = Translator.Get("Current tab page: Multi-Thread Page.");
            }
        }

        private void cmdHomePage_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statusLabel' to a descriptive message when the mouse enters the 'cmdHomePage' button.
            statusLabel.Text = Translator.Get("Home Page Tab: This tab contains the main interface for file operations such as copy, move, and secure delete.");
        }

        private void mainForm_MouseEnter(object sender, EventArgs e)
        {
            // Checks if the 'proVersion' boolean is true.
            // If true, it sets the status label to "Copy That v1.0 Pro By: Havoc - Home".
            // If false, it sets the status label to "Copy That v1.0 By: Havoc - Home".
            statusLabel.Text = proVersion ? "Copy That v1.0 Pro By: Havoc - Home" : "Copy That v1.0 By: Havoc - Home";
        }

        private void titleLabel_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statusLabel' to a message explaining the application's title.
            statusLabel.Text = Translator.Get("Copy That v1.0 By: Havoc - This is the title of the application, which reflects the current operation.");
        }

        private void filePathLabel_MouseEnter(object sender, EventArgs e)
        {
            // Sets the status label to describe the 'filePathLabel' control.
            statusLabel.Text = Translator.Get("Current File Path: This label shows the path of the currently processed file in the operation.");
        }

        private void fromFilesDirLabel_MouseEnter(object sender, EventArgs e)
        {
            // Sets the status label to describe the 'fromFilesDirLabel' control.
            statusLabel.Text = Translator.Get("Current Source Directory: This label shows the path of the source directory from which files will be copied/moved/securely deleted.");
        }

        private void targetDirLabel_MouseEnter(object sender, EventArgs e)
        {
            // Sets the status label to describe the 'targetDirLabel' control.
            statusLabel.Text = Translator.Get("Current Target Directory: This label shows the path of the target directory to which files will be copied/moved.");
        }

        private void fileIconPicBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the status label to describe the 'fileIconPicBox' control.
            statusLabel.Text = Translator.Get("Current File Icon: This picture box shows the icon of the currently processed file in the operation.");
        }

        private void overwriteIfNewerCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the status label to describe the 'overwriteIfNewerCheckBox'.
            statusLabel.Text = Translator.Get("Overwrite If Newer: This checkbox determines whether to overwrite files only if the source file is newer than the destination file.");
        }

        private void modernFile_MouseEnter(object sender, EventArgs e)
        {
            // Sets the status label to describe the 'modernFile' control.
            statusLabel.Text = Translator.Get("File Progress Bar: This progress bar shows the progress of the current file being processed in the operation.");
        }

        private void fileTotalProgressLabel_MouseEnter(object sender, EventArgs e)
        {
            // Sets the status label to describe the 'fileTotalProgressLabel'.
            statusLabel.Text = Translator.Get("File Progress Label: This label shows the percentage of progress for the current file being processed in the operation.");
        }

        private void modernTotal_MouseEnter(object sender, EventArgs e)
        {
            // Sets the status label to describe the 'modernTotal' control.
            statusLabel.Text = Translator.Get("Total Progress Bar: This progress bar shows the overall progress of the operation across all files being processed.");
        }

        private void totalProgressLabel_MouseEnter(object sender, EventArgs e)
        {
            // Sets the status label to describe the 'totalProgressLabel'.
            statusLabel.Text = Translator.Get("Total Progress Label: This label shows the percentage of overall progress for the operation across all files being processed.");
        }

        private void searchTextBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the status label to describe the 'searchTextBox'.
            statusLabel.Text = Translator.Get("Search Text Box: This text box allows you to search for specific files in the file list. Type a keyword to filter the displayed files.");
        }

        private void clearTextButton_MouseEnter(object sender, EventArgs e)
        {
            // Sets the status label to describe the 'clearTextButton'.
            statusLabel.Text = Translator.Get("Clear Text Button: This button clears the text in the search box, allowing you to reset the search filter and view all files in the list.");
        }

        private void fileUpPicBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the status label to describe the 'fileUpPicBox'.
            statusLabel.Text = Translator.Get("Files Up Button: This button allows you to move the selected file up in the list, changing its order in the operation sequence.");
        }

        private void fileDownPicBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the status label to describe the 'fileDownPicBox'.
            statusLabel.Text = Translator.Get("Files Down Button: This button allows you to move the selected file down in the list, changing its order in the operation sequence.");
        }

        private void filesDataGridView_MouseEnter(object sender, EventArgs e)
        {
            // Sets the status label to describe the 'filesDataGridView'.
            statusLabel.Text = Translator.Get("Files Data Grid View: This grid displays the list of files to be processed in the current operation, including their names, paths, sizes, and statuses.");
        }

        private void verifyCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the status label to describe the 'verifyCheckBox'.
            statusLabel.Text = Translator.Get("Verify After Transfer CheckBox: This checkbox determines whether to verify the integrity of files after they have been copied or moved.");
        }

        private void pauseResumeMultiButton_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripMulti' to a descriptive message.
            toolStripMulti.Text = Translator.Get("Pause/Resume Multi-Thread Button: This button pauses or resumes the multi-threaded operation.");
        }

        private void cancelMultiButton_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripMulti' to a descriptive message.
            toolStripMulti.Text = Translator.Get("Cancel Multi-Thread Button: This button cancels the multi-threaded operation.");
        }

        private void onFinishMultiComboBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripMulti' to a descriptive message.
            toolStripMulti.Text = Translator.Get("On Finish Multi-Thread ComboBox: This dropdown combobox is to select the action to perform when the multi-threaded operation finishes.");
        }

        private void filesNameLabel1_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripMulti' to a descriptive message.
            toolStripMulti.Text = Translator.Get("Files Name Label 1: This label shows the name of the file being processed by thread 1, along with the percentage and speed.");
        }

        private void totalPCTMultiLabel1_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripMulti' to a descriptive message.
            toolStripMulti.Text = Translator.Get("Total Percentage Multi Label 1: This label shows the percentage of progress for the file being processed by thread 1.");
        }

        private void filesNameLabel2_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripMulti' to a descriptive message.
            toolStripMulti.Text = Translator.Get("Files Name Label 2: This label shows the name of the file being processed by thread 2, along with the percentage and speed.");
        }

        private void filesNameLabel3_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripMulti' to a descriptive message.
            toolStripMulti.Text = Translator.Get("Files Name Label 3: This label shows the name of the file being processed by thread 3, along with the percentage and speed.");
        }

        private void totalPCTMultiLabel2_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripMulti' to a descriptive message.
            toolStripMulti.Text = Translator.Get("Total Percentage Multi Label 2: This label shows the percentage of progress for the file being processed by thread 2.");
        }

        private void totalPCTMultiLabel3_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripMulti' to a descriptive message.
            toolStripMulti.Text = Translator.Get("Total Percentage Multi Label 3: This label shows the percentage of progress for the file being processed by thread 3.");
        }

        private void filesNameLabel4_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripMulti' to a descriptive message.
            toolStripMulti.Text = Translator.Get("Files Name Label 4: This label shows the name of the file being processed by thread 4, along with the percentage and speed.");
        }

        private void totalPCTMultiLabel4_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripMulti' to a descriptive message.
            toolStripMulti.Text = Translator.Get("Total Percentage Multi Label 4: This label shows the percentage of progress for the file being processed by thread 4.");
        }

        private void progressBarMultiTotal_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripMulti' to a descriptive message.
            toolStripMulti.Text = Translator.Get("Progress Bar Multi-Thread Total: This progress bar shows the overall progress of the multi-threaded operation across all threads.");
        }

        private void multiThreadTotalProgressLabel_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripMulti' to a descriptive message.
            toolStripMulti.Text = Translator.Get("Multi-Thread Total Progress Label: This label shows the percentage of overall progress for the multi-threaded operation across all threads.");
        }

        private void fileCountMultiLabel_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripMulti' to a descriptive message.
            toolStripMulti.Text = Translator.Get("File Count Multi Label: This label shows the number of files processed out of the total number of files in the multi-threaded operation.");
        }

        private void totalTimeMultiLabel_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripMulti' to a descriptive message.
            toolStripMulti.Text = Translator.Get("Total Time Multi Label: This label shows the elapsed time out of the estimated target time for the multi-threaded operation.");
        }

        private void speedMultiLabel_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripMulti' to a descriptive message.
            toolStripMulti.Text = Translator.Get("Speed Multi Label: This label shows the current speed of the multi-threaded operation in bytes per second.");
        }

        private void totalCMDMultiLabel_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripMulti' to a descriptive message.
            toolStripMulti.Text = Translator.Get("Total C/M/D Label: This label shows the total space processed out of the total space for all files.");
        }

        private void totalSpaceMultiLabel_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripMulti' to a descriptive message.
            toolStripMulti.Text = Translator.Get("Total Space Left Label: This label shows the total hard drive used out of the total hard drive space left on the target drive for the multi-threaded operation.");
        }

        private void goToInExplorerButton_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripSkipped' to a descriptive message.
            toolStripSkipped.Text = Translator.Get("Go To In Explorer Button: This button opens the selected file's location in Windows Explorer.");
        }

        private void totalSkippedLabel_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripSkipped' to a descriptive message.
            toolStripSkipped.Text = Translator.Get("Total Skipped Label: This label shows the total number of files that were skipped during the operation.");
        }

        private void clearSkippedListButton_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripSkipped' to a descriptive message.
            toolStripSkipped.Text = Translator.Get("Clear Skipped List Button: This button clears the list of skipped files.");
        }

        private void skippedDataGridView_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripSkipped' to a descriptive message.
            toolStripSkipped.Text = Translator.Get("Skipped Data Grid View: This grid displays the list of files that were skipped during the operation, including their names, paths, sizes, and reasons for skipping.");
        }

        private void cloneButton_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripCopyHistory' to a descriptive message.
            toolStripCopyHistory.Text = Translator.Get("Clone Button: This button clones the selected operation from the history list, allowing you to quickly repeat a previous operation.");
        }

        private void deleteEntryButton_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripCopyHistory' to a descriptive message.
            toolStripCopyHistory.Text = Translator.Get("Delete Entry Button: This button deletes the selected entry from the operation history list.");
        }

        private void clearHistoryButton_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripCopyHistory' to a descriptive message.
            toolStripCopyHistory.Text = Translator.Get("Clear History Button: This button clears the entire operation history list.");
        }

        private void totalHistoryLabel_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripCopyHistory' to a descriptive message.
            toolStripCopyHistory.Text = Translator.Get("Total History Label: This label shows the total number of operations recorded in the history list.");
        }

        private void addAllowedButton_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripExclusions' to a descriptive message.
            toolStripExclusions.Text = Translator.Get("Add Allowed Button: This button adds a new allowed file or directory to the allowed list.");
        }

        private void removeAllowedButton_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripExclusions' to a descriptive message.
            toolStripExclusions.Text = Translator.Get("Remove Allowed Button: This button removes the selected allowed file or directory from the allowed list.");
        }

        private void clearAllowedButton_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripExclusions' to a descriptive message.
            toolStripExclusions.Text = Translator.Get("Clear Allowed Button: This button clears the entire list of allowed files and directories.");
        }

        private void addExcludedButton_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripExclusions' to a descriptive message.
            toolStripExclusions.Text = Translator.Get("Add Excluded Button: This button adds a new excluded file or directory to the exclusions list.");
        }

        private void removeExcludedButton_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripExclusions' to a descriptive message.
            toolStripExclusions.Text = Translator.Get("Remove Excluded Button: This button removes the selected excluded file or directory from the exclusions list.");
        }

        private void clearExcludedButton_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripExclusions' to a descriptive message.
            toolStripExclusions.Text = Translator.Get("Clear Excluded Button: This button clears the entire list of excluded files and directories.");
        }

        private void allowedTextBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripExclusions' to a descriptive message.
            toolStripExclusions.Text = Translator.Get("Allowed Text Box: This text box allows you to enter file or directory paths to be added to the allowed list.");
        }

        private void excludedTextBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripExclusions' to a descriptive message.
            toolStripExclusions.Text = Translator.Get("Excluded Text Box: This text box allows you to enter file or directory paths to be added to the exclusions list.");
        }

        private void allowedExtListBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripExclusions' to a descriptive message.
            toolStripExclusions.Text = Translator.Get("Allowed List Box: This list box displays the list of allowed files and directories that will be included in the operation.");
        }

        private void excludedExtListBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripExclusions' to a descriptive message.
            toolStripExclusions.Text = Translator.Get("Excluded List Box: This list box displays the list of excluded files and directories that will be skipped during the operation.");
        }

        private void cmdExclusions_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripExclusions' to a descriptive message.
            toolStripExclusions.Text = Translator.Get("Exclusions Tab: This tab allows you to manage the lists of allowed and excluded files and directories for the operation.");
        }

        private void cmdSkipPage_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripSkipped' to a descriptive message.
            toolStripSkipped.Text = Translator.Get("Skipped Tab: This tab displays the list of files that were skipped during the operation, along with options to manage the skipped files.");
        }

        private void cmdMultithread_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripMulti' to a descriptive message.
            toolStripMulti.Text = Translator.Get("Multi-Thread Tab: This tab allows you to configure and monitor multi-threaded operations for copying or moving files.");
        }

        private void windowGroupBox_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Window Group Box: This group box contains settings related to the application's window behavior, such as minimizing to the system tray.");
        }

        private void alwaysOnTopCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Always On Top CheckBox: This checkbox determines whether the application window should always stay on top of other windows.");
        }

        private void minimizeSystemTrayCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Minimize to System Tray CheckBox: This checkbox determines whether the application should minimize to the system tray instead of the taskbar.");
        }

        private void confirmDragDropCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Confirm Drag & Drop CheckBox: This checkbox determines whether to show a confirmation dialog when files are dragged and dropped into the application.");
        }

        private void contextMenuCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Context Menu CheckBox: This checkbox determines whether to add an option to the Windows context menu for quick access to the application.");
        }

        private void skinsLanguageGoupBox_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Skins & Language Group Box: This group box contains settings related to the application's appearance and language preferences.");
        }

        private void languageComboBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Language ComboBox: This dropdown combobox allows you to select the language for the application's user interface.");
        }

        private void skinsComboBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Skins ComboBox: This dropdown combobox allows you to select different skins or themes for the application's appearance.");
        }

        private void fontNumUpDown_Enter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Font Size Numeric Up-Down: This control allows you to adjust the font size used in the application's user interface.");
        }

        private void soundsGroupBox_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Sounds Group Box: This group box contains settings related to the application's sound notifications for various events.");
        }

        private void onFinishCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("On Finish CheckBox: This checkbox determines whether to play a sound notification when the file operation finishes.");
        }

        private void onCancelCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("On Cancel CheckBox: This checkbox determines whether to play a sound notification when the file operation is canceled.");
        }

        private void onAddFilesCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("On Add Files CheckBox: This checkbox determines whether to play a sound notification when files are added to the operation list.");
        }

        private void onErrorCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("On Error CheckBox: This checkbox determines whether to play a sound notification when an error occurs during the file operation.");
        }

        private void updateGroupBox_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Update Group Box: This group box contains settings related to the application's update preferences.");
        }

        private void updateAutoCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Auto Check for Updates CheckBox: This checkbox determines whether the application should automatically check for updates on startup.");
        }

        private void updateBetaCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Include Beta Versions CheckBox: This checkbox determines whether to include beta versions when checking for updates.");
        }

        private void checkForUpdatesButton_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Check for Updates Button: This button manually checks for updates to the application.");
        }

        private void defaultSettingsButton_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Default Settings Button: This button resets all settings to their default values.");
        }

        private void recSettingsButton_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Recommended Settings Button: This button applies a set of recommended settings for optimal performance and usability.");
        }

        private void priorityTrackBar_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Priority Track Bar: This track bar allows you to adjust the priority level of the file operations, affecting how system resources are allocated.");
        }

        private void opacityTrackBar_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Opacity Track Bar: This track bar allows you to adjust the opacity level of the application window, making it more or less transparent.");
        }

        private void logFileCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Log File CheckBox: This checkbox determines whether to create a log file that records details of the file operations performed by the application.");
        }

        private void logDaysNumUpDown_Enter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Log Days Numeric Up-Down: This control allows you to specify the number of days to retain log files before they are automatically deleted.");
        }

        private void saveAutoCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Auto Save Settings CheckBox: This checkbox determines whether to automatically save the current settings when the application is closed.");
        }

        private void clearSettingsButton_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Clear Settings Button: This button clears all user-defined settings, reverting the application to its default configuration.");
        }

        private void saveSettingsButton_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Save Settings Button: This button saves the current settings, ensuring that any changes made are retained for future sessions.");
        }

        private void performanceGroupBox_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Performance Group Box: This group box contains settings related to the application's performance, such as buffer size and multi-threading options.");
        }

        private void bufferNumUpDown_Enter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Buffer Size Numeric Up-Down: This control allows you to adjust the buffer size used during file operations, which can affect performance.");
        }

        private void multithreadCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Multi-Thread CheckBox: This checkbox enables or disables multi-threaded file operations, allowing multiple files to be processed simultaneously for improved performance.");
        }

        private void underMBCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Under MB CheckBox: This checkbox determines whether to apply multi-threading only to files smaller than the specified size in megabytes.");
        }

        private void overMBCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Over MB CheckBox: This checkbox determines whether to apply multi-threading only to files larger than the specified size in megabytes.");
        }

        private void setMBGBUnderNumUpDown_Enter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Set MB/GB Under Numeric Up-Down: This control allows you to specify the size threshold in megabytes for applying multi-threading to smaller files.");
        }

        private void setMBGBOverNumUpDown_Enter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Set MB/GB Over Numeric Up-Down: This control allows you to specify the size threshold in megabytes for applying multi-threading to larger files.");
        }

        private void fileDirSettingsGroupBox_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("File/Directory Settings Group Box: This group box contains settings related to how files and directories are exported or zipped (before) for the copy or move operations.");
        }

        private void onlyNamesCheckBox_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Only Names CheckBox: This checkbox determines whether to export only the names of files and directories without their full paths.");
        }

        private void fullPathsCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Full Paths CheckBox: This checkbox determines whether to export the full paths of files and directories.");
        }

        private void exportButton_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Export Button: This button exports the list of files and directories to a text file based on the selected settings (only names or full paths).");
        }

        private void zipSeparateCheckBox_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Zip Separate CheckBox: This checkbox determines whether to create separate zip files for each file and directory before the copy or move operations.");
        }

        private void zipTogetherCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Zip Together CheckBox: This checkbox determines whether to create a single zip file containing all files and directories before the copy or move operations.");
        }

        private void emailGroupBox_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Email Group Box: This group box contains settings related to exporting and emailing the file list for the application.");
        }

        private void smsGroupBox_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("SMS Group Box: This group box contains settings for configuring SMS notifications when operations complete.");
        }

        private void setUpSMSButton_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Set Up SMS Button: This button opens the SMS notification setup dialog, allowing you to configure SMS settings for operation completion notifications.");
        }

        private void setUpEmailButton_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Set Up Email Button: This button opens the email setup dialog, allowing you to configure email settings for exporting and sending the file list.");
        }

        private void emailNamesCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Email Names CheckBox: This checkbox determines whether to include only the names of files and directories in the email export.");
        }

        private void emailPathsCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Email Paths CheckBox: This checkbox determines whether to include the full paths of files and directories in the email export.");
        }

        private void otherSettingsGroupBox_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Other Settings Group Box: This group box contains miscellaneous settings for the application.");
        }

        private void closeProgramCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Close Program CheckBox: This checkbox determines whether to automatically close the application when an error occurs.");
        }

        private void restartCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Restart CheckBox: This checkbox determines whether to automatically restart the application when an error occurs.");
        }

        private void startWithWindowsCheckBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Start with Windows CheckBox: This checkbox determines whether to launch the application automatically when Windows starts.");
        }

        private void serialMaskedTextBox_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Serial Key Text Box: This text box allows you to enter your serial key to activate the application.");
        }

        private void registerButton_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Register Button: This button submits the entered serial key for validation and activates the application if the key is valid.");
        }

        private void securePassesNumUpDown_Enter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Secure Passes Numeric Up-Down: This control allows you to specify the number of passes to use for securely deleting files.");
        }

        private void cmdSettingsPage_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Settings Tab: This tab allows you to configure various settings for the application, including window behavior, appearance, performance, and other preferences.");
        }

        private void seLabel_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Move Application Label: This allows you to move the application to different parts of the screen.");
        }

        private void cmdSettingsPage_MouseEnter_1(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Settings Tab: This tab allows you to configure various settings for the application, including window behavior, appearance, performance, and other preferences.");
        }

        private void copyHistoryDGV_MouseEnter(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripCopyHistory' to a descriptive message.
            toolStripCopyHistory.Text = Translator.Get("Copy History Data Grid View: This grid displays the history of file operations performed by the application, including details such as source and target paths, operation type, date, and status.");
        }

        private void exportDataGridView_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            // Checks if the DataGridView has any rows. If not, the method exits.
            if (dataGridView1.Rows.Count == 0) return;

            // Checks if the clicked column header is the one at index 2 (likely the size column).
            if (e.ColumnIndex == 2)
            {
                // Finds the column named "BytesRaw" which is used for sorting.
                var numericCol = dataGridView1.Columns["BytesRaw"];
                // If the column is not found, the method exits.
                if (numericCol == null) return;

                // Sorts the DataGridView based on the "BytesRaw" column in either ascending or descending order.
                dataGridView1.Sort(numericCol,
                    sortAscending ? ListSortDirection.Ascending : ListSortDirection.Descending);

                // Toggles the sorting direction for the next click.
                sortAscending = !sortAscending;
            }
        }

        /// <summary>
        /// Updates the total count label to display the number of visible,
        /// non-new rows in <see cref="dataGridView1"/>.
        /// The count is formatted with a thousands separator.
        /// </summary>
        private void UpdateTotalCountLabel()
        {
            // Initializes a counter for visible and non-new rows.
            int totalItems = dataGridView1.Rows.Cast<DataGridViewRow>().Count(r => r.Visible && !r.IsNewRow);
            // Updates the 'fileCountOnLabel' with the total count, formatted with a thousands separator.
            fileCountOnLabel.Text = string.Format(Translator.Get("Total File/Folder Count: {0}"),
                totalItems.ToString("N0"));
        }

        /// <summary>
        /// Retrieves the value of a specific cell from a given row and column
        /// in <see cref="dataGridView1"/> and returns it as a string.
        /// Returns an empty string if the cell is null.
        /// </summary>
        /// <param name="row">The <see cref="DataGridViewRow"/> containing the cell.</param>
        /// <param name="col">The <see cref="DataGridViewColumn"/> identifying the cell's column.</param>
        /// <returns>The cell value as a string, or an empty string if the cell is null.</returns>
        private string GetCellValue(DataGridViewRow row, DataGridViewColumn col)
        {
            // Retrieves the value from a cell in a specified row and column.
            object val = row.Cells[col.Index].Value;
            // Returns the cell's value as a string, or an empty string if the value is null.
            return val == null ? "" : val.ToString();
        }

        /// <summary>
        /// Formats a cell value for export, adding a row index prefix for
        /// FileName or FilePath columns. Other columns return the plain value.
        /// </summary>
        /// <param name="col">The <see cref="DataGridViewColumn"/> to retrieve data from.</param>
        /// <param name="row">The <see cref="DataGridViewRow"/> containing the cell.</param>
        /// <param name="index">The zero-based row index, used when numbering file names or paths.</param>
        /// <returns>The formatted cell value as a string.</returns>
        private string FormatCellWithIndex(DataGridViewColumn col, DataGridViewRow row, int index)
        {
            // Retrieves the cell's value as a string using the helper method GetCellValue.
            string val = GetCellValue(row, col);

            // Checks if the column's data property name is "FileName" or "FilePath".
            if (col.DataPropertyName == "FileName" || col.DataPropertyName == "FilePath")
            {
                // If it is, formats the value by prepending a numbered index (starting from 1).
                return $"#{index + 1} - {val}";
            }
            else
            {
                // Otherwise, returns the value without any additional formatting.
                return val;
            }
        }

        /// <summary>
        /// Exports the contents of the provided DataGridView columns and rows to a
        /// plain text (.txt) file, with each row written on a separate line and
        /// column values formatted as "Header: Value" pairs.
        /// </summary>
        /// <param name="filePath">The destination file path for the exported text file.</param>
        /// <param name="cols">The list of DataGridView columns to export.</param>
        /// <param name="rows">The list of DataGridView rows to export.</param>
        private void ExportTxt(string filePath, List<DataGridViewColumn> cols, List<DataGridViewRow> rows)
        {
            // Creates a new StreamWriter to write to the specified file path. The 'using' statement ensures the writer is properly disposed of.
            using (var sw = new StreamWriter(filePath))
            {
                // Writes the total file count label text to the first line of the file.
                sw.WriteLine(fileCountOnLabel.Text);

                // Iterates through each DataGridViewRow in the provided list.
                for (int i = 0; i < rows.Count; i++)
                {
                    // Gets the current row.
                    var row = rows[i];
                    // Creates a collection of strings, where each string is formatted as "Header Text: Cell Value".
                    var parts = cols.Select(c => $"{c.HeaderText}: {FormatCellWithIndex(c, row, i)}");
                    // Joins the formatted strings with " || " and writes the entire line to the file.
                    sw.WriteLine(string.Join(" || ", parts));
                }
            }
        }


        /// <summary>
        /// Exports the DataGridView data to a CSV (Comma-Separated Values) file.
        /// Includes a commented first line showing the total file count, followed by
        /// a header row and data rows with proper CSV escaping.
        /// </summary>
        /// <param name="filePath">Destination CSV file path.</param>
        /// <param name="cols">The columns to include in the export.</param>
        /// <param name="rows">The DataGridView rows to export.</param>
        private void ExportCsv(string filePath, List<DataGridViewColumn> cols, List<DataGridViewRow> rows)
        {
            // Creates a new StreamWriter to write to the specified file path.
            using (var sw = new StreamWriter(filePath))
            {
                // Writes the total file count label text as a commented line.
                sw.WriteLine($"# {fileCountOnLabel.Text}");

                // Writes the header row by joining the header text of all columns, enclosed in quotes.
                sw.WriteLine(string.Join(",", cols.Select(c => $"\"{c.HeaderText}\"")));

                // Iterates through each DataGridViewRow.
                for (int i = 0; i < rows.Count; i++)
                {
                    // Gets the current row.
                    var row = rows[i];
                    // Creates a collection of cell values, formatted and escaped for CSV.
                    var values = cols.Select(c =>
                    {
                        // Gets the formatted cell value and escapes any double quotes by doubling them.
                        var val = FormatCellWithIndex(c, row, i).Replace("\"", "\"\"");
                        // Encloses the escaped value in double quotes.
                        return $"\"{val}\"";
                    });
                    // Joins the formatted cell values with a comma and writes the line to the file.
                    sw.WriteLine(string.Join(",", values));
                }
            }
        }

        /// <summary>
        /// Exports the DataGridView data to a JSON file.
        /// Produces an object with a total count and an array of row objects,
        /// where each property name matches the column header.
        /// </summary>
        /// <param name="filePath">Destination JSON file path.</param>
        /// <param name="cols">The columns to include in the export.</param>
        /// <param name="rows">The DataGridView rows to export.</param>
        private void ExportJson(string filePath, List<DataGridViewColumn> cols, List<DataGridViewRow> rows)
        {
            // Creates a new list to hold dictionaries, where each dictionary represents a row.
            var list = new List<Dictionary<string, object>>();

            // Loops through each row in the DataGridView.
            for (int i = 0; i < rows.Count; i++)
            {
                // Gets the current row and creates a new dictionary for it.
                var row = rows[i];
                var dict = new Dictionary<string, object>();

                // Loops through each column.
                foreach (var col in cols)
                {
                    // Adds a key-value pair to the dictionary, using the column header text as the key and the formatted cell value as the value.
                    dict[col.HeaderText] = FormatCellWithIndex(col, row, i);
                }
                // Adds the dictionary to the list.
                list.Add(dict);
            }

            // Creates an anonymous object to act as the root of the JSON structure, including the total count and the list of items.
            var wrapper = new
            {
                TotalCount = fileCountOnLabel.Text,
                Items = list
            };

            // Serializes the wrapper object to a JSON string with indentation for readability.
            var json = System.Text.Json.JsonSerializer.Serialize(wrapper, new JsonSerializerOptions { WriteIndented = true });
            // Writes the JSON string to the specified file.
            File.WriteAllText(filePath, json);
        }

        /// <summary>
        /// Exports the DataGridView data to an XML file.
        /// Creates a root &lt;Export&gt; element with child elements for total count and each row.
        /// Column headers are encoded as valid XML element names.
        /// </summary>
        /// <param name="filePath">Destination XML file path.</param>
        /// <param name="cols">The columns to include in the export.</param>
        /// <param name="rows">The DataGridView rows to export.</param>
        private void ExportXml(string filePath, List<DataGridViewColumn> cols, List<DataGridViewRow> rows)
        {
            // Creates a new XML document.
            var doc = new XDocument(
                // The root element is "Export".
                new XElement("Export",
                    // Adds an element for the total count.
                    new XElement("TotalCount", fileCountOnLabel.Text),
                    // Adds an element to contain all the rows.
                    new XElement("Rows",
                        // Projects each row into a new "Row" XML element.
                        rows.Select((r, i) =>
                            new XElement("Row",
                                // Projects each column within the row into an XML element.
                                cols.Select(c =>
                                    // Creates an element with a sanitized header text as the name and the formatted cell value as the content.
                                    new XElement(XmlConvert.EncodeName(c.HeaderText.Replace(" ", "")), FormatCellWithIndex(c, r, i))
                                )
                            )
                        )
                    )
                )
            );
            // Saves the XML document to the specified file path.
            doc.Save(filePath);
        }

        /// <summary>
        /// Exports the DataGridView data to an RTF (Rich Text Format) file.
        /// Generates an RTF document containing a table with headers and data,
        /// including proper escaping of RTF control characters.
        /// </summary>
        /// <param name="filePath">Destination RTF file path.</param>
        /// <param name="cols">The columns to include in the export.</param>
        /// <param name="rows">The DataGridView rows to export.</param>
        private void ExportRtf(string filePath, List<DataGridViewColumn> cols, List<DataGridViewRow> rows)
        {
            // Defines a local function to escape characters for RTF format.
            string EscapeRtf(string text)
            {
                // If the text is null or empty, returns an empty string.
                if (string.IsNullOrEmpty(text)) return "";
                // Replaces backslashes, curly braces, and line breaks with their RTF escape sequences.
                return text
                    .Replace(@"\", @"\\")
                    .Replace("{", @"\{")
                    .Replace("}", @"\}")
                    .Replace("\r\n", @"\line ")
                    .Replace("\n", @"\line ")
                    .Replace("\r", @"\line ");
            }

            // Defines a local function to insert line breaks into a string.
            string InsertLineBreaks(string text, int maxChars = 50)
            {
                // If the text is null or empty, returns an empty string.
                if (string.IsNullOrEmpty(text)) return "";
                var sb = new System.Text.StringBuilder();
                // Iterates through the string, appending a line break after a certain number of characters.
                for (int i = 0; i < text.Length; i++)
                {
                    sb.Append(text[i]);
                    if ((i + 1) % maxChars == 0)
                        sb.Append(@"\line ");
                }
                return sb.ToString();
            }

            // Creates a new StreamWriter to write to the specified file.
            using (StreamWriter sw = new StreamWriter(filePath))
            {
                // Writes the RTF header.
                sw.WriteLine(@"{\rtf1\ansi\deff0");

                // Writes the total count label text in bold, followed by a paragraph break.
                sw.WriteLine(@"\b " + EscapeRtf(fileCountOnLabel.Text) + @"\b0 \par");

                // Sets the cell width in twips (a unit of measurement in RTF).
                int cellWidthTwips = 1500;
                int totalWidth = cellWidthTwips * cols.Count;

                // Starts a table row definition.
                sw.Write(@"\trowd\trgaph108 ");
                // Defines the horizontal position of each cell.
                for (int i = 0; i < cols.Count; i++)
                {
                    sw.Write(@"\cellx" + cellWidthTwips * (i + 1) + " ");
                }
                sw.WriteLine();

                // Writes the header row, with each header text in bold inside a table cell.
                sw.Write(@"\b ");
                foreach (var col in cols)
                {
                    sw.Write(EscapeRtf(col.HeaderText) + @"\cell ");
                }
                // Ends the bold formatting and the row.
                sw.WriteLine(@"\b0 \row");

                // Loops through each data row.
                for (int i = 0; i < rows.Count; i++)
                {
                    var row = rows[i];
                    // Starts a new table row.
                    sw.Write(@"\trowd\trgaph108 ");
                    // Defines the cell positions for the current row.
                    for (int c = 0; c < cols.Count; c++)
                    {
                        sw.Write(@"\cellx" + cellWidthTwips * (c + 1) + " ");
                    }
                    sw.WriteLine();

                    // Loops through each column to write cell data.
                    foreach (var col in cols)
                    {
                        // Gets and formats the cell value, then escapes it for RTF.
                        string val = FormatCellWithIndex(col, row, i);
                        val = EscapeRtf(InsertLineBreaks(val));
                        // Writes the cell value and the cell end delimiter.
                        sw.Write(val + @"\cell ");
                    }
                    // Ends the current table row.
                    sw.WriteLine(@"\row");
                }

                // Writes the closing curly brace for the RTF document.
                sw.WriteLine("}");
            }
        }
        /// <summary>
        /// Exports the DataGridView data to an Excel (.xlsx) file using the ClosedXML library.
        /// Creates a formatted worksheet with a merged title cell, bold headers,
        /// auto-adjusted column widths, and thin borders.
        /// </summary>
        /// <param name="filePath">Destination Excel file path.</param>
        /// <param name="cols">The columns to include in the export.</param>
        /// <param name="rows">The DataGridView rows to export.</param>
        private void ExportXlsx(string filePath, List<DataGridViewColumn> cols, List<DataGridViewRow> rows)
        {
            // Creates a new Excel workbook using the ClosedXML library.
            using (var wb = new XLWorkbook())
            {
                // Adds a new worksheet to the workbook.
                var ws = wb.Worksheets.Add("Export");

                // Writes the total count to the first cell (1, 1).
                ws.Cell(1, 1).Value = fileCountOnLabel.Text;
                // Merges the first row's cells to span the width of the data.
                ws.Range(1, 1, 1, cols.Count).Merge();
                // Applies bold font and center alignment to the merged cell.
                ws.Cell(1, 1).Style.Font.Bold = true;
                ws.Cell(1, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;

                // Loops through the columns to create the header row.
                for (int i = 0; i < cols.Count; i++)
                {
                    // Gets a cell in the second row (for headers).
                    var cell = ws.Cell(2, i + 1);
                    // Sets the header text as the cell value and applies formatting.
                    cell.Value = cols[i].HeaderText;
                    cell.Style.Font.Bold = true;
                    cell.Style.Fill.BackgroundColor = XLColor.LightGray;
                    cell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                }

                // Loops through each data row and column to populate the worksheet with data.
                for (int r = 0; r < rows.Count; r++)
                {
                    for (int c = 0; c < cols.Count; c++)
                    {
                        // Gets a cell in the data region of the worksheet.
                        var cell = ws.Cell(r + 3, c + 1);
                        // Sets the formatted cell value and applies left alignment.
                        cell.Value = FormatCellWithIndex(cols[c], rows[r], r);
                        cell.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
                    }
                }

                // Adjusts the width of all columns to fit their content.
                ws.Columns().AdjustToContents();
                // Defines the range of the table (header + data).
                var range = ws.Range(1, 1, rows.Count + 2, cols.Count);
                // Applies thin borders to the outside and inside of the table range.
                range.Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
                range.Style.Border.InsideBorder = XLBorderStyleValues.Thin;

                // Saves the workbook to the specified file path.
                wb.SaveAs(filePath);
            }
        }

        /// <summary>
        /// Exports the DataGridView data to a Markdown file.
        /// Creates a Markdown table with a header, separator row, and escaped cell values.
        /// </summary>
        /// <param name="filePath">Destination Markdown file path.</param>
        /// <param name="cols">The columns to include in the export.</param>
        /// <param name="rows">The DataGridView rows to export.</param>
        private void ExportMarkdown(string filePath, List<DataGridViewColumn> cols, List<DataGridViewRow> rows)
        {
            // Creates a new StreamWriter to write to the specified file.
            using (StreamWriter sw = new StreamWriter(filePath))
            {
                // Writes the total count label text.
                sw.WriteLine(fileCountOnLabel.Text);

                // Writes the Markdown table header row, joining column header texts.
                sw.WriteLine("| " + string.Join(" | ", cols.Select(c => c.HeaderText)) + " |");
                // Writes the Markdown table separator row.
                sw.WriteLine("|" + string.Join("|", cols.Select(c => "---")) + "|");

                // Loops through each row to write the table data.
                for (int i = 0; i < rows.Count; i++)
                {
                    // Gets the current row.
                    var row = rows[i];
                    // Creates a collection of cell values, with the pipe character '|' escaped for Markdown.
                    var cells = cols.Select(c => FormatCellWithIndex(c, row, i).Replace("|", "\\|"));
                    // Writes the Markdown table row by joining the cell values.
                    sw.WriteLine("| " + string.Join(" | ", cells) + " |");
                }
            }
        }

        /// <summary>
        /// Opens a SaveFileDialog to prompt the user for a file path and extension,
        /// then triggers a dynamic export based on the selected file type.
        /// </summary>
        /// <param name="filter">The file type filter string for the dialog (e.g., "CSV Files|*.csv").</param>
        /// <param name="defaultExt">The default file extension (e.g., ".csv").</param>
        private void ExportWithDialog(string filter, string defaultExt)
        {
            // Creates a SaveFileDialog to prompt the user for a file path.
            using (SaveFileDialog saveFileDialog = new SaveFileDialog())
            {
                // Sets the filter for file types and the default extension.
                saveFileDialog.Filter = filter;
                saveFileDialog.DefaultExt = defaultExt.TrimStart('.');
                saveFileDialog.Title = "Save Export File";

                // Shows the dialog and checks if the user clicked OK.
                if (saveFileDialog.ShowDialog() == DialogResult.OK)
                {
                    // Gets the selected file path and its extension.
                    string filePath = saveFileDialog.FileName;
                    string ext = System.IO.Path.GetExtension(filePath).ToLower();

                    // Calls the dynamic export method with the chosen path and extension.
                    ExportDataGridViewDynamic(filePath, ext);
                }
            }
        }

        /// <summary>
        /// Dynamically exports the DataGridView data to the specified file format
        /// based on the file extension, after preparing the appropriate column set.
        /// </summary>
        /// <param name="filePath">Destination file path.</param>
        /// <param name="fileExtension">The selected file extension (e.g., ".csv").</param>
        private void ExportDataGridViewDynamic(string filePath, string fileExtension)
        {
            // Creates a list to hold the columns to be exported.
            List<DataGridViewColumn> exportColumns = new List<DataGridViewColumn>();

            // Checks which checkbox is checked to determine which columns to export.
            if (fullPathsCheckBox.Checked)
            {
                // If "Full Paths" is checked, adds the FilePath, ItemType, and FileSize columns if they are visible.
                AddColumnIfVisible("FilePath", exportColumns);
                AddColumnIfVisible("ItemType", exportColumns);
                AddColumnIfVisible("FileSize", exportColumns);
            }
            else if (onlyNamesCheckBox.Checked)
            {
                // If "Only Names" is checked, adds the FileName, ItemType, and FileSize columns if they are visible.
                AddColumnIfVisible("FileName", exportColumns);
                AddColumnIfVisible("ItemType", exportColumns);
                AddColumnIfVisible("FileSize", exportColumns);
            }
            else
            {
                // If neither is checked, shows a warning message and exits the method.
                MessageBox.Show(Translator.Get("Please check either Full Paths or Only Names before exporting."), Translator.Get("Export Error"), MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            // Retrieves all visible and non-new rows from the DataGridView.
            var exportRows = dataGridView1.Rows.Cast<DataGridViewRow>()
                .Where(r => r.Visible && !r.IsNewRow)
                .ToList();

            // Updates the total file count label with the number of rows to be exported.
            int totalItems = exportRows.Count;
            fileCountOnLabel.Text = string.Format(Translator.Get("Total File/Folder Count: {0}"),
                totalItems.ToString("N0"));

            try
            {
                // Attempts to delete the file if it already exists to prevent an error.
                if (File.Exists(filePath))
                    File.Delete(filePath);

                // Uses a switch statement to call the appropriate export method based on the file extension.
                switch (fileExtension)
                {
                    case ".txt":
                        ExportTxt(filePath, exportColumns, exportRows);
                        break;
                    case ".csv":
                        ExportCsv(filePath, exportColumns, exportRows);
                        break;
                    case ".json":
                        ExportJson(filePath, exportColumns, exportRows);
                        break;
                    case ".xml":
                        ExportXml(filePath, exportColumns, exportRows);
                        break;
                    case ".xlsx":
                        ExportXlsx(filePath, exportColumns, exportRows);
                        break;
                    case ".rtf":
                        ExportRtf(filePath, exportColumns, exportRows);
                        break;
                    case ".md":
                        ExportMarkdown(filePath, exportColumns, exportRows);
                        break;
                    default:
                        MessageBox.Show(Translator.Get("Unsupported file type."), Translator.Get("Error"), MessageBoxButtons.OK, MessageBoxIcon.Error);
                        break;
                }

                // Displays a success message to the user.
                MessageBox.Show(Translator.Get($"Exported successfully to: {filePath}"), Translator.Get("Export Success"), MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                // Catches any exceptions that occur during the export process and shows an error message.
                MessageBox.Show(Translator.Get($"Error exporting data: {ex.Message}"), Translator.Get("Export Error"), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        /// <summary>
        /// Adds a DataGridView column to a list if it is visible and matches the specified DataPropertyName.
        /// </summary>
        /// <param name="dataPropertyName">The DataPropertyName of the column to search for.</param>
        /// <param name="list">The list to which the column will be added if found.</param>
        private void AddColumnIfVisible(string dataPropertyName, List<DataGridViewColumn> list)
        {
            // Finds the first column in the DataGridView that matches the specified data property name and is visible.
            var col = dataGridView1.Columns
                .Cast<DataGridViewColumn>()
                .FirstOrDefault(c => c.DataPropertyName == dataPropertyName && c.Visible);

            // If a matching column is found, it is added to the provided list.
            if (col != null)
                list.Add(col);
        }

        private void filesDataGridView_SelectionChanged(object sender, EventArgs e)
        {
            // This is an event handler for when the selection in the DataGridView changes.
            // The method body is currently empty, meaning no action is taken on this event.
        }

        private void saveAutoCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            // This event handler is triggered when the state of the 'saveAutoCheckBox' changes.
            // It saves the new checked state to the application's user settings.
            Properties.Settings.Default.AutoSaveSettings = saveAutoCheckBox.Checked;
        }



        private bool _isUpdatingLanguage = false;
        private string _savedSkinName;
        int skinNum = 0;



        public static class Translator
        {
            public static string CurrentLanguage { get; set; } = "en";

            private static readonly Dictionary<string,
                    (string fr, string de, string es,
                     string it, string pt, string ptBR, string nl,
                     string sv, string no, string da, string fi,
                     string pl, string cs, string hu, string ro)>
                _map = new(StringComparer.OrdinalIgnoreCase)
                {

                    ["Log File CheckBox: This checkbox determines whether to create a log file that records details of the file operations performed by the application."] =
(
    "Case à cocher du fichier journal : cette case détermine s’il faut créer un fichier journal enregistrant les détails des opérations de fichiers effectuées par l’application.", // French
    "Protokolldatei-Checkbox: Dieses Kontrollkästchen legt fest, ob eine Protokolldatei erstellt wird, die Details der von der Anwendung durchgeführten Dateioperationen aufzeichnet.", // German
    "Casilla de verificación de archivo de registro: esta casilla determina si se crea un archivo de registro que registre los detalles de las operaciones de archivos realizadas por la aplicación.", // Spanish
    "Casella di controllo del file di registro: questa casella determina se creare un file di registro che registra i dettagli delle operazioni sui file eseguite dall’applicazione.", // Italian
    "Caixa de seleção de ficheiro de registo: esta caixa determina se deve ser criado um ficheiro de registo que registe os detalhes das operações de ficheiros realizadas pela aplicação.", // Portuguese (Portugal)
    "Caixa de seleção de arquivo de log: esta caixa determina se deve ser criado um arquivo de log que registre os detalhes das operações de arquivos realizadas pelo aplicativo.", // Portuguese (Brazil)
    "Logboekselectievakje: dit selectievakje bepaalt of er een logboekbestand wordt aangemaakt dat de details van de bestandsbewerkingen die door de toepassing worden uitgevoerd, vastlegt.", // Dutch
    "Loggfilkryssruta: den här kryssrutan avgör om en loggfil ska skapas som registrerar detaljer om filåtgärder som utförs av programmet.", // Swedish
    "Loggfil-avkrysningsboks: denne boksen bestemmer om det skal opprettes en loggfil som registrerer detaljer om filoperasjonene som utføres av applikasjonen.", // Norwegian
    "Logfil-afkrydsningsfelt: dette felt bestemmer, om der skal oprettes en logfil, der registrerer detaljer om filoperationerne, som programmet udfører.", // Danish
    "Lokin valintaruutu: tämä valintaruutu määrittää, luodaanko lokitiedosto, joka tallentaa sovelluksen suorittamien tiedostotoimintojen tiedot.", // Finnish
    "Pole wyboru pliku dziennika: to pole określa, czy ma zostać utworzony plik dziennika, który zapisuje szczegóły operacji plikowych wykonywanych przez aplikację.", // Polish
    "Zaškrtávací políčko souboru protokolu: toto políčko určuje, zda se má vytvořit soubor protokolu, který zaznamenává podrobnosti o operacích se soubory prováděných aplikací.", // Czech
    "Naplófájl jelölőnégyzet: ez a jelölőnégyzet határozza meg, hogy létrejöjjön-e egy naplófájl, amely rögzíti az alkalmazás által végrehajtott fájlműveletek részleteit.", // Hungarian
    "Casetă de bifare fișier jurnal: această casetă determină dacă se creează un fișier jurnal care înregistrează detaliile operațiunilor de fișiere efectuate de aplicație." // Romanian
),

                    ["Opacity Track Bar: This track bar allows you to adjust the opacity level of the application window, making it more or less transparent."] =
(
    "Barre d’opacité : ce curseur permet d’ajuster le niveau d’opacité de la fenêtre de l’application, la rendant plus ou moins transparente.", // fr
    "Deckkraftregler: Mit diesem Schieberegler können Sie die Deckkraft des Anwendungsfensters anpassen und es mehr oder weniger transparent machen.", // de
    "Control de opacidad: esta barra permite ajustar el nivel de opacidad de la ventana de la aplicación, haciéndola más o menos transparente.", // es
    "Barra di opacità: questa barra consente di regolare il livello di opacità della finestra dell'applicazione, rendendola più o meno trasparente.", // it
    "Barra de opacidade: esta barra permite ajustar o nível de opacidade da janela da aplicação, tornando-a mais ou menos transparente.", // pt
    "Barra de opacidade: esta barra permite ajustar o nível de opacidade da janela do aplicativo, tornando-a mais ou menos transparente.", // pt-BR
    "Ondoorzichtigheidsbalk: met deze balk kunt u het doorzichtigheidsniveau van het toepassingsvenster aanpassen, zodat het meer of minder transparant wordt.", // nl
    "Opacitetsreglage: det här reglaget låter dig justera applikationsfönstrets opacitetsnivå, så att det blir mer eller mindre genomskinligt.", // sv
    "Gjennomsiktighetskontroll: denne kontrollen lar deg justere gjennomsiktighetsnivået til programvinduet, slik at det blir mer eller mindre gjennomsiktig.", // no
    "Gennemsigtighedsskyder: denne skyder gør det muligt at justere gennemsigtighedsniveauet for applikationsvinduet, så det bliver mere eller mindre gennemsigtigt.", // da
    "Läpinäkyvyyssäätö: tällä säätimellä voit muuttaa sovellusikkunan läpinäkyvyyttä, tehden siitä enemmän tai vähemmän läpinäkyvän.", // fi
    "Suwak przezroczystości: ten suwak pozwala dostosować poziom przezroczystości okna aplikacji, czyniąc je bardziej lub mniej przezroczystym.", // pl
    "Posuvník neprůhlednosti: tento posuvník umožňuje upravit úroveň neprůhlednosti okna aplikace, aby bylo více nebo méně průhledné.", // cs
    "Átlátszóság csúszka: ez a csúszka lehetővé teszi az alkalmazásablak átlátszósági szintjének beállítását, átlátszóbbá vagy kevésbé átlátszóvá téve azt.", // hu
    "Glisor de opacitate: acest glisor îți permite să ajustezi nivelul de opacitate al ferestrei aplicației, făcând-o mai mult sau mai puțin transparentă." // ro
),


                    ["Priority Track Bar: This track bar allows you to adjust the priority level of the file operations, affecting how system resources are allocated."] =
(
    "Curseur de priorité : ce curseur permet d’ajuster le niveau de priorité des opérations sur les fichiers, ce qui affecte la façon dont les ressources système sont allouées.", // fr
    "Prioritätsregler: Mit diesem Schieberegler können Sie die Priorität der Dateioperationen einstellen, was beeinflusst, wie Systemressourcen zugewiesen werden.", // de
    "Control de prioridad: esta barra permite ajustar el nivel de prioridad de las operaciones de archivos, afectando cómo se asignan los recursos del sistema.", // es
    "Barra di priorità: questa barra consente di regolare il livello di priorità delle operazioni sui file, influenzando come vengono allocate le risorse di sistema.", // it
    "Barra de prioridade: esta barra permite ajustar o nível de prioridade das operações de ficheiro, afetando a forma como os recursos do sistema são alocados.", // pt
    "Barra de prioridade: esta barra permite ajustar o nível de prioridade das operações de arquivo, afetando como os recursos do sistema são alocados.", // pt-BR
    "Prioriteitsbalk: met deze balk kunt u het prioriteitsniveau van bestandsbewerkingen aanpassen, wat invloed heeft op hoe systeembronnen worden toegewezen.", // nl
    "Prioritetsreglage: det här reglaget låter dig justera prioriteten för filoperationer, vilket påverkar hur systemresurser tilldelas.", // sv
    "Prioritetskontroll: denne kontrollen lar deg justere prioriteringsnivået for filoperasjoner, noe som påvirker hvordan systemressurser blir tildelt.", // no
    "Prioritetsskyder: denne skyder gør det muligt at justere prioriteten for filoperationer, hvilket påvirker, hvordan systemressourcer tildeles.", // da
    "Prioriteettisäädin: tällä säätimellä voit muuttaa tiedosto-operaatioiden prioriteettia, mikä vaikuttaa siihen, miten järjestelmäresursseja jaetaan.", // fi
    "Suwak priorytetu: ten suwak pozwala dostosować poziom priorytetu operacji plikowych, wpływając na sposób przydzielania zasobów systemowych.", // pl
    "Posuvník priority: tento posuvník umožňuje upravit úroveň priority operací se soubory, což ovlivňuje přidělování systémových prostředků.", // cs
    "Prioritás csúszka: ez a csúszka lehetővé teszi a fájlműveletek prioritási szintjének beállítását, ami befolyásolja a rendszererőforrások elosztását.", // hu
    "Glisor de prioritate: acest glisor îți permite să ajustezi nivelul de prioritate al operațiunilor cu fișiere, influențând modul în care sunt alocate resursele sistemului." // ro
),




                    ["Auto Check for Updates CheckBox: This checkbox determines whether the application should automatically check for updates on startup."] =
("Case à cocher Vérifier automatiquement les mises à jour : cette case détermine si l'application doit vérifier automatiquement les mises à jour au démarrage.",
 "Automatisch nach Updates suchen Kontrollkästchen: Dieses Kontrollkästchen bestimmt, ob die Anwendung beim Start automatisch nach Updates suchen soll.",
 "Casilla de verificación Buscar actualizaciones automáticamente: esta casilla determina si la aplicación debe buscar actualizaciones automáticamente al iniciar.",
 "Casella di controllo Verifica automaticamente aggiornamenti: questa casella determina se l'applicazione deve verificare automaticamente gli aggiornamenti all'avvio.",
 "Caixa de seleção Verificar atualizações automaticamente: esta caixa determina se a aplicação deve verificar atualizações automaticamente ao iniciar.",
 "Caixa de seleção Verificar atualizações automaticamente: esta caixa determina se o aplicativo deve verificar atualizações automaticamente ao iniciar.",
 "Automatisch controleren op updates selectievakje: dit selectievakje bepaalt of de applicatie automatisch moet controleren op updates bij het opstarten.",
 "Kryssruta Kontrollera automatiskt efter uppdateringar: denna kryssruta avgör om programmet ska kontrollera automatiskt efter uppdateringar vid start.",
 "Avmerkingsboks Sjekk automatisk for oppdateringer: denne avmerkingsboksen bestemmer om applikasjonen skal sjekke automatisk for oppdateringer ved oppstart.",
 "Afkrydsningsfelt Tjek automatisk for opdateringer: dette afkrydsningsfelt bestemmer om applikationen automatisk skal tjekke for opdateringer ved opstart.",
 "Tarkista päivitykset automaattisesti -valintaruutu: tämä valintaruutu määrittää, tarkistaako sovellus automaattisesti päivitykset käynnistyksen yhteydessä.",
 "Pole wyboru Automatycznie sprawdzaj aktualizacje: to pole wyboru określa, czy aplikacja powinna automatycznie sprawdzać aktualizacje przy uruchomieniu.",
 "Zaškrtávací políčko Automaticky kontrolovat aktualizace: toto zaškrtávací políčko určuje, zda by aplikace měla automaticky kontrolovat aktualizace při spuštění.",
 "Automatikus frissítéskeresés jelölőnégyzet: Ez a jelölőnégyzet határozza meg, hogy az alkalmazás automatikusan keressen-e frissítéseket indításkor.",
 "Casetă de selectare Verifică automat actualizările: această casetă determină dacă aplicația trebuie să verifice automat actualizările la pornire."),

                    ["Could not compute destination path."] =
("Impossible de calculer le chemin de destination.",
 "Zielpfad konnte nicht berechnet werden.",
 "No se pudo calcular la ruta de destino.",
 "Impossibile calcolare il percorso di destinazione.",
 "Não foi possível calcular o caminho de destino.",
 "Não foi possível calcular o caminho de destino.",
 "Kan doelpad niet berekenen.",
 "Kunde inte beräkna målsökväg.",
 "Kunne ikke beregne målbane.",
 "Kunne ikke beregne destinationsti.",
 "Kohdepolkua ei voitu laskea.",
 "Nie można obliczyć ścieżki docelowej.",
 "Nelze vypočítat cílovou cestu.",
 "Nem sikerült kiszámítani a célútvonalat.",
 "Nu s-a putut calcula calea de destinație."),


                    ["File Processed: {0} / {1}"] =
("Fichier traité : {0} / {1}",
 "Datei verarbeitet: {0} / {1}",
 "Archivo procesado: {0} / {1}",
 "File elaborato: {0} / {1}",
 "Ficheiro processado: {0} / {1}",
 "Arquivo processado: {0} / {1}",
 "Bestand verwerkt: {0} / {1}",
 "Fil bearbetad: {0} / {1}",
 "Fil behandlet: {0} / {1}",
 "Fil behandlet: {0} / {1}",
 "Tiedosto käsitelty: {0} / {1}",
 "Plik przetworzony: {0} / {1}",
 "Soubor zpracován: {0} / {1}",
 "Feldolgozott fájl: {0} / {1}",
 "Fișier procesat: {0} / {1}"),

                    ["{0}% done"] =
("{0}% terminé",
 "{0}% fertig",
 "{0}% hecho",
 "{0}% fatto",
 "{0}% concluído",
 "{0}% concluído",
 "{0}% klaar",
 "{0}% klart",
 "{0}% ferdig",
 "{0}% færdig",
 "{0}% valmis",
 "{0}% gotowe",
 "{0}% hotovo",
 "{0}% kész",
 "{0}% gata"),

                    ["Move Worker Error: {0}"] =
("Erreur du processus de déplacement : {0}",
 "Fehler beim Verschieben: {0}",
 "Error del proceso de movimiento: {0}",
 "Errore del processo di spostamento: {0}",
 "Erro do processo de movimentação: {0}",
 "Erro do processo de movimentação: {0}",
 "Fout bij verplaatsingsproces: {0}",
 "Fel i flyttningsprocess: {0}",
 "Feil i flyttingsprosess: {0}",
 "Fejl i flytteproces: {0}",
 "Siirtoprosessin virhe: {0}",
 "Błąd procesu przenoszenia: {0}",
 "Chyba procesu přesouvání: {0}",
 "Áthelyezési folyamat hibája: {0}",
 "Eroare proces mutare: {0}"),

                    ["Copy That v1.0 Pro By: Havoc || Double-Click To Open"] =
("Copy That v1.0 Pro Par : Havoc || Double-cliquez pour ouvrir",
 "Copy That v1.0 Pro Von: Havoc || Doppelklicken zum Öffnen",
 "Copy That v1.0 Pro Por: Havoc || Haga doble clic para abrir",
 "Copy That v1.0 Pro Di: Havoc || Doppio clic per aprire",
 "Copy That v1.0 Pro Por: Havoc || Clique duas vezes para abrir",
 "Copy That v1.0 Pro Por: Havoc || Clique duas vezes para abrir",
 "Copy That v1.0 Pro Door: Havoc || Dubbelklik om te openen",
 "Copy That v1.0 Pro Av: Havoc || Dubbelklicka för att öppna",
 "Copy That v1.0 Pro Av: Havoc || Dobbeltklikk for å åpne",
 "Copy That v1.0 Pro Af: Havoc || Dobbeltklik for at åbne",
 "Copy That v1.0 Pro Tekijä: Havoc || Kaksoisnapsauta avataksesi",
 "Copy That v1.0 Pro Autor: Havoc || Kliknij dwukrotnie, aby otworzyć",
 "Copy That v1.0 Pro Autor: Havoc || Dvojklikem otevřete",
 "Copy That v1.0 Pro Készítette: Havoc || Dupla kattintás a megnyitáshoz",
 "Copy That v1.0 Pro De: Havoc || Faceți dublu clic pentru a deschide"),

                    ["Secure Delete Worker Error: {0}"] =
("Erreur du processus de suppression sécurisée : {0}",
 "Fehler beim sicheren Löschen: {0}",
 "Error del proceso de eliminación segura: {0}",
 "Errore del processo di eliminazione sicura: {0}",
 "Erro do processo de eliminação segura: {0}",
 "Erro do processo de exclusão segura: {0}",
 "Fout bij veilig verwijderingsproces: {0}",
 "Fel i säker raderingsprocess: {0}",
 "Feil i sikker slettingsprosess: {0}",
 "Fejl i sikker sletningsproces: {0}",
 "Turvallisen poistoprosessin virhe: {0}",
 "Błąd procesu bezpiecznego usuwania: {0}",
 "Chyba procesu bezpečného mazání: {0}",
 "Biztonságos törlési folyamat hibája: {0}",
 "Eroare proces ștergere securizată: {0}"),



                    ["Failed to create destination directory '{0}' for file '{1}'. Reason: {2}"] =
("Échec de la création du répertoire de destination '{0}' pour le fichier '{1}'. Raison : {2}",
 "Fehler beim Erstellen des Zielverzeichnisses '{0}' für Datei '{1}'. Grund: {2}",
 "Error al crear el directorio de destino '{0}' para el archivo '{1}'. Motivo: {2}",
 "Impossibile creare la cartella di destinazione '{0}' per il file '{1}'. Motivo: {2}",
 "Falha ao criar o diretório de destino '{0}' para o ficheiro '{1}'. Motivo: {2}",
 "Falha ao criar o diretório de destino '{0}' para o arquivo '{1}'. Motivo: {2}",
 "Kan doelmap '{0}' niet maken voor bestand '{1}'. Reden: {2}",
 "Misslyckades med att skapa målkatalog '{0}' för fil '{1}'. Orsak: {2}",
 "Kunne ikke opprette målkatalog '{0}' for fil '{1}'. Årsak: {2}",
 "Kunne ikke oprette destinationsmappe '{0}' for fil '{1}'. Årsag: {2}",
 "Kohdehakemiston '{0}' luominen tiedostolle '{1}' epäonnistui. Syy: {2}",
 "Nie udało się utworzyć katalogu docelowego '{0}' dla pliku '{1}'. Powód: {2}",
 "Nepodařilo se vytvořit cílový adresář '{0}' pro soubor '{1}'. Důvod: {2}",
 "Nem sikerült létrehozni a(z) '{0}' célkönyvtárat a(z) '{1}' fájlhoz. Ok: {2}",
 "Eșec la crearea directorului destinație '{0}' pentru fișierul '{1}'. Motiv: {2}"),

                    ["Single-Threaded {0}"] =
("Monothread {0}",
 "Einfädig {0}",
 "Monohilo {0}",
 "Monothread {0}",
 "Monothread {0}",
 "Monothread {0}",
 "Enkelvoudig {0}",
 "Enkel-trådig {0}",
 "Enkelttrådet {0}",
 "Enkelt-trådet {0}",
 "Yksisäikeinen {0}",
 "Jednowątkowy {0}",
 "Jednovláknový {0}",
 "Egyszálú {0}",
 "Mono-fir {0}"),
                    ["Verification Skipped"] =
("Vérification ignorée",
 "Überprüfung übersprungen",
 "Verificación omitida",
 "Verifica saltata",
 "Verificação ignorada",
 "Verificação ignorada",
 "Verificatie overgeslagen",
 "Verifiering överhoppad",
 "Verifisering hoppet over",
 "Verificering sprunget over",
 "Tarkistus ohitettu",
 "Weryfikacja pominięta",
 "Ověření přeskočeno",
 "Ellenőrzés kihagyva",
 "Verificare omisă"),

                    ["N/A (empty target)"] =
("N/D (cible vide)",
 "N/V (leeres Ziel)",
 "N/D (destino vacío)",
 "N/D (destinazione vuota)",
 "N/D (destino vazio)",
 "N/D (destino vazio)",
 "N/B (leeg doel)",
 "Ej tillgänglig (tomt mål)",
 "Ikke tilgjengelig (tomt mål)",
 "Ikke tilgængelig (tomt mål)",
 "Ei saatavilla (tyhjä kohde)",
 "Niedostępne (pusty cel)",
 "Nedostupné (prázdný cíl)",
 "Nem elérhető (üres cél)",
 "Indisponibil (destinație goală)"),

                    ["Destination path not determined"] =
("Chemin de destination non déterminé",
 "Zielpfad nicht bestimmt",
 "Ruta de destino no determinada",
 "Percorso di destinazione non determinato",
 "Caminho de destino não determinado",
 "Caminho de destino não determinado",
 "Doelpad niet bepaald",
 "Destinationssökväg inte bestämd",
 "Destinasjonsbane ikke bestemt",
 "Destinationsti ikke bestemt",
 "Kohdepolkua ei määritetty",
 "Ścieżka docelowa nie została określona",
 "Cílová cesta nebyla určena",
 "Célútvonal nem meghatározott",
 "Calea de destinație nu a fost determinată"),

                    ["Verification Failed"] =
("Vérification échouée",
 "Überprüfung fehlgeschlagen",
 "Verificación fallida",
 "Verifica fallita",
 "Verificação falhada",
 "Verificação falhou",
 "Verificatie mislukt",
 "Verifiering misslyckades",
 "Verifisering mislyktes",
 "Verificering mislykkedes",
 "Tarkistus epäonnistui",
 "Weryfikacja nieudana",
 "Ověření selhalo",
 "Ellenőrzés sikertelen",
 "Verificare eșuată"),

                    ["Integrity check failed"] =
("La vérification d'intégrité a échoué",
 "Integritätsprüfung fehlgeschlagen",
 "Verificación de integridad fallida",
 "Controllo di integrità fallito",
 "Verificação de integridade falhada",
 "Verificação de integridade falhou",
 "Integriteitscontrole mislukt",
 "Integritetskontroll misslyckades",
 "Integritetskontroll mislyktes",
 "Integritetskontrol mislykkedes",
 "Eheyden tarkistus epäonnistui",
 "Sprawdzenie integralności nie powiodło się",
 "Kontrola integrity selhala",
 "Integritásellenőrzés sikertelen",
 "Verificarea integrității a eșuat"),

                    ["Destination file not found"] =
("Fichier de destination introuvable",
 "Zieldatei nicht gefunden",
 "Archivo de destino no encontrado",
 "File di destinazione non trovato",
 "Ficheiro de destino não encontrado",
 "Arquivo de destino não encontrado",
 "Doelbestand niet gevonden",
 "Målfil hittades inte",
 "Målfil ikke funnet",
 "Destinationsfil ikke fundet",
 "Kohdetiedostoa ei löydy",
 "Nie znaleziono pliku docelowego",
 "Cílový soubor nenalezen",
 "Célfájl nem található",
 "Fișierul destinație nu a fost găsit"),

                    ["Is a Directory"] =
("Est un répertoire",
 "Ist ein Verzeichnis",
 "Es un directorio",
 "È una cartella",
 "É um diretório",
 "É um diretório",
 "Is een map",
 "Är en katalog",
 "Er en katalog",
 "Er en mappe",
 "On hakemisto",
 "Jest katalogiem",
 "Je adresář",
 "Ez egy könyvtár",
 "Este un director"),


                    ["Select a source folder to copy/move/delete from:"] =
("Sélectionnez un dossier source pour copier/déplacer/supprimer depuis :",
 "Wählen Sie einen Quellordner zum Kopieren/Verschieben/Löschen aus:",
 "Seleccione una carpeta de origen para copiar/mover/eliminar desde:",
 "Seleziona una cartella di origine da cui copiare/spostare/eliminare:",
 "Selecione uma pasta de origem para copiar/mover/eliminar de:",
 "Selecione uma pasta de origem para copiar/mover/excluir de:",
 "Selecteer een bronmap om van te kopiëren/verplaatsen/verwijderen:",
 "Välj en källmapp att kopiera/flytta/radera från:",
 "Velg en kildemappe å kopiere/flytte/slette fra:",
 "Vælg en kildemappe at kopiere/flytte/slette fra:",
 "Valitse lähdekansio, josta kopioidaan/siirretään/poistetaan:",
 "Wybierz folder źródłowy, z którego chcesz kopiować/przenosić/usuwać:",
 "Vyberte zdrojovou složku pro kopírování/přesouvání/mazání z:",
 "Válasszon forráskönyvtárat a másoláshoz/áthelyezéshez/törléshez:",
 "Selectați un folder sursă din care să copiați/mutați/ștergeți:"),


                    ["New executable not found: {0}"] =
("Nouvel exécutable introuvable : {0}",
 "Neue ausführbare Datei nicht gefunden: {0}",
 "Nuevo ejecutable no encontrado: {0}",
 "Nuovo eseguibile non trovato: {0}",
 "Novo executável não encontrado: {0}",
 "Novo executável não encontrado: {0}",
 "Nieuw uitvoerbaar bestand niet gevonden: {0}",
 "Ny körbar fil hittades inte: {0}",
 "Ny kjørbar fil ikke funnet: {0}",
 "Ny eksekverbar fil ikke fundet: {0}",
 "Uutta suoritettavaa tiedostoa ei löydy: {0}",
 "Nowy plik wykonywalny nie został znaleziony: {0}",
 "Nový spustitelný soubor nenalezen: {0}",
 "Új végrehajtható fájl nem található: {0}",
 "Executabil nou nu a fost găsit: {0}"),


                    ["File: {0} || Processed: {1} / {2} || Speed: {3} || ETA: {4}"] =
("Fichier : {0} || Traité : {1} / {2} || Vitesse : {3} || Temps restant : {4}",
 "Datei: {0} || Verarbeitet: {1} / {2} || Geschwindigkeit: {3} || Verbleibend: {4}",
 "Archivo: {0} || Procesado: {1} / {2} || Velocidad: {3} || Tiempo estimado: {4}",
 "File: {0} || Elaborato: {1} / {2} || Velocità: {3} || Tempo stimato: {4}",
 "Ficheiro: {0} || Processado: {1} / {2} || Velocidade: {3} || Tempo estimado: {4}",
 "Arquivo: {0} || Processado: {1} / {2} || Velocidade: {3} || Tempo estimado: {4}",
 "Bestand: {0} || Verwerkt: {1} / {2} || Snelheid: {3} || Geschatte tijd: {4}",
 "Fil: {0} || Bearbetat: {1} / {2} || Hastighet: {3} || Återstående tid: {4}",
 "Fil: {0} || Behandlet: {1} / {2} || Hastighet: {3} || Gjenstående tid: {4}",
 "Fil: {0} || Behandlet: {1} / {2} || Hastighed: {3} || Resterende tid: {4}",
 "Tiedosto: {0} || Käsitelty: {1} / {2} || Nopeus: {3} || Jäljellä: {4}",
 "Plik: {0} || Przetworzono: {1} / {2} || Prędkość: {3} || Pozostały czas: {4}",
 "Soubor: {0} || Zpracováno: {1} / {2} || Rychlost: {3} || Zbývající čas: {4}",
 "Fájl: {0} || Feldolgozva: {1} / {2} || Sebesség: {3} || Hátralévő idő: {4}",
 "Fișier: {0} || Procesat: {1} / {2} || Viteză: {3} || Timp estimat: {4}"),


                    ["Failed to create directory {0}: {1}"] =
("Échec de la création du répertoire {0} : {1}",
 "Fehler beim Erstellen des Verzeichnisses {0}: {1}",
 "Error al crear el directorio {0}: {1}",
 "Impossibile creare la cartella {0}: {1}",
 "Falha ao criar o diretório {0}: {1}",
 "Falha ao criar o diretório {0}: {1}",
 "Kan map {0} niet maken: {1}",
 "Misslyckades med att skapa katalog {0}: {1}",
 "Kunne ikke opprette katalog {0}: {1}",
 "Kunne ikke oprette mappe {0}: {1}",
 "Hakemiston {0} luominen epäonnistui: {1}",
 "Nie udało się utworzyć katalogu {0}: {1}",
 "Nepodařilo se vytvořit adresář {0}: {1}",
 "Nem sikerült létrehozni a(z) {0} könyvtárat: {1}",
 "Eșec la crearea directorului {0}: {1}"),

                    ["Folder Created..."] =
("Dossier créé...",
 "Ordner erstellt...",
 "Carpeta creada...",
 "Cartella creata...",
 "Pasta criada...",
 "Pasta criada...",
 "Map aangemaakt...",
 "Mapp skapad...",
 "Mappe opprettet...",
 "Mappe oprettet...",
 "Kansio luotu...",
 "Folder utworzony...",
 "Složka vytvořena...",
 "Mappa létrehozva...",
 "Folder creat..."),

                    ["Copying – {0}"] =
("Copie – {0}",
 "Kopieren – {0}",
 "Copiando – {0}",
 "Copia – {0}",
 "A copiar – {0}",
 "Copiando – {0}",
 "Kopiëren – {0}",
 "Kopierar – {0}",
 "Kopierer – {0}",
 "Kopierer – {0}",
 "Kopioidaan – {0}",
 "Kopiowanie – {0}",
 "Kopírování – {0}",
 "Másolás – {0}",
 "Se copiază – {0}"),


                    ["Failed: Retry #{0}"] =
("Échec : Nouvelle tentative n°{0}",
 "Fehlgeschlagen: Versuch #{0}",
 "Fallido: Reintento n.º {0}",
 "Fallito: Tentativo n. {0}",
 "Falhou: Tentativa n.º {0}",
 "Falhou: Tentativa nº {0}",
 "Mislukt: Poging #{0}",
 "Misslyckades: Försök #{0}",
 "Mislyktes: Forsøk #{0}",
 "Mislykkedes: Forsøg #{0}",
 "Epäonnistui: Yritys #{0}",
 "Niepowodzenie: Próba #{0}",
 "Selhalo: Pokus č. {0}",
 "Sikertelen: Próbálkozás #{0}",
 "Eșuat: Încercare #{0}"),

                    ["Retry {0}/{1} – {2}"] =
("Nouvelle tentative {0}/{1} – {2}",
 "Versuch {0}/{1} – {2}",
 "Reintento {0}/{1} – {2}",
 "Tentativo {0}/{1} – {2}",
 "Tentativa {0}/{1} – {2}",
 "Tentativa {0}/{1} – {2}",
 "Poging {0}/{1} – {2}",
 "Försök {0}/{1} – {2}",
 "Forsøk {0}/{1} – {2}",
 "Forsøg {0}/{1} – {2}",
 "Yritys {0}/{1} – {2}",
 "Próba {0}/{1} – {2}",
 "Pokus {0}/{1} – {2}",
 "Próbálkozás {0}/{1} – {2}",
 "Încercare {0}/{1} – {2}"),


                    ["File Copied..."] =
("Fichier copié...",
 "Datei kopiert...",
 "Archivo copiado...",
 "File copiato...",
 "Ficheiro copiado...",
 "Arquivo copiado...",
 "Bestand gekopieerd...",
 "Fil kopierad...",
 "Fil kopiert...",
 "Fil kopieret...",
 "Tiedosto kopioitu...",
 "Plik skopiowany...",
 "Soubor zkopírován...",
 "Fájl másolva...",
 "Fișier copiat..."),


                    ["Moving – {0}"] =
("Déplacement – {0}",
 "Verschieben – {0}",
 "Moviendo – {0}",
 "Spostamento – {0}",
 "A mover – {0}",
 "Movendo – {0}",
 "Verplaatsen – {0}",
 "Flyttar – {0}",
 "Flytter – {0}",
 "Flytter – {0}",
 "Siirretään – {0}",
 "Przenoszenie – {0}",
 "Přesouvání – {0}",
 "Áthelyezés – {0}",
 "Se mută – {0}"),

                    ["Moved"] =
("Déplacé",
 "Verschoben",
 "Movido",
 "Spostato",
 "Movido",
 "Movido",
 "Verplaatst",
 "Flyttad",
 "Flyttet",
 "Flyttet",
 "Siirretty",
 "Przeniesiony",
 "Přesunuto",
 "Áthelyezve",
 "Mutat"),


                    ["Securely Deleted"] =
("Supprimé de manière sécurisée",
 "Sicher gelöscht",
 "Eliminado de forma segura",
 "Eliminato in modo sicuro",
 "Eliminado de forma segura",
 "Excluído de forma segura",
 "Veilig verwijderd",
 "Säkert raderad",
 "Trygt slettet",
 "Sikkert slettet",
 "Poistettu turvallisesti",
 "Bezpiecznie usunięty",
 "Bezpečně smazáno",
 "Biztonságosan törölve",
 "Șters în siguranță"),

                    ["Secure deleting – {0}"] =
("Suppression sécurisée – {0}",
 "Sicheres Löschen – {0}",
 "Eliminación segura – {0}",
 "Eliminazione sicura – {0}",
 "Eliminação segura – {0}",
 "Exclusão segura – {0}",
 "Veilig verwijderen – {0}",
 "Säker radering – {0}",
 "Trygg sletting – {0}",
 "Sikker sletning – {0}",
 "Turvallinen poisto – {0}",
 "Bezpieczne usuwanie – {0}",
 "Bezpečné mazání – {0}",
 "Biztonságos törlés – {0}",
 "Ștergere securizată – {0}"),

                    ["File exists and 'Do Not Overwrite' is selected."] =
("Le fichier existe et 'Ne pas écraser' est sélectionné.",
 "Datei existiert und 'Nicht überschreiben' ist ausgewählt.",
 "El archivo existe y 'No sobrescribir' está seleccionado.",
 "Il file esiste e 'Non sovrascrivere' è selezionato.",
 "O ficheiro existe e 'Não substituir' está selecionado.",
 "O arquivo existe e 'Não sobrescrever' está selecionado.",
 "Bestand bestaat en 'Niet overschrijven' is geselecteerd.",
 "Filen finns och 'Skriv inte över' är valt.",
 "Filen finnes og 'Ikke overskriv' er valgt.",
 "Filen findes og 'Overskriv ikke' er valgt.",
 "Tiedosto on olemassa ja 'Älä korvaa' on valittu.",
 "Plik istnieje i wybrano 'Nie nadpisuj'.",
 "Soubor existuje a je vybrána možnost 'Nepřepisovat'.",
 "A fájl létezik és a 'Ne írja felül' van kiválasztva.",
 "Fișierul există și 'Nu suprascrie' este selectat."),

                    ["Skipped (exists)"] =
("Ignoré (existe)",
 "Übersprungen (existiert)",
 "Omitido (existe)",
 "Saltato (esiste)",
 "Ignorado (existe)",
 "Ignorado (existe)",
 "Overgeslagen (bestaat)",
 "Överhoppad (finns)",
 "Hoppet over (finnes)",
 "Sprunget over (findes)",
 "Ohitettu (on olemassa)",
 "Pominięty (istnieje)",
 "Přeskočeno (existuje)",
 "Kihagyva (létezik)",
 "Omis (există)"),

                    ["Destination file is newer or the same age."] =
("Le fichier de destination est plus récent ou du même âge.",
 "Zieldatei ist neuer oder gleich alt.",
 "El archivo de destino es más reciente o de la misma fecha.",
 "Il file di destinazione è più recente o della stessa data.",
 "O ficheiro de destino é mais recente ou da mesma data.",
 "O arquivo de destino é mais recente ou da mesma data.",
 "Doelbestand is nieuwer of even oud.",
 "Målfilen är nyare eller lika gammal.",
 "Målfilen er nyere eller like gammel.",
 "Målfilen er nyere eller lige gammel.",
 "Kohdetiedosto on uudempi tai saman ikäinen.",
 "Plik docelowy jest nowszy lub tego samego wieku.",
 "Cílový soubor je novější nebo stejně starý.",
 "A célfájl újabb vagy ugyanolyan régi.",
 "Fișierul destinație este mai nou sau de aceeași dată."),

                    ["Skipped (not newer)"] =
("Ignoré (pas plus récent)",
 "Übersprungen (nicht neuer)",
 "Omitido (no más reciente)",
 "Saltato (non più recente)",
 "Ignorado (não mais recente)",
 "Ignorado (não mais recente)",
 "Overgeslagen (niet nieuwer)",
 "Överhoppad (inte nyare)",
 "Hoppet over (ikke nyere)",
 "Sprunget over (ikke nyere)",
 "Ohitettu (ei uudempi)",
 "Pominięty (nie nowszy)",
 "Přeskočeno (není novější)",
 "Kihagyva (nem újabb)",
 "Omis (nu mai nou)"),



                    ["Error reading drive '{0}': {1}"] =
("Erreur de lecture du lecteur '{0}' : {1}",
 "Fehler beim Lesen von Laufwerk '{0}': {1}",
 "Error al leer la unidad '{0}': {1}",
 "Errore nella lettura dell'unità '{0}': {1}",
 "Erro ao ler a unidade '{0}': {1}",
 "Erro ao ler a unidade '{0}': {1}",
 "Fout bij lezen van station '{0}': {1}",
 "Fel vid läsning av enhet '{0}': {1}",
 "Feil ved lesing av stasjon '{0}': {1}",
 "Fejl ved læsning af drev '{0}': {1}",
 "Virhe luettaessa asemaa '{0}': {1}",
 "Błąd odczytu dysku '{0}': {1}",
 "Chyba při čtení jednotky '{0}': {1}",
 "Hiba a(z) '{0}' meghajtó olvasásakor: {1}",
 "Eroare la citirea unității '{0}': {1}"),

                    ["Total Space ({0}): {1} / {2}"] =
("Espace total ({0}) : {1} / {2}",
 "Gesamtspeicher ({0}): {1} / {2}",
 "Espacio total ({0}): {1} / {2}",
 "Spazio totale ({0}): {1} / {2}",
 "Espaço total ({0}): {1} / {2}",
 "Espaço total ({0}): {1} / {2}",
 "Totale ruimte ({0}): {1} / {2}",
 "Totalt utrymme ({0}): {1} / {2}",
 "Total plass ({0}): {1} / {2}",
 "Samlet plads ({0}): {1} / {2}",
 "Kokonaistila ({0}): {1} / {2}",
 "Całkowite miejsce ({0}): {1} / {2}",
 "Celkové místo ({0}): {1} / {2}",
 "Teljes hely ({0}): {1} / {2}",
 "Spațiu total ({0}): {1} / {2}"),

                    ["No drives ready"] =
("Aucun lecteur prêt",
 "Keine Laufwerke bereit",
 "No hay unidades listas",
 "Nessuna unità pronta",
 "Nenhuma unidade pronta",
 "Nenhuma unidade pronta",
 "Geen stations gereed",
 "Inga enheter redo",
 "Ingen stasjoner klar",
 "Ingen drev klar",
 "Ei asemia valmiina",
 "Brak gotowych dysków",
 "Žádné jednotky připraveny",
 "Nincs kész meghajtó",
 "Nicio unitate pregătită"),

                    ["Select a Destination to see Drive Space"] =
("Sélectionnez une destination pour voir l'espace disque",
 "Wählen Sie ein Ziel aus, um den Speicherplatz anzuzeigen",
 "Seleccione un destino para ver el espacio de la unidad",
 "Seleziona una destinazione per vedere lo spazio su disco",
 "Selecione um destino para ver o espaço da unidade",
 "Selecione um destino para ver o espaço da unidade",
 "Selecteer een bestemming om schijfruimte te zien",
 "Välj en destination för att se diskutrymme",
 "Velg en destinasjon for å se diskplass",
 "Vælg en destination for at se diskplads",
 "Valitse kohde nähdäksesi levytilan",
 "Wybierz miejsce docelowe, aby zobaczyć miejsce na dysku",
 "Vyberte cíl pro zobrazení místa na disku",
 "Válasszon célt a lemezterület megtekintéséhez",
 "Selectați o destinație pentru a vedea spațiul pe disc"),

                    ["Error updating drive space information: {0}"] =
("Erreur lors de la mise à jour des informations d'espace disque : {0}",
 "Fehler beim Aktualisieren der Speicherplatzinformationen: {0}",
 "Error al actualizar la información del espacio de la unidad: {0}",
 "Errore nell'aggiornamento delle informazioni sullo spazio su disco: {0}",
 "Erro ao atualizar as informações de espaço da unidade: {0}",
 "Erro ao atualizar as informações de espaço da unidade: {0}",
 "Fout bij bijwerken van schijfruimte-informatie: {0}",
 "Fel vid uppdatering av diskutrymmesinformation: {0}",
 "Feil ved oppdatering av diskplassinformasjon: {0}",
 "Fejl ved opdatering af diskpladsinformation: {0}",
 "Virhe päivitettäessä levytilan tietoja: {0}",
 "Błąd aktualizacji informacji o miejscu na dysku: {0}",
 "Chyba při aktualizaci informací o místu na disku: {0}",
 "Hiba a lemezterület-információk frissítésekor: {0}",
 "Eroare la actualizarea informațiilor despre spațiul pe disc: {0}"),

                    ["Error Getting Drive Space"] =
("Erreur lors de l'obtention de l'espace disque",
 "Fehler beim Abrufen des Speicherplatzes",
 "Error al obtener el espacio de la unidad",
 "Errore nell'ottenere lo spazio su disco",
 "Erro ao obter o espaço da unidade",
 "Erro ao obter o espaço da unidade",
 "Fout bij ophalen van schijfruimte",
 "Fel vid hämtning av diskutrymme",
 "Feil ved henting av diskplass",
 "Fejl ved hentning af diskplads",
 "Virhe haettaessa levytilaa",
 "Błąd pobierania miejsca na dysku",
 "Chyba při získávání místa na disku",
 "Hiba a lemezterület lekérésekor",
 "Eroare la obținerea spațiului pe disc"),


                    ["Cannot create target directory structure: Source or target directories are not specified."] =
("Impossible de créer la structure de répertoire cible : les répertoires source ou cible ne sont pas spécifiés.",
 "Zielverzeichnisstruktur kann nicht erstellt werden: Quell- oder Zielverzeichnisse sind nicht angegeben.",
 "No se puede crear la estructura del directorio de destino: los directorios de origen o destino no están especificados.",
 "Impossibile creare la struttura della cartella di destinazione: le cartelle di origine o destinazione non sono specificate.",
 "Não é possível criar a estrutura do diretório de destino: os diretórios de origem ou destino não estão especificados.",
 "Não é possível criar a estrutura do diretório de destino: os diretórios de origem ou destino não estão especificados.",
 "Kan doelmapstructuur niet maken: bron- of doelmappen zijn niet opgegeven.",
 "Kan inte skapa målkatalogstruktur: käll- eller målkataloger har inte angetts.",
 "Kan ikke opprette målkatalogstruktur: kilde- eller målkataloger er ikke spesifisert.",
 "Kan ikke oprette måldirectory-struktur: kilde- eller måldirectorier er ikke angivet.",
 "Kohdehakemistorakennetta ei voi luoda: lähde- tai kohdehakemistoja ei ole määritetty.",
 "Nie można utworzyć struktury katalogu docelowego: katalogi źródłowe lub docelowe nie są określone.",
 "Nelze vytvořit strukturu cílového adresáře: zdrojové nebo cílové adresáře nejsou specifikovány.",
 "Nem hozható létre a célkönyvtár szerkezete: a forrás- vagy célkönyvtárak nincsenek megadva.",
 "Nu se poate crea structura directorului țintă: directoarele sursă sau țintă nu sunt specificate."),


                    ["Failed to create directory '{0}': {1}"] =
("Échec de la création du répertoire '{0}' : {1}",
 "Fehler beim Erstellen des Verzeichnisses '{0}': {1}",
 "Error al crear el directorio '{0}': {1}",
 "Impossibile creare la cartella '{0}': {1}",
 "Falha ao criar o diretório '{0}': {1}",
 "Falha ao criar o diretório '{0}': {1}",
 "Kan map '{0}' niet maken: {1}",
 "Misslyckades med att skapa katalog '{0}': {1}",
 "Kunne ikke opprette katalog '{0}': {1}",
 "Kunne ikke oprette mappe '{0}': {1}",
 "Hakemiston '{0}' luominen epäonnistui: {1}",
 "Nie udało się utworzyć katalogu '{0}': {1}",
 "Nepodařilo se vytvořit adresář '{0}': {1}",
 "Nem sikerült létrehozni a(z) '{0}' könyvtárat: {1}",
 "Eșec la crearea directorului '{0}': {1}"),

                    ["Access denied to directory '{0}': {1}"] =
("Accès refusé au répertoire '{0}' : {1}",
 "Zugriff auf Verzeichnis '{0}' verweigert: {1}",
 "Acceso denegado al directorio '{0}': {1}",
 "Accesso negato alla cartella '{0}': {1}",
 "Acesso negado ao diretório '{0}': {1}",
 "Acesso negado ao diretório '{0}': {1}",
 "Toegang geweigerd tot map '{0}': {1}",
 "Åtkomst nekad till katalog '{0}': {1}",
 "Tilgang nektet til katalog '{0}': {1}",
 "Adgang nægtet til mappe '{0}': {1}",
 "Pääsy hakemistoon '{0}' estetty: {1}",
 "Odmowa dostępu do katalogu '{0}': {1}",
 "Přístup k adresáři '{0}' byl odepřen: {1}",
 "Hozzáférés megtagadva a(z) '{0}' könyvtárhoz: {1}",
 "Acces refuzat la directorul '{0}': {1}"),

                    ["Error enumerating subdirectories in '{0}': {1}"] =
("Erreur lors de l'énumération des sous-répertoires dans '{0}' : {1}",
 "Fehler beim Aufzählen der Unterverzeichnisse in '{0}': {1}",
 "Error al enumerar subdirectorios en '{0}': {1}",
 "Errore nell'enumerazione delle sottocartelle in '{0}': {1}",
 "Erro ao enumerar subdiretórios em '{0}': {1}",
 "Erro ao enumerar subdiretórios em '{0}': {1}",
 "Fout bij het opsommen van submappen in '{0}': {1}",
 "Fel vid uppräkning av underkataloger i '{0}': {1}",
 "Feil ved oppregning av underkataloger i '{0}': {1}",
 "Fejl ved optælling af undermapper i '{0}': {1}",
 "Virhe lueteltaessa alihakemistoja kohteessa '{0}': {1}",
 "Błąd podczas wyliczania podkatalogów w '{0}': {1}",
 "Chyba při výčtu podadresářů v '{0}': {1}",
 "Hiba az alkönyvtárak felsorolásakor itt: '{0}': {1}",
 "Eroare la enumerarea subdirectoarelor în '{0}': {1}"),



                    ["Copy Operation Completed!\n\nFiles Copied: {0}\nFiles Skipped: {1}\nFiles Failed: {2}\nTotal Files Processed: {3} / {4}\nTotal Bytes Processed: {5} / {6}"] =
("Opération de copie terminée !\n\nFichiers copiés : {0}\nFichiers ignorés : {1}\nFichiers échoués : {2}\nTotal de fichiers traités : {3} / {4}\nTotal d'octets traités : {5} / {6}",
 "Kopiervorgang abgeschlossen!\n\nDateien kopiert: {0}\nDateien übersprungen: {1}\nDateien fehlgeschlagen: {2}\nGesamtzahl verarbeiteter Dateien: {3} / {4}\nGesamtzahl verarbeiteter Bytes: {5} / {6}",
 "¡Operación de copia completada!\n\nArchivos copiados: {0}\nArchivos omitidos: {1}\nArchivos fallidos: {2}\nTotal de archivos procesados: {3} / {4}\nTotal de bytes procesados: {5} / {6}",
 "Operazione di copia completata!\n\nFile copiati: {0}\nFile saltati: {1}\nFile falliti: {2}\nTotale file elaborati: {3} / {4}\nTotale byte elaborati: {5} / {6}",
 "Operação de cópia concluída!\n\nFicheiros copiados: {0}\nFicheiros ignorados: {1}\nFicheiros falhados: {2}\nTotal de ficheiros processados: {3} / {4}\nTotal de bytes processados: {5} / {6}",
 "Operação de cópia concluída!\n\nArquivos copiados: {0}\nArquivos ignorados: {1}\nArquivos falhados: {2}\nTotal de arquivos processados: {3} / {4}\nTotal de bytes processados: {5} / {6}",
 "Kopieerbewerking voltooid!\n\nBestanden gekopieerd: {0}\nBestanden overgeslagen: {1}\nBestanden mislukt: {2}\nTotaal verwerkte bestanden: {3} / {4}\nTotaal verwerkte bytes: {5} / {6}",
 "Kopieringsåtgärd slutförd!\n\nFiler kopierade: {0}\nFiler överhoppade: {1}\nFiler misslyckades: {2}\nTotalt antal bearbetade filer: {3} / {4}\nTotalt antal bearbetade byte: {5} / {6}",
 "Kopieringsoperasjon fullført!\n\nFiler kopiert: {0}\nFiler hoppet over: {1}\nFiler mislyktes: {2}\nTotalt antall behandlede filer: {3} / {4}\nTotalt antall behandlede byte: {5} / {6}",
 "Kopieringshandling færdig!\n\nFiler kopieret: {0}\nFiler sprunget over: {1}\nFiler mislykket: {2}\nSamlet antal behandlede filer: {3} / {4}\nSamlet antal behandlede byte: {5} / {6}",
 "Kopiointitoiminto valmis!\n\nKopioituja tiedostoja: {0}\nOhitettuja tiedostoja: {1}\nEpäonnistuneita tiedostoja: {2}\nKäsiteltyjä tiedostoja yhteensä: {3} / {4}\nKäsiteltyjä tavuja yhteensä: {5} / {6}",
 "Operacja kopiowania zakończona!\n\nPliki skopiowane: {0}\nPliki pominięte: {1}\nPliki nieudane: {2}\nŁącznie przetworzonych plików: {3} / {4}\nŁącznie przetworzonych bajtów: {5} / {6}",
 "Operace kopírování dokončena!\n\nSoubory zkopírovány: {0}\nSoubory přeskočeny: {1}\nSoubory selhaly: {2}\nCelkový počet zpracovaných souborů: {3} / {4}\nCelkový počet zpracovaných bajtů: {5} / {6}",
 "Másolási művelet befejezve!\n\nMásolt fájlok: {0}\nKihagyott fájlok: {1}\nSikertelen fájlok: {2}\nFeldolgozott fájlok összesen: {3} / {4}\nFeldolgozott bájtok összesen: {5} / {6}",
 "Operațiune de copiere finalizată!\n\nFișiere copiate: {0}\nFișiere omise: {1}\nFișiere eșuate: {2}\nTotal fișiere procesate: {3} / {4}\nTotal octeți procesați: {5} / {6}"),

                    ["Copy Operation Summary"] =
("Résumé de l'opération de copie",
 "Zusammenfassung des Kopiervorgangs",
 "Resumen de la operación de copia",
 "Riepilogo operazione di copia",
 "Resumo da operação de cópia",
 "Resumo da operação de cópia",
 "Samenvatting kopieerbewerking",
 "Sammanfattning av kopieringsåtgärd",
 "Sammendrag av kopieringsoperasjon",
 "Oversigt over kopieringshandling",
 "Kopiointitoiminnon yhteenveto",
 "Podsumowanie operacji kopiowania",
 "Souhrn operace kopírování",
 "Másolási művelet összefoglalása",
 "Rezumat operațiune de copiere"),


                    ["Access denied: {0}"] =
("Accès refusé : {0}",
 "Zugriff verweigert: {0}",
 "Acceso denegado: {0}",
 "Accesso negato: {0}",
 "Acesso negado: {0}",
 "Acesso negado: {0}",
 "Toegang geweigerd: {0}",
 "Åtkomst nekad: {0}",
 "Tilgang nektet: {0}",
 "Adgang nægtet: {0}",
 "Pääsy estetty: {0}",
 "Odmowa dostępu: {0}",
 "Přístup odepřen: {0}",
 "Hozzáférés megtagadva: {0}",
 "Acces refuzat: {0}"),


                    ["Enter custom directory name:"] =
("Entrez le nom du répertoire personnalisé :",
 "Geben Sie einen benutzerdefinierten Verzeichnisnamen ein:",
 "Ingrese el nombre del directorio personalizado:",
 "Inserisci il nome della cartella personalizzata:",
 "Introduza o nome do diretório personalizado:",
 "Insira o nome do diretório personalizado:",
 "Voer aangepaste mapnaam in:",
 "Ange anpassat katalognamn:",
 "Skriv inn egendefinert katalognavn:",
 "Indtast brugerdefineret mappenavn:",
 "Kirjoita mukautettu hakemiston nimi:",
 "Wprowadź niestandardową nazwę katalogu:",
 "Zadejte vlastní název adresáře:",
 "Adja meg az egyéni könyvtár nevét:",
 "Introduceți numele directorului personalizat:"),

                    ["Custom Directory"] =
("Répertoire personnalisé",
 "Benutzerdefiniertes Verzeichnis",
 "Directorio personalizado",
 "Cartella personalizzata",
 "Diretório personalizado",
 "Diretório personalizado",
 "Aangepaste map",
 "Anpassad katalog",
 "Egendefinert katalog",
 "Brugerdefineret mappe",
 "Mukautettu hakemisto",
 "Niestandardowy katalog",
 "Vlastní adresář",
 "Egyéni könyvtár",
 "Director personalizat"),


                    ["Error checking file timestamps for skipping: {0}"] =
("Erreur lors de la vérification des horodatages de fichier pour ignorer : {0}",
 "Fehler beim Überprüfen der Dateizeitstempel zum Überspringen: {0}",
 "Error al verificar las marcas de tiempo del archivo para omitir: {0}",
 "Errore nel controllo dei timestamp del file per saltare: {0}",
 "Erro ao verificar os carimbos de data/hora do ficheiro para ignorar: {0}",
 "Erro ao verificar os carimbos de data/hora do arquivo para ignorar: {0}",
 "Fout bij controleren van bestandstijdstempels voor overslaan: {0}",
 "Fel vid kontroll av filtidsstämplar för överhoppning: {0}",
 "Feil ved kontroll av filtidsstempler for hopping over: {0}",
 "Fejl ved kontrol af filtidsstempler for spring over: {0}",
 "Virhe tarkistettaessa tiedoston aikaleimoja ohittamista varten: {0}",
 "Błąd sprawdzania znaczników czasu pliku do pominięcia: {0}",
 "Chyba při kontrole časových razítek souboru pro přeskočení: {0}",
 "Hiba a fájl időbélyegzőinek ellenőrzésekor a kihagyáshoz: {0}",
 "Eroare la verificarea marcajelor temporale ale fișierului pentru omitere: {0}"),


                    ["Copying…"] =
("Copie en cours…",
 "Kopieren…",
 "Copiando…",
 "Copia in corso…",
 "A copiar…",
 "Copiando…",
 "Kopiëren…",
 "Kopierar…",
 "Kopierer…",
 "Kopierer…",
 "Kopioidaan…",
 "Kopiowanie…",
 "Kopírování…",
 "Másolás…",
 "Se copiază…"),

                    ["Done"] =
("Terminé",
 "Fertig",
 "Hecho",
 "Fatto",
 "Concluído",
 "Concluído",
 "Klaar",
 "Klar",
 "Ferdig",
 "Færdig",
 "Valmis",
 "Gotowe",
 "Hotovo",
 "Kész",
 "Gata"),

                    ["Canceled"] =
("Annulé",
 "Abgebrochen",
 "Cancelado",
 "Annullato",
 "Cancelado",
 "Cancelado",
 "Geannuleerd",
 "Avbruten",
 "Avbrutt",
 "Annulleret",
 "Peruutettu",
 "Anulowano",
 "Zrušeno",
 "Megszakítva",
 "Anulat"),

                    ["Failed"] =
("Échoué",
 "Fehlgeschlagen",
 "Fallido",
 "Fallito",
 "Falhado",
 "Falhou",
 "Mislukt",
 "Misslyckades",
 "Mislyktes",
 "Mislykkedes",
 "Epäonnistui",
 "Niepowodzenie",
 "Selhalo",
 "Sikertelen",
 "Eșuat"),

                    ["Files Processed: {0} Out of {1}"] =
("Fichiers traités : {0} sur {1}",
 "Dateien verarbeitet: {0} von {1}",
 "Archivos procesados: {0} de {1}",
 "File elaborati: {0} su {1}",
 "Ficheiros processados: {0} de {1}",
 "Arquivos processados: {0} de {1}",
 "Bestanden verwerkt: {0} van {1}",
 "Filer bearbetade: {0} av {1}",
 "Filer behandlet: {0} av {1}",
 "Filer behandlet: {0} ud af {1}",
 "Tiedostoja käsitelty: {0} / {1}",
 "Pliki przetworzone: {0} z {1}",
 "Soubory zpracovány: {0} z {1}",
 "Feldolgozott fájlok: {0} / {1}",
 "Fișiere procesate: {0} din {1}"),

                    ["Executable must be named CTvX.Y.exe"] =
("L’exécutable doit être nommé CTvX.Y.exe",
 "Die ausführbare Datei muss CTvX.Y.exe heißen.",
 "El ejecutable debe llamarse CTvX.Y.exe.",
 "Il file eseguibile deve essere denominato CTvX.Y.exe.",
 "O executável deve chamar-se CTvX.Y.exe.",
 "O executável deve se chamar CTvX.Y.exe.",
 "Het uitvoerbare bestand moet CTvX.Y.exe heten.",
 "Den körbara filen måste heta CTvX.Y.exe.",
 "Den kjørbare filen må hete CTvX.Y.exe.",
 "Den eksekverbare fil skal hedde CTvX.Y.exe.",
 "Suoritettavan tiedoston on oltava nimeltään CTvX.Y.exe.",
 "Plik wykonywalny musi mieć nazwę CTvX.Y.exe.",
 "Spustitelný soubor musí být pojmenován CTvX.Y.exe.",
 "A futtatható fájl neve CTvX.Y.exe kell legyen.",
 "Executabilul trebuie să fie denumit CTvX.Y.exe."),


                    ["Total Elapsed Time: {0}"] =
("Temps écoulé total : {0}",
 "Gesamte verstrichene Zeit: {0}",
 "Tiempo transcurrido total: {0}",
 "Tempo trascorso totale: {0}",
 "Tempo decorrido total: {0}",
 "Tempo decorrido total: {0}",
 "Totale verstreken tijd: {0}",
 "Total förfluten tid: {0}",
 "Total forløpt tid: {0}",
 "Total forløbet tid: {0}",
 "Kulunut aika yhteensä: {0}",
 "Całkowity czas, który upłynął: {0}",
 "Celkový uplynulý čas: {0}",
 "Eltelt idő összesen: {0}",
 "Timp total scurs: {0}"),

                    ["Total Target Time: {0}"] =
("Temps cible total : {0}",
 "Gesamte Zielzeit: {0}",
 "Tiempo objetivo total: {0}",
 "Tempo obiettivo totale: {0}",
 "Tempo alvo total: {0}",
 "Tempo alvo total: {0}",
 "Totale doeltijd: {0}",
 "Total måltid: {0}",
 "Total måltid: {0}",
 "Total måltid: {0}",
 "Kohde-aika yhteensä: {0}",
 "Całkowity czas docelowy: {0}",
 "Celkový cílový čas: {0}",
 "Cél idő összesen: {0}",
 "Timp țintă total: {0}"),

                    ["Pending"] =
("En attente",
 "Ausstehend",
 "Pendiente",
 "In attesa",
 "Pendente",
 "Pendente",
 "In behandeling",
 "Väntande",
 "Ventende",
 "Afventer",
 "Odottaa",
 "Oczekujący",
 "Čekající",
 "Függőben",
 "În așteptare"),

                    ["Scanning: {0}"] =
("Analyse : {0}",
 "Scannen: {0}",
 "Escaneando: {0}",
 "Scansione: {0}",
 "A digitalizar: {0}",
 "Digitalizando: {0}",
 "Scannen: {0}",
 "Skannar: {0}",
 "Skanner: {0}",
 "Scanner: {0}",
 "Skannataan: {0}",
 "Skanowanie: {0}",
 "Skenování: {0}",
 "Beolvasás: {0}",
 "Scanare: {0}"),

                    ["Adding: {0}"] =
("Ajout : {0}",
 "Hinzufügen: {0}",
 "Agregando: {0}",
 "Aggiunta: {0}",
 "A adicionar: {0}",
 "Adicionando: {0}",
 "Toevoegen: {0}",
 "Lägger till: {0}",
 "Legger til: {0}",
 "Tilføjer: {0}",
 "Lisätään: {0}",
 "Dodawanie: {0}",
 "Přidávání: {0}",
 "Hozzáadás: {0}",
 "Adăugare: {0}"),


                    ["Error"] =
("Erreur",
 "Fehler",
 "Error",
 "Errore",
 "Erro",
 "Erro",
 "Fout",
 "Fel",
 "Feil",
 "Fejl",
 "Virhe",
 "Błąd",
 "Chyba",
 "Hiba",
 "Eroare"),

                    ["Elapsed / Target Time: {0} / {1}"] =
("Temps écoulé / cible : {0} / {1}",
 "Verstrichene / Zielzeit: {0} / {1}",
 "Tiempo transcurrido / objetivo: {0} / {1}",
 "Tempo trascorso / obiettivo: {0} / {1}",
 "Tempo decorrido / alvo: {0} / {1}",
 "Tempo decorrido / alvo: {0} / {1}",
 "Verstreken / doeltijd: {0} / {1}",
 "Förfluten / måltid: {0} / {1}",
 "Forløpt / måltid: {0} / {1}",
 "Forløbet / måltid: {0} / {1}",
 "Kulunut / kohde-aika: {0} / {1}",
 "Czas, który upłynął / docelowy: {0} / {1}",
 "Uplynulý / cílový čas: {0} / {1}",
 "Eltelt / cél idő: {0} / {1}",
 "Timp scurs / țintă: {0} / {1}"),


                    ["When creating a custom directory or keeping only empty folders, you may select up to 3 behavior options."] =
("Lors de la création d’un répertoire personnalisé ou du maintien uniquement des dossiers vides, vous pouvez sélectionner jusqu’à 3 options de comportement.",
 "Beim Erstellen eines benutzerdefinierten Verzeichnisses oder beim Belassen nur leerer Ordner können Sie bis zu 3 Verhaltensoptionen auswählen.",
 "Al crear un directorio personalizado o mantener solo carpetas vacías, puede seleccionar hasta 3 opciones de comportamiento.",
 "Quando si crea una directory personalizzata o si mantengono solo cartelle vuote, è possibile selezionare fino a 3 opzioni di comportamento.",
 "Ao criar um diretório personalizado ou manter apenas pastas vazias, pode selecionar até 3 opções de comportamento.",
 "Ao criar um diretório personalizado ou manter apenas pastas vazias, você pode selecionar até 3 opções de comportamento.",
 "Bij het maken van een aangepaste map of het behouden van alleen lege mappen kunt u maximaal 3 gedragsopties selecteren.",
 "När du skapar en anpassad katalog eller behåller endast tomma mappar kan du välja upp till 3 beteendealternativ.",
 "Når du oppretter en egendefinert mappe eller beholder bare tomme mapper, kan du velge opptil 3 atferdsalternativer.",
 "Når du opretter en brugerdefineret mappe eller kun beholder tomme mapper, kan du vælge op til 3 adfærdsindstillinger.",
 "Mukautetun kansion luomisen tai vain tyhjien kansioiden säilyttämisen yhteydessä voit valita enintään 3 käyttäytymisvaihtoehtoa.",
 "Podczas tworzenia niestandardowego katalogu lub zachowywania tylko pustych folderów możesz wybrać maksymalnie 3 opcje zachowania.",
 "Při vytváření vlastního adresáře nebo ponechání pouze prázdných složek můžete vybrat až 3 možnosti chování.",
 "Egyéni könyvtár létrehozásakor vagy csak az üres mappák megtartásakor legfeljebb 3 viselkedési beállítást választhat.",
 "La crearea unui director personalizat sau păstrarea doar a folderelor goale, puteți selecta până la 3 opțiuni de comportament."),

                    ["Only one behaviour option may be selected at a time."] =
("Une seule option de comportement peut être sélectionnée à la fois.",
 "Es kann nur ein Verhaltensoption gleichzeitig ausgewählt werden.",
 "Solo se puede seleccionar una opción de comportamiento a la vez.",
 "È possibile selezionare solo un’opzione di comportamento alla volta.",
 "Só pode ser selecionada uma opção de comportamento de cada vez.",
 "Apenas uma opção de comportamento pode ser selecionada por vez.",
 "Er kan slechts één gedragsoptie tegelijk worden geselecteerd.",
 "Endast ett beteendealternativ kan väljas åt gången.",
 "Kun ett atferdsalternativ kan velges om gangen.",
 "Kun én adfærdsindstilling kan vælges ad gangen.",
 "Vain yksi käyttäytymisvaihtoehto voidaan valita kerrallaan.",
 "Tylko jedna opcja zachowania może być wybrana jednocześnie.",
 "Současně lze vybrat pouze jednu možnost chování.",
 "Egyszerre csak egy viselkedési beállítás választható ki.",
 "Poate fi selectată doar o singură opțiune de comportament la un moment dat."),


                    ["Select File(s) to Add"] =
("Sélectionner le(s) fichier(s) à ajouter",
 "Datei(en) zum Hinzufügen auswählen",
 "Seleccionar archivo(s) para añadir",
 "Seleziona file da aggiungere",
 "Selecionar ficheiro(s) a adicionar",
 "Selecionar arquivo(s) para adicionar",
 "Selecteer bestand(en) om toe te voegen",
 "Välj fil(er) som ska läggas till",
 "Velg fil(er) som skal legges til",
 "Vælg fil(er) der skal føjes til",
 "Valitse lisättävät tiedostot",
 "Wybierz plik(i) do dodania",
 "Vybrat soubor(y) k přidání",
 "Válassz hozzáadandó fájl(ok)at",
 "Selectați fișier(ele) de adăugat"),


                    ["Select a source folder to copy/move/delete from:"] =
("Sélectionnez un dossier source à copier/déplacer/supprimer :",
 "Wählen Sie einen Quellordner zum Kopieren/Verschieben/Löschen:",
 "Seleccione una carpeta de origen para copiar/mover/eliminar:",
 "Seleziona una cartella di origine da cui copiare/spostare/eliminare:",
 "Selecione uma pasta de origem para copiar/mover/apagar:",
 "Selecione uma pasta de origem para copiar/mover/excluir:",
 "Selecteer een bronmap om uit te kopiëren/verplaatsen/verwijderen:",
 "Välj en källmapp att kopiera/flytta/ta bort från:",
 "Velg en kilde-mappe å kopiere/flytte/slette fra:",
 "Vælg en kilde-mappe at kopiere/flytte/slette fra:",
 "Valitse lähdekansio kopiointia/siirtoa/poistoa varten:",
 "Wybierz folder źródłowy do kopiowania/przenoszenia/usuwania:",
 "Vyberte zdrojovou složku ke kopírování/přesunutí/smazání:",
 "Válasszon forrásmappát másoláshoz/áthelyezéshez/törléshez:",
 "Selectați un folder sursă pentru a copia/muta/șterge de la:"),


                    ["Program Priority:\nBelow Normal"] =
("Priorité du programme :\nInférieure à la normale",
 "Programmpriorität:\nUnter normal",
 "Prioridad del programa:\nPor debajo de lo normal",
 "Priorità del programma:\nSotto il normale",
 "Prioridade do programa:\nAbaixo do normal",
 "Prioridade do programa:\nAbaixo do normal",
 "Prioriteit van programma:\nOnder normaal",
 "Programprioritet:\nUnder normal",
 "Programprioritet:\nUnder normal",
 "Programprioritet:\nUnder normal",
 "Ohjelman prioriteetti:\nNormaalin alapuolella",
 "Priorytet programu:\nPoniżej normalnego",
 "Priorita programu:\nPod normální",
 "Program prioritás:\nNormál alatti",
 "Prioritate program:\nSub normală"),

                    ["Program Priority:\nNormal"] =
("Priorité du programme :\nNormale",
 "Programmpriorität:\nNormal",
 "Prioridad del programa:\nNormal",
 "Priorità del programma:\nNormale",
 "Prioridade do programa:\nNormal",
 "Prioridade do programa:\nNormal",
 "Prioriteit van programma:\nNormaal",
 "Programprioritet:\nNormal",
 "Programprioritet:\nNormal",
 "Programprioritet:\nNormal",
 "Ohjelman prioriteetti:\nNormaali",
 "Priorytet programu:\nNormalny",
 "Priorita programu:\nNormální",
 "Program prioritás:\nNormál",
 "Prioritate program:\nNormală"),

                    ["Program Priority:\nAbove Normal"] =
("Priorité du programme :\nSupérieure à la normale",
 "Programmpriorität:\nÜber normal",
 "Prioridad del programa:\nPor encima de lo normal",
 "Priorità del programma:\nSopra il normale",
 "Prioridade do programa:\nAcima do normal",
 "Prioridade do programa:\nAcima do normal",
 "Prioriteit van programma:\nBoven normaal",
 "Programprioritet:\nÖver normal",
 "Programprioritet:\nOver normal",
 "Programprioritet:\nOver normal",
 "Ohjelman prioriteetti:\nNormaalin yläpuolella",
 "Priorytet programu:\nPowyżej normalnego",
 "Priorita programu:\nNad normální",
 "Program prioritás:\nNormál felett",
 "Prioritate program:\nPeste normală"),

                    ["Program Priority:\nHigh"] =
("Priorité du programme :\nÉlevée",
 "Programmpriorität:\nHoch",
 "Prioridad del programa:\nAlta",
 "Priorità del programma:\nAlta",
 "Prioridade do programa:\nAlta",
 "Prioridade do programa:\nAlta",
 "Prioriteit van programma:\nHoog",
 "Programprioritet:\nHög",
 "Programprioritet:\nHøy",
 "Programprioritet:\nHøj",
 "Ohjelman prioriteetti:\nKorkea",
 "Priorytet programu:\nWysoki",
 "Priorita programu:\nVysoká",
 "Program prioritás:\nMagas",
 "Prioritate program:\nRidicată"),

                    ["Program Priority:\nReal Time"] =
("Priorité du programme :\nTemps réel",
 "Programmpriorität:\nEchtzeit",
 "Prioridad del programa:\nTiempo real",
 "Priorità del programma:\nTempo reale",
 "Prioridade do programa:\nTempo real",
 "Prioridade do programa:\nTempo real",
 "Prioriteit van programma:\nReal-time",
 "Programprioritet:\nRealtid",
 "Programprioritet:\nReell tid",
 "Programprioritet:\nRealtid",
 "Ohjelman prioriteetti:\nReaaliaikainen",
 "Priorytet programu:\nCzas rzeczywisty",
 "Priorita programu:\nReálný čas",
 "Program prioritás:\nValós idejű",
 "Prioritate program:\nTimp real"),


                    ["Opacity:\n{0}%"] =
("Opacité :\n{0}%",
 "Deckkraft:\n{0}%",
 "Opacidad:\n{0}%",
 "Opacità:\n{0}%",
 "Opacidade:\n{0}%",
 "Opacidade:\n{0}%",
 "Ondoorzichtigheid:\n{0}%",
 "Opacitet:\n{0}%",
 "Opasitet:\n{0}%",
 "Opacitet:\n{0}%",
 "Läpinäkyvyys:\n{0}%",
 "Nieprzezroczystość:\n{0}%",
 "Neprůhlednost:\n{0}%",
 "Átlátszatlanság:\n{0}%",
 "Opacitate:\n{0}%"),

                    ["Total Skipped Files: {0}"] =
("Total des fichiers ignorés : {0}",
 "Gesamt übersprungene Dateien: {0}",
 "Total de archivos omitidos: {0}",
 "Totale file saltati: {0}",
 "Total de ficheiros ignorados: {0}",
 "Total de arquivos ignorados: {0}",
 "Totaal overgeslagen bestanden: {0}",
 "Totalt antal överhoppade filer: {0}",
 "Totalt antall hoppet over filer: {0}",
 "Total antal ignorerede filer: {0}",
 "Ohitettuja tiedostoja yhteensä: {0}",
 "Całkowita liczba pominiętych plików: {0}",
 "Celkový počet přeskočených souborů: {0}",
 "Összes kihagyott fájl: {0}",
 "Total fișiere ignorate: {0}"),

                    ["Total History Items: {0}"] =
("Total des éléments d’historique : {0}",
 "Gesamte Verlaufselemente: {0}",
 "Total de elementos del historial: {0}",
 "Totale elementi cronologia: {0}",
 "Total de itens do histórico: {0}",
 "Total de itens do histórico: {0}",
 "Totaal historische items: {0}",
 "Totalt antal historikobjekt: {0}",
 "Totalt antall historikkelementer: {0}",
 "Total antal historikelementer: {0}",
 "Historiakohdetta yhteensä: {0}",
 "Całkowita liczba elementów historii: {0}",
 "Celkový počet položek historie: {0}",
 "Összes előzményelem: {0}",
 "Total elemente istoric: {0}"),

                    ["File Paste Monitor"] =
("Moniteur de collage de fichiers",
 "Datei-Einfügen-Monitor",
 "Monitor de pegado de archivos",
 "Monitor di incolla file",
 "Monitor de colagem de ficheiros",
 "Monitor de colagem de arquivos",
 "Bestand-plakmonitor",
 "Fil-klistermonitor",
 "Fil-lim inn monitor",
 "Fil-indsætningsmonitor",
 "Tiedostoliittämisen valvoja",
 "Monitor wklejania plików",
 "Sledování vkládání souborů",
 "Fájl-beillesztés figyelő",
 "Monitor lipire fișiere"),

                    ["Exit"] =
("Quitter",
 "Beenden",
 "Salir",
 "Esci",
 "Sair",
 "Sair",
 "Afsluiten",
 "Avsluta",
 "Avslutt",
 "Afslut",
 "Lopeta",
 "Zakończ",
 "Ukončit",
 "Kilépés",
 "Ieșire"),

                    ["Skipped (No Target)"] =
("Ignoré (aucune cible)",
 "Übersprungen (kein Ziel)",
 "Omitido (sin destino)",
 "Saltato (nessuna destinazione)",
 "Ignorado (sem destino)",
 "Ignorado (sem destino)",
 "Overgeslagen (geen doel)",
 "Överhoppad (inget mål)",
 "Hoppet over (intet mål)",
 "Sprunget over (intet mål)",
 "Ohitettu (ei kohdetta)",
 "Pominięto (brak celu)",
 "Přeskočeno (žádný cíl)",
 "Kihagyva (nincs cél)",
 "Omis (fără țintă)"),

                    ["Skipped: No Destination"] =
("Ignoré : aucune destination",
 "Übersprungen: Kein Ziel",
 "Omitido: sin destino",
 "Saltato: nessuna destinazione",
 "Ignorado: sem destino",
 "Ignorado: sem destino",
 "Overgeslagen: geen bestemming",
 "Överhoppad: ingen destination",
 "Hoppet over: ingen destinasjon",
 "Sprunget over: ingen destination",
 "Ohitettu: ei kohdetta",
 "Pominięto: brak celu",
 "Přeskočeno: žádný cíl",
 "Kihagyva: nincs úticél",
 "Omis: fără destinație"),

                    ["N/A (empty target)"] =
("N/A (cible vide)",
 "N/A (leeres Ziel)",
 "N/D (destino vacío)",
 "N/D (destinazione vuota)",
 "N/D (destino vazio)",
 "N/D (destino vazio)",
 "N.v.t. (leeg doel)",
 "N/A (tomt mål)",
 "N/A (tomt mål)",
 "N/A (tomt mål)",
 "Ei saatavilla (tyhjä kohde)",
 "N/D (pusty cel)",
 "N/A (prázdný cíl)",
 "N/A (üres cél)",
 "N/A (țintă goală)"),

                    ["Destination path not determined"] =
("Chemin de destination non déterminé",
 "Zielpfad nicht bestimmt",
 "Ruta de destino no determinada",
 "Percorso di destinazione non determinato",
 "Caminho de destino não determinado",
 "Caminho de destino não determinado",
 "Doelpad niet bepaald",
 "Destinationsväg inte bestämd",
 "Destinasjonsbane ikke bestemt",
 "Destinationssti ikke bestemt",
 "Kohdepolkua ei määritetty",
 "Ścieżka docelowa nie została określona",
 "Cílová cesta nebyla stanovena",
 "Cél útvonal nincs meghatározva",
 "Calea de destinație nu a fost determinată"),

                    ["Skipped By User"] =
("Ignoré par l’utilisateur",
 "Vom Benutzer übersprungen",
 "Omitido por el usuario",
 "Saltato dall’utente",
 "Ignorado pelo utilizador",
 "Ignorado pelo usuário",
 "Door gebruiker overgeslagen",
 "Överhoppad av användare",
 "Hoppet over av bruker",
 "Sprunget over af bruger",
 "Käyttäjän ohittama",
 "Pominięte przez użytkownika",
 "Přeskočeno uživatelem",
 "Felhasználó által kihagyva",
 "Omis de utilizator"),



                    ["Could not securely delete partial file {0}: {1}"] =
("Impossible de supprimer en toute sécurité le fichier partiel {0} : {1}",
 "Konnte die partielle Datei {0} nicht sicher löschen: {1}",
 "No se pudo eliminar de forma segura el archivo parcial {0}: {1}",
 "Impossibile eliminare in modo sicuro il file parziale {0}: {1}",
 "Não foi possível apagar com segurança o ficheiro parcial {0}: {1}",
 "Não foi possível excluir com segurança o arquivo parcial {0}: {1}",
 "Kon het gedeeltelijke bestand {0} niet veilig verwijderen: {1}",
 "Kunde inte ta bort den partiella filen {0} säkert: {1}",
 "Kunne ikke slette den delvise filen {0} sikkert: {1}",
 "Kunne ikke slette den delvise fil {0} sikkert: {1}",
 "Osittaisen tiedoston {0} turvallinen poistaminen epäonnistui: {1}",
 "Nie można bezpiecznie usunąć częściowego pliku {0}: {1}",
 "Nelze bezpečně smazat částečný soubor {0}: {1}",
 "Nem sikerült biztonságosan törölni a részleges fájlt {0}: {1}",
 "Nu s-a putut șterge în siguranță fișierul parțial {0}: {1}"),

                    ["Skipped"] =
("Ignoré",
 "Übersprungen",
 "Omitido",
 "Saltato",
 "Ignorado",
 "Ignorado",
 "Overgeslagen",
 "Överhoppad",
 "Hoppet over",
 "Sprunget over",
 "Ohitettu",
 "Pominięto",
 "Přeskočeno",
 "Kihagyva",
 "Omis"),


                    ["Total Skipped Files: {0}"] =
("Total des fichiers ignorés : {0}",
 "Gesamt übersprungene Dateien: {0}",
 "Total de archivos omitidos: {0}",
 "Totale file saltati: {0}",
 "Total de ficheiros ignorados: {0}",
 "Total de arquivos ignorados: {0}",
 "Totaal overgeslagen bestanden: {0}",
 "Totalt antal överhoppade filer: {0}",
 "Totalt antall hoppet over filer: {0}",
 "Total antal ignorerede filer: {0}",
 "Ohitettuja tiedostoja yhteensä: {0}",
 "Całkowita liczba pominiętych plików: {0}",
 "Celkový počet přeskočených souborů: {0}",
 "Összes kihagyott fájl: {0}",
 "Total fișiere ignorate: {0}"),

                    ["Failed"] =
("Échec",
 "Fehlgeschlagen",
 "Fallido",
 "Fallito",
 "Falhado",
 "Falhou",
 "Mislukt",
 "Misslyckades",
 "Mislyktes",
 "Mislykkedes",
 "Epäonnistui",
 "Niepowodzenie",
 "Selhalo",
 "Sikertelen",
 "Eșuat"),

                    ["[{0}] ERROR: {1}"] =
("[{0}] ERREUR : {1}",
 "[{0}] FEHLER: {1}",
 "[{0}] ERROR: {1}",
 "[{0}] ERRORE: {1}",
 "[{0}] ERRO: {1}",
 "[{0}] ERRO: {1}",
 "[{0}] FOUT: {1}",
 "[{0}] FEL: {1}",
 "[{0}] FEIL: {1}",
 "[{0}] FEJL: {1}",
 "[{0}] VIRHE: {1}",
 "[{0}] BŁĄD: {1}",
 "[{0}] CHYBA: {1}",
 "[{0}] HIBA: {1}",
 "[{0}] EROARE: {1}"),

                    ["  Source: {0}"] =
("  Source : {0}",
 "  Quelle: {0}",
 "  Origen: {0}",
 "  Origine: {0}",
 "  Origem: {0}",
 "  Origem: {0}",
 "  Bron: {0}",
 "  Källa: {0}",
 "  Kilde: {0}",
 "  Kilde: {0}",
 "  Lähde: {0}",
 "  Źródło: {0}",
 "  Zdroj: {0}",
 "  Forrás: {0}",
 "  Sursă: {0}"),

                    ["  Target: {0}"] =
("  Cible : {0}",
 "  Ziel: {0}",
 "  Destino: {0}",
 "  Destinazione: {0}",
 "  Destino: {0}",
 "  Destino: {0}",
 "  Doel: {0}",
 "  Mål: {0}",
 "  Mål: {0}",
 "  Mål: {0}",
 "  Kohde: {0}",
 "  Cel: {0}",
 "  Cíl: {0}",
 "  Cél: {0}",
 "  Țintă: {0}"),

                    ["  Details: {0}"] =
("  Détails : {0}",
 "  Details: {0}",
 "  Detalles: {0}",
 "  Dettagli: {0}",
 "  Detalhes: {0}",
 "  Detalhes: {0}",
 "  Details: {0}",
 "  Detaljer: {0}",
 "  Detaljer: {0}",
 "  Detaljer: {0}",
 "  Tiedot: {0}",
 "  Szczegóły: {0}",
 "  Podrobnosti: {0}",
 "  Részletek: {0}",
 "  Detalii: {0}"),



                    ["Pending..."] =
("En attente...",
 "Ausstehend...",
 "Pendiente...",
 "In attesa...",
 "Pendente...",
 "Pendente...",
 "In behandeling...",
 "Väntar...",
 "Venter...",
 "Afventer...",
 "Odottaa...",
 "Oczekuje...",
 "Čeká...",
 "Függőben...",
 "În așteptare..."),


                    ["Total Space Used: 0 Bytes / 0 Bytes"] =
("Espace total utilisé : 0 octets / 0 octets",
 "Gesamter belegter Speicher: 0 Bytes / 0 Bytes",
 "Espacio total usado: 0 Bytes / 0 Bytes",
 "Spazio totale utilizzato: 0 Byte / 0 Byte",
 "Espaço total usado: 0 Bytes / 0 Bytes",
 "Espaço total usado: 0 Bytes / 0 Bytes",
 "Totale gebruikte ruimte: 0 Bytes / 0 Bytes",
 "Totalt använt utrymme: 0 Byte / 0 Byte",
 "Totalt brukt plass: 0 Byte / 0 Byte",
 "Samlet brugt plads: 0 Byte / 0 Byte",
 "Käytetty tila yhteensä: 0 tavua / 0 tavua",
 "Całkowite użyte miejsce: 0 Bajtów / 0 Bajtów",
 "Celkové využité místo: 0 Bajtů / 0 Bajtů",
 "Teljes felhasznált hely: 0 Bájt / 0 Bájt",
 "Spațiu total utilizat: 0 Octeți / 0 Octeți"),

                    ["Elapsed / Target Time: {0} / {1}"] =
("Temps écoulé / temps cible : {0} / {1}",
 "Verstrichene / Zielzeit: {0} / {1}",
 "Tiempo transcurrido / tiempo objetivo: {0} / {1}",
 "Tempo trascorso / tempo previsto: {0} / {1}",
 "Tempo decorrido / tempo previsto: {0} / {1}",
 "Tempo decorrido / tempo previsto: {0} / {1}",
 "Verstreken / doeltijd: {0} / {1}",
 "Förfluten / måltid: {0} / {1}",
 "Forløpt / måltid: {0} / {1}",
 "Forløbet / måltid: {0} / {1}",
 "Kulunut / tavoiteaika: {0} / {1}",
 "Upłynęło / czas docelowy: {0} / {1}",
 "Uplynulo / cílový čas: {0} / {1}",
 "Eltelt / célidő: {0} / {1}",
 "Timp scurs / timp țintă: {0} / {1}"),

                    ["File exists and 'Do Not Overwrite' is selected."] =
("Le fichier existe et 'Ne pas écraser' est sélectionné.",
 "Datei existiert und 'Nicht überschreiben' ist ausgewählt.",
 "El archivo existe y 'No sobrescribir' está seleccionado.",
 "Il file esiste e 'Non sovrascrivere' è selezionato.",
 "O ficheiro existe e 'Não substituir' está selecionado.",
 "O arquivo existe e 'Não sobrescrever' está selecionado.",
 "Bestand bestaat en 'Niet overschrijven' is geselecteerd.",
 "Filen finns och 'Skriv inte över' är valt.",
 "Filen finnes og 'Ikke overskriv' er valgt.",
 "Filen findes og 'Overskriv ikke' er valgt.",
 "Tiedosto on olemassa ja 'Älä korvaa' on valittu.",
 "Plik istnieje i wybrano 'Nie nadpisuj'.",
 "Soubor existuje a je vybrána možnost 'Nepřepisovat'.",
 "A fájl létezik és a 'Ne írja felül' van kiválasztva.",
 "Fișierul există și 'Nu suprascrie' este selectat."),

                    ["Skipped (exists)"] =
("Ignoré (existe)",
 "Übersprungen (existiert)",
 "Omitido (existe)",
 "Saltato (esiste)",
 "Ignorado (existe)",
 "Ignorado (existe)",
 "Overgeslagen (bestaat)",
 "Överhoppad (finns)",
 "Hoppet over (finnes)",
 "Sprunget over (findes)",
 "Ohitettu (on olemassa)",
 "Pominięty (istnieje)",
 "Přeskočeno (existuje)",
 "Kihagyva (létezik)",
 "Omis (există)"),

                    ["Destination file is newer or the same age."] =
("Le fichier de destination est plus récent ou du même âge.",
 "Zieldatei ist neuer oder gleich alt.",
 "El archivo de destino es más reciente o de la misma fecha.",
 "Il file di destinazione è più recente o della stessa data.",
 "O ficheiro de destino é mais recente ou da mesma data.",
 "O arquivo de destino é mais recente ou da mesma data.",
 "Doelbestand is nieuwer of even oud.",
 "Målfilen är nyare eller lika gammal.",
 "Målfilen er nyere eller like gammel.",
 "Målfilen er nyere eller lige gammel.",
 "Kohdetiedosto on uudempi tai saman ikäinen.",
 "Plik docelowy jest nowszy lub tego samego wieku.",
 "Cílový soubor je novější nebo stejně starý.",
 "A célfájl újabb vagy ugyanolyan régi.",
 "Fișierul destinație este mai nou sau de aceeași dată."),

                    ["Skipped (not newer)"] =
("Ignoré (pas plus récent)",
 "Übersprungen (nicht neuer)",
 "Omitido (no más reciente)",
 "Saltato (non più recente)",
 "Ignorado (não mais recente)",
 "Ignorado (não mais recente)",
 "Overgeslagen (niet nieuwer)",
 "Överhoppad (inte nyare)",
 "Hoppet over (ikke nyere)",
 "Sprunget over (ikke nyere)",
 "Ohitettu (ei uudempi)",
 "Pominięty (nie nowszy)",
 "Přeskočeno (není novější)",
 "Kihagyva (nem újabb)",
 "Omis (nu mai nou)"),




                    ["Securely Deleted"] =
("Supprimé de manière sécurisée",
 "Sicher gelöscht",
 "Eliminado de forma segura",
 "Eliminato in modo sicuro",
 "Eliminado de forma segura",
 "Excluído de forma segura",
 "Veilig verwijderd",
 "Säkert raderad",
 "Trygt slettet",
 "Sikkert slettet",
 "Poistettu turvallisesti",
 "Bezpiecznie usunięty",
 "Bezpečně smazáno",
 "Biztonságosan törölve",
 "Șters în siguranță"),

                    ["Secure deleting – {0}"] =
("Suppression sécurisée – {0}",
 "Sicheres Löschen – {0}",
 "Eliminación segura – {0}",
 "Eliminazione sicura – {0}",
 "Eliminação segura – {0}",
 "Exclusão segura – {0}",
 "Veilig verwijderen – {0}",
 "Säker radering – {0}",
 "Trygg sletting – {0}",
 "Sikker sletning – {0}",
 "Turvallinen poisto – {0}",
 "Bezpieczne usuwanie – {0}",
 "Bezpečné mazání – {0}",
 "Biztonságos törlés – {0}",
 "Ștergere securizată – {0}"),



                    ["Moved"] =
("Déplacé",
 "Verschoben",
 "Movido",
 "Spostato",
 "Movido",
 "Movido",
 "Verplaatst",
 "Flyttad",
 "Flyttet",
 "Flyttet",
 "Siirretty",
 "Przeniesiony",
 "Přesunuto",
 "Áthelyezve",
 "Mutat"),



                    ["Moving – {0}"] =
("Déplacement – {0}",
 "Verschieben – {0}",
 "Moviendo – {0}",
 "Spostamento – {0}",
 "A mover – {0}",
 "Movendo – {0}",
 "Verplaatsen – {0}",
 "Flyttar – {0}",
 "Flytter – {0}",
 "Flytter – {0}",
 "Siirretään – {0}",
 "Przenoszenie – {0}",
 "Přesouvání – {0}",
 "Áthelyezés – {0}",
 "Se mută – {0}"),



                    ["File Copied..."] =
("Fichier copié...",
 "Datei kopiert...",
 "Archivo copiado...",
 "File copiato...",
 "Ficheiro copiado...",
 "Arquivo copiado...",
 "Bestand gekopieerd...",
 "Fil kopierad...",
 "Fil kopiert...",
 "Fil kopieret...",
 "Tiedosto kopioitu...",
 "Plik skopiowany...",
 "Soubor zkopírován...",
 "Fájl másolva...",
 "Fișier copiat..."),



                    ["Failed: Retry #{0}"] =
("Échec : Nouvelle tentative n°{0}",
 "Fehlgeschlagen: Versuch #{0}",
 "Fallido: Reintento n.º {0}",
 "Fallito: Tentativo n. {0}",
 "Falhou: Tentativa n.º {0}",
 "Falhou: Tentativa nº {0}",
 "Mislukt: Poging #{0}",
 "Misslyckades: Försök #{0}",
 "Mislyktes: Forsøk #{0}",
 "Mislykkedes: Forsøg #{0}",
 "Epäonnistui: Yritys #{0}",
 "Niepowodzenie: Próba #{0}",
 "Selhalo: Pokus č. {0}",
 "Sikertelen: Próbálkozás #{0}",
 "Eșuat: Încercare #{0}"),

                    ["Retry {0}/{1} – {2}"] =
("Nouvelle tentative {0}/{1} – {2}",
 "Versuch {0}/{1} – {2}",
 "Reintento {0}/{1} – {2}",
 "Tentativo {0}/{1} – {2}",
 "Tentativa {0}/{1} – {2}",
 "Tentativa {0}/{1} – {2}",
 "Poging {0}/{1} – {2}",
 "Försök {0}/{1} – {2}",
 "Forsøk {0}/{1} – {2}",
 "Forsøg {0}/{1} – {2}",
 "Yritys {0}/{1} – {2}",
 "Próba {0}/{1} – {2}",
 "Pokus {0}/{1} – {2}",
 "Próbálkozás {0}/{1} – {2}",
 "Încercare {0}/{1} – {2}"),



                    ["Copying – {0}"] =
("Copie – {0}",
 "Kopieren – {0}",
 "Copiando – {0}",
 "Copia – {0}",
 "A copiar – {0}",
 "Copiando – {0}",
 "Kopiëren – {0}",
 "Kopierar – {0}",
 "Kopierer – {0}",
 "Kopierer – {0}",
 "Kopioidaan – {0}",
 "Kopiowanie – {0}",
 "Kopírování – {0}",
 "Másolás – {0}",
 "Se copiază – {0}"),




                    ["Creating folder – {0}"] =
("Création du dossier – {0}",
 "Ordner wird erstellt – {0}",
 "Creando carpeta – {0}",
 "Creazione cartella – {0}",
 "A criar pasta – {0}",
 "Criando pasta – {0}",
 "Map aanmaken – {0}",
 "Skapar mapp – {0}",
 "Oppretter mappe – {0}",
 "Opretter mappe – {0}",
 "Luodaan kansiota – {0}",
 "Tworzenie folderu – {0}",
 "Vytváření složky – {0}",
 "Mappa létrehozása – {0}",
 "Se creează folder – {0}"),



                    ["Current Selection: {0}"] =
("Sélection actuelle : {0}",
 "Aktuelle Auswahl: {0}",
 "Selección actual: {0}",
 "Selezione attuale: {0}",
 "Seleção atual: {0}",
 "Seleção atual: {0}",
 "Huidige selectie: {0}",
 "Aktuellt val: {0}",
 "Nåværende valg: {0}",
 "Aktuel valg: {0}",
 "Nykyinen valinta: {0}",
 "Bieżący wybór: {0}",
 "Aktuální výběr: {0}",
 "Jelenlegi kiválasztás: {0}",
 "Selecția curentă: {0}"),

                    ["No File Selected"] =
("Aucun fichier sélectionné",
 "Keine Datei ausgewählt",
 "Ningún archivo seleccionado",
 "Nessun file selezionato",
 "Nenhum ficheiro selecionado",
 "Nenhum arquivo selecionado",
 "Geen bestand geselecteerd",
 "Ingen fil vald",
 "Ingen fil valgt",
 "Ingen fil valgt",
 "Ei tiedostoa valittuna",
 "Nie wybrano pliku",
 "Nebyl vybrán žádný soubor",
 "Nincs fájl kiválasztva",
 "Niciun fișier selectat"),

                    ["Select Files/Directory"] =
("Sélectionner fichiers/répertoire",
 "Dateien/Verzeichnis auswählen",
 "Seleccionar archivos/directorio",
 "Seleziona file/cartella",
 "Selecionar ficheiros/diretório",
 "Selecionar arquivos/diretório",
 "Bestanden/map selecteren",
 "Välj filer/katalog",
 "Velg filer/katalog",
 "Vælg filer/mappe",
 "Valitse tiedostoja/hakemisto",
 "Wybierz pliki/katalog",
 "Vybrat soubory/adresář",
 "Fájlok/könyvtár kiválasztása",
 "Selectează fișiere/director"),

                    ["Scan complete: {0} files and {1} folders || {2} total"] =
("Analyse terminée : {0} fichiers et {1} dossiers || {2} au total",
 "Scan abgeschlossen: {0} Dateien und {1} Ordner || {2} insgesamt",
 "Escaneo completo: {0} archivos y {1} carpetas || {2} en total",
 "Scansione completata: {0} file e {1} cartelle || {2} totale",
 "Análise concluída: {0} ficheiros e {1} pastas || {2} no total",
 "Verificação concluída: {0} arquivos e {1} pastas || {2} no total",
 "Scan voltooid: {0} bestanden en {1} mappen || {2} totaal",
 "Skanning klar: {0} filer och {1} mappar || {2} totalt",
 "Skanning fullført: {0} filer og {1} mapper || {2} totalt",
 "Scanning færdig: {0} filer og {1} mapper || {2} i alt",
 "Skannaus valmis: {0} tiedostoa ja {1} kansiota || {2} yhteensä",
 "Skanowanie zakończone: {0} plików i {1} folderów || {2} łącznie",
 "Skenování dokončeno: {0} souborů a {1} složek || {2} celkem",
 "Vizsgálat befejezve: {0} fájl és {1} mappa || {2} összesen",
 "Scanare finalizată: {0} fișiere și {1} foldere || {2} total"),

                    ["Scan complete: {0} files…"] =
("Analyse terminée : {0} fichiers…",
 "Scan abgeschlossen: {0} Dateien…",
 "Escaneo completo: {0} archivos…",
 "Scansione completata: {0} file…",
 "Análise concluída: {0} ficheiros…",
 "Verificação concluída: {0} arquivos…",
 "Scan voltooid: {0} bestanden…",
 "Skanning klar: {0} filer…",
 "Skanning fullført: {0} filer…",
 "Scanning færdig: {0} filer…",
 "Skannaus valmis: {0} tiedostoa…",
 "Skanowanie zakończone: {0} plików…",
 "Skenování dokončeno: {0} souborů…",
 "Vizsgálat befejezve: {0} fájl…",
 "Scanare finalizată: {0} fișiere…"),


                    ["Current Source: {0}"] =
("Source actuelle : {0}",
 "Aktuelle Quelle: {0}",
 "Fuente actual: {0}",
 "Origine attuale: {0}",
 "Origem atual: {0}",
 "Origem atual: {0}",
 "Huidige bron: {0}",
 "Aktuell källa: {0}",
 "Nåværende kilde: {0}",
 "Aktuel kilde: {0}",
 "Nykyinen lähde: {0}",
 "Bieżące źródło: {0}",
 "Aktuální zdroj: {0}",
 "Jelenlegi forrás: {0}",
 "Sursă curentă: {0}"),

                    ["Current Source: None"] =
("Source actuelle : Aucune",
 "Aktuelle Quelle: Keine",
 "Fuente actual: Ninguna",
 "Origine attuale: Nessuna",
 "Origem atual: Nenhuma",
 "Origem atual: Nenhuma",
 "Huidige bron: Geen",
 "Aktuell källa: Ingen",
 "Nåværende kilde: Ingen",
 "Aktuel kilde: Ingen",
 "Nykyinen lähde: Ei mitään",
 "Bieżące źródło: Brak",
 "Aktuální zdroj: Žádný",
 "Jelenlegi forrás: Nincs",
 "Sursă curentă: Niciuna"),

                    ["Starting copy to {0}"] =
("Démarrage de la copie vers {0}",
 "Kopieren nach {0} wird gestartet",
 "Iniciando copia a {0}",
 "Avvio copia su {0}",
 "A iniciar cópia para {0}",
 "Iniciando cópia para {0}",
 "Kopiëren naar {0} starten",
 "Startar kopiering till {0}",
 "Starter kopiering til {0}",
 "Starter kopiering til {0}",
 "Aloitetaan kopiointi kohteeseen {0}",
 "Rozpoczynanie kopiowania do {0}",
 "Spouštění kopírování do {0}",
 "Másolás indítása ide: {0}",
 "Se începe copierea către {0}"),

                    ["Cancelled"] =
("Annulée",
 "Abgebrochen",
 "Cancelada",
 "Annullata",
 "Cancelada",
 "Cancelada",
 "Geannuleerd",
 "Avbruten",
 "Avbrutt",
 "Annulleret",
 "Peruutettu",
 "Anulowano",
 "Zrušeno",
 "Megszakítva",
 "Anulată"),

                    ["All targets complete"] =
("Toutes les cibles terminées",
 "Alle Ziele abgeschlossen",
 "Todos los destinos completados",
 "Tutte le destinazioni completate",
 "Todos os destinos concluídos",
 "Todos os destinos concluídos",
 "Alle doelen voltooid",
 "Alla mål slutförda",
 "Alle mål fullført",
 "Alle mål færdige",
 "Kaikki kohteet valmiit",
 "Wszystkie cele ukończone",
 "Všechny cíle dokončeny",
 "Minden cél befejezve",
 "Toate destinațiile finalizate"),


                    ["Ready"] =
("Prêt",
 "Bereit",
 "Listo",
 "Pronto",
 "Pronto",
 "Pronto",
 "Klaar",
 "Redo",
 "Klar",
 "Klar",
 "Valmis",
 "Gotowe",
 "Připraveno",
 "Kész",
 "Pregătit"),

                    ["Error: {0}"] =
("Erreur : {0}",
 "Fehler: {0}",
 "Error: {0}",
 "Errore: {0}",
 "Erro: {0}",
 "Erro: {0}",
 "Fout: {0}",
 "Fel: {0}",
 "Feil: {0}",
 "Fejl: {0}",
 "Virhe: {0}",
 "Błąd: {0}",
 "Chyba: {0}",
 "Hiba: {0}",
 "Eroare: {0}"),

                    ["Operation canceled."] =
("Opération annulée.",
 "Vorgang abgebrochen.",
 "Operación cancelada.",
 "Operazione annullata.",
 "Operação cancelada.",
 "Operação cancelada.",
 "Bewerking geannuleerd.",
 "Åtgärd avbruten.",
 "Operasjon avbrutt.",
 "Handling annulleret.",
 "Toiminto peruutettu.",
 "Operacja anulowana.",
 "Operace zrušena.",
 "Művelet megszakítva.",
 "Operațiune anulată."),

                    ["Error: {0}"] =
("Erreur : {0}",
 "Fehler: {0}",
 "Error: {0}",
 "Errore: {0}",
 "Erro: {0}",
 "Erro: {0}",
 "Fout: {0}",
 "Fel: {0}",
 "Feil: {0}",
 "Fejl: {0}",
 "Virhe: {0}",
 "Błąd: {0}",
 "Chyba: {0}",
 "Hiba: {0}",
 "Eroare: {0}"),



                    ["Speed: {0} MB/s"] =
("Vitesse : {0} Mo/s",
 "Geschwindigkeit: {0} MB/s",
 "Velocidad: {0} MB/s",
 "Velocità: {0} MB/s",
 "Velocidade: {0} MB/s",
 "Velocidade: {0} MB/s",
 "Snelheid: {0} MB/s",
 "Hastighet: {0} MB/s",
 "Hastighet: {0} MB/s",
 "Hastighed: {0} MB/s",
 "Nopeus: {0} Mt/s",
 "Prędkość: {0} MB/s",
 "Rychlost: {0} MB/s",
 "Sebesség: {0} MB/s",
 "Viteză: {0} MB/s"),

                    ["Speed: {0}"] =
("Vitesse : {0}",
 "Geschwindigkeit: {0}",
 "Velocidad: {0}",
 "Velocità: {0}",
 "Velocidade: {0}",
 "Velocidade: {0}",
 "Snelheid: {0}",
 "Hastighet: {0}",
 "Hastighet: {0}",
 "Hastighed: {0}",
 "Nopeus: {0}",
 "Prędkość: {0}",
 "Rychlost: {0}",
 "Sebesség: {0}",
 "Viteză: {0}"),

                    ["{0} MB/s"] =
("{0} Mo/s",
 "{0} MB/s",
 "{0} MB/s",
 "{0} MB/s",
 "{0} MB/s",
 "{0} MB/s",
 "{0} MB/s",
 "{0} MB/s",
 "{0} MB/s",
 "{0} MB/s",
 "{0} Mt/s",
 "{0} MB/s",
 "{0} MB/s",
 "{0} MB/s",
 "{0} MB/s"),



                    ["Speed: N/A"] =
("Vitesse : N/D",
 "Geschwindigkeit: N/V",
 "Velocidad: N/D",
 "Velocità: N/D",
 "Velocidade: N/D",
 "Velocidade: N/D",
 "Snelheid: N/B",
 "Hastighet: Ej tillgänglig",
 "Hastighet: Ikke tilgjengelig",
 "Hastighed: Ikke tilgængelig",
 "Nopeus: Ei saatavilla",
 "Prędkość: Niedostępna",
 "Rychlost: Nedostupná",
 "Sebesség: Nem elérhető",
 "Viteză: Indisponibilă"),



                    ["Total C/M/D: {0} / {1}"] =
("Total C/D/S : {0} / {1}",
 "Gesamt K/V/L: {0} / {1}",
 "Total C/M/E: {0} / {1}",
 "Totale C/S/E: {0} / {1}",
 "Total C/M/E: {0} / {1}",
 "Total C/M/E: {0} / {1}",
 "Totaal K/V/V: {0} / {1}",
 "Totalt K/F/R: {0} / {1}",
 "Totalt K/F/S: {0} / {1}",
 "Total K/F/S: {0} / {1}",
 "Yhteensä K/S/P: {0} / {1}",
 "Łącznie K/P/U: {0} / {1}",
 "Celkem K/P/S: {0} / {1}",
 "Összes M/Á/T: {0} / {1}",
 "Total C/M/Ș: {0} / {1}"),

                    ["Total File/Folder Count: {0}"] =
("Nombre total de fichiers/dossiers : {0}",
 "Gesamtanzahl Dateien/Ordner: {0}",
 "Recuento total de archivos/carpetas: {0}",
 "Conteggio totale file/cartelle: {0}",
 "Contagem total de ficheiros/pastas: {0}",
 "Contagem total de arquivos/pastas: {0}",
 "Totaal aantal bestanden/mappen: {0}",
 "Totalt antal filer/mappar: {0}",
 "Totalt antall filer/mapper: {0}",
 "Samlet antal filer/mapper: {0}",
 "Tiedostojen/kansioiden kokonaismäärä: {0}",
 "Łączna liczba plików/folderów: {0}",
 "Celkový počet souborů/složek: {0}",
 "Fájlok/mappák teljes száma: {0}",
 "Număr total fișiere/foldere: {0}"),


                    ["Total C/M/D: 0 Bytes / {0}"] =
("Total C/D/S : 0 octets / {0}",
 "Gesamt K/V/L: 0 Bytes / {0}",
 "Total C/M/E: 0 Bytes / {0}",
 "Totale C/S/E: 0 Byte / {0}",
 "Total C/M/E: 0 Bytes / {0}",
 "Total C/M/E: 0 Bytes / {0}",
 "Totaal K/V/V: 0 Bytes / {0}",
 "Totalt K/F/R: 0 Byte / {0}",
 "Totalt K/F/S: 0 Byte / {0}",
 "Total K/F/S: 0 Byte / {0}",
 "Yhteensä K/S/P: 0 tavua / {0}",
 "Łącznie K/P/U: 0 Bajtów / {0}",
 "Celkem K/P/S: 0 Bajtů / {0}",
 "Összes M/Á/T: 0 Bájt / {0}",
 "Total C/M/Ș: 0 Octeți / {0}"),

                    ["File Count: {0} Out of {1}"] =
("Nombre de fichiers : {0} sur {1}",
 "Dateianzahl: {0} von {1}",
 "Recuento de archivos: {0} de {1}",
 "Conteggio file: {0} su {1}",
 "Contagem de ficheiros: {0} de {1}",
 "Contagem de arquivos: {0} de {1}",
 "Aantal bestanden: {0} van {1}",
 "Filantal: {0} av {1}",
 "Filantall: {0} av {1}",
 "Filantal: {0} ud af {1}",
 "Tiedostojen määrä: {0} / {1}",
 "Liczba plików: {0} z {1}",
 "Počet souborů: {0} z {1}",
 "Fájlszám: {0} / {1}",
 "Număr fișiere: {0} din {1}"),


                    ["File Count: 0 Out of 0"] =
("Nombre de fichiers : 0 sur 0",
 "Dateianzahl: 0 von 0",
 "Recuento de archivos: 0 de 0",
 "Conteggio file: 0 su 0",
 "Contagem de ficheiros: 0 de 0",
 "Contagem de arquivos: 0 de 0",
 "Aantal bestanden: 0 van 0",
 "Filantal: 0 av 0",
 "Filantall: 0 av 0",
 "Filantal: 0 ud af 0",
 "Tiedostojen määrä: 0 / 0",
 "Liczba plików: 0 z 0",
 "Počet souborů: 0 z 0",
 "Fájlszám: 0 / 0",
 "Număr fișiere: 0 din 0"),

                    ["Total C/M/D: 0 Bytes / 0 Bytes"] =
("Total C/D/S : 0 octets / 0 octets",
 "Gesamt K/V/L: 0 Bytes / 0 Bytes",
 "Total C/M/E: 0 Bytes / 0 Bytes",
 "Totale C/S/E: 0 Byte / 0 Byte",
 "Total C/M/E: 0 Bytes / 0 Bytes",
 "Total C/M/E: 0 Bytes / 0 Bytes",
 "Totaal K/V/V: 0 Bytes / 0 Bytes",
 "Totalt K/F/R: 0 Byte / 0 Byte",
 "Totalt K/F/S: 0 Byte / 0 Byte",
 "Total K/F/S: 0 Byte / 0 Byte",
 "Yhteensä K/S/P: 0 tavua / 0 tavua",
 "Łącznie K/P/U: 0 Bajtów / 0 Bajtów",
 "Celkem K/P/S: 0 Bajtů / 0 Bajtů",
 "Összes M/Á/T: 0 Bájt / 0 Bájt",
 "Total C/M/Ș: 0 Octeți / 0 Octeți"),

                    ["Select Files/Directory"] =
("Sélectionner fichiers/répertoire",
 "Dateien/Verzeichnis auswählen",
 "Seleccionar archivos/directorio",
 "Seleziona file/cartella",
 "Selecionar ficheiros/diretório",
 "Selecionar arquivos/diretório",
 "Bestanden/map selecteren",
 "Välj filer/katalog",
 "Velg filer/katalog",
 "Vælg filer/mappe",
 "Valitse tiedostoja/hakemisto",
 "Wybierz pliki/katalog",
 "Vybrat soubory/adresář",
 "Fájlok/könyvtár kiválasztása",
 "Selectează fișiere/director"),

                    ["Select Target Directory"] =
("Sélectionner le répertoire cible",
 "Zielverzeichnis auswählen",
 "Seleccionar directorio de destino",
 "Seleziona cartella di destinazione",
 "Selecionar diretório de destino",
 "Selecionar diretório de destino",
 "Doelmap selecteren",
 "Välj målkatalog",
 "Velg målkatalog",
 "Vælg målmappe",
 "Valitse kohdehakemisto",
 "Wybierz katalog docelowy",
 "Vybrat cílový adresář",
 "Célkönyvtár kiválasztása",
 "Selectează director destinație"),

                    ["Nothing"] =
("Rien",
 "Nichts",
 "Nada",
 "Niente",
 "Nada",
 "Nada",
 "Niets",
 "Ingenting",
 "Ingenting",
 "Intet",
 "Ei mitään",
 "Nic",
 "Nic",
 "Semmi",
 "Nimic"),


                    ["Files Processed: 0 Bytes / 0 Bytes"] =
("Fichiers traités : 0 octets / 0 octets",
 "Dateien verarbeitet: 0 Bytes / 0 Bytes",
 "Archivos procesados: 0 Bytes / 0 Bytes",
 "File elaborati: 0 Byte / 0 Byte",
 "Ficheiros processados: 0 Bytes / 0 Bytes",
 "Arquivos processados: 0 Bytes / 0 Bytes",
 "Bestanden verwerkt: 0 Bytes / 0 Bytes",
 "Filer bearbetade: 0 Byte / 0 Byte",
 "Filer behandlet: 0 Byte / 0 Byte",
 "Filer behandlet: 0 Byte / 0 Byte",
 "Tiedostoja käsitelty: 0 tavua / 0 tavua",
 "Pliki przetworzone: 0 Bajtów / 0 Bajtów",
 "Soubory zpracovány: 0 Bajtů / 0 Bajtů",
 "Feldolgozott fájlok: 0 Bájt / 0 Bájt",
 "Fișiere procesate: 0 Octeți / 0 Octeți"),

                    ["Speed: 0 MB/Sec."] =
("Vitesse : 0 Mo/sec.",
 "Geschwindigkeit: 0 MB/Sek.",
 "Velocidad: 0 MB/seg.",
 "Velocità: 0 MB/sec.",
 "Velocidade: 0 MB/seg.",
 "Velocidade: 0 MB/seg.",
 "Snelheid: 0 MB/sec.",
 "Hastighet: 0 MB/sek.",
 "Hastighet: 0 MB/sek.",
 "Hastighed: 0 MB/sek.",
 "Nopeus: 0 Mt/s",
 "Prędkość: 0 MB/sek.",
 "Rychlost: 0 MB/sek.",
 "Sebesség: 0 MB/mp.",
 "Viteză: 0 MB/sec."),

                    ["Total HD Space Left: 0 Bytes"] =
("Espace disque restant : 0 octets",
 "Verbleibender Festplattenspeicher: 0 Bytes",
 "Espacio total del disco restante: 0 Bytes",
 "Spazio totale su disco rimanente: 0 Byte",
 "Espaço total do disco restante: 0 Bytes",
 "Espaço total do disco restante: 0 Bytes",
 "Totale schijfruimte over: 0 Bytes",
 "Totalt ledigt hårddiskutrymme: 0 Byte",
 "Total ledig diskplass: 0 Byte",
 "Samlet ledig plads på harddisk: 0 Byte",
 "Kiintolevyn vapaata tilaa jäljellä: 0 tavua",
 "Całkowita pozostała przestrzeń dyskowa: 0 Bajtów",
 "Celkové volné místo na disku: 0 Bajtů",
 "Teljes szabad lemezterület: 0 Bájt",
 "Spațiu total rămas pe disc: 0 Octeți"),


                    ["Elapsed / Target Time: 00:00:00 / 00:00:00"] =
("Temps écoulé / temps cible : 00:00:00 / 00:00:00",
 "Verstrichene / Zielzeit: 00:00:00 / 00:00:00",
 "Tiempo transcurrido / tiempo objetivo: 00:00:00 / 00:00:00",
 "Tempo trascorso / tempo previsto: 00:00:00 / 00:00:00",
 "Tempo decorrido / tempo previsto: 00:00:00 / 00:00:00",
 "Tempo decorrido / tempo previsto: 00:00:00 / 00:00:00",
 "Verstreken / doeltijd: 00:00:00 / 00:00:00",
 "Förfluten / måltid: 00:00:00 / 00:00:00",
 "Forløpt / måltid: 00:00:00 / 00:00:00",
 "Forløbet / måltid: 00:00:00 / 00:00:00",
 "Kulunut / tavoiteaika: 00:00:00 / 00:00:00",
 "Upłynęło / czas docelowy: 00:00:00 / 00:00:00",
 "Uplynulo / cílový čas: 00:00:00 / 00:00:00",
 "Eltelt / célidő: 00:00:00 / 00:00:00",
 "Timp scurs / timp țintă: 00:00:00 / 00:00:00"),

                    ["Tab Control: This control allows you to switch between different operation modes and settings."] =
    ("Onglet de contrôle : permet de basculer entre les différents modes d’opération et réglages.",
     "Registerkarte: Hiermit schalten Sie zwischen verschiedenen Betriebsmodi und Einstellungen um.",
     "Pestaña de control: le permite cambiar entre diferentes modos de operación y ajustes.",
     "Scheda di controllo: consente di passare tra diverse modalità operative e impostazioni.",
     "Separador de controle: permite alternar entre diferentes modos de operação e definições.",
     "Guia de controle: permite alternar entre diferentes modos de operação e configurações.",
     "Tabblad Besturing: hiermee schakelt u tussen verschillende bewerkingsmodi en instellingen.",
     "Flik Kontroll: låter dig växla mellan olika driftslägen och inställningar.",
     "Kontroll-fane: lar deg bytte mellom ulike driftsmodi og innstillinger.",
     "Kontrolfane: lader dig skifte mellem forskellige driftsformer og indstillinger.",
     "Hallinta-välilehti: mahdollistaa vaihtamisen eri toimintatilojen ja asetusten välillä.",
     "Zakładka Kontrolna: pozwala przełączać się między różnymi trybami działania i ustawieniami.",
     "Karta Ovládání: umožňuje přepínat mezi různými provozními režimy a nastaveními.",
     "Vezérlőlap: lehetővé teszi különböző műveleti módok és beállítások közötti váltást.",
     "Filă de control: permite comutarea între diferite moduri de operare și setări."),

                    ["File's Icon PictureBox: The file's icon which reflect the current file will be shown here."] =
    ("PictureBox de l’icône du fichier : l’icône du fichier actuel s’affiche ici.",
     "Symbol PictureBox: Das Symbol der aktuellen Datei wird hier angezeigt.",
     "PictureBox del icono del archivo: aquí se muestra el icono del archivo actual.",
     "PictureBox dell’icona del file: mostra l’icona del file corrente.",
     "PictureBox do ícone do ficheiro: aqui é mostrado o ícone do ficheiro atual.",
     "PictureBox do ícone do arquivo: aqui é mostrado o ícone do arquivo atual.",
     "PictureBox van bestandspictogram: het pictogram van het huidige bestand wordt hier getoond.",
     "Bildruta för filens ikon: filens ikon som motsvarar den aktuella filen visas här.",
     "Bilderamme for filens ikon: filens ikon som gjenspeiler gjeldende fil vises her.",
     "Billede-boks for filens ikon: ikonet for den aktuelle fil vises her.",
     "Tiedoston kuvake-PictureBox: nykyisen tiedoston kuvake näytetään tässä.",
     "PictureBox ikony pliku: tutaj pojawi się ikona bieżącego pliku.",
     "PictureBox ikony souboru: zde se zobrazí ikona aktuálního souboru.",
     "Fájl ikon PictureBox: a jelenlegi fájl ikonja jelenik meg itt.",
     "PictureBox pentru pictograma fișierului: va fi afișată pictograma fișierului curent."),

                    ["Source Directory Button: This is the button to select your source directory from which files will be copied/moved/securely deleted."] =
    ("Bouton Répertoire source : permet de choisir le dossier source depuis lequel les fichiers seront copiés/déplacés/supprimés de façon sécurisée.",
     "Quellverzeichnis-Schaltfläche: Wählt das Quellverzeichnis aus, aus dem Dateien kopiert/verschoben/sicher gelöscht werden.",
     "Botón Directorio de origen: permite elegir la carpeta de origen desde la que se copiarán/moverán/borrarán de forma segura los archivos.",
     "Pulsante Cartella di origine: consente di selezionare la cartella di origine da cui copiare/spostare/eliminare in modo sicuro i file.",
     "Botão Diretório de origem: permite escolher a pasta de origem da qual os ficheiros serão copiados/movidos/eliminados de forma segura.",
     "Botão Diretório de origem: permite escolher a pasta de origem de onde os arquivos serão copiados/movidos/excluídos com segurança.",
     "Knop Bronmap: hiermee selecteert u de bronmap waaruit bestanden worden gekopieerd/verplaatst/veilig verwijderd.",
     "Källa Mapp-knapp: låter dig välja källmappen som filer ska kopieras/flyttas/säkert raderas från.",
     "Kilde Mappe-knapp: lar deg velge kildemappen som filer skal kopieres/flyttes/slettes sikkert fra.",
     "Kilde Mappe-knap: lader dig vælge kildemappen, hvorfra filer kopieres/flyttes/slettes sikkert.",
     "Lähdehakemisto-painike: valitsee hakemiston, josta tiedostot kopioidaan/siirretään/poistetaan turvallisesti.",
     "Przycisk Katalog źródłowy: pozwala wybrać katalog źródłowy, z którego pliki będą kopiowane/przenoszone/bezpiecznie usuwane.",
     "Tlačítko Zdrojový adresář: umožňuje vybrat zdrojovou složku, ze které budou soubory kopírovány/přesunuty/bezpečně smazány.",
     "Forrás könyvtár gomb: lehetővé teszi a forráskönyvtár kiválasztását, ahonnan a fájlok másolása/áthelyezése/biztonságos törlése történik.",
     "Buton Director sursă: permite selectarea directorului sursă din care fișierele vor fi copiate/mutate/șterse în siguranță."),

                    ["Target Directory Button: This is the button to select your target directory to which your files will be copied/moved."] =
    ("Bouton Répertoire cible : permet de choisir le dossier de destination vers lequel les fichiers seront copiés ou déplacés.",
     "Zielverzeichnis-Schaltfläche: Wählt das Zielverzeichnis aus, in das Dateien kopiert oder verschoben werden.",
     "Botón Directorio de destino: permite elegir la carpeta de destino a la que se copiarán o moverán los archivos.",
     "Pulsante Cartella di destinazione: consente di selezionare la cartella di destinazione in cui copiare o spostare i file.",
     "Botão Diretório de destino: permite escolher a pasta de destino para onde os ficheiros serão copiados ou movidos.",
     "Botão Diretório de destino: permite escolher a pasta de destino para onde os arquivos serão copiados ou movidos.",
     "Knop Doelmap: hiermee selecteert u de doelmap waarnaar uw bestanden worden gekopieerd of verplaatst.",
     "Mål Mapp-knapp: låter dig välja målmappen som dina filer ska kopieras eller flyttas till.",
     "Mål Mappe-knapp: lar deg velge målmappen som filene skal kopieres eller flyttes til.",
     "Mål Mappe-knap: lader dig vælge målmappen, som dine filer kopieres eller flyttes til.",
     "Kohdehakemisto-painike: valitsee kohdehakemiston, johon tiedostot kopioidaan tai siirretään.",
     "Przycisk Katalog docelowy: pozwala wybrać katalog docelowy, do którego pliki zostaną skopiowane lub przeniesione.",
     "Tlačítko Cílový adresář: umožňuje vybrat cílovou složku, do které budou soubory zkopírovány nebo přesunuty.",
     "Cél könyvtár gomb: lehetővé teszi a célkönyvtár kiválasztását, ahová a fájlok másolása vagy áthelyezése történik.",
     "Buton Director destinație: permite selectarea directorului țintă în care fișierele vor fi copiate/mutate."),

                    ["Copy/Move/Secure Delete ComboBox: This dropdown combobox is to select the operation of Copy/Move/Secure Delete."] =
    ("ComboBox Copier/Déplacer/Suppression sécurisée : permet de choisir l’opération à effectuer.",
     "Kopieren/Verschieben/Sicheres Löschen-ComboBox: Wählt die gewünschte Operation aus.",
     "ComboBox Copiar/Mover/Borrado seguro: permite elegir la operación a realizar.",
     "ComboBox Copia/Spostamento/Eliminazione sicura: consente di selezionare l’operazione di copia/spostamento/eliminazione sicura.",
     "ComboBox Copiar/Mover/Eliminação segura: permite escolher a operação Copiar/Mover/Eliminar de forma segura.",
     "ComboBox Copiar/Mover/Exclusão segura: permite escolher a operação Copiar/Mover/Excluir com segurança.",
     "ComboBox Kopiëren/Verplaatsen/Secure Verwijderen: hiermee selecteert u de bewerking Kopiëren/Verplaatsen/Secure Verwijderen.",
     "ComboBox Kopiera/Flytta/Säker borttagning: låter dig välja åtgärden Kopiera/Flytta/Säker borttagning.",
     "ComboBox Kopier/Flytt/Sikker sletting: lar deg velge handlingen Kopier/Flytt/Sikker sletting.",
     "ComboBox Kopiér/Flyt/Sikker sletning: lader dig vælge handlingen Kopiér/Flyt/Sikker sletning.",
     "ComboBox Kopioi/Siirrä/Turvallinen poisto: mahdollistaa toiminnon Kopioi/Siirrä/Turvallinen poisto valinnan.",
     "ComboBox Kopiuj/Przenieś/Bezpieczne usuwanie: pozwala wybrać operację Kopiuj/Przenieś/Bezpieczne usuwanie.",
     "ComboBox Kopírovat/Přesunout/Bezpečné smazání: umožňuje vybrat operaci Kopírovat/Přesunout/Bezpečné smazání.",
     "ComboBox Másol/Áthelyez/Biztonságos törlés: lehetővé teszi a Másol/Áthelyez/Biztonságos törlés művelet kiválasztását.",
     "ComboBox Copiere/Mutare/Ștergere sigură: permite selectarea operațiunii Copiere/Mutare/Ștergere sigură."),

                    ["On Finish ComboBox: This dropdown combobox is to select the action to perform when the operation finishes."] =
    ("ComboBox À la fin : permet de choisir l’action à effectuer une fois l’opération terminée.",
     "Beenden-ComboBox: Legt fest, was nach Abschluss der Operation geschehen soll.",
     "ComboBox Al finalizar: permite elegir la acción a realizar cuando termine la operación.",
     "ComboBox Al termine: consente di selezionare l’azione da eseguire al termine dell’operazione.",
     "ComboBox Ao finalizar: permite escolher a ação a realizar quando a operação terminar.",
     "ComboBox Ao finalizar: permite escolher a ação a realizar quando a operação terminar.",
     "ComboBox Bij voltooien: hiermee selecteert u de actie die moet worden uitgevoerd wanneer de bewerking is voltooid.",
     "ComboBox Vid slutförd: låter dig välja åtgärden som ska utföras när åtgärden är slutförd.",
     "ComboBox Ved ferdigstillelse: lar deg velge handlingen som skal utføres når operasjonen er fullført.",
     "ComboBox Ved færdiggørelse: lader dig vælge handlingen, der skal udføres, når operationen er afsluttet.",
     "ComboBox Valmistuessa: mahdollistaa toiminnon valinnan, joka suoritetaan toimenpiteen valmistuessa.",
     "ComboBox Po zakończeniu: pozwala wybrać działanie do wykonania po zakończeniu operacji.",
     "ComboBox Po dokončení: umožňuje vybrat akci, která se provede po dokončení operace.",
     "ComboBox Befejezéskor: lehetővé teszi a művelet befejezésekor végrehajtandó művelet kiválasztását.",
     "ComboBox La finalizare: permite selectarea acțiunii de efectuat la finalizarea operațiunii."),

                    ["Start Button: This button starts the operation of Copy/Move/Secure Delete."] =
    ("Bouton Démarrer : lance l’opération de copie/déplacement/suppression sécurisée.",
     "Start-Schaltfläche: Startet die Operation Kopieren/Verschieben/Sicheres Löschen.",
     "Botón Iniciar: inicia la operación de copiar/mover/borrar de forma segura.",
     "Pulsante Avvia: avvia l’operazione di Copia/Spostamento/Eliminazione sicura.",
     "Botão Iniciar: inicia a operação Copiar/Mover/Eliminar de forma segura.",
     "Botão Iniciar: inicia a operação Copiar/Mover/Excluir com segurança.",
     "Knop Starten: start de bewerking Kopiëren/Verplaatsen/Secure Verwijderen.",
     "Start-knapp: startar åtgärden Kopiera/Flytta/Säker borttagning.",
     "Start-knapp: starter operasjonen Kopier/Flytt/Sikker sletting.",
     "Start-knap: starter handlingen Kopiér/Flyt/Sikker sletning.",
     "Käynnistä-painike: käynnistää toiminnon Kopioi/Siirrä/Turvallinen poisto.",
     "Przycisk Start: rozpoczyna operację Kopiuj/Przenieś/Bezpieczne usuwanie.",
     "Tlačítko Start: spustí operaci Kopírovat/Přesunout/Bezpečné smazání.",
     "Start gomb: elindítja a Másol/Áthelyez/Biztonságos törlés műveletet.",
     "Buton Start: pornește operațiunea Copiere/Mutare/Ștergere sigură."),


                    ["Pause/Resume Button: This button pauses/resumes the current operation."] =
    ("Bouton Pause/Reprise : met l’opération en pause ou la reprend.",
     "Pause/Weiter-Schaltfläche: Pausiert oder setzt die aktuelle Operation fort.",
     "Botón Pausar/Reanudar: pone en pausa o reanuda la operación actual.",
     "Pulsante Pausa/Riprendi: mette in pausa o riprende l’operazione corrente.",
     "Botão Pausa/Continuar: coloca em pausa ou retoma a operação atual.",
     "Botão Pausar/Retomar: coloca em pausa ou retoma a operação atual.",
     "Knop Pauzeren/Hervatten: pauzeert of hervat de huidige bewerking.",
     "Pausa/Fortsätt-knapp: pausar eller återupptar den aktuella åtgärden.",
     "Pause/Start-knapp: pauserer eller gjenopptar den gjeldende operasjonen.",
     "Pause/Fortsæt-knap: pauserer eller genoptager den aktuelle operation.",
     "Keskeytä/Jatka-painike: keskeyttää tai jatkaa nykyistä toimenpidettä.",
     "Przycisk Pauza/Wznów: wstrzymuje lub wznawia bieżącą operację.",
     "Tlačítko Pozastavit/Pokračovat: pozastaví nebo obnoví aktuální operaci.",
     "Szünet/Folytat gomb: szünetelteti vagy folytatja a jelenlegi műveletet.",
     "Buton Pauză/Reluare: pune pe pauză sau reia operațiunea curentă."),

                    ["Cancel Button: This button cancels the current operation."] =
    ("Bouton Annuler : annule l’opération en cours.",
     "Abbrechen-Schaltfläche: Bricht die aktuelle Operation ab.",
     "Botón Cancelar: cancela la operación actual.",
     "Pulsante Annulla: annulla l’operazione corrente.",
     "Botão Cancelar: cancela a operação atual.",
     "Botão Cancelar: cancela a operação atual.",
     "Knop Annuleren: annuleert de huidige bewerking.",
     "Avbryt-knapp: avbryter den aktuella åtgärden.",
     "Avbryt-knapp: avbryter den gjeldende operasjonen.",
     "Annuller-knap: annullerer den aktuelle operation.",
     "Peruuta-painike: peruuttaa nykyisen toimenpiteen.",
     "Przycisk Anuluj: anuluje bieżącą operację.",
     "Tlačítko Zrušit: zruší aktuální operaci.",
     "Mégsem gomb: megszakítja a jelenlegi műveletet.",
     "Buton Anulare: anulează operațiunea curentă."),

                    ["This button skips the current file and moves to the next one in the operation."] =
    ("Ce bouton ignore le fichier actuel et passe au suivant.",
     "Diese Schaltfläche überspringt die aktuelle Datei und fährt mit der nächsten fort.",
     "Este botón omite el archivo actual y pasa al siguiente.",
     "Questo pulsante salta il file corrente e passa al successivo nell’operazione.",
     "Este botão ignora o ficheiro atual e passa para o seguinte.",
     "Este botão ignora o arquivo atual e passa para o próximo.",
     "Deze knop slaat het huidige bestand over en gaat naar het volgende in de bewerking.",
     "Denna knapp hoppar över den aktuella filen och går till nästa i åtgärden.",
     "Denne knappen hopper over gjeldende fil og går til neste i operasjonen.",
     "Denne knap springer den aktuelle fil over og går til den næste i handlingen.",
     "Tämä painike ohittaa nykyisen tiedoston ja siirtyy toimenpiteen seuraavaan.",
     "Ten przycisk pomija bieżący plik i przechodzi do następnego w operacji.",
     "Toto tlačítko přeskočí aktuální soubor a přejde k dalšímu v operaci.",
     "Ez a gomb átugorja a jelenlegi fájlt és a művelet következőjére lép.",
     "Acest buton sare peste fișierul curent și trece la următorul din operațiune."),

                    ["Add File Button: This button adds files to the list for the current operation."] =
    ("Bouton Ajouter un fichier : ajoute des fichiers à la liste de l’opération.",
     "Datei hinzufügen-Schaltfläche: Fügt der Liste Dateien hinzu.",
     "Botón Añadir archivo: agrega archivos a la lista de la operación.",
     "Pulsante Aggiungi file: aggiunge file alla lista per l’operazione corrente.",
     "Botão Adicionar ficheiro: adiciona ficheiros à lista da operação atual.",
     "Botão Adicionar arquivo: adiciona arquivos à lista da operação atual.",
     "Knop Bestand toevoegen: voegt bestanden toe aan de lijst voor de huidige bewerking.",
     "Lägg till fil-knapp: lägger till filer i listan för den aktuella åtgärden.",
     "Legg til fil-knapp: legger til filer i listen for gjeldende operasjon.",
     "Tilføj fil-knap: tilføjer filer til listen for den aktuelle operation.",
     "Lisää tiedosto -painike: lisää tiedostot nykyisen toimenpiteen luetteloon.",
     "Przycisk Dodaj plik: dodaje pliki do listy bieżącej operacji.",
     "Tlačítko Přidat soubor: přidá soubory do seznamu aktuální operace.",
     "Fájl hozzáadása gomb: fájlokat ad hozzá a jelenlegi művelet listájához.",
     "Buton Adăugare fișier: adaugă fișiere la lista pentru operațiunea curentă."),

                    ["Remove File Button: This button removes the selected file from the list for the current operation."] =
    ("Bouton Supprimer le fichier : retire le fichier sélectionné de la liste.",
     "Datei entfernen-Schaltfläche: Entfernt die ausgewählte Datei aus der Liste.",
     "Botón Quitar archivo: quita el archivo seleccionado de la lista.",
     "Pulsante Rimuovi file: rimuove il file selezionato dalla lista.",
     "Botão Remover ficheiro: remove o ficheiro selecionado da lista.",
     "Botão Remover arquivo: remove o arquivo selecionado da lista.",
     "Knop Bestand verwijderen: verwijdert het geselecteerde bestand uit de lijst.",
     "Ta bort fil-knapp: tar bort den valda filen från listan.",
     "Fjern fil-knapp: fjerner den valgte filen fra listen.",
     "Fjern fil-knap: fjerner den valgte fil fra listen.",
     "Poista tiedosto -painike: poistaa valitun tiedoston luettelosta.",
     "Przycisk Usuń plik: usuwa wybrany plik z listy.",
     "Tlačítko Odebrat soubor: odebere vybraný soubor ze seznamu.",
     "Fájl eltávolítása gomb: eltávolítja a kijelölt fájlt a listáról.",
     "Buton Eliminare fișier: elimină fișierul selectat din lista operațiunii."),

                    ["Clear File List Button: This button clears the entire file list for the current operation."] =
    ("Bouton Effacer la liste : vide complètement la liste de fichiers.",
     "Liste löschen-Schaltfläche: Leert die gesamte Dateiliste.",
     "Botón Limpiar lista: vacía completamente la lista de archivos.",
     "Pulsante Cancella elenco: cancella l’intera lista di file per l’operazione corrente.",
     "Botão Limpar lista de ficheiros: limpa toda a lista de ficheiros da operação atual.",
     "Botão Limpar lista de arquivos: limpa toda a lista de arquivos da operação atual.",
     "Knop Bestandslijst wissen: wist de volledige bestandslijst voor de huidige bewerking.",
     "Rensa fillista-knapp: rensar hela fillistan för den aktuella åtgärden.",
     "Tøm filliste-knapp: tømmer hele fillisten for gjeldende operasjon.",
     "Ryd filliste-knap: rydder hele fillisten for den aktuelle operation.",
     "Tyhjennä tiedostolista-painike: tyhjentää koko tiedostolistan nykyisestä toimenpiteestä.",
     "Przycisk Wyczyść listę plików: czyści całą listę plików bieżącej operacji.",
     "Tlačítko Vyčistit seznam souborů: vyčistí celý seznam souborů aktuální operace.",
     "Fájllista törlése gomb: törli a jelenlegi művelet teljes fájllistáját.",
     "Buton Golește lista de fișiere: șterge întreaga listă de fișiere pentru operațiunea curentă."),

                    ["File Count Label: This label shows the total number of files in the current operation."] =
    ("Étiquette Nombre de fichiers : affiche le nombre total de fichiers de l’opération.",
     "Dateianzahl-Label: Zeigt die Gesamtanzahl der Dateien in der Operation an.",
     "Etiqueta Contador de archivos: muestra el número total de archivos de la operación.",
     "Etichetta Conteggio file: mostra il numero totale di file nell’operazione corrente.",
     "Etiqueta Contagem de ficheiros: mostra o número total de ficheiros na operação atual.",
     "Etiqueta Contador de arquivos: mostra o número total de arquivos na operação atual.",
     "Label Bestandstelling: toont het totale aantal bestanden in de huidige bewerking.",
     "Fileräknare-etikett: visar det totala antalet filer i den aktuella åtgärden.",
     "Filantall-etikett: viser det totale antallet filer i gjeldende operasjon.",
     "Filantal-label: viser det samlede antal filer i den aktuelle operation.",
     "Tiedostojen määrä -tarra: näyttää nykyisen toimenpiteen tiedostojen kokonaismäärän.",
     "Etykieta Liczba plików: pokazuje całkowitą liczbę plików w bieżącej operacji.",
     "Štítek Počet souborů: zobrazuje celkový počet souborů v aktuální operaci.",
     "Fájlok száma címke: megjeleníti a jelenlegi művelet fájljainak teljes számát.",
     "Etichetă Număr fișiere: afișează numărul total de fișiere din operațiunea curentă."),

                    ["File Processed Label: This label shows the number of converted bytes that have been processed in the current operation."] =
    ("Étiquette Fichiers traités : affiche le nombre d’octets traités.",
     "Verarbeitete-Dateien-Label: Zeigt die Anzahl der verarbeiteten Bytes an.",
     "Etiqueta Archivos procesados: muestra la cantidad de bytes procesados.",
     "Etichetta File elaborati: mostra il numero di byte elaborati nell’operazione corrente.",
     "Etiqueta Ficheiros processados: mostra o número de bytes processados na operação atual.",
     "Etiqueta Arquivos processados: mostra a quantidade de bytes processados na operação atual.",
     "Label Verwerkte bestanden: toont het aantal verwerkte bytes in de huidige bewerking.",
     "Bearbetade filer-etikett: visar antalet bearbetade byte i den aktuella åtgärden.",
     "Behandlede filer-etikett: viser antallet av prosesserte bytes i gjeldende operasjon.",
     "Behandlede filer-label: viser antallet af behandlede bytes i den aktuelle operation.",
     "Käsitellyt tiedostot -tarra: näyttää nykyisessä toimenpiteessä käsiteltyjen tavujen määrän.",
     "Etykieta Przetworzone pliki: pokazuje liczbę przetworzonych bajtów w bieżącej operacji.",
     "Štítek Zpracované soubory: zobrazuje počet zpracovaných bajtů v aktuální operaci.",
     "Feldolgozott fájlok címke: megjeleníti a jelenlegi művelet során feldolgozott bájtok számát.",
     "Etichetă Fișiere procesate: afișează numărul de octeți procesați în operațiunea curentă."),

                    ["Total Copied Progress Label: This label shows the total bytes processed and the total bytes to process in the current operation."] =
    ("Étiquette Progression totale : affiche les octets traités et restants.",
     "Gesamtfortschritt-Label: Zeigt die verarbeiteten und die gesamten Bytes an.",
     "Etiqueta Progreso total copiado: muestra los bytes procesados y los restantes.",
     "Etichetta Avanzamento copia totale: mostra i byte elaborati e quelli totali dell’operazione.",
     "Etiqueta Progresso total copiado: mostra os bytes processados e os restantes.",
     "Etiqueta Progresso total copiado: mostra os bytes processados e os restantes.",
     "Label Totale gekopieerde voortgang: toont de verwerkte en totale bytes in de huidige bewerking.",
     "Total kopieringsförlopp-etikett: visar de bearbetade och totala bytes i den aktuella åtgärden.",
     "Total kopierte fremgang-etikett: viser de prosesserte og totale bytes i gjeldende operasjon.",
     "Total kopierte fremskridt-label: viser de behandlede og totale bytes i den aktuelle operation.",
     "Kopioinnin kokonaisprogressin tarra: näyttää käsitellyt ja kokonaistavut nykyisessä toimenpiteessä.",
     "Etykieta Całkowity postęp kopiowania: pokazuje przetworzone i całkowite bajty w bieżącej operacji.",
     "Štítek Celkový průběh kopírování: zobrazuje zpracované a celkové bajty v aktuální operaci.",
     "Teljes másolási folyamat címke: megjeleníti a feldolgozott és a teljes bájtokat a jelenlegi műveletben.",
     "Etichetă Progres total copiere: afișează octeții procesați și totalul de octeți din operațiunea curentă."),




                    ["Elapsed Out of Target Time Label: This label shows the elapsed time and the estimated target time for the current operation."] =
    ("Étiquette Temps écoulé/estimé : affiche le temps écoulé et le temps estimé.",
     "Verstrichene/Gesamtdauer-Label: Zeigt verstrichene und geschätzte Zeit an.",
     "Etiqueta Tiempo transcurrido y estimado: muestra el tiempo transcurrido y el estimado.",
     "Etichetta Tempo trascorso/stimato: mostra il tempo trascorso e quello stimato per l’operazione.",
     "Etiqueta Tempo decorrido/estimado: mostra o tempo decorrido e o estimado da operação.",
     "Etiqueta Tempo decorrido/estimado: mostra o tempo decorrido e o estimado da operação.",
     "Label Verstreken/verwachte tijd: toont de verstreken en de geschatte doeltijd van de bewerking.",
     "Förfluten/beräknad tid-etikett: visar den förflutna och den beräknade måltiden för åtgärden.",
     "Forløpt/estimert tid-etikett: viser den forløpte og den estimerte måltiden for operasjonen.",
     "Forløbet/estimeret tid-label: viser den forløbne og den estimerede måltid for handlingen.",
     "Kulunut/arvioitu aika -tarra: näyttää kuluneen ja arvioidun kohdeajan nykyiselle toimenpiteelle.",
     "Etykieta Czas upłynął/czas docelowy: pokazuje upłynięty i szacowany czas docelowy bieżącej operacji.",
     "Štítek Uplynulý/cílový čas: zobrazuje uplynulý a odhadovaný cílový čas aktuální operace.",
     "Eltelt/cél idő címke: megjeleníti az eltelt és a becsült célidőt a jelenlegi művelethez.",
     "Etichetă Timp scurs/țintă: afișează timpul scurs și timpul țintă estimat pentru operațiunea curentă."),

                    ["Speed Label: This label shows the current speed of the operation in bytes per second."] =
    ("Étiquette Vitesse : affiche la vitesse actuelle en octets par seconde.",
     "Geschwindigkeit-Label: Zeigt die aktuelle Geschwindigkeit in Bytes pro Sekunde an.",
     "Etiqueta Velocidad: muestra la velocidad actual en bytes por segundo.",
     "Etichetta Velocità: mostra la velocità corrente dell’operazione in byte al secondo.",
     "Etiqueta Velocidade: mostra a velocidade atual da operação em bytes por segundo.",
     "Etiqueta Velocidade: mostra a velocidade atual da operação em bytes por segundo.",
     "Label Snelheid: toont de huidige snelheid van de bewerking in bytes per seconde.",
     "Hastighet-etikett: visar den aktuella hastigheten för åtgärden i bytes per sekund.",
     "Hastighet-etikett: viser den aktuelle hastigheten for operasjonen i bytes per sekund.",
     "Hastighed-label: viser den aktuelle hastighed for handlingen i bytes pr. sekund.",
     "Nopeus-tarra: näyttää nykyisen toimenpiteen nopeuden tavuina sekunnissa.",
     "Etykieta Prędkość: pokazuje bieżącą prędkość operacji w bajtach na sekundę.",
     "Štítek Rychlost: zobrazuje aktuální rychlost operace v bajtech za sekundu.",
     "Sebesség címke: megjeleníti a művelet jelenlegi sebességét bájtban másodpercenként.",
     "Etichetă Viteză: afișează viteza curentă a operațiunii în octeți pe secundă."),

                    ["Total HD Space Left Label: This label shows the total hard-drive space left on the target drive."] =
    ("Étiquette Espace disque restant : affiche l’espace disponible sur le disque cible.",
     "Verbleibender-Festplattenspeicher-Label: Zeigt den freien Speicherplatz auf dem Ziellaufwerk.",
     "Etiqueta Espacio restante en disco: muestra el espacio libre en la unidad de destino.",
     "Etichetta Spazio rimanente su HD: mostra lo spazio totale rimasto sul disco di destinazione.",
     "Etiqueta Espaço restante em HD: mostra o espaço total restante na unidade de destino.",
     "Etiqueta Espaço restante em HD: mostra o espaço total restante na unidade de destino.",
     "Label Totale HD-ruimte over: toont de totale resterende harde-schijfruimte op het doelstation.",
     "Total HD-utrymme kvar-etikett: visar den totala hårddiskyta som återstår på målenheten.",
     "Total HD-plass igjen-etikett: viser den totale harddiskplassen som gjenstår på målenheten.",
     "Total HD-plads tilbage-label: viser den samlede harddiskplads, der er tilbage på måldrevet.",
     "Kiintolevyllä jäljellä oleva tila -tarra: näyttää kohdeasemalla jäljellä olevan kiintolevytilan kokonaismäärän.",
     "Etykieta Całkowite pozostałe miejsce na HD: pokazuje całkowitą pozostałą przestrzeń na dysku twardym w dysku docelowym.",
     "Štítek Celkové místo na HD zbývající: zobrazuje celkové zbývající místo na pevném disku cílové jednotky.",
     "Teljes merevlemez-hely maradt címke: megjeleníti a célmeghajtón maradt teljes merevlemez-területet.",
     "Etichetă Spațiu total rămas pe HD: afișează spațiul total rămas pe hard-disk-ul unității țintă."),

                    ["Overwrite If Newer CheckBox: This checkbox determines whether to overwrite files only if the source file is newer than the destination file."] =
    ("Case Remplacer si plus récent : écrase uniquement si la source est plus récente.",
     "Überschreiben-wenn-neuer-CheckBox: Überschreibt nur, wenn die Quelldatei neuer ist.",
     "Casilla Sobrescribir si es más nuevo: sobrescribe solo si el origen es más reciente.",
     "Casella di controllo Sovrascrivi se più recente: sovrascrive solo se il file sorgente è più recente.",
     "Caixa de verificação Substituir se mais recente: substitui apenas se o ficheiro de origem for mais recente.",
     "Caixa de seleção Sobrescrever se mais recente: sobrescreve apenas se o arquivo de origem for mais recente.",
     "Aanvinkvakje Overschrijven indien nieuwer: overschrijft alleen als het bronbestand nieuwer is.",
     "Kryssruta Skriv över om nyare: skriver bara över om källfilen är nyare.",
     "Avkrysningsboks Overskriv hvis nyere: overskriver bare hvis kildefilen er nyere.",
     "Markeringsfelt Overskriv hvis nyere: overskriver kun hvis kildefilen er nyere.",
     "Valintaruutu Korvaa, jos uudempi: korvaa vain, jos lähde on uudempi.",
     "Pole wyboru Nadpisz, jeśli nowszy: nadpisuje tylko jeśli plik źródłowy jest nowszy.",
     "Zaškrtávací pole Přepsat, pokud novější: přepíše pouze v případě, že zdrojový soubor je novější.",
     "Jelölőnégyzet Felülír, ha újabb: csak akkor írja felül, ha a forrásfájl újabb.",
     "Casetă de selectare Suprascriere dacă este mai nou: suprascrie numai dacă fișierul sursă este mai nou."),

                    ["Overwrite All CheckBox: This checkbox determines whether to overwrite all files in the target directory without checking their timestamps."] =
    ("Case Remplacer tout : écrase tous les fichiers sans vérifier la date.",
     "Alles-überschreiben-CheckBox: Überschreibt alle Dateien ohne Zeitstempelprüfung.",
     "Casilla Sobrescribir todo: sobrescribe todos los archivos sin comprobar la fecha.",
     "Casella di controllo Sovrascrivi tutto: sovrascrive tutti i file senza verificarne la data.",
     "Caixa de verificação Substituir tudo: substitui todos os ficheiros sem verificar as respetivas datas.",
     "Caixa de seleção Sobrescrever tudo: sobrescreve todos os arquivos sem verificar suas datas.",
     "Aanvinkvakje Alles overschrijven: overschrijft alle bestanden zonder de tijdstempels te controleren.",
     "Kryssruta Skriv över alla: skriver över alla filer utan att kontrollera deras tidsstämplar.",
     "Avkrysningsboks Overskriv alle: overskriver alle filer uten å sjekke tidsstemplene.",
     "Markeringsfelt Overskriv alle: overskriver alle filer uden at kontrollere deres tidsstempler.",
     "Valintaruutu Korvaa kaikki: korvaa kaikki tiedostot tarkistamatta niiden aikaleimoja.",
     "Pole wyboru Nadpisz wszystko: nadpisuje wszystkie pliki bez sprawdzania ich znaczników czasu.",
     "Zaškrtávací pole Přepsat vše: přepíše všechny soubory bez kontroly jejich časových razítek.",
     "Jelölőnégyzet Mindet felülír: felülír minden fájlt anélkül, hogy ellenőrizné azok időbélyegét.",
     "Casetă de selectare Suprascriere tot: suprascrie toate fișierele fără a verifica marcajele de timp."),

                    ["Do Not Overwrite CheckBox: This checkbox determines whether to skip files that already exist in the target directory."] =
    ("Case Ne pas remplacer : ignore les fichiers existants.",
     "Nicht-überschreiben-CheckBox: Überspringt vorhandene Dateien.",
     "Casilla No sobrescribir: omite los archivos que ya existen.",
     "Casella di controllo Non sovrascrivere: ignora i file già esistenti nella cartella di destinazione.",
     "Caixa de verificação Não substituir: ignora os ficheiros que já existem na pasta de destino.",
     "Caixa de seleção Não sobrescrever: ignora os arquivos que já existem na pasta de destino.",
     "Aanvinkvakje Niet overschrijven: slaat bestanden die al in de doelmap bestaan over.",
     "Kryssruta Skriv inte över: hoppar över filer som redan finns i målmappen.",
     "Avkrysningsboks Ikke overskriv: hopper over filer som allerede finnes i målappen.",
     "Markeringsfelt Ikke overskriv: springer over filer, der allerede findes i målmappen.",
     "Valintaruutu Älä korvaa: ohittaa tiedostot, jotka ovat jo kohdehakemistossa.",
     "Pole wyboru Nie nadpisuj: pomija pliki, które już istnieją w katalogu docelowym.",
     "Zaškrtávací pole Nepřepisovat: přeskočí soubory, které již v cílové složce existují.",
     "Jelölőnégyzet Ne írja felül: kihagyja azokat a fájlokat, amelyek már léteznek a célkönyvtárban.",
     "Casetă de selectare Nu suprascrie: ignoră fișierele care există deja în directorul țintă."),

                    ["Keep Empty Folders CheckBox: This checkbox determines whether to keep empty folders in the target directory after the operation."] =
    ("Case Garder dossiers vides : conserve les dossiers vides.",
     "Leere-Ordner-behalten-CheckBox: Behält leere Ordner bei.",
     "Casilla Mantener carpetas vacías: mantiene las carpetas vacías.",
     "Casella di controllo Mantieni cartelle vuote: mantiene le cartelle vuote dopo l’operazione.",
     "Caixa de verificação Manter pastas vazias: mantém as pastas vazias no diretório de destino.",
     "Caixa de seleção Manter pastas vazias: mantém as pastas vazias no diretório de destino.",
     "Aanvinkvakje Lege mappen behouden: behoudt lege mappen in de doelmap na de bewerking.",
     "Kryssruta Behåll tomma mappar: behåller tomma mappar i målmappen efter åtgärden.",
     "Avkrysningsboks Behold tomme mapper: beholder tomme mapper i målappen etter operasjonen.",
     "Markeringsfelt Behold tomme mapper: beholder tomme mapper i målmappen efter handlingen.",
     "Valintaruutu Säilytä tyhjät kansiot: säilyttää tyhjät kansiot kohdehakemistossa toimenpiteen jälkeen.",
     "Pole wyboru Zachowaj puste foldery: zachowuje puste foldery w katalogu docelowym po operacji.",
     "Zaškrtávací pole Zachovat prázdné složky: zachová prázdné složky v cílovém adresáři po operaci.",
     "Jelölőnégyzet Üres mappák megtartása: megtartja az üres mappákat a művelet után a célkönyvtárban.",
     "Casetă de selectare Păstrare foldere goale: păstrează folderele goale în directorul țintă după operațiune."),

                    ["Keep Directory Structure CheckBox: This checkbox determines whether to keep the directory structure of the source files in the target directory."] =
    ("Case Garder structure dossiers : conserve la structure complète.",
     "Verzeichnisstruktur-beibehalten-CheckBox: Behält die Struktur bei.",
     "Casilla Mantener estructura de carpetas: mantiene la estructura completa.",
     "Casella di controllo Mantieni struttura cartelle: mantiene la struttura completa delle cartelle di origine.",
     "Caixa de verificação Manter estrutura de pastas: mantém a estrutura completa das pastas de origem.",
     "Caixa de seleção Manter estrutura de pastas: mantém a estrutura completa das pastas de origem.",
     "Aanvinkvakje Mapstructuur behouden: behoudt de mappenstructuur van de bronbestanden in de doelmap.",
     "Kryssruta Behåll katalogstruktur: behåller katalogstrukturen för källfilerna i målmappen.",
     "Avkrysningsboks Behold katalogstruktur: beholder katalogstrukturen til kildefilene i målappen.",
     "Markeringsfelt Behold mappestruktur: beholder mappestrukturen for kildefilerne i målmappen.",
     "Valintaruutu Säilytä hakemistorakenne: säilyttää lähdehakemistojen rakenteen kohdehakemistossa.",
     "Pole wyboru Zachowaj strukturę katalogów: zachowuje strukturę katalogów plików źródłowych w katalogu docelowym.",
     "Zaškrtávací pole Zachovat strukturu adresářů: zachová strukturu adresářů zdrojových souborů v cílovém adresáři.",
     "Jelölőnégyzet Könyvtárstruktúra megtartása: megtartja a forrásfájlok könyvtárstruktúráját a célkönyvtárban.",
     "Casetă de selectare Păstrare structură directoare: păstrează structura directorului fișierelor sursă în directorul țintă."),




                    ["Create Custom Directory Prior CheckBox: This checkbox determines whether to create a custom directory structure in the target directory based on the source files."] =
    ("Case Créer arborescence personnalisée : crée une structure personnalisée.",
     "Benutzerdefinierte-Ordnerstruktur-CheckBox: Erstellt eine angepasste Struktur.",
     "Casilla Crear estructura personalizada: crea una estructura personalizada.",
     "Casella di controllo Crea struttura personalizzata: crea una struttura personalizzata nel percorso di destinazione.",
     "Caixa de verificação Criar estrutura personalizada: cria uma estrutura personalizada no diretório de destino.",
     "Caixa de seleção Criar estrutura personalizada: cria uma estrutura personalizada no diretório de destino.",
     "Aanvinkvakje Aangepaste mapstructuur maken: maakt een aangepaste mapstructuur in de doelmap op basis van bronbestanden.",
     "Kryssruta Skapa anpassad katalogstruktur: skapar en anpassad katalogstruktur i målmappen baserat på källfiler.",
     "Avkrysningsboks Opprett egendefinert katalogstruktur: oppretter en egendefinert katalogstruktur i målappen basert på kildefiler.",
     "Markeringsfelt Opret brugerdefineret mappestruktur: opretter en brugerdefineret mappestruktur i målmappen baseret på kildefiler.",
     "Valintaruutu Luo mukautettu hakemistorakenne: luo mukautetun hakemistorakenteen kohdehakemistoon lähdetiedostojen perusteella.",
     "Pole wyboru Utwórz niestandardową strukturę katalogów: tworzy niestandardową strukturę katalogów w katalogu docelowym na podstawie plików źródłowych.",
     "Zaškrtávací pole Vytvořit vlastní strukturu adresářů: vytvoří vlastní strukturu adresářů v cílovém adresáři na základě zdrojových souborů.",
     "Jelölőnégyzet Egyéni könyvtárstruktúra létrehozása: egyéni könyvtárstruktúrát hoz létre a célkönyvtárban a forrásfájlok alapján.",
     "Casetă de selectare Creare structură directoare personalizată: creează o structură personalizată în directorul țintă pe baza fișierelor sursă."),

                    ["Copy Only Files CheckBox: This checkbox determines whether to copy files and no directories from the source directory to the target directory."] =
    ("Case Copier uniquement fichiers : copie uniquement les fichiers.",
     "Nur-Dateien-kopieren-CheckBox: Kopiert nur Dateien, keine Ordner.",
     "Casilla Copiar solo archivos: copia solo archivos, no carpetas.",
     "Casella di controllo Copia solo file: copia solo file e nessuna cartella dalla cartella di origine a quella di destinazione.",
     "Caixa de verificação Copiar apenas ficheiros: copia apenas ficheiros e não pastas do diretório de origem para o de destino.",
     "Caixa de seleção Copiar apenas arquivos: copia apenas arquivos e não pastas do diretório de origem para o de destino.",
     "Aanvinkvakje Alleen bestanden kopiëren: kopieert alleen bestanden en geen mappen van bronmap naar doelmap.",
     "Kryssruta Kopiera endast filer: kopierar endast filer och inga mappar från källmappen till målmappen.",
     "Avkrysningsboks Kopier bare filer: kopierer bare filer og ingen mapper fra kilde- til målmappe.",
     "Markeringsfelt Kopiér kun filer: kopierer kun filer og ingen mapper fra kilde- til målmappe.",
     "Valintaruutu Kopioi vain tiedostot: kopioi vain tiedostot eikä kansioita lähdehakemistosta kohdehakemistoon.",
     "Pole wyboru Kopiuj tylko pliki: kopiuje tylko pliki, a nie foldery z katalogu źródłowego do docelowego.",
     "Zaškrtávací pole Kopírovat pouze soubory: zkopíruje pouze soubory, žádné složky ze zdrojového adresáře do cílového.",
     "Jelölőnégyzet Csak fájlok másolása: csak fájlokat másol, könyvtárakat nem a forráskönyvtárból a célkönyvtárba.",
     "Casetă de selectare Copiere doar fișiere: copiază doar fișierele și nu directoarele din directorul sursă în directorul țintă."),

                    ["Keep Only Files CheckBox: This checkbox determines whether to keep ONLY files inside the main directory."] =
    ("Case Garder uniquement fichiers : ne conserve que les fichiers.",
     "Nur-Dateien-behalten-CheckBox: Behält nur Dateien im Hauptordner.",
     "Casilla Mantener solo archivos: conserva solo archivos en la carpeta principal.",
     "Casella di controllo Mantieni solo file: mantiene SOLO file all’interno della directory principale.",
     "Caixa de verificação Manter apenas ficheiros: mantém APENAS ficheiros dentro da pasta principal.",
     "Caixa de seleção Manter apenas arquivos: mantém APENAS arquivos dentro da pasta principal.",
     "Aanvinkvakje Alleen bestanden behouden: behoudt ALLEEN bestanden binnen de hoofdmap.",
     "Kryssruta Behåll endast filer: behåller ENDAST filer inuti huvudmappen.",
     "Avkrysningsboks Behold bare filer: beholder KUN filer inni hovedmappen.",
     "Markeringsfelt Behold kun filer: beholder KUN filer inde i hovedmappen.",
     "Valintaruutu Säilytä vain tiedostot: säilyttää VAIN tiedostot päähakemistossa.",
     "Pole wyboru Zachowaj tylko pliki: zachowuje TYLKO pliki wewnątrz głównego katalogu.",
     "Zaškrtávací pole Ponechat pouze soubory: ponechá POUCZE soubory uvnitř hlavní složky.",
     "Jelölőnégyzet Csak fájlok megtartása: CSAK a fájlokat tartja meg a főkönyvtárban.",
     "Casetă de selectare Păstrează doar fișierele: păstrează DOAR fișierele din directorul principal."),

                    ["Home Page Tab: This tab contains the main interface for file operations such as copy, move, and secure delete."] =
    ("Onglet Page d’accueil : contient l’interface principale pour copier, déplacer, supprimer.",
     "Startseite-Tab: Enthält die Hauptoberfläche für Kopieren, Verschieben, Sicheres Löschen.",
     "Pestaña Página principal: contiene la interfaz principal para copiar, mover, borrar de forma segura.",
     "Scheda Pagina iniziale: contiene l’interfaccia principale per le operazioni di copia, spostamento ed eliminazione sicura.",
     "Separador Página inicial: contém a interface principal para copiar, mover e eliminar de forma segura.",
     "Guia Página inicial: contém a interface principal para copiar, mover e excluir com segurança.",
     "Tabblad Startpagina: bevat de hoofdinterface voor kopiëren, verplaatsen en veilig verwijderen.",
     "Flik Startsida: innehåller huvudgränssnittet för kopiera, flytta och säker borttagning.",
     "Fane Forside: inneholder hovedgrensesnittet for kopier, flytt og sikker sletting.",
     "Fane Startside: indeholder hovedgrænsefladen for kopiér, flyt og sikker sletning.",
     "Kotisivu-välilehti: sisältää pääkäyttöliittymän kopiointiin, siirtämiseen ja turvalliseen poistamiseen.",
     "Zakładka Strona główna: zawiera główny interfejs do kopiowania, przenoszenia i bezpiecznego usuwania.",
     "Záložka Domovská stránka: obsahuje hlavní rozhraní pro kopírování, přesun a bezpečné mazání.",
     "Főoldal lap: tartalmazza a másoláshoz, áthelyezéshez és biztonságos törléshez tartozó fő felületet.",
     "Filă Pagină principală: conține interfața principală pentru operațiunile de copiere, mutare și ștergere sigură."),

                    ["Copy That v1.0 Pro By: Havoc - Home"] =
    ("Copy That v1.0 Pro Par: Havoc - Accueil",
     "Copy That v1.0 Pro Von: Havoc - Startseite",
     "Copy That v1.0 Pro Por: Havoc - Inicio",
     "Copy That v1.0 Pro Di: Havoc - Pagina iniziale",
     "Copy That v1.0 Pro Por: Havoc - Página inicial",
     "Copy That v1.0 Pro Por: Havoc - Página inicial",
     "Copy That v1.0 Pro Door: Havoc - Startpagina",
     "Copy That v1.0 Pro Av: Havoc - Startsida",
     "Copy That v1.0 Pro Av: Havoc - Forside",
     "Copy That v1.0 Pro Af: Havoc - Startside",
     "Copy That v1.0 Pro Tekijä: Havoc - Kotisivu",
     "Copy That v1.0 Pro Przez: Havoc - Strona główna",
     "Copy That v1.0 Pro Od: Havoc - Domovská stránka",
     "Copy That v1.0 Pro Készítette: Havoc - Főoldal",
     "Copy That v1.0 Pro De: Havoc - Pagina principală"),

                    ["Copy That v1.0 By: Havoc - Home"] =
    ("Copy That v1.0 Par: Havoc - Accueil",
     "Copy That v1.0 Von: Havoc - Startseite",
     "Copy That v1.0 Por: Havoc - Inicio",
     "Copy That v1.0 Di: Havoc - Pagina iniziale",
     "Copy That v1.0 Por: Havoc - Página inicial",
     "Copy That v1.0 Por: Havoc - Página inicial",
     "Copy That v1.0 Door: Havoc - Startpagina",
     "Copy That v1.0 Av: Havoc - Startsida",
     "Copy That v1.0 Av: Havoc - Forside",
     "Copy That v1.0 Af: Havoc - Startside",
     "Copy That v1.0 Tekijä: Havoc - Kotisivu",
     "Copy That v1.0 Przez: Havoc - Strona główna",
     "Copy That v1.0 Od: Havoc - Domovská stránka",
     "Copy That v1.0 Készítette: Havoc - Főoldal",
     "Copy That v1.0 De: Havoc - Pagina principală"),

                    ["Copy That v1.0 By: Havoc - This is the title of the application, which reflects the current operation."] =
    ("Copy That v1.0 Par: Havoc – titre de l’application reflétant l’opération en cours.",
     "Copy That v1.0 Von: Havoc – Anwendungstitel, der den aktuellen Vorgang widerspiegelt.",
     "Copy That v1.0 Por: Havoc – título de la aplicación que refleja la operación actual.",
     "Copy That v1.0 Di: Havoc – titolo dell’applicazione che riflette l’operazione corrente.",
     "Copy That v1.0 Por: Havoc – título da aplicação que reflete a operação atual.",
     "Copy That v1.0 Por: Havoc – título do aplicativo que reflete a operação atual.",
     "Copy That v1.0 Door: Havoc – applicatietitel die de huidige bewerking weergeeft.",
     "Copy That v1.0 Av: Havoc – applikationens titel som speglar den aktuella åtgärden.",
     "Copy That v1.0 Av: Havoc – tittel på applikasjonen som reflekterer gjeldende operasjon.",
     "Copy That v1.0 Af: Havoc – programmets titel, der afspejler den aktuelle operation.",
     "Copy That v1.0 Tekijä: Havoc – sovelluksen otsikko, joka heijastaa nykyistä toimenpidettä.",
     "Copy That v1.0 Przez: Havoc – tytuł aplikacji odzwierciedlający bieżącą operację.",
     "Copy That v1.0 Od: Havoc – titul aplikace odrážející aktuální operaci.",
     "Copy That v1.0 Készítette: Havoc – az alkalmazás címe, amely tükrözi a jelenlegi műveletet.",
     "Copy That v1.0 De: Havoc – titlul aplicației care reflectă operațiunea curentă."),




                    ["Current File Path: This label shows the path of the currently processed file in the operation."] =
    ("Chemin du fichier actuel : affiche le chemin du fichier en cours de traitement.",
     "Aktueller-Dateipfad-Label: Zeigt den Pfad der gerade verarbeiteten Datei.",
     "Ruta del archivo actual: muestra la ruta del archivo que se está procesando.",
     "Etichetta Percorso file corrente: mostra il percorso del file attualmente elaborato.",
     "Etiqueta Caminho do ficheiro atual: mostra o caminho do ficheiro a ser processado na operação.",
     "Etiqueta Caminho do arquivo atual: mostra o caminho do arquivo sendo processado na operação.",
     "Label Huidige bestandspad: toont het pad van het bestand dat momenteel wordt verwerkt.",
     "Etikett Nuvarande filsökväg: visar sökvägen till filen som bearbetas i åtgärden.",
     "Etikett Gjeldende filbane: viser banen til filen som behandles i operasjonen.",
     "Label Nuværende filsti: viser stien til filen, der behandles i handlingen.",
     "Nykyisen tiedoston polku -tarra: näyttää parhaillaan käsiteltävän tiedoston polun toimenpiteessä.",
     "Etykieta Bieżąca ścieżka pliku: pokazuje ścieżkę pliku aktualnie przetwarzanego w operacji.",
     "Štítek Aktuální cesta souboru: zobrazuje cestu k souboru, který je aktuálně zpracováván v operaci.",
     "Jelenlegi fájl elérési útja címke: megjeleníti a művelet során feldolgozás alatt álló fájl elérési útját.",
     "Etichetă Cale fișier curent: afișează calea fișierului procesat în operațiunea curentă."),

                    ["Current Source Directory: This label shows the path of the source directory from which files will be copied/moved/securely deleted."] =
    ("Répertoire source actuel : affiche le chemin du dossier source depuis lequel les fichiers seront copiés/déplacés/supprimés de façon sécurisée.",
     "Aktuelles-Quellverzeichnis-Label: Zeigt den Pfad des Quellordners an, aus dem Dateien kopiert/verschoben/sicher gelöscht werden.",
     "Directorio de origen actual: muestra la ruta de la carpeta de origen desde la que se copiarán/moverán/borrarán de forma segura los archivos.",
     "Etichetta Cartella di origine corrente: mostra il percorso della cartella di origine da cui copiare/spostare/eliminare in modo sicuro i file.",
     "Etiqueta Diretório de origem atual: mostra o caminho da pasta de origem da qual os ficheiros serão copiados/movidos/eliminados de forma segura.",
     "Etiqueta Diretório de origem atual: mostra o caminho da pasta de origem de onde os arquivos serão copiados/movidos/excluídos com segurança.",
     "Label Huidige bronmap: toont het pad van de bronmap waaruit bestanden worden gekopieerd/verplaatst/veilig verwijderd.",
     "Etikett Nuvarande källmapp: visar sökvägen till källmappen som filer ska kopieras/flyttas/säkert raderas från.",
     "Etikett Gjeldende kildemappe: viser banen til kildemappen som filer skal kopieres/flyttes/slettes sikkert fra.",
     "Label Nuværende kilde mappe: viser stien til kildemappen, hvorfra filer kopieres/flyttes/slettes sikkert.",
     "Nykyisen lähdehakemiston tarra: näyttää hakemiston polun, josta tiedostot kopioidaan/siirretään/poistetaan turvallisesti.",
     "Etykieta Bieżący katalog źródłowy: pokazuje ścieżkę katalogu źródłowego, z którego pliki będą kopiowane/przenoszone/bezpiecznie usuwane.",
     "Štítek Aktuální zdrojový adresář: zobrazuje cestu ke zdrojovému adresáři, ze kterého budou soubory kopírovány/přesunuty/bezpečně smazány.",
     "Jelenlegi forráskönyvtár címke: megjeleníti a forráskönyvtár elérési útját, ahonnan a fájlok másolása/áthelyezése/biztonságos törlése történik.",
     "Etichetă Director sursă curent: afișează calea directorului sursă din care fișierele vor fi copiate/mutate/șterse în siguranță."),

                    ["Current Target Directory: This label shows the path of the target directory to which files will be copied/moved."] =
    ("Répertoire cible actuel : affiche le chemin du dossier de destination.",
     "Aktuelles-Zielverzeichnis-Label: Zeigt den Pfad des Zielordners an.",
     "Directorio de destino actual: muestra la ruta de la carpeta de destino.",
     "Etichetta Cartella di destinazione corrente: mostra il percorso della cartella di destinazione.",
     "Etiqueta Diretório de destino atual: mostra o caminho da pasta de destino.",
     "Etiqueta Diretório de destino atual: mostra o caminho da pasta de destino.",
     "Label Huidige doelmap: toont het pad van de doelmap.",
     "Etikett Nuvarande målmapp: visar sökvägen till målmappen.",
     "Etikett Gjeldende målmappe: viser banen til målmappe.",
     "Label Nuværende mål mappe: viser stien til mål mappen.",
     "Nykyisen kohdehakemiston tarra: näyttää kohdehakemiston polun.",
     "Etykieta Bieżący katalog docelowy: pokazuje ścieżkę katalogu docelowego.",
     "Štítek Aktuální cílový adresář: zobrazuje cestu k cílovému adresáři.",
     "Jelenlegi célkönyvtár címke: megjeleníti a célkönyvtár elérési útját.",
     "Etichetă Director țintă curent: afișează calea directorului țintă."),

                    ["Current File Icon: This picture box shows the icon of the currently processed file in the operation."] =
    ("Icône du fichier actuel : cette zone affiche l’icône du fichier en cours de traitement.",
     "Aktuelles-Dateisymbol-PictureBox: Diese PictureBox zeigt das Symbol der gerade bearbeiteten Datei.",
     "Icono del archivo actual: este cuadro muestra el icono del archivo que se está procesando.",
     "Icona file corrente: questa picture box mostra l’icona del file attualmente elaborato.",
     "Ícone do ficheiro atual: esta picture box mostra o ícone do ficheiro a ser processado.",
     "Ícone do arquivo atual: esta picture box mostra o ícone do arquivo sendo processado.",
     "Huidige bestandspictogram PictureBox: dit vak toont het pictogram van het bestand dat momenteel wordt verwerkt.",
     "Nuvarande filikon PictureBox: denna ruta visar ikonen för filen som bearbetas i åtgärden.",
     "Gjeldende filikon PictureBox: denne boksen viser ikonet til filen som behandles i operasjonen.",
     "Nuværende filikon PictureBox: denne boks viser ikonet for den fil, der behandles i handlingen.",
     "Nykyisen tiedoston kuvake PictureBox: tämä laatikko näyttää parhaillaan käsiteltävän tiedoston kuvakkeen.",
     "Ikona bieżącego pliku PictureBox: to pole wyświetla ikonę pliku aktualnie przetwarzanego w operacji.",
     "Ikona aktuálního souboru PictureBox: toto pole zobrazuje ikonu souboru, který je aktuálně zpracováván v operaci.",
     "Jelenlegi fájl ikonja PictureBox: ez a mező megjeleníti a művelet során feldolgozás alatt álló fájl ikonját.",
     "Pictograma fișierului curent PictureBox: această casetă afișează pictograma fișierului procesat în operațiunea curentă."),

                    ["Overwrite If Newer: This checkbox determines whether to overwrite files only if the source file is newer than the destination file."] =
    ("Remplacer si plus récent : écrase uniquement si la source est plus récente.",
     "Überschreiben-wenn-neuer: Überschreibt nur, wenn die Quelldatei neuer ist.",
     "Sobrescribir si es más nuevo: sobrescribe solo si el origen es más reciente.",
     "Sovrascrivi se più recente: sovrascrive solo se il file sorgente è più recente.",
     "Substituir se mais recente: substitui apenas se o ficheiro de origem for mais recente.",
     "Sobrescrever se mais recente: sobrescreve apenas se o arquivo de origem for mais recente.",
     "Overschrijven indien nieuwer: overschrijft alleen als het bronbestand nieuwer is.",
     "Skriv över om nyare: skriver bara över om källfilen är nyare.",
     "Overskriv hvis nyere: overskriver bare hvis kildefilen er nyere.",
     "Overskriv hvis nyere: overskriver kun hvis kildefilen er nyere.",
     "Korvaa, jos uudempi: korvaa vain, jos lähde on uudempi.",
     "Nadpisz, jeśli nowszy: nadpisuje tylko jeśli plik źródłowy jest nowszy.",
     "Přepsat, pokud novější: přepíše pouze v případě, že zdrojový soubor je novější.",
     "Felülír, ha újabb: csak akkor írja felül, ha a forrásfájl újabb.",
     "Suprascriere dacă este mai nou: suprascrie numai dacă fișierul sursă este mai nou."),

                    ["File Progress Bar: This progress bar shows the progress of the current file being processed in the operation."] =
    ("Barre de progression du fichier : indique l’avancement du fichier en cours.",
     "Datei-Fortschrittsbalken: Zeigt den Fortschritt der gerade bearbeiteten Datei.",
     "Barra de progreso del archivo: muestra el avance del archivo que se está procesando.",
     "Barra di avanzamento file: mostra l’avanzamento del file attualmente elaborato.",
     "Barra de progresso do ficheiro: mostra o progresso do ficheiro a ser processado.",
     "Barra de progresso do arquivo: mostra o progresso do arquivo sendo processado.",
     "Voortgangsbalk Bestand: toont de voortgang van het bestand dat momenteel wordt verwerkt.",
     "Förloppsindikator för fil: visar framstegen för filen som bearbetas i åtgärden.",
     "Fremdriftslinje for fil: viser fremgangen til filen som behandles i operasjonen.",
     "Fil-fremdringslinje: viser fremskridtet for den fil, der behandles i handlingen.",
     "Tiedoston edistymispalkki: näyttää parhaillaan käsiteltävän tiedoston edistymisen toimenpiteessä.",
     "Pasek postępu pliku: pokazuje postęp aktualnie przetwarzanego pliku w operacji.",
     "Ukazatel průběhu souboru: zobrazuje průběh souboru, který je aktuálně zpracováván v operaci.",
     "Fájl folyamatjelző sáv: megjeleníti a művelet során feldolgozás alatt álló fájl előrehaladását.",
     "Bară de progres fișier: afișează progresul fișierului procesat în operațiunea curentă."),

                    ["File Progress Label: This label shows the percentage of progress for the current file being processed in the operation."] =
    ("Étiquette progression fichier : affiche le pourcentage d’avancement du fichier actuel.",
     "Datei-Fortschritt-Label: Zeigt den Prozentwert des Fortschritts der aktuellen Datei.",
     "Etiqueta de progreso del archivo: muestra el porcentaje de avance del archivo actual.",
     "Etichetta Avanzamento file: mostra la percentuale di avanzamento del file attualmente elaborato.",
     "Etiqueta Progresso do ficheiro: mostra a percentagem de progresso do ficheiro a ser processado.",
     "Etiqueta Progresso do arquivo: mostra a porcentagem de progresso do arquivo sendo processado.",
     "Label Bestandsvoortgang: toont het percentage voortgang van het bestand dat momenteel wordt verwerkt.",
     "Etikett Filförlopp: visar procentandelen av framstegen för filen som bearbetas.",
     "Etikett Filfremdrift: viser prosentandelen av fremgangen til filen som behandles.",
     "Label Filfremgang: viser procentdelen af fremskridtet for den fil, der behandles.",
     "Tiedoston edistymisen tarra: näyttää parhaillaan käsiteltävän tiedoston edistymisen prosenttiosuuden.",
     "Etykieta Postęp pliku: pokazuje procent postępu aktualnie przetwarzanego pliku w operacji.",
     "Štítek Průběh souboru: zobrazuje procentuální průběh souboru, který je aktuálně zpracováván.",
     "Fájl folyamat címke: megjeleníti a művelet során feldolgozás alatt álló fájl előrehaladási százalékát.",
     "Etichetă Progres fișier: afișează procentul de progres al fișierului procesat în operațiunea curentă."),

                    ["Total Progress Bar: This progress bar shows the overall progress of the operation across all files being processed."] =
    ("Barre de progression totale : indique l’avancement global de l’opération sur tous les fichiers.",
     "Gesamt-Fortschrittsbalken: Zeigt den Gesamtfortschritt der Operation über alle Dateien.",
     "Barra de progreso total: muestra el avance general de la operación en todos los archivos.",
     "Barra di avanzamento totale: mostra l’avanzamento complessivo dell’operazione su tutti i file elaborati.",
     "Barra de progresso total: mostra o progresso geral da operação em todos os ficheiros processados.",
     "Barra de progresso total: mostra o progresso geral da operação em todos os arquivos processados.",
     "Voortgangsbalk Totaal: toont de algehele voortgang van de bewerking voor alle bestanden die worden verwerkt.",
     "Totala framstegsindikatorn: visar den övergripande framstegen för åtgärden över alla bearbetade filer.",
     "Total fremdriftslinje: viser den totale fremgangen til operasjonen over alle filer som behandles.",
     "Samlede fremdringslinje: viser den samlede fremgang for handlingen på tværs af alle filer, der behandles.",
     "Kokonaisprogressipalkki: näyttää toimenpiteen kokonaisprogressin kaikissa käsiteltävissä tiedostoissa.",
     "Pasek postępu całkowitego: pokazuje ogólny postęp operacji we wszystkich przetwarzanych plikach.",
     "Ukazatel celkového průběhu: zobrazuje celkový průběh operace napříč všemi zpracovávanými soubory.",
     "Teljes folyamatjelző sáv: megjeleníti a művelet teljes előrehaladását az összes feldolgozás alatt álló fájlban.",
     "Bară de progres total: afișează progresul general al operațiunii pentru toate fișierele procesate."),






                    ["Total Progress Label: This label shows the percentage of overall progress for the operation across all files being processed."] =
    ("Étiquette progression totale : affiche le pourcentage de progression global.",
     "Gesamt-Fortschritt-Label: Zeigt den Prozentwert des Gesamtfortschritts.",
     "Etiqueta de progreso total: muestra el porcentaje de avance general.",
     "Etichetta Avanzamento totale: mostra la percentuale di avanzamento complessivo dell’operazione.",
     "Etiqueta Progresso total: mostra a percentagem de progresso geral da operação.",
     "Etiqueta Progresso total: mostra a porcentagem de progresso geral da operação.",
     "Label Totale voortgang: toont het percentage van de algehele voortgang van de bewerking.",
     "Etikett Totala framsteg: visar procentandelen av den totala framstegen för åtgärden.",
     "Etikett Total fremdrift: viser prosentandelen av den totale fremgangen for operasjonen.",
     "Label Samlet fremgang: viser procentdelen af den samlede fremgang for handlingen.",
     "Kokonaisprogressin tarra: näyttää toimenpiteen kokonaisprogressin prosenttiosuuden kaikissa käsiteltävissä tiedostoissa.",
     "Etykieta Całkowity postęp: pokazuje procent ogólnego postępu operacji we wszystkich przetwarzanych plikach.",
     "Štítek Celkový průběh: zobrazuje procento celkového průběhu operace napříč všemi zpracovávanými soubory.",
     "Teljes folyamat címke: megjeleníti a művelet teljes előrehaladási százalékát az összes feldolgozás alatt álló fájlban.",
     "Etichetă Progres total: afișează procentul de progres general al operațiunii pentru toate fișierele procesate."),

                    ["Search Text Box: This text box allows you to search for specific files in the file list. Type a keyword to filter the displayed files."] =
    ("Zone de recherche : permet de filtrer la liste des fichiers en tapant un mot-clé.",
     "Such-Textbox: Ermöglicht das Filtern der Dateiliste durch Eingabe eines Stichworts.",
     "Cuadro de búsqueda: permite filtrar la lista de archivos escribiendo una palabra clave.",
     "Casella di testo Ricerca: consente di cercare file specifici nella lista digitando una parola chiave.",
     "Caixa de texto Pesquisar: permite procurar ficheiros específicos na lista digitando uma palavra-chave.",
     "Caixa de texto Pesquisar: permite procurar arquivos específicos na lista digitando uma palavra-chave.",
     "Tekstvak Zoeken: laat u specifieke bestanden in de lijst zoeken door een trefwoord in te typen.",
     "Sökruta: låter dig söka efter specifika filer i listan genom att skriva ett nyckelord.",
     "Søketekstboks: lar deg søke etter spesifikke filer i listen ved å skrive et nøkkelord.",
     "Søgetekstboks: lader dig søge efter specifikke filer i listen ved at skrive et nøgleord.",
     "Hakutekstilaatikko: mahdollistaa tiettyjen tiedostojen etsimisen luettelosta kirjoittamalla avainsanan.",
     "Pole tekstowe Szukaj: pozwala wyszukiwać konkretne pliki na liście poprzez wpisanie słowa kluczowego.",
     "Textové pole Hledat: umožňuje vyhledat konkrétní soubory v seznamu zadáním klíčového slova.",
     "Keresési szövegmező: lehetővé teszi adott fájlok keresését a listában kulcsszó begépelésével.",
     "Casetă text Căutare: permite căutarea fișierelor specifice în listă prin introducerea unui cuvânt cheie."),

                    ["Clear Text Button: This button clears the text in the search box, allowing you to reset the search filter and view all files in the list."] =
    ("Bouton Effacer texte : vide la zone de recherche pour réafficher tous les fichiers.",
     "Text-löschen-Schaltfläche: Leert das Suchfeld, damit wieder alle Dateien angezeigt werden.",
     "Botón Borrar texto: vacía el cuadro de búsqueda para volver a mostrar todos los archivos.",
     "Pulsante Cancella testo: cancella il testo nella casella di ricerca per reimpostare il filtro e visualizzare tutti i file.",
     "Botão Limpar texto: limpa a caixa de texto de pesquisa, permitindo redefinir o filtro e ver todos os ficheiros.",
     "Botão Limpar texto: limpa a caixa de texto de pesquisa, permitindo redefinir o filtro e ver todos os arquivos.",
     "Knop Tekst wissen: wist de tekst in het zoekvak zodat het filter wordt gereset en alle bestanden worden getoond.",
     "Rensa text-knapp: rensar textrutan och återställer filtret så att alla filer visas.",
     "Tøm tekst-knapp: tømmer tekstboksen og tilbakestiller filteret slik at alle filer vises.",
     "Ryd tekst-knap: rydder tekstboksen og nulstiller filteret, så alle filer vises.",
     "Tyhjennä teksti -painike: tyhjentää hakulaatikon, jolloin suodatin nollautuu ja kaikki tiedostot näkyvät.",
     "Przycisk Wyczyść tekst: czyści pole tekstowe wyszukiwania, pozwalając zresetować filtr i wyświetlić wszystkie pliki.",
     "Tlačítko Vymazat text: vymaže text v poli vyhledávání, čímž resetuje filtr a zobrazí všechny soubory.",
     "Szöveg törlése gomb: törli a keresőmező szövegét, így visszaállítja a szűrőt és az összes fájl megjelenik.",
     "Buton Ștergere text: șterge textul din caseta de căutare, permițând resetarea filtrului și vizualizarea tuturor fișierelor."),

                    ["Files Up Button: This button allows you to move the selected file up in the list, changing its order in the operation sequence."] =
    ("Bouton Monter : déplace le fichier sélectionné vers le haut dans la liste.",
     "Nach-oben-Schaltfläche: Verschiebt die markierte Datei eine Position nach oben.",
     "Botón Subir: mueve el archivo seleccionado hacia arriba en la lista.",
     "Pulsante Su: sposta il file selezionato verso l’alto nella lista, modificando il suo ordine nella sequenza operativa.",
     "Botão Mover para cima: move o ficheiro selecionado para cima na lista, alterando a sua ordem na sequência da operação.",
     "Botão Mover para cima: move o arquivo selecionado para cima na lista, alterando sua ordem na sequência da operação.",
     "Knop Omhoog: verplaatst het geselecteerde bestand omhoog in de lijst en wijzigt daarmee de volgorde.",
     "Knapp Upp: flyttar den valda filen uppåt i listan och ändrar dess ordning i åtgärdsskedjan.",
     "Knapp Opp: flytter den valgte filen opp i listen og endrer rekkefølgen i operasjonen.",
     "Knap Op: flytter den valgte fil op i listen og ændrer dermed rækkefølgen i handlingen.",
     "Ylös-painike: siirtää valitun tiedoston ylöspäin listassa ja muuttaa sen järjestystä toimenpidesarjassa.",
     "Przycisk Do góry: przesuwa wybrany plik w górę listy, zmieniając jego kolejność w sekwencji operacji.",
     "Tlačítko Nahoru: posune vybraný soubor v seznamu nahoru a změní tak jeho pořadí v operaci.",
     "Fel gomb: felfelé mozgatja a kijelölt fájlt a listában, megváltoztatva annak sorrendjét a műveletben.",
     "Buton Sus: mută fișierul selectat în sus în listă, schimbând ordinea sa în secvența operațiunii."),

                    ["Files Down Button: This button allows you to move the selected file down in the list, changing its order in the operation sequence."] =
    ("Bouton Descendre : déplace le fichier sélectionné vers le bas dans la lista.",
     "Nach-unten-Schaltfläche: Verschiebt die markierte Datei eine Position nach unten.",
     "Botón Bajar: mueve el archivo seleccionado hacia abajo en la lista.",
     "Pulsante Giù: sposta il file selezionato verso il basso nella lista, modificando il suo ordine nella sequenza operativa.",
     "Botão Mover para baixo: move o ficheiro selecionado para baixo na lista, alterando a sua ordem na sequência da operação.",
     "Botão Mover para baixo: move o arquivo selecionado para baixo na lista, alterando sua ordem na sequência da operação.",
     "Knop Omlaag: verplaatst het geselecteerde bestand omlaag in de lijst en wijzigt daarmee de volgorde.",
     "Knapp Ner: flyttar den valda filen nedåt i listan och ändrar dess ordning i åtgärdsskedjan.",
     "Knapp Ned: flytter den valgte filen ned i listen og endrer rekkefølgen i operasjonen.",
     "Knap Ned: flytter den valgte fil ned i listen og ændrer dermed rækkefølgen i handlingen.",
     "Alas-painike: siirtää valitun tiedoston alaspäin listassa ja muuttaa sen järjestystä toimenpidesarjassa.",
     "Przycisk W dół: przesuwa wybrany plik w dół listy, zmieniając jego kolejność w sekwencji operacji.",
     "Tlačítko Dolů: posune vybraný soubor v seznamu dolů a změní tak jeho pořadí v operaci.",
     "Le gomb: lefelé mozgatja a kijelölt fájlt a listában, megváltoztatva annak sorrendjét a műveletben.",
     "Buton Jos: mută fișierul selectat în jos în listă, schimbând ordinea sa în secvența operațiunii."),

                    ["Files Data Grid View: This grid displays the list of files to be processed in the current operation, including their names, paths, sizes, and statuses."] =
    ("Grille des fichiers : affiche la liste des fichiers à traiter avec nom, chemin, taille et état.",
     "Datei-DataGridView: Zeigt die zu bearbeitenden Dateien mit Name, Pfad, Größe und Status.",
     "Cuadrícula de archivos: muestra la lista de archivos a procesar con nombre, ruta, tamaño y estado.",
     "Griglia Dati file: mostra l’elenco dei file da elaborare con nome, percorso, dimensione e stato.",
     "Grelha de Dados de ficheiros: mostra a lista de ficheiros a processar com nome, caminho, tamanho e estado.",
     "Grade de Dados de arquivos: mostra a lista de arquivos a processar com nome, caminho, tamanho e estado.",
     "Bestanden DataGridView: toont de lijst met te verwerken bestanden inclusief naam, pad, grootte en status.",
     "Filer DataGridView: visar listan med filer som ska bearbetas med namn, sökväg, storlek och status.",
     "Filer DataGridView: viser listen over filer som skal behandles med navn, bane, størrelse og status.",
     "Filer DataGridView: viser listen over filer, der skal behandles med navn, sti, størrelse og status.",
     "Tiedostot DataGridView: näyttää käsiteltävien tiedostojen luettelon nimineen, polkuineen, kokoineen ja tiloineen.",
     "DataGridView plików: wyświetla listę plików do przetworzenia wraz z nazwą, ścieżką, rozmiarem i statusem.",
     "DataGridView souborů: zobrazuje seznam souborů k zpracování včetně názvu, cesty, velikosti a stavu.",
     "Fájlok DataGridView: megjeleníti a feldolgozandó fájlok listáját nevükkel, elérési útjukkal, méretükkel és állapotukkal.",
     "DataGridView fișiere: afișează lista fișierelor de procesat împreună cu numele, calea, dimensiunea și starea."),







                    ["Auto-Scroll CheckBox: This checkbox enables or disables automatic scrolling of the files data grid view while files are being processed."] =
("Case Défilement automatique : active/désactive le défilement automatique de la grille pendant le traitement.",
 "Auto-Scroll-CheckBox: Aktiviert/deaktiviert das automatische Scrollen der Dateiliste während der Verarbeitung.",
 "Casilla Desplazamiento automático: activa/desactiva el desplazamiento automático de la lista mientras se procesan archivos.",
 "Casella di controllo Scorri automaticamente: abilita/disabilita lo scorrimento automatico della griglia durante l’elaborazione.",
 "Caixa de verificação Deslocamento automático: ativa/desativa a rolagem automática da grelha enquanto os ficheiros são processados.",
 "Caixa de seleção Deslocamento automático: ativa/desativa o deslocamento automático da grade enquanto os arquivos são processados.",
 "Aanvinkvakje Automatisch scrollen: schakelt automatisch scrollen van de bestandenraster in/uit tijdens verwerking.",
 "Kryssruta Auto-scroll: aktiverar/inaktiverar automatisk rullning av filerutnätet medan filer bearbetas.",
 "Avkrysningsboks Auto-scroll: aktiverer/deaktiverer automatisk rulling av filgriden mens filer behandles.",
 "Markeringsfelt Auto-scroll: aktiverer/deaktiverer automatisk rulning af filgitteret mens filer behandles.",
 "Valintaruutu Automaattinen vieritys: ottaa käyttöön tai poistaa käytöstä tiedostonäkymän automaattisen vierityksen tiedostoja käsiteltäessä.",
 "Pole wyboru Autoprzewijanie: włącza/wyłącza automatyczne przewijanie siatki plików podczas przetwarzania.",
 "Zaškrtávací pole Automatické posouvání: zapne/vypne automatické posouvání mřížky souborů během zpracování.",
 "Jelölőnégyzet Automatikus görgetés: engedélyezi/letiltja a fájl rács automatikus görgetését a fájlok feldolgozása közben.",
 "Casetă de selectare Derulare automată: activează/dezactivează derularea automată a grilei de fișiere în timp ce fișierele sunt procesate."),

                    ["Verify After Transfer CheckBox: This checkbox determines whether to verify the integrity of files after they have been copied or moved."] =
    ("Case Vérifier après transfert : vérifie l’intégrité des fichiers après copie/déplacement.",
     "Nach-Übertragung-prüfen-CheckBox: Prüft die Integrität der Dateien nach dem Kopieren/Verschieben.",
     "Casilla Verificar después de transferir: verifica la integridad de los archivos después de copiarlos o moverlos.",
     "Casella di controllo Verifica dopo trasferimento: verifica l’integrità dei file dopo che sono stati copiati o spostati.",
     "Caixa de verificação Verificar após transferência: verifica a integridade dos ficheiros depois de copiados ou movidos.",
     "Caixa de seleção Verificar após transferência: verifica a integridade dos arquivos depois de copiados ou movidos.",
     "Aanvinkvakje Verifiëren na overdracht: controleert de integriteit van bestanden nadat ze zijn gekopieerd of verplaatst.",
     "Kryssruta Verifiera efter överföring: kontrollerar filernas integritet efter att de har kopierats eller flyttats.",
     "Avkrysningsboks Verifiser etter overføring: verifiserer filenes integritet etter at de er kopiert eller flyttet.",
     "Markeringsfelt Verificer efter overførsel: verificerer filernes integritet efter de er blevet kopieret eller flyttet.",
     "Valintaruutu Varmista siirron jälkeen: tarkistaa tiedostojen eheyden niiden kopioinnin tai siirron jälkeen.",
     "Pole wyboru Weryfikuj po transferze: weryfikuje integralność plików po ich skopiowaniu lub przeniesieniu.",
     "Zaškrtávací pole Ověřit po přenosu: ověří integritu souborů poté, co byly zkopírovány nebo přesunuty.",
     "Jelölőnégyzet Átvitel utáni ellenőrzés: ellenőrzi a fájlok integritását azután, hogy azokat másolták vagy áthelyezték.",
     "Casetă de selectare Verificare după transfer: verifică integritatea fișierelor după ce au fost copiate sau mutate."),

                    ["Pause/Resume Multi-Thread Button: This button pauses or resumes the multi-threaded operation."] =
    ("Bouton Pause/Reprise multi-thread : met en pause ou reprend l’opération multi-thread.",
     "Multi-Thread-Pause/Weiter-Schaltfläche: Pausiert oder setzt die Multithread-Operation fort.",
     "Botón Pausar/Reanudar multi-hilo: pone en pausa o reanuda la operación multi-hilo.",
     "Pulsante Pausa/Riprendi multi-thread: mette in pausa o riprende l’operazione multi-thread.",
     "Botão Pausa/Continuar multi-thread: coloca em pausa ou retoma a operação multi-thread.",
     "Botão Pausar/Retomar multi-thread: coloca em pausa ou retoma a operação multi-thread.",
     "Knop Pauzeren/Hervatten multi-thread: pauzeert of hervat de multi-thread bewerking.",
     "Knapp Pausa/Fortsätt multi-thread: pausar eller återupptar den multi-thread åtgärden.",
     "Knapp Pause/Start multi-thread: pauserer eller gjenopptar multi-thread operasjonen.",
     "Knap Pause/Fortsæt multi-thread: pauserer eller genoptager multi-thread handlingen.",
     "Keskeytä/Jatka multi-thread -painike: keskeyttää tai jatkaa multi-thread toimenpidettä.",
     "Przycisk Pauza/Wznów multi-thread: wstrzymuje lub wznawia operację multi-thread.",
     "Tlačítko Pozastavit/Pokračovat multi-thread: pozastaví nebo obnoví multi-thread operaci.",
     "Szünet/Folytat multi-thread gomb: szünetelteti vagy folytatja a multi-thread műveletet.",
     "Buton Pauză/Reluare multi-thread: pune pe pauză sau reia operațiunea multi-thread."),

                    ["Cancel Multi-Thread Button: This button cancels the multi-threaded operation."] =
    ("Bouton Annuler multi-thread : annule l’opération multi-thread.",
     "Multi-Thread-Abbrechen-Schaltfläche: Bricht die Multithread-Operation ab.",
     "Botón Cancelar multi-hilo: cancela la operación multi-hilo.",
     "Pulsante Annulla multi-thread: annulla l’operazione multi-thread.",
     "Botão Cancelar multi-thread: cancela a operação multi-thread.",
     "Botão Cancelar multi-thread: cancela a operação multi-thread.",
     "Knop Annuleren multi-thread: annuleert de multi-thread bewerking.",
     "Knapp Avbryt multi-thread: avbryter den multi-thread åtgärden.",
     "Knapp Avbryt multi-thread: avbryter multi-thread operasjonen.",
     "Knap Annuller multi-thread: annullerer multi-thread handlingen.",
     "Peruuta multi-thread -painike: peruuttaa multi-thread toimenpiteen.",
     "Przycisk Anuluj multi-thread: anuluje operację multi-thread.",
     "Tlačítko Zrušit multi-thread: zruší multi-thread operaci.",
     "Mégsem multi-thread gomb: megszakítja a multi-thread műveletet.",
     "Buton Anulare multi-thread: anulează operațiunea multi-thread."),

                    ["On Finish Multi-Thread ComboBox: This dropdown combobox is to select the action to perform when the multi-threaded operation finishes."] =
    ("ComboBox À la fin multi-thread : choisit l’action à effectuer à la fin de l’opération multi-thread.",
     "Beenden-Multi-Thread-ComboBox: Legt fest, was nach Abschluss der Multithread-Operation geschehen soll.",
     "ComboBox Al finalizar multi-hilo: elige la acción a realizar cuando termine la operación multi-hilo.",
     "ComboBox Al termine multi-thread: consente di selezionare l’azione da eseguire al termine dell’operazione multi-thread.",
     "ComboBox Ao finalizar multi-thread: permite escolher a ação a realizar quando a operação multi-thread terminar.",
     "ComboBox Ao finalizar multi-thread: permite escolher a ação a realizar quando a operação multi-thread terminar.",
     "ComboBox Bij voltooien multi-thread: hiermee selecteert u de actie die moet worden uitgevoerd wanneer de multi-thread bewerking is voltooid.",
     "ComboBox Vid slutförd multi-thread: låter dig välja åtgärden som ska utföras när multi-thread åtgärden är slutförd.",
     "ComboBox Ved ferdig multi-thread: lar deg velge handlingen som skal utføres når multi-thread operasjonen er fullført.",
     "ComboBox Ved færdig multi-thread: lader dig vælge handlingen, der skal udføres, når multi-thread handlingen er afsluttet.",
     "ComboBox Valmistuessa multi-thread: mahdollistaa toiminnon valinnan, joka suoritetaan multi-thread toimenpiteen valmistuessa.",
     "ComboBox Po zakończeniu multi-thread: pozwala wybrać działanie do wykonania po zakończeniu operacji multi-thread.",
     "ComboBox Po dokončení multi-thread: umožňuje vybrat akci, která se provede po dokončení multi-thread operace.",
     "ComboBox Multi-thread befejezéskor: lehetővé teszi a multi-thread művelet befejezésekor végrehajtandó művelet kiválasztását.",
     "ComboBox La finalizare multi-thread: permite selectarea acțiunii de efectuat la finalizarea operațiunii multi-thread."),

                    ["Files Name Label 1: This label shows the name of the file being processed by thread 1, along with the percentage and speed."] =
    ("Étiquette Nom fichier 1 : affiche le nom, le pourcentage et la vitesse du fichier traité par le thread 1.",
     "Dateiname-Label 1: Zeigt Name, Prozent und Geschwindigkeit der von Thread 1 bearbeiteten Datei.",
     "Etiqueta Nombre archivo 1: muestra el nombre, porcentaje y velocidad del archivo procesado por el hilo 1.",
     "Etichetta Nome file 1: mostra nome, percentuale e velocità del file elaborato dal thread 1.",
     "Etiqueta Nome ficheiro 1: mostra o nome, a percentagem e a velocidade do ficheiro processado pela thread 1.",
     "Etiqueta Nome arquivo 1: mostra o nome, a porcentagem e a velocidade do arquivo processado pela thread 1.",
     "Label Bestandsnaam 1: toont naam, percentage en snelheid van het bestand dat door thread 1 wordt verwerkt.",
     "Etikett Filnamn 1: visar namn, procent och hastighet för filen som bearbetas av tråd 1.",
     "Etikett Filnavn 1: viser navn, prosent og hastighet til filen som behandles av tråd 1.",
     "Label Filnavn 1: viser navn, procent og hastighed for den fil, der behandles af tråd 1.",
     "Tiedoston nimi 1 -tarra: näyttää nimen, prosenttiosuuden ja nopeuden tiedostosta, jota säie 1 käsittelee.",
     "Etykieta Nazwa pliku 1: pokazuje nazwę, procent i prędkość pliku przetwarzanego przez wątek 1.",
     "Štítek Název souboru 1: zobrazuje název, procento a rychlost souboru zpracovávaného vláknem 1.",
     "Fájlnév 1 címke: megjeleníti a 1. szál által feldolgozott fájl nevét, százalékát és sebességét.",
     "Etichetă Nume fișier 1: afișează numele, procentul și viteza fișierului procesat de firul 1."),

                    ["Total Percentage Multi Label 1: This label shows the percentage of progress for the file being processed by thread 1."] =
    ("Étiquette Pourcentage total 1 : affiche le pourcentage de progression du fichier traité par le thread 1.",
     "Gesamt-Prozent-Label 1: Zeigt den Prozentwert des Fortschritts der von Thread 1 bearbeiteten Datei.",
     "Etiqueta Porcentaje total 1: muestra el porcentaje de progreso del archivo procesado por el hilo 1.",
     "Etichetta Percentuale totale 1: mostra la percentuale di avanzamento del file elaborato dal thread 1.",
     "Etiqueta Percentagem total 1: mostra a percentagem de progresso do ficheiro processado pela thread 1.",
     "Etiqueta Porcentagem total 1: mostra a porcentagem de progresso do arquivo processado pela thread 1.",
     "Label Totaalpercentage 1: toont het percentage voortgang van het bestand dat door thread 1 wordt verwerkt.",
     "Etikett Total procent 1: visar procentandelen av framstegen för filen som bearbetas av tråd 1.",
     "Etikett Total prosent 1: viser prosentandelen av fremgangen til filen som behandles av tråd 1.",
     "Label Total procent 1: viser procentdelen af fremskridtet for den fil, der behandles af tråd 1.",
     "Kokonaisprosentti 1 -tarra: näyttää säikeen 1 käsittelemän tiedoston edistymisen prosenttiosuuden.",
     "Etykieta Całkowity procent 1: pokazuje procent postępu pliku przetwarzanego przez wątek 1.",
     "Štítek Celkové procento 1: zobrazuje procento průběhu souboru zpracovávaného vláknem 1.",
     "Teljes százalék 1 címke: megjeleníti az 1. szál által feldolgozott fájl előrehaladási százalékát.",
     "Etichetă Procent total 1: afișează procentul de progres al fișierului procesat de firul 1."),

                    ["Files Name Label 2: This label shows the name of the file being processed by thread 2, along with the percentage and speed."] =
    ("Étiquette Nom fichier 2 : affiche le nom, le pourcentage et la vitesse du fichier traité par le thread 2.",
     "Dateiname-Label 2: Zeigt Name, Prozent und Geschwindigkeit der von Thread 2 bearbeiteten Datei.",
     "Etiqueta Nombre archivo 2: muestra el nombre, porcentaje y velocidad del archivo procesado por el hilo 2.",
     "Etichetta Nome file 2: mostra nome, percentuale e velocità del file elaborato dal thread 2.",
     "Etiqueta Nome ficheiro 2: mostra o nome, a percentagem e a velocidade do ficheiro processado pela thread 2.",
     "Etiqueta Nome arquivo 2: mostra o nome, a porcentagem e a velocidade do arquivo processado pela thread 2.",
     "Label Bestandsnaam 2: toont naam, percentage en snelheid van het bestand dat door thread 2 wordt verwerkt.",
     "Etikett Filnamn 2: visar namn, procent och hastighet för filen som bearbetas av tråd 2.",
     "Etikett Filnavn 2: viser navn, prosent og hastighet til filen som behandles av tråd 2.",
     "Label Filnavn 2: viser navn, procent og hastighed for den fil, der behandles af tråd 2.",
     "Tiedoston nimi 2 -tarra: näyttää nimen, prosenttiosuuden ja nopeuden tiedostosta, jota säie 2 käsittelee.",
     "Etykieta Nazwa pliku 2: pokazuje nazwę, procent i prędkość pliku przetwarzanego przez wątek 2.",
     "Štítek Název souboru 2: zobrazuje název, procento a rychlost souboru zpracovávaného vláknem 2.",
     "Fájlnév 2 címke: megjeleníti a 2. szál által feldolgozott fájl nevét, százalékát és sebességét.",
     "Etichetă Nume fișier 2: afișează numele, procentul și viteza fișierului procesat de firul 2."),

                    ["Files Name Label 3: This label shows the name of the file being processed by thread 3, along with the percentage and speed."] =
    ("Étiquette Nom fichier 3 : affiche le nom, le pourcentage et la vitesse du fichier traité par le thread 3.",
     "Dateiname-Label 3: Zeigt Name, Prozent und Geschwindigkeit der von Thread 3 bearbeiteten Datei.",
     "Etiqueta Nombre archivo 3: muestra el nombre, porcentaje y velocidad del archivo procesado por el hilo 3.",
     "Etichetta Nome file 3: mostra nome, percentuale e velocità del file elaborato dal thread 3.",
     "Etiqueta Nome ficheiro 3: mostra o nome, a percentagem e a velocidade do ficheiro processado pela thread 3.",
     "Etiqueta Nome arquivo 3: mostra o nome, a porcentagem e a velocidade do arquivo processado pela thread 3.",
     "Label Bestandsnaam 3: toont naam, percentage en snelheid van het bestand dat door thread 3 wordt verwerkt.",
     "Etikett Filnamn 3: visar namn, procent och hastighet för filen som bearbetas av tråd 3.",
     "Etikett Filnavn 3: viser navn, prosent og hastighet til filen som behandles av tråd 3.",
     "Label Filnavn 3: viser navn, procent og hastighed for den fil, der behandles af tråd 3.",
     "Tiedoston nimi 3 -tarra: näyttää nimen, prosenttiosuuden ja nopeuden tiedostosta, jota säie 3 käsittelee.",
     "Etykieta Nazwa pliku 3: pokazuje nazwę, procent i prędkość pliku przetwarzanego przez wątek 3.",
     "Štítek Název souboru 3: zobrazuje název, procento a rychlost souboru zpracovávaného vláknem 3.",
     "Fájlnév 3 címke: megjeleníti a 3. szál által feldolgozott fájl nevét, százalékát és sebességét.",
     "Etichetă Nume fișier 3: afișează numele, procentul și viteza fișierului procesat de firul 3."),

                    ["Total Percentage Multi Label 2: This label shows the percentage of progress for the file being processed by thread 2."] =
    ("Étiquette Pourcentage total 2 : affiche le pourcentage de progression du fichier traité par le thread 2.",
     "Gesamt-Prozent-Label 2: Zeigt den Prozentwert des Fortschritts der von Thread 2 bearbeiteten Datei.",
     "Etiqueta Porcentaje total 2: muestra el porcentaje de progreso del archivo procesado por el hilo 2.",
     "Etichetta Percentuale totale 2: mostra la percentuale di avanzamento del file elaborato dal thread 2.",
     "Etiqueta Percentagem total 2: mostra a percentagem de progresso do ficheiro processado pela thread 2.",
     "Etiqueta Porcentagem total 2: mostra a porcentagem de progresso do arquivo processado pela thread 2.",
     "Label Totaalpercentage 2: toont het percentage voortgang van het bestand dat door thread 2 wordt verwerkt.",
     "Etikett Total procent 2: visar procentandelen av framstegen för filen som bearbetas av tråd 2.",
     "Etikett Total prosent 2: viser prosentandelen av fremgangen til filen som behandles av tråd 2.",
     "Label Total procent 2: viser procentdelen af fremskridtet for den fil, der behandles af tråd 2.",
     "Kokonaisprosentti 2 -tarra: näyttää säikeen 2 käsittelemän tiedoston edistymisen prosenttiosuuden.",
     "Etykieta Całkowity procent 2: pokazuje procent postępu pliku przetwarzanego przez wątek 2.",
     "Štítek Celkové procento 2: zobrazuje procento průběhu souboru zpracovávaného vláknem 2.",
     "Teljes százalék 2 címke: megjeleníti a 2. szál által feldolgozott fájl előrehaladási százalékát.",
     "Etichetă Procent total 2: afișează procentul de progres al fișierului procesat de firul 2."),

                    ["Total Percentage Multi Label 3: This label shows the percentage of progress for the file being processed by thread 3."] =
    ("Étiquette Pourcentage total 3 : affiche le pourcentage de progression du fichier traité par le thread 3.",
     "Gesamt-Prozent-Label 3: Zeigt den Prozentwert des Fortschritts der von Thread 3 bearbeiteten Datei.",
     "Etiqueta Porcentaje total 3: muestra el porcentaje de progreso del archivo procesado por el hilo 3.",
     "Etichetta Percentuale totale 3: mostra la percentuale di avanzamento del file elaborato dal thread 3.",
     "Etiqueta Percentagem total 3: mostra a percentagem de progresso do ficheiro processado pela thread 3.",
     "Etiqueta Porcentagem total 3: mostra a porcentagem de progresso do arquivo processado pela thread 3.",
     "Label Totaalpercentage 3: toont het percentage voortgang van het bestand dat door thread 3 wordt verwerkt.",
     "Etikett Total procent 3: visar procentandelen av framstegen för filen som bearbetas av tråd 3.",
     "Etikett Total prosent 3: viser prosentandelen av fremgangen til filen som behandles av tråd 3.",
     "Label Total procent 3: viser procentdelen af fremskridtet for den fil, der behandles af tråd 3.",
     "Kokonaisprosentti 3 -tarra: näyttää säikeen 3 käsittelemän tiedoston edistymisen prosenttiosuuden.",
     "Etykieta Całkowity procent 3: pokazuje procent postępu pliku przetwarzanego przez wątek 3.",
     "Štítek Celkové procento 3: zobrazuje procento průběhu souboru zpracovávaného vláknem 3.",
     "Teljes százalék 3 címke: megjeleníti a 3. szál által feldolgozott fájl előrehaladási százalékát.",
     "Etichetă Procent total 3: afișează procentul de progres al fișierului procesat de firul 3."),

                    ["Files Name Label 4: This label shows the name of the file being processed by thread 4, along with the percentage and speed."] =
    ("Étiquette Nom fichier 4 : affiche le nom, le pourcentage et la vitesse du fichier traité par le thread 4.",
     "Dateiname-Label 4: Zeigt Name, Prozent und Geschwindigkeit der von Thread 4 bearbeiteten Datei.",
     "Etiqueta Nombre archivo 4: muestra el nombre, porcentaje y velocidad del archivo procesado por el hilo 4.",
     "Etichetta Nome file 4: mostra nome, percentuale e velocità del file elaborato dal thread 4.",
     "Etiqueta Nome ficheiro 4: mostra o nome, a percentagem e a velocidade do ficheiro processado pela thread 4.",
     "Etiqueta Nome arquivo 4: mostra o nome, a porcentagem e a velocidade do arquivo processado pela thread 4.",
     "Label Bestandsnaam 4: toont naam, percentage en snelheid van het bestand dat door thread 4 wordt verwerkt.",
     "Etikett Filnamn 4: visar namn, procent och hastighet för filen som bearbetas av tråd 4.",
     "Etikett Filnavn 4: viser navn, prosent og hastighet til filen som behandles av tråd 4.",
     "Label Filnavn 4: viser navn, procent og hastighed for den fil, der behandles af tråd 4.",
     "Tiedoston nimi 4 -tarra: näyttää nimen, prosenttiosuuden ja nopeuden tiedostosta, jota säie 4 käsittelee.",
     "Etykieta Nazwa pliku 4: pokazuje nazwę, procent i prędkość pliku przetwarzanego przez wątek 4.",
     "Štítek Název souboru 4: zobrazuje název, procento a rychlost souboru zpracovávaného vláknem 4.",
     "Fájlnév 4 címke: megjeleníti a 4. szál által feldolgozott fájl nevét, százalékát és sebességét.",
     "Etichetă Nume fișier 4: afișează numele, procentul și viteza fișierului procesat de firul 4."),

                    ["Total Percentage Multi Label 4: This label shows the percentage of progress for the file being processed by thread 4."] =
    ("Étiquette Pourcentage total 4 : affiche le pourcentage de progression du fichier traité par le thread 4.",
     "Gesamt-Prozent-Label 4: Zeigt den Prozentwert des Fortschritts der von Thread 4 bearbeiteten Datei.",
     "Etiqueta Porcentaje total 4: muestra el porcentaje de progreso del archivo procesado por el hilo 4.",
     "Etichetta Percentuale totale 4: mostra la percentuale di avanzamento del file elaborato dal thread 4.",
     "Etiqueta Percentagem total 4: mostra a percentagem de progresso do ficheiro processado pela thread 4.",
     "Etiqueta Porcentagem total 4: mostra a porcentagem de progresso do arquivo processado pela thread 4.",
     "Label Totaalpercentage 4: toont het percentage voortgang van het bestand dat door thread 4 wordt verwerkt.",
     "Etikett Total procent 4: visar procentandelen av framstegen för filen som bearbetas av tråd 4.",
     "Etikett Total prosent 4: viser prosentandelen av fremgangen til filen som behandles av tråd 4.",
     "Label Total procent 4: viser procentdelen af fremskridtet for den fil, der behandles af tråd 4.",
     "Kokonaisprosentti 4 -tarra: näyttää säikeen 4 käsittelemän tiedoston edistymisen prosenttiosuuden.",
     "Etykieta Całkowity procent 4: pokazuje procent postępu pliku przetwarzanego przez wątek 4.",
     "Štítek Celkové procento 4: zobrazuje procento průběhu souboru zpracovávaného vláknem 4.",
     "Teljes százalék 4 címke: megjeleníti a 4. szál által feldolgozott fájl előrehaladási százalékát.",
     "Etichetă Procent total 4: afișează procentul de progres al fișierului procesat de firul 4."),

                    ["Progress Bar Multi-Thread Total: This progress bar shows the overall progress of the multi-threaded operation across all threads."] =
    ("Barre de progression multi-thread totale : indique l’avancement global de l’opération multi-thread.",
     "Multi-Thread-Gesamt-Fortschrittsbalken: Zeigt den Gesamtfortschritt der Multithread-Operation.",
     "Barra de progreso total multi-hilo: muestra el avance global de la operación multi-hilo.",
     "Barra di avanzamento totale multi-thread: mostra l’avanzamento complessivo dell’operazione multi-thread su tutti i thread.",
     "Barra de progresso total multi-thread: mostra o progresso geral da operação multi-thread em todas as threads.",
     "Barra de progresso total multi-thread: mostra o progresso geral da operação multi-thread em todas as threads.",
     "Voortgangsbalk Multi-thread totaal: toont de algehele voortgang van de multi-thread bewerking over alle threads.",
     "Förloppsindikator Multi-thread total: visar den totala framstegen för multi-thread åtgärden över alla trådar.",
     "Fremdriftslinje Multi-thread total: viser den totale fremgangen til multi-thread operasjonen over alle tråder.",
     "Fremdringslinje Multi-thread total: viser den samlede fremgang for multi-thread handlingen på tværs af alle tråde.",
     "Multi-thread kokonaispalkki: näyttää multi-thread toimenpiteen kokonaisprogressin kaikissa säikeissä.",
     "Pasek postępu całkowitego multi-thread: pokazuje ogólny postęp operacji multi-thread we wszystkich wątkach.",
     "Ukazatel celkového průběhu multi-thread: zobrazuje celkový průběh multi-thread operace napříč všemi vlákny.",
     "Multi-thread teljes folyamatjelző sáv: megjeleníti a multi-thread művelet teljes előrehaladását az összes szálon.",
     "Bară de progres total multi-thread: afișează progresul general al operațiunii multi-thread pe toate firele."),

                    ["Multi-Thread Total Progress Label: This label shows the percentage of overall progress for the multi-threaded operation across all threads."] =
    ("Étiquette Progression totale multi-thread : affiche le pourcentage de progression global de l’opération multi-thread.",
     "Multi-Thread-Gesamt-Fortschritt-Label: Zeigt den Prozentwert des Gesamtfortschritts der Multithread-Operation.",
     "Etiqueta Progreso total multi-hilo: muestra el porcentaje de avance global de la operación multi-hilo.",
     "Etichetta Avanzamento totale multi-thread: mostra la percentuale di avanzamento complessivo dell’operazione multi-thread.",
     "Etiqueta Progresso total multi-thread: mostra a percentagem de progresso geral da operação multi-thread.",
     "Etiqueta Progresso total multi-thread: mostra a porcentagem de progresso geral da operação multi-thread.",
     "Label Multi-thread totale voortgang: toont het percentage van de algehele voortgang van de multi-thread bewerking.",
     "Etikett Multi-thread totala framsteg: visar procentandelen av den totala framstegen för multi-thread åtgärden.",
     "Etikett Multi-thread total fremdrift: viser prosentandelen av den totale fremgangen for multi-thread operasjonen.",
     "Label Multi-thread samlede fremgang: viser procentdelen af den samlede fremgang for multi-thread handlingen.",
     "Multi-thread kokonaisprogressin tarra: näyttää multi-thread toimenpiteen kokonaisprogressin prosenttiosuuden kaikissa säikeissä.",
     "Etykieta Całkowity postęp multi-thread: pokazuje procent ogólnego postępu operacji multi-thread we wszystkich wątkach.",
     "Štítek Celkový průběh multi-thread: zobrazuje procento celkového průběhu multi-thread operace napříč všemi vlákny.",
     "Multi-thread teljes progressz címke: megjeleníti a multi-thread művelet teljes előrehaladási százalékát az összes szálon.",
     "Etichetă Progres total multi-thread: afișează procentul de progres general al operațiunii multi-thread pe toate firele."),

                    ["File Count Multi Label: This label shows the number of files processed out of the total number of files in the multi-threaded operation."] =
    ("Étiquette Compteur fichiers multi-thread : affiche le nombre de fichiers traités sur le total.",
     "Multi-Thread-Dateianzahl-Label: Zeigt die Anzahl der bearbeiteten Dateien von der Gesamtanzahl.",
     "Etiqueta Contador archivos multi-hilo: muestra la cantidad de archivos procesados del total.",
     "Etichetta Conteggio file multi-thread: mostra il numero di file elaborati rispetto al totale nell’operazione multi-thread.",
     "Etiqueta Contador de ficheiros multi-thread: mostra o número de ficheiros processados do total.",
     "Etiqueta Contador de arquivos multi-thread: mostra a quantidade de arquivos processados do total.",
     "Label Multi-thread bestandstelling: toont het aantal verwerkte bestanden ten opzichte van het totaal in de multi-thread bewerking.",
     "Etikett Multi-thread filräknare: visar antalet bearbetade filer av det totala antalet i multi-thread åtgärden.",
     "Etikett Multi-thread filantall: viser antallet av prosesserte filer av totalt antall i multi-thread operasjonen.",
     "Label Multi-thread filantal: viser antallet af behandlede filer ud af det samlede antal i multi-thread handlingen.",
     "Multi-thread tiedostojen määrä -tarra: näyttää multi-thread toimenpiteessä käsiteltyjen tiedostojen määrän kokonaismäärästä.",
     "Etykieta Liczba plików multi-thread: pokazuje liczbę przetworzonych plików z całkowitej liczby plików w operacji multi-thread.",
     "Štítek Počet souborů multi-thread: zobrazuje počet zpracovaných souborů z celkového počtu souborů v multi-thread operaci.",
     "Multi-thread fájlok száma címke: megjeleníti a multi-thread műveletben feldolgozott fájlok számát a teljes számból.",
     "Etichetă Număr fișiere multi-thread: afișează numărul de fișiere procesate din numărul total de fișiere în operațiunea multi-thread."),

                    ["Total Time Multi Label: This label shows the elapsed time out of the estimated target time for the multi-threaded operation."] =
    ("Étiquette Temps total multi-thread : affiche le temps écoulé sur le temps estimé.",
     "Multi-Thread-Gesamtzeit-Label: Zeigt die verstrichene Zeit gegenüber der geschätzten Gesamtzeit.",
     "Etiqueta Tiempo total multi-hilo: muestra el tiempo transcurrido frente al tiempo estimado.",
     "Etichetta Tempo totale multi-thread: mostra il tempo trascorso rispetto al tempo stimato per l’operazione multi-thread.",
     "Etiqueta Tempo total multi-thread: mostra o tempo decorrido face ao tempo estimado para a operação multi-thread.",
     "Etiqueta Tempo total multi-thread: mostra o tempo decorrido em relação ao tempo estimado para a operação multi-thread.",
     "Label Totale tijd multi-thread: toont de verstreken tijd ten opzichte van de geschatte totale tijd voor de multi-thread bewerking.",
     "Etikett Total tid multi-thread: visar den förflutna tiden gentemot den beräknade totala tiden för multi-thread åtgärden.",
     "Etikett Total tid multi-thread: viser den forløpte tiden opp mot den estimerte totale tiden for multi-thread operasjonen.",
     "Label Total tid multi-thread: viser den forløbne tid i forhold til den estimerede totale tid for multi-thread handlingen.",
     "Multi-thread kokonaisaika -tarra: näyttää kuluneen ajan suhteessa arvioituun kokonaisaikaan multi-thread toimenpiteessä.",
     "Etykieta Całkowity czas multi-thread: pokazuje upłynięty czas w stosunku do szacowanego całkowitego czasu operacji multi-thread.",
     "Štítek Celkový čas multi-thread: zobrazuje uplynulý čas vůči odhadovanému celkovému času multi-thread operace.",
     "Multi-thread teljes idő címke: megjeleníti az eltelt időt a becsült teljes időhöz képest a multi-thread műveletben.",
     "Etichetă Timp total multi-thread: afișează timpul scurs față de timpul total estimat pentru operațiunea multi-thread."),

                    ["Speed Multi Label: This label shows the current speed of the multi-threaded operation in bytes per second."] =
    ("Étiquette Vitesse multi-thread : affiche la vitesse actuelle en octets par seconde.",
     "Multi-Thread-Geschwindigkeit-Label: Zeigt die aktuelle Geschwindigkeit in Bytes pro Sekunde.",
     "Etiqueta Velocidad multi-hilo: muestra la velocidad actual en bytes por segundo.",
     "Etichetta Velocità multi-thread: mostra la velocità corrente dell’operazione multi-thread in byte al secondo.",
     "Etiqueta Velocidade multi-thread: mostra a velocidade atual da operação multi-thread em bytes por segundo.",
     "Etiqueta Velocidade multi-thread: mostra a velocidade atual da operação multi-thread em bytes por segundo.",
     "Label Snelheid multi-thread: toont de huidige snelheid van de multi-thread bewerking in bytes per seconde.",
     "Etikett Hastighet multi-thread: visar den aktuella hastigheten för multi-thread åtgärden i bytes per sekund.",
     "Etikett Hastighet multi-thread: viser den aktuelle hastigheten for multi-thread operasjonen i bytes per sekund.",
     "Label Hastighed multi-thread: viser den aktuelle hastighed for multi-thread handlingen i bytes pr. sekund.",
     "Multi-thread nopeus -tarra: näyttää multi-thread toimenpiteen nykyisen nopeuden tavuina sekunnissa.",
     "Etykieta Prędkość multi-thread: pokazuje bieżącą prędkość operacji multi-thread w bajtach na sekundę.",
     "Štítek Rychlost multi-thread: zobrazuje aktuální rychlost multi-thread operace v bajtech za sekundu.",
     "Multi-thread sebesség címke: megjeleníti a multi-thread művelet jelenlegi sebességét bájtban másodpercenként.",
     "Etichetă Viteză multi-thread: afișează viteza curentă a operațiunii multi-thread în octeți pe secundă."),

                    ["Total C/M/D Label: This label shows the total space processed out of the total space for all files."] =
    ("Étiquette Total C/M/D : affiche l’espace traité sur l’espace total de tous les fichiers.",
     "Gesamt-C/M/D-Label: Zeigt den verarbeiteten Speicherplatz im Verhältnis zum Gesamtplatz aller Dateien.",
     "Etiqueta Total C/M/D: muestra el espacio procesado frente al espacio total de todos los archivos.",
     "Etichetta Totale C/M/D: mostra lo spazio elaborato rispetto allo spazio totale di tutti i file.",
     "Etiqueta Total C/M/D: mostra o espaço processado face ao espaço total de todos os ficheiros.",
     "Etiqueta Total C/M/D: mostra o espaço processado em relação ao espaço total de todos os arquivos.",
     "Label Totale C/M/D: toont de verwerkte ruimte ten opzichte van de totale ruimte voor alle bestanden.",
     "Etikett Total C/M/D: visar det bearbetade utrymmet i förhållande till det totala utrymmet för alla filer.",
     "Etikett Total C/M/D: viser det behandlede området i forhold til det totale området for alle filer.",
     "Label Total C/M/D: viser det behandlede rum i forhold til det samlede rum for alle filer.",
     "Kokonais-C/M/D -tarra: näyttää käsitellyn tilan suhteessa kaikkien tiedostojen kokonaistilaan.",
     "Etykieta Całkowite C/M/D: pokazuje przetworzoną przestrzeń w stosunku do całkowitej przestrzeni wszystkich plików.",
     "Štítek Celkové C/M/D: zobrazuje zpracované místo v poměru k celkovému místu všech souborů.",
     "Teljes C/M/D címke: megjeleníti a feldolgozott területet az összes fájl teljes területéhez képest.",
     "Etichetă Total C/M/D: afișează spațiul procesat față de spațiul total al tuturor fișierelor."),

                    ["Total Space Left Label: This label shows the total hard-drive used out of the total hard-drive space left on the target drive for the multi-threaded operation."] =
    ("Étiquette Espace restant total : affiche l’espace disque utilisé sur l’espace restant du disque cible pour l’opération multi-thread.",
     "Gesamt-verbleibender-Speicher-Label: Zeigt den belegten Speicherplatz im Verhältnis zum freien Speicher des Ziellaufwerks für die Multithread-Operation.",
     "Etiqueta Espacio restante total: muestra el espacio en disco usado frente al espacio libre de la unidad de destino para la operación multi-hilo.",
     "Etichetta Spazio totale rimasto: mostra lo spazio su disco utilizzato rispetto a quello libero sul disco di destinazione per l’operazione multi-thread.",
     "Etiqueta Espaço restante total: mostra o espaço em disco usado face ao espaço livre da unidade de destino para a operação multi-thread.",
     "Etiqueta Espaço restante total: mostra o espaço em disco usado em relação ao espaço livre da unidade de destino para a operação multi-thread.",
     "Label Totale HD-ruimte over: toont de gebruikte harde-schijfruimte ten opzichte van de vrije ruimte op het doelstation voor de multi-thread bewerking.",
     "Etikett Total HD-utrymme kvar: visar den använda hårddiskytan i förhållande till den lediga ytan på målenheten för multi-thread åtgärden.",
     "Etikett Total HD-plass igjen: viser det brukte harddiskområdet i forhold til ledig plass på målenheten for multi-thread operasjonen.",
     "Label Total HD-plads tilbage: viser den brugte harddiskplads i forhold til den ledige plads på måldrevet for multi-thread handlingen.",
     "Kokonaislevyllä jäljellä oleva tila -tarra: näyttää käytetyn kiintolevytilan suhteessa kohdeasemalla jäljellä olevaan tilaan multi-thread toimenpiteessä.",
     "Etykieta Całkowite pozostałe miejsce na HD: pokazuje użyte miejsce na dysku twardym w stosunku do pozostałego miejsca na dysku docelowym dla operacji multi-thread.",
     "Štítek Celkové zbývající místo na HD: zobrazuje využité místo na pevném disku v poměru k zbývajícímu místu na cílovém disku pro multi-thread operaci.",
     "Multi-thread teljes merevlemez-hely maradt címke: megjeleníti a felhasznált teljes merevlemez-területet a célmeghajtón maradt teljes merevlemez-területhez képest a multi-thread műveletben.",
     "Etichetă Spațiu total rămas pe HD: afișează spațiul de hard-disk utilizat față de spațiul total rămas pe unitatea țintă pentru operațiunea multi-thread."),

                    ["Go To In Explorer Button: This button opens the selected file's location in Windows Explorer."] =
    ("Bouton Ouvrir dans l’explorateur : ouvre l’emplacement du fichier sélectionné dans l’Explorateur Windows.",
     "Im-Explorer-öffnen-Schaltfläche: Öffnet den Speicherort der markierten Datei im Windows-Explorer.",
     "Botón Ir en Explorador: abre la ubicación del archivo seleccionado en el Explorador de Windows.",
     "Pulsante Apri in Esplora risorse: apre la posizione del file selezionato in Windows Explorer.",
     "Botão Ir para o Explorador: abre a localização do ficheiro selecionado no Windows Explorer.",
     "Botão Ir para o Explorador: abre a localização do arquivo selecionado no Windows Explorer.",
     "Knop Ga naar in Verkenner: opent de locatie van het geselecteerde bestand in Windows Verkenner.",
     "Knapp Gå till i Utforskaren: öppnar den valda filens plats i Windows Utforskaren.",
     "Knapp Gå til i Utforsker: åpner den valgte filens plassering i Windows Utforsker.",
     "Knap Gå til i Stifinder: åbner den valgte fils placering i Windows Stifinder.",
     "Siirry Resurssienhallinnassa -painike: avaa valitun tiedoston sijainnin Windows Resurssienhallinnassa.",
     "Przycisk Przejdź w Eksploratorze: otwiera lokalizację wybranego pliku w Eksploratorze Windows.",
     "Tlačítko Přejít v Průzkumníkovi: otevře umístění vybraného souboru v Průzkumníkovi Windows.",
     "Ugrás a Fájlkezelőben gomb: megnyitja a kijelölt fájl helyét a Windows Fájlkezelőben.",
     "Buton Du-te în Explorer: deschide locația fișierului selectat în Windows Explorer."),

                    ["Total Skipped Label: This label shows the total number of files that were skipped during the operation."] =
    ("Étiquette Total ignoré : affiche le nombre total de fichiers ignorés pendant l’opération.",
     "Gesamt-übersprungen-Label: Zeigt die Gesamtanzahl der während der Operation übersprungenen Dateien.",
     "Etiqueta Total omitido: muestra la cantidad total de archivos omitidos durante la operación.",
     "Etichetta Totale saltati: mostra il numero totale di file saltati durante l’operazione.",
     "Etiqueta Total ignorado: mostra o número total de ficheiros ignorados durante a operação.",
     "Etiqueta Total omitido: mostra a quantidade total de arquivos omitidos durante a operação.",
     "Label Totaal overgeslagen: toont het totale aantal bestanden dat tijdens de bewerking is overgeslagen.",
     "Etikett Totalt hoppade över: visar det totala antalet filer som hoppades över under åtgärden.",
     "Etikett Totalt hoppet over: viser det totale antallet filer som ble hoppet over under operasjonen.",
     "Label Total sprunget over: viser det samlede antal filer, der blev sprunget over under handlingen.",
     "Yhteensä ohitetut -tarra: näyttää toimenpiteen aikana ohitettujen tiedostojen kokonaismäärän.",
     "Etykieta Całkowicie pominięte: pokazuje całkowitą liczbę plików, które zostały pominięte podczas operacji.",
     "Štítek Celkově přeskočeno: zobrazuje celkový počet souborů, které byly během operace přeskočeny.",
     "Összesen kihagyva címke: megjeleníti a művelet során kihagyott fájlok teljes számát.",
     "Etichetă Total omise: afișează numărul total de fișiere care au fost omise în timpul operațiunii."),






                    ["Clear Skipped List Button: This button clears the list of skipped files."] =
    ("Bouton Effacer liste ignorés : vide la liste des fichiers ignorés.",
     "Übersprungen-Liste-löschen-Schaltfläche: Leert die Liste der übersprungenen Dateien.",
     "Botón Limpiar lista omitidos: vacía la lista de archivos omitidos.",
     "Pulsante Cancella lista saltati: cancella l’elenco dei file saltati.",
     "Botão Limpar lista ignorados: limpa a lista de ficheiros ignorados.",
     "Botão Limpar lista omitidos: limpa a lista de arquivos omitidos.",
     "Knop Overgeslagen lijst wissen: wist de lijst met overgeslagen bestanden.",
     "Knapp Rensa lista överhoppade: rensar listan med hoppade filer.",
     "Knapp Tøm liste over hoppet over: tømmer listen over filer som er hoppet over.",
     "Knap Ryd liste over sprunget over: rydder listen over filer, der er sprunget over.",
     "Ohitetut-listan tyhjennys-painike: tyhjentää ohitettujen tiedostojen luettelon.",
     "Przycisk Wyczyść listę pominiętych: czyści listę pominiętych plików.",
     "Tlačítko Vyčistit seznam přeskočených: vyčistí seznam přeskočených souborů.",
     "Kihagyott lista törlése gomb: törli a kihagyott fájlok listáját.",
     "Buton Golește lista omise: șterge lista fișierelor omise."),

                    ["Skipped Data Grid View: This grid displays the list of files that were skipped during the operation, including their names, paths, sizes, and reasons for skipping."] =
    ("Grille des fichiers ignorés : affiche la liste des fichiers ignorés avec nom, chemin, taille et motif.",
     "Übersprungen-DataGridView: Zeigt die übersprungenen Dateien mit Name, Pfad, Größe und Grund.",
     "Cuadrícula de omitidos: muestra la lista de archivos omitidos con nombre, ruta, tamaño y motivo.",
     "Griglia Dati saltati: mostra l’elenco dei file saltati con nome, percorso, dimensione e motivo.",
     "Grelha de Dados ignorados: mostra a lista de ficheiros ignorados com nome, caminho, tamanho e motivo.",
     "Grade de Dados omitidos: mostra a lista de arquivos omitidos com nome, caminho, tamanho e motivo.",
     "Overgeslagen DataGridView: toont de lijst met overgeslagen bestanden inclusief naam, pad, grootte en reden.",
     "Hoppade DataGridView: visar listan med hoppade filer inklusive namn, sökväg, storlek och anledning.",
     "Hoppet over DataGridView: viser listen over filer som er hoppet over med navn, bane, størrelse og årsak.",
     "Sprunget over DataGridView: viser listen over filer, der er sprunget over med navn, sti, størrelse og årsag.",
     "Ohitetut DataGridView: näyttää ohitettujen tiedostojen luettelon nimineen, polkuineen, kokoineen ja syineen.",
     "DataGridView pominiętych: wyświetla listę pominiętych plików wraz z nazwą, ścieżką, rozmiarem i powodem pominięcia.",
     "DataGridView přeskočených: zobrazuje seznam přeskočených souborů včetně názvu, cesty, velikosti a důvodu přeskočení.",
     "Kihagyott DataGridView: megjeleníti a kihagyott fájlok listáját nevükkel, elérési útjukkal, méretükkel és kihagyásuk okával.",
     "DataGridView fișiere omise: afișează lista fișierelor omise împreună cu numele, calea, dimensiunea și motivul omiterii."),

                    ["Clone Button: This button clones the selected operation from the history list, allowing you to quickly repeat a previous operation."] =
    ("Bouton Cloner : clone l’opération sélectionnée dans l’historique pour la répéter rapidement.",
     "Klonen-Schaltfläche: Klont den markierten Eintrag aus der Historie, um ihn schnell zu wiederholen.",
     "Botón Clonar: clona la operación seleccionada del historial para repetirla rápidamente.",
     "Pulsante Clona: clona l’operazione selezionata dalla cronologia per ripeterla rapidamente.",
     "Botão Clonar: clona a operação selecionada do histórico para a repetir rapidamente.",
     "Botão Clonar: clona a operação selecionada do histórico para repetí-la rapidamente.",
     "Knop Klonen: klont de geselecteerde bewerking uit de geschiedenis om deze snel te herhalen.",
     "Knapp Klona: klonar den valda åtgärden från historiken för att snabbt upprepa den.",
     "Knapp Klon: kloner den valgte handlingen fra historikken for å raskt gjenta den.",
     "Knap Klon: kloner den valgte handling fra historikken for hurtigt at gentage den.",
     "Kloonaa-painike: kloonaa valitun toimenpiteen historiasta, jotta voit nopeasti toistaa aiemman toimenpiteen.",
     "Przycisk Klonuj: klonuje wybraną operację z historii, pozwalając szybko powtórzyć poprzednią operację.",
     "Tlačítko Klonovat: naklonuje vybranou operaci z historie, což umožní rychle opakovat předchozí operaci.",
     "Klónozás gomb: klónozza a kijelölt műveletet az előzményekből, lehetővé téve egy korábbi művelet gyors megismétlését.",
     "Buton Clonare: clonează operațiunea selectată din istoric, permițând repetarea rapidă a unei operațiuni anterioare."),

                    ["Delete Entry Button: This button deletes the selected entry from the operation history list."] =
    ("Bouton Supprimer entrée : retire l’entrée sélectionnée de l’historique.",
     "Eintrag-löschen-Schaltfläche: Entfernt den markierten Eintrag aus der Historie.",
     "Botón Borrar entrada: quita la entrada seleccionada del historial.",
     "Pulsante Elimina voce: elimina la voce selezionata dalla cronologia.",
     "Botão Eliminar entrada: remove a entrada selecionada do histórico.",
     "Botão Excluir entrada: remove a entrada selecionada do histórico.",
     "Knop Verwijder item: verwijdert het geselecteerde item uit de geschiedenis.",
     "Knapp Ta bort post: tar bort den valda posten från historiken.",
     "Knapp Slett oppføring: fjerner den valgte oppføringen fra historikken.",
     "Knap Slet post: fjerner den valgte post fra historikken.",
     "Poista merkintä -painike: poistaa valitun merkinnän toimenpiteiden historiasta.",
     "Przycisk Usuń wpis: usuwa wybrany wpis z historii operacji.",
     "Tlačítko Smazat položku: odstraní vybranou položku z historie operací.",
     "Bejegyzés törlése gomb: eltávolítja a kijelölt bejegyzést a műveletek előzményeiből.",
     "Buton Ștergere intrare: elimină intrarea selectată din lista de istoric a operațiunilor."),

                    ["Clear History Button: This button clears the entire operation history list."] =
    ("Bouton Effacer historique : vide complètement la liste de l’historique.",
     "Historie-löschen-Schaltfläche: Leert die gesamte Historien-Liste.",
     "Botón Limpiar historial: vacía completamente la lista del historial.",
     "Pulsante Cancella cronologia: cancella l’intero elenco della cronologia.",
     "Botão Limpar histórico: limpa completamente a lista do histórico.",
     "Botão Limpar histórico: limpa completamente a lista do histórico.",
     "Knop Geschiedenis wissen: wist de volledige geschiedenislijst.",
     "Knapp Rensa historik: rensar hela historiklistan.",
     "Knapp Tøm historikk: tømmer hele historikklisten.",
     "Knap Ryd historik: rydder hele historiklisten.",
     "Tyhjennä historia -painike: tyhjentää koko historialuettelon.",
     "Przycisk Wyczyść historię: czyści całą listę historii.",
     "Tlačítko Vyčistit historii: vyčistí celý seznam historie.",
     "Előzmények törlése gomb: törli az előzmények teljes listáját.",
     "Buton Golește istoric: șterge întreaga listă de istoric."),

                    ["Total History Label: This label shows the total number of operations recorded in the history list."] =
    ("Étiquette Total historique : affiche le nombre total d’opérations enregistrées.",
     "Gesamt-Historie-Label: Zeigt die Gesamtanzahl der gespeicherten Operationen.",
     "Etiqueta Total historial: muestra el número total de operaciones guardadas.",
     "Etichetta Totale cronologia: mostra il numero totale di operazioni registrate nella cronologia.",
     "Etiqueta Total histórico: mostra o número total de operações registadas no histórico.",
     "Etiqueta Total histórico: mostra o número total de operações registradas no histórico.",
     "Label Totale geschiedenis: toont het totale aantal bewerkingen dat in de geschiedenis is opgeslagen.",
     "Etikett Total historia: visar det totala antalet åtgärder som sparats i historiken.",
     "Etikett Total historikk: viser det totale antallet operasjoner som er lagret i historikken.",
     "Label Total historik: viser det samlede antal handlinger, der er gemt i historikken.",
     "Historian kokonaismäärä -tarra: näyttää historiassa tallennettujen toimenpiteiden kokonaismäärän.",
     "Etykieta Całkowita historia: pokazuje całkowitą liczbę operacji zapisanych w historii.",
     "Štítek Celková historie: zobrazuje celkový počet operací uložených v historii.",
     "Teljes előzmény címke: megjeleníti az előzményekben tárolt műveletek teljes számát.",
     "Etichetă Total istoric: afișează numărul total de operațiuni înregistrate în istoric."),

                    ["Add Allowed Button: This button adds a new allowed file or directory to the allowed list."] =
    ("Bouton Ajouter autorisé : ajoute un nouveau fichier ou dossier autorisé.",
     "Hinzufügen-erlaubt-Schaltfläche: Fügt eine neue erlaubte Datei oder einen Ordner hinzu.",
     "Botón Añadir permitido: agrega un nuevo archivo o carpeta permitida.",
     "Pulsante Aggiungi consentito: aggiunge un nuovo file o cartella consentita all’elenco.",
     "Botão Adicionar permitido: adiciona um novo ficheiro ou pasta permitida à lista.",
     "Botão Adicionar permitido: adiciona um novo arquivo ou pasta permitida à lista.",
     "Knop Toegestaan toevoegen: voegt een nieuw toegestaan bestand of map toe aan de lijst.",
     "Knapp Lägg till tillåten: lägger till en ny tillåten fil eller mapp i listan.",
     "Knapp Legg til tillatt: legger til en ny tillatt fil eller mappe i listen.",
     "Knap Tilføj tilladt: tilføjer en ny tilladt fil eller mappe til listen.",
     "Lisää sallittu -painike: lisää uuden sallitun tiedoston tai kansion luetteloon.",
     "Przycisk Dodaj dozwolone: dodaje nowy dozwolony plik lub folder do listy.",
     "Tlačítko Přidat povolené: přidá nový povolený soubor nebo složku do seznamu.",
     "Engedélyezett hozzáadása gomb: új engedélyezett fájlt vagy mappát ad hozzá az engedélyezettek listájához.",
     "Buton Adăugare permis: adaugă un fișier sau director permis nou în listă."),

                    ["Remove Allowed Button: This button removes the selected allowed file or directory from the allowed list."] =
    ("Bouton Supprimer autorisé : retire l’élément autorisé sélectionné.",
     "Entfernen-erlaubt-Schaltfläche: Entfernt das markierte erlaubte Element.",
     "Botón Quitar permitido: quita el elemento permitido seleccionado.",
     "Pulsante Rimuovi consentito: rimuove il file o la cartella consentita selezionata.",
     "Botão Remover permitido: remove o item permitido selecionado.",
     "Botão Remover permitido: remove o elemento permitido selecionado.",
     "Knop Toegestaan verwijderen: verwijdert het geselecteerde toegestane bestand of map uit de lijst.",
     "Knapp Ta bort tillåten: tar bort den valda tillåtna filen eller mappen från listan.",
     "Knapp Fjern tillatt: fjerner den valgte tillatte filen eller mappen fra listen.",
     "Knap Fjern tilladt: fjerner den valgte tilladte fil eller mappe fra listen.",
     "Poista sallittu -painike: poistaa valitun sallitun tiedoston tai kansion luettelosta.",
     "Przycisk Usuń dozwolone: usuwa wybrany dozwolony plik lub folder z listy.",
     "Tlačítko Odebrat povolené: odebere vybraný povolený soubor nebo složku ze seznamu.",
     "Engedélyezett eltávolítása gomb: eltávolítja a kijelölt engedélyezett fájlt vagy mappát az engedélyezettek listájáról.",
     "Buton Eliminare permis: elimină fișierul sau directorul permis selectat din lista de permise."),

                    ["Clear Allowed Button: This button clears the entire list of allowed files and directories."] =
    ("Bouton Effacer autorisés : vide la liste complète des éléments autorisés.",
     "Erlaubt-Liste-löschen-Schaltfläche: Leert die gesamte Liste der erlaubten Elemente.",
     "Botón Limpiar permitidos: vacía la lista completa de elementos permitidos.",
     "Pulsante Cancella consentiti: cancella l’intero elenco di file e cartelle consentite.",
     "Botão Limpar permitidos: limpa a lista completa de ficheiros e pastas permitidas.",
     "Botão Limpar permitidos: limpa a lista completa de arquivos e pastas permitidas.",
     "Knop Toegestane lijst wissen: wist de volledige lijst met toegestane bestanden en mappen.",
     "Knapp Rensa tillåtna: rensar hela listan med tillåtna filer och mappar.",
     "Knapp Tøm tillatte: tømmer hele listen over tillatte filer og mapper.",
     "Knap Ryd tilladte: rydder hele listen over tilladte filer og mapper.",
     "Tyhjennä sallitut -painike: tyhjentää koko sallittujen tiedostojen ja kansioiden luettelon.",
     "Przycisk Wyczyść dozwolone: czyści całą listę dozwolonych plików i folderów.",
     "Tlačítko Vyčistit povolené: vyčistí celý seznam povolených souborů a složek.",
     "Engedélyezettek törlése gomb: törli az engedélyezett fájlok és mappák teljes listáját.",
     "Buton Golește permise: șterge întreaga listă de fișiere și directoare permise."),

                    ["Add Excluded Button: This button adds a new excluded file or directory to the exclusions list."] =
    ("Bouton Ajouter exclu : ajoute un nouveau fichier ou dossier exclu.",
     "Hinzufügen-ausgeschlossen-Schaltfläche: Fügt eine neue ausgeschlossene Datei oder einen Ordner hinzu.",
     "Botón Añadir excluido: agrega un nuevo archivo o carpeta excluida.",
     "Pulsante Aggiungi escluso: aggiunge un nuovo file o cartella esclusa all’elenco.",
     "Botão Adicionar excluído: adiciona um novo ficheiro ou pasta excluída à lista.",
     "Botão Adicionar excluído: adiciona um novo arquivo ou pasta excluída à lista.",
     "Knop Uitgesloten toevoegen: voegt een nieuw uitgesloten bestand of map toe aan de lijst.",
     "Knapp Lägg till exkluderad: lägger till en ny exkluderad fil eller mapp i listan.",
     "Knapp Legg til ekskludert: legger til en ny ekskludert fil eller mappe i listen.",
     "Knap Tilføj ekskluderet: tilføjer en ny ekskluderet fil eller mappe til listen.",
     "Lisää poissuljettu -painike: lisää uuden poissuljetun tiedoston tai kansion luetteloon.",
     "Przycisk Dodaj wykluczone: dodaje nowy wykluczony plik lub folder do listy.",
     "Tlačítko Přidat vyloučené: přidá nový vyloučený soubor nebo složku do seznamu.",
     "Kizárt hozzáadása gomb: új kizárt fájlt vagy mappát ad hozzá a kizártak listájához.",
     "Buton Adăugare exclus: adaugă un fișier sau director exclus nou în lista de excluderi."),

                    ["Remove Excluded Button: This button removes the selected excluded file or directory from the exclusions list."] =
    ("Bouton Supprimer exclu : retire l’élément exclu sélectionné.",
     "Entfernen-ausgeschlossen-Schaltfläche: Entfernt das markierte ausgeschlossene Element.",
     "Botón Quitar excluido: quita el elemento excluido seleccionado.",
     "Pulsante Rimuovi escluso: rimuove il file o la cartella esclusa selezionata.",
     "Botão Remover excluído: remove o item excluído selecionado.",
     "Botão Remover excluído: remove o elemento excluído selecionado.",
     "Knop Uitgesloten verwijderen: verwijdert het geselecteerde uitgesloten bestand of map uit de lijst.",
     "Knapp Ta bort exkluderad: tar bort den valda exkluderade filen eller mappen från listan.",
     "Knapp Fjern ekskludert: fjerner den valgte ekskluderte filen eller mappen fra listen.",
     "Knap Fjern ekskluderet: fjerner den valgte ekskluderede fil eller mappe fra listen.",
     "Poista poissuljettu -painike: poistaa valitun poissuljetun tiedoston tai kansion luettelosta.",
     "Przycisk Usuń wykluczone: usuwa wybrany wykluczony plik lub folder z listy.",
     "Tlačítko Odebrat vyloučené: odebere vybraný vyloučený soubor nebo složku ze seznamu.",
     "Kizárt eltávolítása gomb: eltávolítja a kijelölt kizárt fájlt vagy mappát a kizártak listájáról.",
     "Buton Eliminare exclus: elimină fișierul sau directorul exclus selectat din lista de excluderi."),

                    ["Clear Excluded Button: This button clears the entire list of excluded files and directories."] =
    ("Bouton Effacer exclus : vide la liste complète des éléments exclus.",
     "Ausgeschlossen-Liste-löschen-Schaltfläche: Leert die gesamte Liste der ausgeschlossenen Elemente.",
     "Botón Limpiar excluidos: vacía la lista completa de elementos excluidos.",
     "Pulsante Cancella esclusi: cancella l’intero elenco di file e cartelle esclusi.",
     "Botão Limpar excluídos: limpa a lista completa de ficheiros e pastas excluídas.",
     "Botão Limpar excluídos: limpa a lista completa de arquivos e pastas excluídas.",
     "Knop Uitgesloten lijst wissen: wist de volledige lijst met uitgesloten bestanden en mappen.",
     "Knapp Rensa exkluderade: rensar hela listan med exkluderade filer och mappar.",
     "Knapp Tøm ekskluderte: tømmer hele listen over ekskluderte filer og mapper.",
     "Knap Ryd ekskluderede: rydder hele listen over ekskluderede filer og mapper.",
     "Tyhjennä poissuljetut -painike: tyhjentää koko poissuljettujen tiedostojen ja kansioiden luettelon.",
     "Przycisk Wyczyść wykluczone: czyści całą listę wykluczonych plików i folderów.",
     "Tlačítko Vyčistit vyloučené: vyčistí celý seznam vyloučených souborů a složek.",
     "Kizártak törlése gomb: törli a kizárt fájlok és mappák teljes listáját.",
     "Buton Golește excluse: șterge întreaga listă de fișiere și directoare excluse."),

                    ["Allowed Text Box: This text box allows you to enter file or directory paths to be added to the allowed list."] =
    ("Zone de texte autorisés : permet de saisir les chemins à ajouter à la liste des autorisés.",
     "Erlaubt-Textbox: Ermöglicht das Eingeben von Pfaden, die zur erlaubten Liste hinzugefügt werden.",
     "Cuadro de texto permitidos: permite escribir rutas para agregar a la lista de permitidos.",
     "Casella di testo Consentiti: consente di immettere i percorsi dei file o delle cartelle da aggiungere all’elenco consentiti.",
     "Caixa de texto Autorizados: permite introduzir caminhos de ficheiros ou pastas a adicionar à lista de autorizados.",
     "Caixa de texto Permitidos: permite introduzir caminhos de arquivos ou pastas a adicionar à lista de permitidos.",
     "Tekstvak Toegestaan: laat u bestands- of mappaden invoeren die aan de toegestane lijst moeten worden toegevoegd.",
     "Textruta Tillåtna: låter dig ange fil- eller mapsökvägar som ska läggas till i listan över tillåtna.",
     "Tekstboks Tillatte: lar deg skrive inn fil- eller mappebaner som skal legges til i listen over tillatte.",
     "Tekstboks Tilladte: lader dig indtaste fil- eller mappestier, der skal føjes til listen over tilladte.",
     "Sallittu-tekstilaatikko: mahdollistaa tiedosto- tai kansiopolkien kirjoittamisen lisättäväksi sallittujen luetteloon.",
     "Pole tekstowe Dozwolone: pozwala wprowadzić ścieżki plików lub folderów, które mają zostać dodane do listy dozwolonych.",
     "Textové pole Povolené: umožňuje zadat cesty k souborům nebo složkám, které mají být přidány do seznamu povolených.",
     "Engedélyezettek szövegmezője: lehetővé teszi fájl- vagy könyvtárutak megadását az engedélyezettek listájához való hozzáadáshoz.",
     "Casetă text Permise: permite introducerea căilor fișierelor sau directoarelor care urmează să fie adăugate în lista de permise."),

                    ["Excluded Text Box: This text box allows you to enter file or directory paths to be added to the exclusions list."] =
    ("Zone de texte exclus : permet de saisir les chemins à ajouter à la liste des exclus.",
     "Ausgeschlossen-Textbox: Ermöglicht das Eingeben von Pfaden, die zur Ausgeschlossen-Liste hinzugefügt werden.",
     "Cuadro de texto excluidos: permite escribir rutas para agregar a la lista de excluidos.",
     "Casella di testo Esclusi: consente di immettere i percorsi dei file o delle cartelle da aggiungere all’elenco esclusi.",
     "Caixa de texto Excluídos: permite introduzir caminhos de ficheiros ou pastas a adicionar à lista de excluídos.",
     "Caixa de texto Excluídos: permite introduzir caminhos de arquivos ou pastas a adicionar à lista de excluídos.",
     "Tekstvak Uitgesloten: laat u bestands- of mappaden invoeren die aan de uitsluitingslijst moeten worden toegevoegd.",
     "Textruta Exkluderade: låter dig ange fil- eller mapsökvägar som ska läggas till i listan över exkluderade.",
     "Tekstboks Ekskluderte: lar deg skrive inn fil- eller mappebaner som skal legges til i listen over ekskluderte.",
     "Tekstboks Ekskluderede: lader dig indtaste fil- eller mappestier, der skal føjes til listen over ekskluderede.",
     "Poissuljetut-tekstilaatikko: mahdollistaa tiedosto- tai kansiopolkien kirjoittamisen lisättäväksi poissuljettujen luetteloon.",
     "Pole tekstowe Wykluczone: pozwala wprowadzić ścieżki plików lub folderów, które mają zostać dodane do listy wykluczonych.",
     "Textové pole Vyloučené: umožňuje zadat cesty k souborům nebo složkám, které mají být přidány do seznamu vyloučených.",
     "Kizártak szövegmezője: lehetővé teszi fájl- vagy könyvtárutak megadását a kizártak listájához való hozzáadáshoz.",
     "Casetă text Excluse: permite introducerea căilor fișierelor sau directoarelor care urmează să fie adăugate în lista de excluse."),

                    ["Allowed List Box: This list box displays the list of allowed files and directories that will be included in the operation."] =
    ("Liste des autorisés : affiche les fichiers et dossiers autorisés à être inclus dans l’opération.",
     "Erlaubt-Liste: Zeigt die erlaubten Dateien und Ordner an, die in die Operation einbezogen werden.",
     "Lista de permitidos: muestra los archivos y carpetas permitidos que se incluirán en la operación.",
     "ListBox Consentiti: mostra l’elenco dei file e delle cartelle consentiti che saranno inclusi nell’operazione.",
     "Caixa de lista Autorizados: mostra a lista de ficheiros e pastas autorizados a serem incluídos na operação.",
     "Caixa de lista Permitidos: mostra a lista de arquivos e pastas permitidos que serão incluídos na operação.",
     "Lijstbox Toegestaan: toont de lijst met toegestane bestanden en mappen die in de bewerking worden opgenomen.",
     "Listruta Tillåtna: visar listan över tillåtna filer och mappar som kommer att inkluderas i åtgärden.",
     "Listeboks Tillatte: viser listen over tillatte filer og mapper som skal inkluderes i operasjonen.",
     "Listeboks Tilladte: viser listen over tilladte filer og mapper, der skal inkluderes i handlingen.",
     "Sallitut-luetteloruutu: näyttää luettelon sallituista tiedostoista ja kansioista, jotka sisällytetään toimenpiteeseen.",
     "Listbox Dozwolone: wyświetla listę dozwolonych plików i folderów, które zostaną uwzględnione w operacji.",
     "Seznam povolených: zobrazuje seznam povolených souborů a složek, které budou zahrnuty do operace.",
     "Engedélyezettek listája: megjeleníti az engedélyezett fájlok és mappák listáját, amelyek bekerülnek a műveletbe.",
     "Listă Permise: afișează lista fișierelor și directoarelor permise care vor fi incluse în operațiune."),







                    ["Excluded List Box: This list box displays the list of excluded files and directories that will be skipped during the operation."] =
    ("Liste des exclus : affiche les fichiers et dossiers exclus qui seront ignorés pendant l’opération.",
     "Ausgeschlossen-Liste: Zeigt die ausgeschlossenen Dateien und Ordner an, die übersprungen werden.",
     "Lista de excluidos: muestra los archivos y carpetas excluidos que se omitirán durante la operación.",
     "ListBox Esclusi: mostra l’elenco dei file e delle cartelle esclusi che saranno ignorati durante l’operazione.",
     "Caixa de lista Excluídos: mostra a lista de ficheiros e pastas excluídos que serão ignorados durante a operação.",
     "Caixa de lista Excluídos: mostra a lista de arquivos e pastas excluídos que serão ignorados durante a operação.",
     "Lijstbox Uitgesloten: toont de lijst met uitgesloten bestanden en mappen die tijdens de bewerking worden overgeslagen.",
     "Listruta Exkluderade: visar listan över exkluderade filer och mappar som kommer att hoppas över under åtgärden.",
     "Listeboks Ekskluderte: viser listen over ekskluderte filer og mapper som skal hoppes over under operasjonen.",
     "Listeboks Ekskluderede: viser listen over ekskluderede filer og mapper, der springes over under handlingen.",
     "Poissuljetut-luetteloruutu: näyttää luettelon poissuljetuista tiedostoista ja kansioista, jotka ohitetaan toimenpiteen aikana.",
     "Listbox Wykluczone: wyświetla listę wykluczonych plików i folderów, które zostaną pominięte podczas operacji.",
     "Seznam vyloučených: zobrazuje seznam vyloučených souborů a složek, které budou během operace přeskočeny.",
     "Kizártak listája: megjeleníti a kizárt fájlok és mappák listáját, amelyek a művelet során kihagyásra kerülnek.",
     "Listă Excluse: afișează lista fișierelor și directoarelor excluse care vor fi omise în timpul operațiunii."),

                    ["Exclusions Tab: This tab allows you to manage the lists of allowed and excluded files and directories for the operation."] =
    ("Onglet Exclusions : permet de gérer les listes de fichiers et dossiers autorisés et exclus pour l’opération.",
     "Ausschluss-Tab: Ermöglicht die Verwaltung der Listen mit erlaubten und ausgeschlossenen Dateien und Ordnern für die Operation.",
     "Pestaña Exclusiones: permite administrar las listas de archivos y carpetas permitidos y excluidos para la operación.",
     "Scheda Esclusioni: consente di gestire gli elenchi di file e cartelle consentiti ed esclusi per l’operazione.",
     "Separador Exclusões: permite gerir as listas de ficheiros e pastas autorizados e excluídos para a operação.",
     "Guia Exclusões: permite gerenciar as listas de arquivos e pastas permitidos e excluídos para a operação.",
     "Tabblad Uitsluitingen: hiermee beheert u de lijsten met toegestane en uitgesloten bestanden en mappen voor de bewerking.",
     "Flik Exkluderingar: låter dig hantera listorna över tillåtna och exkluderade filer och mappar för åtgärden.",
     "Fane Ekskluderinger: lar deg administrere listene over tillatte og ekskluderte filer og mapper for operasjonen.",
     "Fane Ekskluderinger: lader dig administrere listerne over tilladte og ekskluderede filer og mapper for handlingen.",
     "Poissulkemiset-välilehti: mahdollistaa sallittujen ja poissuljettujen tiedostojen ja kansioiden luetteloiden hallinnan toimenpiteelle.",
     "Zakładka Wykluczenia: pozwala zarządzać listami dozwolonych i wykluczonych plików oraz folderów dla operacji.",
     "Záložka Vyloučení: umožňuje spravovat seznamy povolených a vyloučených souborů a složek pro operaci.",
     "Kizárások lap: lehetővé teszi az engedélyezett és kizárt fájlok és mappák listáinak kezelését a művelethez.",
     "Filă Excluderi: permite gestionarea listelor de fișiere și directoare permise și excluse pentru operațiune."),

                    ["Skipped Tab: This tab displays the list of files that were skipped during the operation, along with options to manage the skipped files."] =
("Onglet Ignorés : affiche la liste des fichiers ignorés pendant l’opération avec des options pour les gérer.",
 "Übersprungen-Tab: Zeigt die Liste der übersprungenen Dateien der Operation mit Verwaltungsoptionen.",
 "Pestaña Omitidos: muestra la lista de archivos omitidos durante la operación con opciones para administrarlos.",
 "Scheda Saltati: mostra l’elenco dei file saltati durante l’operazione con opzioni per gestirli.",
 "Separador Ignorados: mostra a lista de ficheiros ignorados durante a operação com opções para os gerir.",
 "Guia Omitidos: mostra a lista de arquivos omitidos durante a operação com opções para administrá-los.",
 "Tabblad Overgeslagen: toont de lijst met bestanden die tijdens de bewerking zijn overgeslagen, inclusief beheeropties.",
 "Flik Överhoppade: visar listan över filer som hoppades över under åtgärden med alternativ för att hantera dem.",
 "Fane Hoppet over: viser listen over filer som ble hoppet over under operasjonen med valg for å administrere dem.",
 "Fane Sprunget over: viser listen over filer, der er sprunget over under handlingen med muligheder for at administrere dem.",
 "Ohitetut-välilehti: näyttää toimenpiteen aikana ohitettujen tiedostojen luettelon hallintavaihtoehtoineen.",
 "Zakładka Pominięte: wyświetla listę plików pominiętych podczas operacji wraz z opcjami ich zarządzania.",
 "Záložka Přeskočené: zobrazuje seznam souborů přeskočených během operace spolu s možnostmi jejich správy.",
 "Kihagyott lap: megjeleníti a művelet során kihagyott fájlok listáját a kezelésükre szolgáló lehetőségekkel.",
 "Filă Omise: afișează lista fișierelor omise în timpul operațiunii împreună cu opțiunile de administrare a acestora."),

                    ["Multi-Thread Tab: This tab allows you to configure and monitor multi-threaded operations for copying or moving files."] =
("Onglet Multi-thread : permet de configurer et surveiller les opérations multi-thread pour copier ou déplacer des fichiers.",
 "Multi-Thread-Tab: Ermöglicht die Konfiguration und Überwachung von Multithread-Operationen zum Kopieren oder Verschieben von Dateien.",
 "Pestaña Multi-hilo: permite configurar y supervisar operaciones multi-hilo para copiar o mover archivos.",
 "Scheda Multi-thread: consente di configurare e monitorare le operazioni multi-thread per copiare o spostare file.",
 "Separador Multi-thread: permite configurar e monitorizar operações multi-thread para copiar ou mover ficheiros.",
 "Guia Multi-hilo: permite configurar e monitorar operações multi-thread para copiar ou mover arquivos.",
 "Tabblad Multi-thread: hiermee configureert en bewaakt u multi-thread bewerkingen voor het kopiëren of verplaatsen van bestanden.",
 "Flik Multi-thread: låter dig konfigurera och övervaka multi-thread åtgärder för att kopiera eller flytta filer.",
 "Fane Multi-thread: lar deg konfigurere og overvåke multi-thread operasjoner for å kopiere eller flytte filer.",
 "Fane Multi-thread: lader dig konfigurere og overvåge multi-thread handlinger til kopiering eller flytning af filer.",
 "Multi-thread-välilehti: mahdollistaa multi-thread toimenpiteiden määrittämisen ja seurannan tiedostojen kopiointia tai siirtämistä varten.",
 "Zakładka Multi-thread: pozwala konfigurować i monitorować operacje multi-thread do kopiowania lub przenoszenia plików.",
 "Záložka Multi-thread: umožňuje konfigurovat a sledovat multi-thread operace pro kopírování nebo přesun souborů.",
 "Multi-thread lap: lehetővé teszi a multi-thread műveletek konfigurálását és figyelését fájlok másolásához vagy áthelyezéséhez.",
 "Filă Multi-thread: permite configurarea și monitorizarea operațiunilor multi-thread pentru copierea sau mutarea fișierelor."),

                    ["Window Group Box: This group box contains settings related to the application's window behavior, such as minimizing to the system tray."] =
    ("Groupe Fenêtre : contient les réglages relatifs au comportement de la fenêtre, comme la minimisation dans la zone de notification.",
     "Fenster-Gruppe: Enthält Einstellungen zum Fensterverhalten, z. B. Minimieren in das Benachrichtigungsfeld.",
     "Grupo Ventana: contiene ajustes relacionados con el comportamiento de la ventana, como minimizar a la bandeja del sistema.",
     "Gruppo Finestra: contiene le impostazioni relative al comportamento della finestra, come la riduzione a icona nell’area di notifica.",
     "Grupo Janela: contém as definições relacionadas com o comportamento da janela, como minimizar para a área de notificação.",
     "Grupo Janela: contém as configurações relacionadas ao comportamento da janela, como minimizar para a bandeja do sistema.",
     "Groep Venster: bevat instellingen met betrekking tot het venstergedrag, zoals minimaliseren naar het systeemvak.",
     "Grupp Fönster: innehåller inställningar relaterade till programfönstrets beteende, t.ex. minimering till systemfältet.",
     "Gruppe Vindu: inneholder innstillinger relatert til programvinduets atferd, som for eksempel minimering til systemstatusfeltet.",
     "Gruppe Vindue: indeholder indstillinger relateret til programvinduets adfærd, såsom minimering til systembakken.",
     "Ikkuna-ryhmä: sisältää sovellusikkunan käyttäytymiseen liittyvät asetukset, kuten minimointi ilmoitusalueelle.",
     "Grupa Okno: zawiera ustawienia dotyczące zachowania okna aplikacji, takie jak minimalizowanie do zasobnika systemowego.",
     "Skupina Okno: obsahuje nastavení související s chováním okna aplikace, například minimalizaci do oznamovací oblasti.",
     "Ablak csoport: tartalmazza az alkalmazásablak viselkedésével kapcsolatos beállításokat, például a tálcára minimalizálást.",
     "Grup Fereastră: conține setări legate de comportamentul ferestrei aplicației, cum ar fi minimizarea în zona de notificare."),

                    ["Always On Top CheckBox: This checkbox determines whether the application window should always stay on top of other windows."] =
    ("Case Toujours au premier plan : détermine si la fenêtre reste toujours au-dessus des autres.",
     "Immer-im-Vordergrund-CheckBox: Legt fest, ob das Fenster immer über anderen Fenstern bleibt.",
     "Casilla Siempre encima: determina si la ventana permanece siempre por encima de las demás.",
     "Casella di controllo Sempre in primo piano: determina se la finestra rimane sempre sopra le altre.",
     "Caixa de verificação Sempre no topo: determina se a janela fica sempre por cima das outras.",
     "Caixa de seleção Sempre no topo: determina se a janela permanece sempre acima das outras.",
     "Aanvinkvakje Altijd bovenop: bepaalt of het venster altijd bovenop andere vensters blijft.",
     "Kryssruta Alltid överst: avgör om fönstret alltid ska ligga överst bland andra fönster.",
     "Avkrysningsboks Alltid øverst: bestemmer om vinduet alltid skal ligge øverst blant andre vinduer.",
     "Markeringsfelt Altid øverst: afgør om vinduet altid skal forblive øverst blandt andre vinduer.",
     "Valintaruutu Aina päällimmäisenä: määrittää, pysyykö ikkuna aina muiden ikkunoiden päällä.",
     "Pole wyboru Zawsze na wierzchu: określa, czy okno aplikacji ma zawsze pozostawać nad innymi oknami.",
     "Zaškrtávací pole Vždy nahoře: určuje, zda má okno aplikace vždy zůstat nad ostatními okny.",
     "Mindig felül jelölőnégyzet: meghatározza, hogy az alkalmazásablak mindig a többi ablak felett maradjon-e.",
     "Casetă de selectare Întotdeauna deasupra: determină dacă fereastra aplicației rămâne întotdeauna deasupra celorlalte ferestre."),

                    ["Minimize to System Tray CheckBox: This checkbox determines whether the application should minimize to the system tray instead of the taskbar."] =
    ("Case Réduire dans la barre d’état : détermine si l’application se réduit dans la zone de notification au lieu de la barre des tâches.",
     "In-Benachrichtigungsfeld-minimieren-CheckBox: Legt fest, ob sich die Anwendung in das Benachrichtigungsfeld anstatt in die Taskleiste minimiert.",
     "Casilla Minimizar a bandeja: determina si la aplicación se minimiza a la bandeja del sistema en lugar de a la barra de tareas.",
     "Casella di controllo Riduci a icona nell’area di notifica: determina se l’applicazione viene minimizzata nell’area di notifica anziché nella barra delle applicazioni.",
     "Caixa de verificação Minimizar para a área de notificação: determina se a aplicação é minimizada para a área de notificação em vez da barra de tarefas.",
     "Caixa de seleção Minimizar para a bandeja do sistema: determina se o aplicativo é minimizado para a bandeja do sistema em vez da barra de tarefas.",
     "Aanvinkvakje Minimaliseren naar systeemvak: bepaalt of het programma naar het systeemvak wordt geminimaliseerd in plaats van naar de taakbalk.",
     "Kryssruta Minimera till systemfältet: avgör om programmet ska minimeras till systemfältet i stället för aktivitetsfältet.",
     "Avkrysningsboks Minimer til systemstatusfelt: bestemmer om programmet skal minimeres til systemstatusfeltet i stedet for oppgavelinjen.",
     "Markeringsfelt Minimer til systembakke: afgør om programmet skal minimeres til systembakken i stedet for proceslinjen.",
     "Valintaruutu Pienennä ilmoitusalueelle: määrittää, pienennetäänkö sovellus ilmoitusalueelle tehtäväpalkin sijasta.",
     "Pole wyboru Minimalizuj do zasobnika systemowego: określa, czy aplikacja ma być minimalizowana do zasobnika systemowego zamiast do paska zadań.",
     "Zaškrtávací pole Minimalizovat do oznamovací oblasti: určuje, zda se má aplikace minimalizovat do oznamovací oblasti namísto na hlavní panel.",
     "Minimalizálás a tálcára jelölőnégyzet: meghatározza, hogy az alkalmazás a tálcára legyen-e minimalizálva a feladatsáv helyett.",
     "Casetă de selectare Minimizare în zona de notificare: determină dacă aplicația se minimizează în zona de notificare în loc de bara de activități."),

                    ["Confirm Drag & Drop CheckBox: This checkbox determines whether to show a confirmation dialog when files are dragged and dropped into the application."] =
    ("Case Confirmer glisser-déposer : affiche une boîte de confirmation lors du glisser-déposer de fichiers.",
     "Drag-&-Drop-bestätigen-CheckBox: Zeigt einen Bestätigungsdialog beim Ablegen von Dateien an.",
     "Casilla Confirmar arrastrar y soltar: muestra un diálogo de confirmación al soltar archivos.",
     "Casella di controllo Conferma trascina e rilascia: mostra una finestra di conferma quando i file vengono trascinati e rilasciati nell’applicazione.",
     "Caixa de verificação Confirmar arrastar e soltar: mostra uma caixa de diálogo de confirmação quando ficheiros são arrastados e largados na aplicação.",
     "Caixa de seleção Confirmar arrastar e soltar: mostra uma caixa de diálogo de confirmação quando arquivos são arrastados e soltos no aplicativo.",
     "Aanvinkvakje Drag & drop bevestigen: bepaalt of een bevestigingsdialoogvenster wordt weergegeven wanneer bestanden worden verslepen en neergezet in de toepassing.",
     "Kryssruta Bekräfta dra och släpp: avgör om en bekräftelsedialog ska visas när filer dras och släpps i programmet.",
     "Avkrysningsboks Bekreft dra og slipp: bestemmer om en bekreftelsesdialog skal vises når filer dras og slippes i programmet.",
     "Markeringsfelt Bekræft træk og slip: afgør om en bekræftelsesdialog skal vises, når filer trækkes og slippes i programmet.",
     "Valintaruutu Vahvista vedä ja pudota: määrittää, näytetäänkö vahvistusvalintaikkuna, kun tiedostoja vedetään ja pudotetaan sovellukseen.",
     "Pole wyboru Potwierdź przeciągnij i upuść: określa, czy wyświetlać okno potwierdzenia po przeciągnięciu i upuszczeniu plików do aplikacji.",
     "Zaškrtávací pole Potvrdit přetažení: určuje, zda se má zobrazit potvrzovací dialog při přetažení souborů do aplikace.",
     "Húzza & ejtse visszaigazolás jelölőnégyzet: meghatározza, hogy megjelenjen-e visszaigazoló párbeszédablak, ha fájlokat húznak és ejtenek az alkalmazásba.",
     "Casetă de selectare Confirmare drag & drop: determină dacă se afișează o casetă de dialog de confirmare când fișierele sunt trase și eliberate în aplicație."),

                    ["Context Menu CheckBox: This checkbox determines whether to add an option to the Windows context menu for quick access to the application."] =
    ("Case Menu contextuel : ajoute une option au menu contextuel de Windows pour un accès rapide.",
     "Kontextmenü-CheckBox: Fügt dem Windows-Kontextmenü eine Option für schnellen Zugriff hinzu.",
     "Casilla Menú contextual: añade una opción al menú contextual de Windows para acceso rápido.",
     "Casella di controllo Menu contestuale: aggiunge un’opzione al menu contestuale di Windows per l’accesso rapido.",
     "Caixa de verificação Menu contextual: adiciona uma opção ao menu de contexto do Windows para acesso rápido.",
     "Caixa de seleção Menu contextual: adiciona uma opção ao menu de contexto do Windows para acesso rápido.",
     "Aanvinkvakje Contextmenu: voegt een optie toe aan het Windows-contextmenu voor snelle toegang tot de toepassing.",
     "Kryssruta Snabbmeny: lägger till ett alternativ i Windows snabbmeny för snabb åtkomst till programmet.",
     "Avkrysningsboks Hurtigmeny: legger til et alternativ i Windows hurtigmeny for rask tilgang til programmet.",
     "Markeringsfelt Hurtigmenu: tilføjer en mulighed til Windows-hurtigmenuen for hurtig adgang til programmet.",
     "Valintaruutu Pikavalikko: lisää vaihtoehdon Windowsin pikavalikkoon, jotta sovellukseen pääsee nopeasti.",
     "Pole wyboru Menu kontekstowe: dodaje opcję do menu kontekstowego systemu Windows dla szybkiego dostępu do aplikacji.",
     "Zaškrtávací pole Kontextové menu: přidává možnost do kontextového menu Windows pro rychlý přístup k aplikaci.",
     "Helyi menü jelölőnégyzet: hozzáad egy lehetőséget a Windows helyi menüjéhez az alkalmazás gyors eléréséhez.",
     "Casetă de selectare Meniu contextual: adaugă o opțiune la meniul contextual Windows pentru acces rapid la aplicație."),

                    ["Skins & Language Group Box: This group box contains settings related to the application's appearance and language preferences."] =
    ("Groupe Apparence & Langue : contient les réglages d’apparence et de langue de l’application.",
     "Design-&-Sprache-Gruppe: Enthält Einstellungen zum Erscheinungsbild und zur Sprache der Anwendung.",
     "Grupo Aspecto e idioma: contiene ajustes de apariencia e idioma de la aplicación.",
     "Gruppo Aspetto e lingua: contiene le impostazioni relative all’aspetto e alla lingua dell’applicazione.",
     "Grupo Aspeto e idioma: contém as definições relacionadas com o aspeto e o idioma da aplicação.",
     "Grupo Aparência e idioma: contém as configurações relacionadas à aparência e ao idioma do aplicativo.",
     "Groep Vormgeving & taal: bevat instellingen voor het uiterlijk en de taal van de toepassing.",
     "Grupp Utseende & språk: innehåller inställningar för programmets utseende och språk.",
     "Gruppe Utseende & språk: inneholder innstillinger for programmets utseende og språk.",
     "Gruppe Udseende & sprog: indeholder indstillinger for programmets udseende og sprog.",
     "Ulkoasu ja kieli -ryhmä: sisältää sovelluksen ulkonäköön ja kieliasetuksiin liittyvät asetukset.",
     "Grupa Wygląd i język: zawiera ustawienia dotyczące wyglądu i języka aplikacji.",
     "Skupina Vzhled a jazyk: obsahuje nastavení související s vzhledem a jazykem aplikace.",
     "Megjelenés és nyelv csoport: tartalmazza az alkalmazás megjelenésével és nyelvi beállításaival kapcsolatos beállításokat.",
     "Grup Aspect și limbă: conține setări legate de aspectul și limba aplicației."),

                    ["Language ComboBox: This dropdown combobox allows you to select the language for the application's user interface."] =
    ("ComboBox Langue : permet de choisir la langue de l’interface utilisateur.",
     "Sprache-ComboBox: Ermöglicht die Auswahl der Sprache der Benutzeroberfläche.",
     "ComboBox Idioma: permite elegir el idioma de la interfaz de usuario.",
     "ComboBox Lingua: consente di selezionare la lingua dell’interfaccia utente.",
     "ComboBox Idioma: permite escolher o idioma da interface do utilizador.",
     "ComboBox Idioma: permite escolher o idioma da interface do usuário.",
     "ComboBox Taal: hiermee selecteert u de taal voor de gebruikersinterface van de toepassing.",
     "ComboBox Språk: låter dig välja språk för programmets användargränssnitt.",
     "ComboBox Språk: lar deg velge språk for brukergrensesnittet til programmet.",
     "ComboBox Sprog: lader dig vælge sproget for programmets brugergrænseflade.",
     "ComboBox Kieli: mahdollistaa sovelluksen käyttöliittymän kielen valinnan.",
     "ComboBox Język: pozwala wybrać język interfejsu użytkownika aplikacji.",
     "ComboBox Jazyk: umožňuje vybrat jazyk uživatelského rozhraní aplikace.",
     "Nyelv ComboBox: lehetővé teszi az alkalmazás felhasználói felületének nyelvének kiválasztását.",
     "ComboBox Limbă: permite selectarea limbii pentru interfața utilizatorului aplicației."),




                    ["Set MB/GB Over Numeric Up-Down: This control allows you to specify the size threshold in megabytes for applying multi-threading to larger files."] =
    ("Zone numérique Définir MB/GB au-dessus : définit le seuil en mégaoctets pour appliquer le multi-thread aux gros fichiers.",
     "MB/GB-über-Numeric-Up-Down: Legt die Größenschwelle in Megabytes fest, ab der Multithreading für größere Dateien angewendet wird.",
     "Control numérico Establecer MB/GB sobre: define el umbral en megabytes para aplicar multi-hilo a archivos grandes.",
     "Controllo numerico Imposta MB/GB oltre: definisce la soglia in megabyte per applicare il multi-threading ai file più grandi.",
     "Controlo numérico Definir MB/GB acima: define o limiar em megabytes para aplicar multi-threading a ficheiros maiores.",
     "Controle numérico Definir MB/GB acima: define o limite em megabytes para aplicar multi-threading a arquivos maiores.",
     "Numerieke instelling MB/GB boven: stelt de drempelwaarde in megabytes in voor het toepassen van multi-threading op grotere bestanden.",
     "Numerisk kontroll Ställ in MB/GB över: definierar tröskelvärdet i megabyte för att tillämpa multi-threading på större filer.",
     "Numerisk kontroll Sett MB/GB over: definerer terskelverdi i megabyte for å bruke multi-threading på større filer.",
     "Numerisk kontrol Indstil MB/GB over: definerer tærskelværdi i megabyte for at anvende multi-threading på større filer.",
     "Numeerinen säätö Aseta MB/GB yli: määrittää kynnysarvon megatavuina monisäikeistyksen soveltamiseen suurempiin tiedostoihin.",
     "Kontrolka numeryczna Ustaw MB/GB powyżej: określa próg w megabajtach do stosowania wielowątkowości dla większych plików.",
     "Číselné pole Nastavit MB/GB nad: definuje prahovou hodnotu v megabajtech pro použití vícevláknového zpracování u větších souborů.",
     "Numerikus vezérlő MB/GB feletti beállítás: meghatározza a küszöbértéket megabájtban a többszálúság alkalmazásához nagyobb fájlokhoz.",
     "Control numeric Setare MB/GB peste: definește pragul în megaocteți pentru aplicarea multi-threading la fișiere mai mari."),

                    ["File/Directory Settings Group Box: This group box contains settings related to how files and directories are exported or zipped (before) for the copy or move operations."] =
    ("Groupe Paramètres Fichiers/Dossiers : contient les réglages sur l'export ou la compression avant copie/déplacement.",
     "Datei/Ordner-Einstellungen-Gruppe: Enthält Einstellungen zum Exportieren oder Komprimieren (vorher) von Dateien und Ordnern für Kopier-/Verschiebe-Operationen.",
     "Grupo Ajustes Archivos/Carpetas: contiene ajustes sobre exportar o comprimir (antes) archivos y carpetas para operaciones de copiar/mover.",
     "Gruppo Impostazioni File/Cartelle: contiene impostazioni relative all'esportazione o compressione (prima) di file e cartelle per operazioni di copia/spostamento.",
     "Grupo Definições Ficheiros/Pastas: contém definições relacionadas com a exportação ou compressão (antes) de ficheiros e pastas para operações de cópia/movimentação.",
     "Grupo Configurações Arquivos/Pastas: contém configurações relacionadas à exportação ou compactação (antes) de arquivos e pastas para operações de cópia/movimentação.",
     "Groepsvak Bestands-/Mapinstellingen: bevat instellingen met betrekking tot het exporteren of comprimeren (vooraf) van bestanden en mappen voor kopieer-/verplaatsoperaties.",
     "Gruppfält Fil-/Mappinställningar: innehåller inställningar relaterade till exportering eller komprimering (före) av filer och mappar för kopierings-/flyttoperationer.",
     "Gruppeboks Fil-/Mappinnstillinger: inneholder innstillinger knyttet til eksportering eller komprimering (før) av filer og mapper for kopierings-/flyttoperasjoner.",
     "Gruppefelt Fil-/Mappeindstillinger: indeholder indstillinger relateret til eksport eller komprimering (før) af filer og mapper til kopierings-/flytoperationer.",
     "Ryhmäruutu Tiedosto-/Kansioasetukset: sisältää asetuksia, jotka liittyvät tiedostojen ja kansioiden viemiseen tai pakkaamiseen (ennen) kopioi-/siirrä-toimintoja varten.",
     "Pole grupy Ustawienia Plików/Katalogów: zawiera ustawienia związane z eksportowaniem lub kompresją (przed) plików i katalogów do operacji kopiowania/przenoszenia.",
     "Skupina Nastavení Souborů/Složek: obsahuje nastavení týkající se exportu nebo komprese (před) souborů a složek pro operace kopírování/přesunu.",
     "Csoportmező Fájl-/Mappabeállítások: tartalmazza a fájlok és mappák exportálásához vagy tömörítéséhez (előtte) kapcsolódó beállításokat másolási/áthelyezési műveletekhez.",
     "Casetă de grup Setări Fișiere/Directoare: conține setări legate de exportul sau comprimarea (înainte) fișierelor și directoarelor pentru operații de copiere/mutare."),

                    ["Only Names CheckBox: This checkbox determines whether to export only the names of files and directories without their full paths."] =
    ("Case Noms seulement : exporte uniquement les noms sans les chemins complets.",
     "Nur Namen-CheckBox: Exportiert nur die Namen ohne vollständige Pfade.",
     "Casilla Solo nombres: exporta solo los nombres sin rutas completas.",
     "Casella Solo nomi: esporta solo i nomi senza i percorsi completi.",
     "Caixa Apenas nomes: exporta apenas os nomes sem os caminhos completos.",
     "Caixa Apenas nomes: exporta apenas os nomes sem os caminhos completos.",
     "Selectievakje Alleen namen: exporteert alleen de namen zonder volledige paden.",
     "Kryssruta Endast namn: exporterar endast namnen utan fullständiga sökvägar.",
     "Avmerkingsboks Kun navn: eksporterer kun navnene uten fullstendige stier.",
     "Afkrydsningsfelt Kun navne: eksporterer kun navnene uden fulde stier.",
     "Valintaruutu Vain nimet: vie vain nimet ilman täydellisiä polkuja.",
     "Pole wyboru Tylko nazwy: eksportuje tylko nazwy bez pełnych ścieżek.",
     "Zaškrtávací políčko Pouze názvy: exportuje pouze názvy bez úplných cest.",
     "Jelölőnégyzet Csak nevek: csak a neveket exportálja teljes elérési utak nélkül.",
     "Casetă Doar nume: exportă doar numele fără căile complete."),

                    ["Full Paths CheckBox: This checkbox determines whether to export the full paths of files and directories."] =
    ("Case Chemins complets : exporte les chemins complets.",
     "Vollständige Pfade-CheckBox: Exportiert die vollständigen Pfade.",
     "Casilla Rutas completas: exporta las rutas completas.",
     "Casella Percorsi completi: esporta i percorsi completi.",
     "Caixa Caminhos completos: exporta os caminhos completos.",
     "Caixa Caminhos completos: exporta os caminhos completos.",
     "Selectievakje Volledige paden: exporteert de volledige paden.",
     "Kryssruta Fullständiga sökvägar: exporterar de fullständiga sökvägarna.",
     "Avmerkingsboks Fullstendige stier: eksporterer de fullstendige stiene.",
     "Afkrydsningsfelt Fulde stier: eksporterer de fulde stier.",
     "Valintaruutu Täydelliset polut: vie täydelliset polut.",
     "Pole wyboru Pełne ścieżki: eksportuje pełne ścieżki.",
     "Zaškrtávací políčko Úplné cesty: exportuje úplné cesty.",
     "Jelölőnégyzet Teljes elérési utak: exportálja a teljes elérési utakat.",
     "Casetă Căi complete: exportă căile complete."),

                    ["Export Button: This button exports the list of files and directories to a text file based on the selected settings (only names or full paths)."] =
    ("Bouton Exporter : exporte la liste vers un fichier texte selon les réglages choisis (noms ou chemins complets).",
     "Exportieren-Schaltfläche: Exportiert die Liste in eine Textdatei gemäß den gewählten Einstellungen (Namen oder vollständige Pfade).",
     "Botón Exportar: exporta la lista a un archivo de texto según los ajustes elegidos (nombres o rutas completas).",
     "Pulsante Esporta: esporta l'elenco in un file di testo in base alle impostazioni selezionate (solo nomi o percorsi completi).",
     "Botão Exportar: exporta a lista para um ficheiro de texto com base nas definições selecionadas (apenas nomes ou caminhos completos).",
     "Botão Exportar: exporta a lista para um arquivo de texto com base nas configurações selecionadas (apenas nomes ou caminhos completos).",
     "Knop Exporteren: exporteert de lijst naar een tekstbestand op basis van de geselecteerde instellingen (alleen namen of volledige paden).",
     "Knapp Exportera: exporterar listan till en textfil baserat på de valda inställningarna (endast namn eller fullständiga sökvägar).",
     "Knapp Eksporter: eksporterer listen til en tekstfil basert på de valgte innstillingene (kun navn eller fullstendige stier).",
     "Knap Eksporter: eksporterer listen til en tekstfil baseret på de valgte indstillinger (kun navne eller fulde stier).",
     "Painike Vie: vie listan tekstitiedostoon valittujen asetusten perusteella (vain nimet tai täydelliset polut).",
     "Przycisk Eksportuj: eksportuje listę do pliku tekstowego na podstawie wybranych ustawień (tylko nazwy lub pełne ścieżki).",
     "Tlačítko Export: exportuje seznam do textového souboru na základě vybraných nastavení (pouze názvy nebo úplné cesty).",
     "Gomb Exportálás: exportálja a listát egy szöveges fájlba a kiválasztott beállítások alapján (csak nevek vagy teljes elérési utak).",
     "Buton Export: exportă lista într-un fișier text pe baza setărilor selectate (doar nume sau căi complete)."),

                    ["Zip Separate CheckBox: This checkbox determines whether to create separate zip files for each file and directory before the copy or move operations."] =
    ("Case Zip séparé : crée des fichiers zip séparés pour chaque élément avant copie/déplacement.",
     "Getrennt zippen-CheckBox: Erstellt separate Zip-Dateien für jedes Element vor dem Kopieren/Verschieben.",
     "Casilla Zip separado: crea archivos zip separados para cada elemento antes de copiar/mover.",
     "Casella Zip separato: crea file zip separati per ogni elemento prima delle operazioni di copia/spostamento.",
     "Caixa Zip separado: cria ficheiros zip separados para cada elemento antes das operações de cópia/movimentação.",
     "Caixa Zip separado: cria arquivos zip separados para cada elemento antes das operações de cópia/movimentação.",
     "Selectievakje Afzonderlijk zippen: maakt afzonderlijke zip-bestanden voor elk element vóór de kopieer-/verplaatsoperaties.",
     "Kryssruta Zippa separat: skapar separata zip-filer för varje element före kopierings-/flyttoperationerna.",
     "Avmerkingsboks Zip separat: oppretter separate zip-filer for hvert element før kopierings-/flyttoperasjonene.",
     "Afkrydsningsfelt Zip separat: opretter separate zip-filer for hvert element før kopierings-/flytoperationerne.",
     "Valintaruutu Pakkaa erikseen: luo erilliset zip-tiedostot jokaiselle kohteelle ennen kopioi-/siirrä-toimintoja.",
     "Pole wyboru Osobny Zip: tworzy osobne pliki zip dla każdego elementu przed operacjami kopiowania/przenoszenia.",
     "Zaškrtávací políčko Zip zvlášť: vytváří samostatné zip soubory pro každý prvek před operacemi kopírování/přesunu.",
     "Jelölőnégyzet Külön zip: külön zip fájlokat hoz létre minden elemhez a másolási/áthelyezési műveletek előtt.",
     "Casetă Zip separat: creează fișiere zip separate pentru fiecare element înainte de operațiile de copiere/mutare."),

                    ["Zip Together CheckBox: This checkbox determines whether to create a single zip file containing all files and directories before the copy or move operations."] =
    ("Case Zip ensemble : crée un seul fichier zip contenant tous les éléments avant copie/déplacement.",
     "Gemeinsam zippen-CheckBox: Erstellt eine einzelne Zip-Datei mit allen Elementen vor dem Kopieren/Verschieben.",
     "Casilla Zip conjunto: crea un único archivo zip con todos los elementos antes de copiar/mover.",
     "Casella Zip insieme: crea un singolo file zip contenente tutti gli elementi prima delle operazioni di copia/spostamento.",
     "Caixa Zip em conjunto: cria um único ficheiro zip contendo todos os elementos antes das operações de cópia/movimentação.",
     "Caixa Zip junto: cria um único arquivo zip contendo todos os elementos antes das operações de cópia/movimentação.",
     "Selectievakje Samen zippen: maakt één enkel zip-bestand met alle elementen vóór de kopieer-/verplaatsoperaties.",
     "Kryssruta Zippa tillsammans: skapar en enda zip-fil som innehåller alla element före kopierings-/flyttoperationerna.",
     "Avmerkingsboks Zip sammen: oppretter en enkelt zip-fil som inneholder alle elementer før kopierings-/flyttoperasjonene.",
     "Afkrydsningsfelt Zip sammen: opretter en enkelt zip-fil, der indeholder alle elementer før kopierings-/flytoperationerne.",
     "Valintaruutu Pakkaa yhteen: luo yhden zip-tiedoston, joka sisältää kaikki kohteet ennen kopioi-/siirrä-toimintoja.",
     "Pole wyboru Zip razem: tworzy pojedynczy plik zip zawierający wszystkie elementy przed operacjami kopiowania/przenoszenia.",
     "Zaškrtávací políčko Zip dohromady: vytváří jediný zip soubor obsahující všechny prvky před operacemi kopírování/přesunu.",
     "Jelölőnégyzet Zip együtt: egyetlen zip fájlt hoz létre, amely tartalmazza az összes elemet a másolási/áthelyezési műveletek előtt.",
     "Casetă Zip împreună: creează un singur fișier zip conținând toate elementele înainte de operațiile de copiere/mutare."),

                    ["Email Group Box: This group box contains settings related to exporting and emailing the file list for the application."] =
    ("Groupe E-mail : contient les réglages pour exporter et envoyer la liste de fichiers par e-mail.",
     "E-Mail-Gruppe: Enthält Einstellungen zum Exportieren und Versenden der Dateiliste per E-Mail.",
     "Grupo Correo electrónico: contiene ajustes para exportar y enviar la lista de archivos por correo.",
     "Gruppo E-mail: contiene impostazioni relative all'esportazione e all'invio della lista file tramite e-mail.",
     "Grupo E-mail: contém definições relacionadas com a exportação e envio da lista de ficheiros por e-mail.",
     "Grupo E-mail: contém configurações relacionadas à exportação e envio da lista de arquivos por e-mail.",
     "Groepsvak E-mail: bevat instellingen met betrekking tot het exporteren en e-mailen van de bestandenlijst.",
     "Gruppfält E-post: innehåller inställningar relaterade till exportering och e-postutskick av fillistan.",
     "Gruppeboks E-post: inneholder innstillinger knyttet til eksportering og e-postutsendelse av fillisten.",
     "Gruppefelt E-mail: indeholder indstillinger relateret til eksport og e-mail-afsendelse af fillisten.",
     "Ryhmäruutu Sähköposti: sisältää asetuksia tiedostoluettelon viemiseen ja lähettämiseen sähköpostitse.",
     "Pole grupy E-mail: zawiera ustawienia związane z eksportowaniem i wysyłaniem listy plików e-mailem.",
     "Skupina E-mail: obsahuje nastavení týkající se exportu a zasílání seznamu souborů e-mailem.",
     "Csoportmező E-mail: tartalmazza a fájllista exportálásához és e-mailben történő elküldéséhez kapcsolódó beállításokat.",
     "Casetă de grup E-mail: conține setări legate de exportul și trimiterea prin e-mail a listei de fișiere."),

                    ["SMS Group Box: This group box contains settings for configuring SMS notifications when operations complete."] =
    ("Groupe SMS : contient les réglages pour configurer les notifications SMS à la fin des opérations.",
     "SMS-Gruppe: Enthält Einstellungen zum Konfigurieren von SMS-Benachrichtigungen nach Abschluss von Operationen.",
     "Grupo SMS: contiene ajustes para configurar notificaciones SMS al finalizar operaciones.",
     "Gruppo SMS: contiene impostazioni per configurare le notifiche SMS al completamento delle operazioni.",
     "Grupo SMS: contém definições para configurar notificações SMS quando as operações são concluídas.",
     "Grupo SMS: contém configurações para configurar notificações SMS quando as operações são concluídas.",
     "Groepsvak SMS: bevat instellingen voor het configureren van SMS-meldingen wanneer bewerkingen zijn voltooid.",
     "Gruppfält SMS: innehåller inställningar för att konfigurera SMS-meddelanden när operationer är slutförda.",
     "Gruppeboks SMS: inneholder innstillinger for å konfigurere SMS-varsler når operasjoner er fullført.",
     "Gruppefelt SMS: indeholder indstillinger til at konfigurere SMS-meddelelser, når operationer er fuldført.",
     "Ryhmäruutu SMS: sisältää asetuksia SMS-ilmoitusten määrittämiseen toimintojen valmistuttua.",
     "Pole grupy SMS: zawiera ustawienia do konfigurowania powiadomień SMS po zakończeniu operacji.",
     "Skupina SMS: obsahuje nastavení pro konfiguraci SMS upozornění po dokončení operací.",
     "Csoportmező SMS: tartalmazza a műveletek befejezésekor történő SMS-értesítések konfigurálásához szükséges beállításokat.",
     "Casetă de grup SMS: conține setări pentru configurarea notificărilor SMS la finalizarea operațiilor."),

                    ["Set Up SMS Button: This button opens the SMS notification setup dialog, allowing you to configure SMS settings for operation completion notifications."] =
    ("Bouton Configurer SMS : ouvre la boîte de dialogue de configuration des notifications SMS.",
     "SMS einrichten-Schaltfläche: Öffnet den Dialog zur Konfiguration von SMS-Benachrichtigungen.",
     "Botón Configurar SMS: abre el diálogo para configurar notificaciones SMS.",
     "Pulsante Configura SMS: apre la finestra di dialogo per configurare le notifiche SMS.",
     "Botão Configurar SMS: abre a caixa de diálogo de configuração de notificações SMS.",
     "Botão Configurar SMS: abre a caixa de diálogo de configuração de notificações SMS.",
     "Knop SMS instellen: opent het dialoogvenster voor het instellen van SMS-meldingen.",
     "Knapp Konfigurera SMS: öppnar dialogrutan för konfiguration av SMS-meddelanden.",
     "Knapp Sett opp SMS: åpner dialogboksen for konfigurering av SMS-varsler.",
     "Knap Konfigurer SMS: åbner dialogboksen til konfiguration af SMS-meddelelser.",
     "Painike Määritä SMS: avaa SMS-ilmoitusten asetusvalintaikkunan.",
     "Przycisk Skonfiguruj SMS: otwiera okno dialogowe konfiguracji powiadomień SMS.",
     "Tlačítko Nastavit SMS: otevírá dialogové okno nastavení SMS upozornění.",
     "Gomb SMS beállítása: megnyitja az SMS-értesítések beállítási párbeszédpanelét.",
     "Buton Configurare SMS: deschide dialogul de configurare a notificărilor SMS."),

                    ["Set Up Email Button: This button opens the email setup dialog, allowing you to configure email settings for exporting and sending the file list."] =
    ("Bouton Configurer e-mail : ouvre la boîte de dialogue de configuration de l'e-mail.",
     "E-Mail einrichten-Schaltfläche: Öffnet den Dialog zur Konfiguration der E-Mail-Einstellungen.",
     "Botón Configurar correo: abre el diálogo para configurar ajustes de correo electrónico.",
     "Pulsante Configura e-mail: apre la finestra di dialogo per configurare le impostazioni e-mail.",
     "Botão Configurar e-mail: abre a caixa de diálogo de configuração de e-mail.",
     "Botão Configurar e-mail: abre a caixa de diálogo de configuração de e-mail.",
     "Knop E-mail instellen: opent het dialoogvenster voor het instellen van e-mailinstellingen.",
     "Knapp Konfigurera e-post: öppnar dialogrutan för konfiguration av e-postinställningar.",
     "Knapp Sett opp e-post: åpner dialogboksen for konfigurering av e-postinnstillinger.",
     "Knap Konfigurer e-mail: åbner dialogboksen til konfiguration af e-mail-indstillinger.",
     "Painike Määritä sähköposti: avaa sähköpostiasetuksien määritysvalintaikkunan.",
     "Przycisk Skonfiguruj e-mail: otwiera okno dialogowe konfiguracji ustawień e-mail.",
     "Tlačítko Nastavit e-mail: otevírá dialogové okno nastavení e-mailu.",
     "Gomb E-mail beállítása: megnyitja az e-mail beállításainak párbeszédpanelét.",
     "Buton Configurare e-mail: deschide dialogul de configurare a setărilor de e-mail."),

                    ["Email Names CheckBox: This checkbox determines whether to include only the names of files and directories in the email export."] =
    ("Case Noms e-mail : n'inclut que les noms dans l'export e-mail.",
     "E-Mail-Namen-CheckBox: Fügt dem E-Mail-Export nur Namen hinzu.",
     "Casilla Nombres correo: incluye solo nombres en la exportación por correo.",
     "Casella Nomi e-mail: include solo i nomi nell'esportazione e-mail.",
     "Caixa Nomes e-mail: inclui apenas os nomes na exportação por e-mail.",
     "Caixa Nomes e-mail: inclui apenas os nomes na exportação por e-mail.",
     "Selectievakje E-mailnamen: voegt alleen namen toe aan de e-mailexport.",
     "Kryssruta E-postnamn: inkluderar endast namn i e-postexporten.",
     "Avmerkingsboks E-postnavn: inkluderer kun navn i e-posteksporten.",
     "Afkrydsningsfelt E-mail-navne: inkluderer kun navne i e-mail-eksporten.",
     "Valintaruutu Sähköpostinimet: sisältää vain nimet sähköpostiviennissä.",
     "Pole wyboru Nazwy e-mail: zawiera tylko nazwy w eksporcie e-mail.",
     "Zaškrtávací políčko E-mailové názvy: zahrnuje pouze názvy do e-mailového exportu.",
     "Jelölőnégyzet E-mail nevek: csak a neveket tartalmazza az e-mail exportban.",
     "Casetă Nume e-mail: include doar numele în exportul prin e-mail."),

                    ["Email Paths CheckBox: This checkbox determines whether to include the full paths of files and directories in the email export."] =
    ("Case Chemins e-mail : inclut les chemins complets dans l'export e-mail.",
     "E-Mail-Pfade-CheckBox: Fügt dem E-Mail-Export vollständige Pfade hinzu.",
     "Casilla Rutas correo: incluye rutas completas en la exportación por correo.",
     "Casella Percorsi e-mail: include i percorsi completi nell'esportazione e-mail.",
     "Caixa Caminhos e-mail: inclui os caminhos completos na exportação por e-mail.",
     "Caixa Caminhos e-mail: inclui os caminhos completos na exportação por e-mail.",
     "Selectievakje E-mailpaden: voegt volledige paden toe aan de e-mailexport.",
     "Kryssruta E-postsökvägar: inkluderar fullständiga sökvägar i e-postexporten.",
     "Avmerkingsboks E-poststier: inkluderer fullstendige stier i e-posteksporten.",
     "Afkrydsningsfelt E-mail-stier: inkluderer fulde stier i e-mail-eksporten.",
     "Valintaruutu Sähköpostipolut: sisältää täydelliset polut sähköpostiviennissä.",
     "Pole wyboru Ścieżki e-mail: zawiera pełne ścieżki w eksporcie e-mail.",
     "Zaškrtávací políčko E-mailové cesty: zahrnuje úplné cesty do e-mailového exportu.",
     "Jelölőnégyzet E-mail elérési utak: tartalmazza a teljes elérési utakat az e-mail exportban.",
     "Casetă Căi e-mail: include căile complete în exportul prin e-mail."),

                    ["Other Settings Group Box: This group box contains miscellaneous settings for the application."] =
    ("Groupe Autres réglages : contient divers réglages pour l'application.",
     "Sonstige Einstellungen-Gruppe: Enthält verschiedene Einstellungen für die Anwendung.",
     "Grupo Otros ajustes: contiene diversos ajustes para la aplicación.",
     "Gruppo Altre impostazioni: contiene impostazioni varie per l'applicazione.",
     "Grupo Outras definições: contém várias definições para a aplicação.",
     "Grupo Outras configurações: contém várias configurações para a aplicação.",
     "Groepsvak Overige instellingen: bevat diverse instellingen voor de applicatie.",
     "Gruppfält Övriga inställningar: innehåller diverse inställningar för applikationen.",
     "Gruppeboks Andre innstillinger: inneholder diverse innstillinger for applikasjonen.",
     "Gruppefelt Andre indstillinger: indeholder diverse indstillinger for applikationen.",
     "Ryhmäruutu Muut asetukset: sisältää sekalaisia asetuksia sovellukselle.",
     "Pole grupy Inne ustawienia: zawiera różne ustawienia aplikacji.",
     "Skupina Ostatní nastavení: obsahuje různá nastavení aplikace.",
     "Csoportmező Egyéb beállítások: különféle beállításokat tartalmaz az alkalmazáshoz.",
     "Casetă de grup Alte setări: conține diverse setări pentru aplicație."),

                    ["Close Program CheckBox: This checkbox determines whether to automatically close the application when an error occurs."] =
    ("Case Fermer programme : détermine si l'application se ferme automatiquement en cas d'erreur.",
     "Programm schließen-CheckBox: Legt fest, ob die Anwendung bei einem Fehler automatisch geschlossen wird.",
     "Casilla Cerrar programa: determina si la aplicación se cierra automáticamente cuando ocurre un error.",
     "Casella Chiudi programma: determina se chiudere automaticamente l'applicazione quando si verifica un errore.",
     "Caixa Fechar programa: determina se a aplicação é fechada automaticamente quando ocorre um erro.",
     "Caixa Fechar programa: determina se a aplicação é fechada automaticamente quando ocorre um erro.",
     "Selectievakje Programma sluiten: bepaalt of de applicatie automatisch wordt gesloten wanneer er een fout optreedt.",
     "Kryssruta Stäng program: avgör om applikationen automatiskt ska stängas när ett fel uppstår.",
     "Avmerkingsboks Lukk program: avgjør om applikasjonen automatisk skal lukkes når det oppstår en feil.",
     "Afkrydsningsfelt Luk program: bestemmer om applikationen automatisk skal lukkes, når der opstår en fejl.",
     "Valintaruutu Sulje ohjelma: määrittää, suljetaanko sovellus automaattisesti virheen sattuessa.",
     "Pole wyboru Zamknij program: określa, czy aplikacja ma być automatycznie zamykana w przypadku wystąpienia błędu.",
     "Zaškrtávací políčko Zavřít program: určuje, zda se má aplikace automaticky zavřít při výskytu chyby.",
     "Jelölőnégyzet Program bezárása: meghatározza, hogy a program automatikusan bezáródjon-e hiba esetén.",
     "Casetă Închide program: determină dacă aplicația se închide automat când apare o eroare."),

                    ["Restart CheckBox: This checkbox determines whether to automatically restart the application when an error occurs."] =
    ("Case Redémarrer : détermine si l'application redémarre automatiquement en cas d'erreur.",
     "Neustart-CheckBox: Legt fest, ob die Anwendung bei einem Fehler automatisch neu startet.",
     "Casilla Reiniciar: determina si la aplicación se reinicia automáticamente cuando ocurre un error.",
     "Casella Riavvia: determina se riavviare automaticamente l'applicazione quando si verifica un errore.",
     "Caixa Reiniciar: determina se a aplicação é reiniciada automaticamente quando ocorre um erro.",
     "Caixa Reiniciar: determina se a aplicação é reiniciada automaticamente quando ocorre um erro.",
     "Selectievakje Herstarten: bepaalt of de applicatie automatisch opnieuw wordt gestart wanneer er een fout optreedt.",
     "Kryssruta Starta om: avgör om applikationen automatiskt ska startas om när ett fel uppstår.",
     "Avmerkingsboks Start på nytt: avgjør om applikasjonen automatisk skal startes på nytt når det oppstår en feil.",
     "Afkrydsningsfelt Genstart: bestemmer om applikationen automatisk skal genstartes, når der opstår en fejl.",
     "Valintaruutu Käynnistä uudelleen: määrittää, käynnistetäänkö sovellus automaattisesti uudelleen virheen sattuessa.",
     "Pole wyboru Uruchom ponownie: określa, czy aplikacja ma być automatycznie ponownie uruchamiana w przypadku wystąpienia błędu.",
     "Zaškrtávací políčko Restartovat: určuje, zda se má aplikace automaticky restartovat při výskytu chyby.",
     "Jelölőnégyzet Újraindítás: meghatározza, hogy a program automatikusan újrainduljon-e hiba esetén.",
     "Casetă Repornire: determină dacă aplicația se repornește automat când apare o eroare."),

                    ["Start with Windows CheckBox: This checkbox determines whether to launch the application automatically when Windows starts."] =
    ("Case Lancer avec Windows : détermine si l'application démarre automatiquement avec Windows.",
     "Mit Windows starten-CheckBox: Legt fest, ob die Anwendung automatisch mit Windows gestartet wird.",
     "Casilla Iniciar con Windows: determina si la aplicación se inicia automáticamente con Windows.",
     "Casella Avvia con Windows: determina se avviare automaticamente l'applicazione all'avvio di Windows.",
     "Caixa Iniciar com Windows: determina se a aplicação é iniciada automaticamente quando o Windows é iniciado.",
     "Caixa Iniciar com Windows: determina se a aplicação é iniciada automaticamente quando o Windows é iniciado.",
     "Selectievakje Starten met Windows: bepaalt of de applicatie automatisch wordt gestart wanneer Windows start.",
     "Kryssruta Starta med Windows: avgör om applikationen automatiskt ska startas när Windows startar.",
     "Avmerkingsboks Start med Windows: avgjør om applikasjonen automatisk skal startes når Windows starter.",
     "Afkrydsningsfelt Start med Windows: bestemmer om applikationen automatisk skal startes, når Windows starter.",
     "Valintaruutu Käynnistä Windowsin kanssa: määrittää, käynnistetäänkö sovellus automaattisesti Windowsin käynnistyessä.",
     "Pole wyboru Uruchom z systemem Windows: określa, czy aplikacja ma być automatycznie uruchamiana podczas startu systemu Windows.",
     "Zaškrtávací políčko Spustit s Windows: určuje, zda se má aplikace automaticky spustit při startu Windows.",
     "Jelölőnégyzet Indítás a Windows-szal: meghatározza, hogy a program automatikusan elindul-e a Windows indulásakor.",
     "Casetă Pornire cu Windows: determină dacă aplicația se lansează automat când pornește Windows."),

                    ["Serial Key Text Box: This text box allows you to enter your serial key to activate the application."] =
    ("Zone de texte Clé série : permet de saisir votre clé de série pour activer l'application.",
     "Seriennummer-Textbox: Ermöglicht die Eingabe Ihres Serienschlüssels zur Aktivierung der Anwendung.",
     "Cuadro de texto Clave de serie: permite escribir su clave de serie para activar la aplicación.",
     "Casella di testo Chiave seriale: consente di inserire la chiave seriale per attivare l'applicazione.",
     "Caixa de texto Chave de série: permite introduzir a sua chave de série para ativar a aplicação.",
     "Caixa de texto Chave serial: permite inserir sua chave serial para ativar a aplicação.",
     "Tekstvak Serienummer: hiermee kunt u uw serienummer invoeren om de applicatie te activeren.",
     "Textruta Serienyckel: låter dig ange din serienyckel för att aktivera applikationen.",
     "Tekstboks Serienøkkel: lar deg angi serienøkkelen din for å aktivere applikasjonen.",
     "Tekstfelt Serienøgle: giver dig mulighed for at indtaste din serienøgle for at aktivere applikationen.",
     "Tekstikenttä Sarjanumero: avulla voit syöttää sarjanumerosi sovelluksen aktivoimiseksi.",
     "Pole tekstowe Klucz seryjny: pozwala wprowadzić klucz seryjny w celu aktywacji aplikacji.",
     "Textové pole Sériový klíč: umožňuje zadat sériový klíč pro aktivaci aplikace.",
     "Szövegmező Sorozatszám: lehetővé teszi a sorozatszám megadását az alkalmazás aktiválásához.",
     "Casetă de text Cheie serială: vă permite să introduceți cheia serială pentru a activa aplicația."),

                    ["Register Button: This button submits the entered serial key for validation and activates the application if the key is valid."] =
    ("Bouton Enregistrer : envoie la clé de série saisie pour validation et active l'application si la clé est valide.",
     "Registrieren-Schaltfläche: Sendet den eingegebenen Serienschlüssel zur Validierung und aktiviert die Anwendung, falls der Schlüssel gültig ist.",
     "Botón Registrar: envía la clave de serie introducida para validación y activa la aplicación si la clave es válida.",
     "Pulsante Registra: invia la chiave seriale inserita per la convalida e attiva l'applicazione se la chiave è valida.",
     "Botão Registar: envia a chave de série introduzida para validação e ativa a aplicação se a chave for válida.",
     "Botão Registrar: envia a chave serial inserida para validação e ativa a aplicação se a chave for válida.",
     "Knop Registreren: dient het ingevoerde serienummer in ter validatie en activeert de applicatie als het nummer geldig is.",
     "Knapp Registrera: skickar den angivna serienyckel för validering och aktiverar applikationen om nyckeln är giltig.",
     "Knapp Registrer: sender inn den angitte serienøkkelen for validering og aktiverer applikasjonen hvis nøkkelen er gyldig.",
     "Knap Registrer: indsender den indtastede serienøgle til validering og aktiverer applikationen, hvis nøglen er gyldig.",
     "Painike Rekisteröi: lähettää syötetyn sarjanumeron vahvistettavaksi ja aktivoi sovelluksen, jos avain on kelvollinen.",
     "Przycisk Zarejestruj: przesyła wprowadzony klucz seryjny do walidacji i aktywuje aplikację, jeśli klucz jest prawidłowy.",
     "Tlačítko Registrovat: odešle zadaný sériový klíč k ověření a aktivuje aplikaci, pokud je klíč platný.",
     "Gomb Regisztráció: elküldi a megadott sorozatszámot ellenőrzésre és aktiválja az alkalmazást, ha a szám érvényes.",
     "Buton Înregistrare: trimite cheia serială introdusă pentru validare și activează aplicația dacă cheia este validă."),

                    ["Secure Passes Numeric Up-Down: This control allows you to specify the number of passes to use for securely deleting files."] =
    ("Zone numérique Passages sécurisés : définit le nombre de passages pour la suppression sécurisée.",
     "Sichere-Passwörter-Numeric-Up-Down: Legt die Anzahl der Überschreibungsdurchläufe für sicheres Löschen fest.",
     "Control numérico Pasadas seguras: define la cantidad de pasadas para el borrado seguro.",
     "Controllo numerico Passaggi sicuri: consente di specificare il numero di passaggi da utilizzare per l'eliminazione sicura dei file.",
     "Controlo numérico Passagens seguras: permite especificar o número de passagens a utilizar para eliminar ficheiros de forma segura.",
     "Controle numérico Passagens seguras: permite especificar o número de passagens a usar para excluir arquivos com segurança.",
     "Numerieke instelling Beveiligde doorlopen: hiermee kunt u het aantal doorlopen opgeven voor het veilig verwijderen van bestanden.",
     "Numerisk kontroll Säkra genomgångar: låter dig ange antalet genomgångar för säker radering av filer.",
     "Numerisk kontroll Sikre passeringer: lar deg angi antall passeringer som skal brukes for sikker sletting av filer.",
     "Numerisk kontrol Sikre gennemløb: giver dig mulighed for at angive antallet af gennemløb til sikker sletning af filer.",
     "Numeerinen säätö Turvalliset kierrokset: avulla voit määrittää kierrosten määrän tiedostojen turvalliseen poistamiseen.",
     "Kontrolka numeryczna Bezpieczne przejścia: pozwala określić liczbę przejść do bezpiecznego usuwania plików.",
     "Číselné pole Bezpečné průchody: umožňuje zadat počet průchodů pro bezpečné mazání souborů.",
     "Numerikus vezérlő Biztonságos felülírások: lehetővé teszi a fájlok biztonságos törléséhez használandó felülírások számának megadását.",
     "Control numeric Treceri sigure: vă permite să specificați numărul de treceri pentru ștergerea securizată a fișierelor."),

                    ["Settings Tab: This tab allows you to configure various settings for the application, including window behavior, appearance, performance, and other preferences."] =
    ("Onglet Paramètres : permet de configurer divers réglages de l'application, y compris le comportement de la fenêtre, l'apparence, les performances et autres préférences.",
     "Einstellungen-Tab: Ermöglicht die Konfiguration verschiedener Einstellungen der Anwendung, einschließlich Fensterverhalten, Erscheinungsbild, Leistung und andere Präferenzen.",
     "Pestaña Ajustes: permite configurar varios ajustes de la aplicación, incluyendo comportamiento de ventana, apariencia, rendimiento y otras preferencias.",
     "Scheda Impostazioni: consente di configurare varie impostazioni per l'applicazione, incluso il comportamento della finestra, l'aspetto, le prestazioni e altre preferenze.",
     "Separador Definições: permite configurar várias definições para a aplicação, incluindo comportamento da janela, aparência, desempenho e outras preferências.",
     "Aba Configurações: permite configurar várias configurações para a aplicação, incluindo comportamento da janela, aparência, desempenho e outras preferências.",
     "Tabblad Instellingen: hiermee kunt u verschillende instellingen voor de applicatie configureren, waaronder venstergedrag, uiterlijk, prestaties en andere voorkeuren.",
     "Flik Inställningar: låter dig konfigurera olika inställningar för applikationen, inklusive fönsterbeteende, utseende, prestanda och andra preferenser.",
     "Fane Innstillinger: lar deg konfigurere forskjellige innstillinger for applikasjonen, inkludert vindusadferd, utseende, ytelse og andre preferanser.",
     "Fane Indstillinger: giver dig mulighed for at konfigurere forskellige indstillinger for applikationen, herunder vinduesadfærd, udseende, ydeevne og andre præferencer.",
     "Välilehti Asetukset: avulla voit määrittää sovelluksen eri asetuksia, mukaan lukien ikkunan käyttäytyminen, ulkoasu, suorituskyky ja muut asetukset.",
     "Karta Ustawienia: umożliwia konfigurowanie różnych ustawień aplikacji, w tym zachowania okna, wyglądu, wydajności i innych preferencji.",
     "Karta Nastavení: umožňuje konfigurovat různá nastavení aplikace, včetně chování okna, vzhledu, výkonu a dalších předvoleb.",
     "Lap Beállítások: lehetővé teszi az alkalmazás különböző beállításainak konfigurálását, beleértve az ablak viselkedését, megjelenését, teljesítményét és egyéb preferenciákat.",
     "Filă Setări: vă permite să configurați diverse setări pentru aplicație, inclusiv comportamentul ferestrei, aspectul, performanța și alte preferințe."),

                    ["Move Application Label: This allows you to move the application to different parts of the screen."] =
    ("Étiquette Déplacer application : permet de déplacer l'application vers différentes zones de l'écran.",
     "Anwendung verschieben-Label: Ermöglicht das Verschieben der Anwendung an verschiedene Bildschirmbereiche.",
     "Etiqueta Mover aplicación: permite mover la aplicación a diferentes zonas de la pantalla.",
     "Etichetta Sposta applicazione: consente di spostare l'applicazione in diverse parti dello schermo.",
     "Etiqueta Mover aplicação: permite mover a aplicação para diferentes partes do ecrã.",
     "Rótulo Mover aplicação: permite mover a aplicação para diferentes partes da tela.",
     "Label Applicatie verplaatsen: hiermee kunt u de applicatie naar verschillende delen van het scherm verplaatsen.",
     "Etikett Flytta applikation: låter dig flytta applikationen till olika delar av skärmen.",
     "Etikett Flytt applikasjon: lar deg flytte applikasjonen til forskjellige deler av skjermen.",
     "Mærkat Flyt applikation: giver dig mulighed for at flytte applikationen til forskellige dele af skærmen.",
     "Tunniste Siirrä sovellus: avulla voit siirtää sovelluksen näytön eri osiin.",
     "Etykieta Przenieś aplikację: pozwala przenieść aplikację do różnych części ekranu.",
     "Popisek Přesunout aplikaci: umožňuje přesunout aplikaci do různých částí obrazovky.",
     "Címke Alkalmazás áthelyezése: lehetővé teszi az alkalmazás áthelyezését a képernyő különböző részeihez.",
     "Etichetă Mutare aplicație: vă permite să mutați aplicația în diferite părți ale ecranului."),

                    ["Copy History Data Grid View: This grid displays the history of file operations performed by the application, including details such as source and target paths, operation type, date, and status."] =
    ("Grille Historique des copies : affiche l'historique des opérations avec chemins source/cible, type, date et état.",
     "Kopie-Historie-DataGridView: Zeigt den Verlauf der Dateioperationen mit Quell-/Zielpfad, Typ, Datum und Status.",
     "Cuadrícula Historial de copias: muestra el historial de operaciones con ruta origen/destino, tipo, fecha y estado.",
     "Vista griglia Cronologia copie: visualizza la cronologia delle operazioni sui file eseguite dall'applicazione, inclusi dettagli come percorsi di origine e destinazione, tipo di operazione, data e stato.",
     "Vista de grelha Histórico de cópias: apresenta o histórico das operações de ficheiros efetuadas pela aplicação, incluindo detalhes como caminhos de origem e destino, tipo de operação, data e estado.",
     "Visualização de grade Histórico de cópias: exibe o histórico das operações de arquivos executadas pela aplicação, incluindo detalhes como caminhos de origem e destino, tipo de operação, data e status.",
     "Gegevensraster Kopieergeschiedenis: toont de geschiedenis van bestandsbewerkingen uitgevoerd door de applicatie, inclusief details zoals bron- en doelpaden, bewerkingstype, datum en status.",
     "Datarutnätsvy Kopieringshistorik: visar historiken över filoperationer som utförts av applikationen, inklusive detaljer som käll- och målsökvägar, operationstyp, datum och status.",
     "Datarutenettsvisning Kopieringshistorikk: viser historikken over filoperasjoner utført av applikasjonen, inkludert detaljer som kilde- og målstier, operasjonstype, dato og status.",
     "Datagittervisning Kopieringshistorik: viser historikken over filoperationer udført af applikationen, herunder detaljer som kilde- og målstier, operationstype, dato og status.",
     "Tietorasterinäkymä Kopiointihistoria: näyttää sovelluksen suorittamien tiedostotoimintojen historian, mukaan lukien tiedot kuten lähde- ja kohdepolut, toimintatyyppi, päivämäärä ja tila.",
     "Widok siatki danych Historia kopiowania: wyświetla historię operacji na plikach wykonanych przez aplikację, w tym szczegóły, takie jak ścieżki źródłowe i docelowe, typ operacji, data i status.",
     "Zobrazení datové mřížky Historie kopírování: zobrazuje historii operací se soubory prováděných aplikací, včetně podrobností jako jsou zdrojové a cílové cesty, typ operace, datum a stav.",
     "Adatrács nézet Másolási előzmények: megjeleníti az alkalmazás által végrehajtott fájlműveletek előzményeit, beleértve az olyan részleteket, mint a forrás- és célútvonalak, művelet típusa, dátum és állapot.",
     "Vizualizare grilă date Istoric copieri: afișează istoricul operațiilor pe fișiere efectuate de aplicație, inclusiv detalii precum căile sursă și destinație, tipul operației, data și starea."),

                    // TITLE STRINGS
                    ["Copy That v1.0 Pro By: Havoc - Home"] =
    ("Copy That v1.0 Pro Par: Havoc - Accueil",
     "Copy That v1.0 Pro Von: Havoc - Startseite",
     "Copy That v1.0 Pro Por: Havoc - Inicio",
     "Copy That v1.0 Pro Di: Havoc - Home",
     "Copy That v1.0 Pro Por: Havoc - Início",
     "Copy That v1.0 Pro Por: Havoc - Início",
     "Copy That v1.0 Pro Door: Havoc - Home",
     "Copy That v1.0 Pro Av: Havoc - Hem",
     "Copy That v1.0 Pro Av: Havoc - Hjem",
     "Copy That v1.0 Pro Af: Havoc - Hjem",
     "Copy That v1.0 Pro Tekijä: Havoc - Etusivu",
     "Copy That v1.0 Pro Autor: Havoc - Strona główna",
     "Copy That v1.0 Pro Od: Havoc - Domů",
     "Copy That v1.0 Pro Készítő: Havoc - Főoldal",
     "Copy That v1.0 Pro De: Havoc - Acasă"),

                    ["Copy That v1.0 By: Havoc - Home"] =
    ("Copy That v1.0 Par: Havoc - Accueil",
     "Copy That v1.0 Von: Havoc - Startseite",
     "Copy That v1.0 Por: Havoc - Inicio",
     "Copy That v1.0 Di: Havoc - Home",
     "Copy That v1.0 Por: Havoc - Início",
     "Copy That v1.0 Por: Havoc - Início",
     "Copy That v1.0 Door: Havoc - Home",
     "Copy That v1.0 Av: Havoc - Hem",
     "Copy That v1.0 Av: Havoc - Hjem",
     "Copy That v1.0 Af: Havoc - Hjem",
     "Copy That v1.0 Tekijä: Havoc - Etusivu",
     "Copy That v1.0 Autor: Havoc - Strona główna",
     "Copy That v1.0 Od: Havoc - Domů",
     "Copy That v1.0 Készítő: Havoc - Főoldal",
     "Copy That v1.0 De: Havoc - Acasă"),

                    ["Copy That v1.0 Pro By: Havoc - Multi-Threading"] =
    ("Copy That v1.0 Pro Par: Havoc - Multi-Thread",
     "Copy That v1.0 Pro Von: Havoc - Multi-Threading",
     "Copy That v1.0 Pro Por: Havoc - Multi-Hilo",
     "Copy That v1.0 Pro Di: Havoc - Multi-Threading",
     "Copy That v1.0 Pro Por: Havoc - Multi-Threading",
     "Copy That v1.0 Pro Por: Havoc - Multi-Threading",
     "Copy That v1.0 Pro Door: Havoc - Multi-Threading",
     "Copy That v1.0 Pro Av: Havoc - Multi-Threading",
     "Copy That v1.0 Pro Av: Havoc - Multitråding",
     "Copy That v1.0 Pro Af: Havoc - Multi-Threading",
     "Copy That v1.0 Pro Tekijä: Havoc - Monisäikeistys",
     "Copy That v1.0 Pro Autor: Havoc - Wielowątkowość",
     "Copy That v1.0 Pro Od: Havoc - Vícevláknové zpracování",
     "Copy That v1.0 Pro Készítő: Havoc - Többszálúság",
     "Copy That v1.0 Pro De: Havoc - Multi-Threading"),

                    ["Copy That v1.0 By: Havoc - Multi-Threading"] =
    ("Copy That v1.0 Par: Havoc - Multi-Thread",
     "Copy That v1.0 Von: Havoc - Multi-Threading",
     "Copy That v1.0 Por: Havoc - Multi-Hilo",
     "Copy That v1.0 Di: Havoc - Multi-Threading",
     "Copy That v1.0 Por: Havoc - Multi-Threading",
     "Copy That v1.0 Por: Havoc - Multi-Threading",
     "Copy That v1.0 Door: Havoc - Multi-Threading",
     "Copy That v1.0 Av: Havoc - Multi-Threading",
     "Copy That v1.0 Av: Havoc - Multitråding",
     "Copy That v1.0 Af: Havoc - Multi-Threading",
     "Copy That v1.0 Tekijä: Havoc - Monisäikeistys",
     "Copy That v1.0 Autor: Havoc - Wielowątkowość",
     "Copy That v1.0 Od: Havoc - Vícevláknové zpracování",
     "Copy That v1.0 Készítő: Havoc - Többszálúság",
     "Copy That v1.0 De: Havoc - Multi-Threading"),

                    ["Copy That v1.0 Pro By: Havoc - Allow/Exclude"] =
    ("Copy That v1.0 Pro Par: Havoc - Autoriser/Exclure",
     "Copy That v1.0 Pro Von: Havoc - Erlauben/Ausschließen",
     "Copy That v1.0 Pro Por: Havoc - Permitir/Excluir",
     "Copy That v1.0 Pro Di: Havoc - Consenti/Escludi",
     "Copy That v1.0 Pro Por: Havoc - Permitir/Excluir",
     "Copy That v1.0 Pro Por: Havoc - Permitir/Excluir",
     "Copy That v1.0 Pro Door: Havoc - Toestaan/Uitsluiten",
     "Copy That v1.0 Pro Av: Havoc - Tillåt/Exkludera",
     "Copy That v1.0 Pro Av: Havoc - Tillat/Ekskluder",
     "Copy That v1.0 Pro Af: Havoc - Tillad/Ekskluder",
     "Copy That v1.0 Pro Tekijä: Havoc - Salli/Sulje pois",
     "Copy That v1.0 Pro Autor: Havoc - Zezwól/Wyklucz",
     "Copy That v1.0 Pro Od: Havoc - Povolit/Vyloučit",
     "Copy That v1.0 Pro Készítő: Havoc - Engedélyez/Kizár",
     "Copy That v1.0 Pro De: Havoc - Permite/Exclude"),

                    ["Copy That v1.0 By: Havoc - Allow/Exclude"] =
    ("Copy That v1.0 Par: Havoc - Autoriser/Exclure",
     "Copy That v1.0 Von: Havoc - Erlauben/Ausschließen",
     "Copy That v1.0 Por: Havoc - Permitir/Excluir",
     "Copy That v1.0 Di: Havoc - Consenti/Escludi",
     "Copy That v1.0 Por: Havoc - Permitir/Excluir",
     "Copy That v1.0 Por: Havoc - Permitir/Excluir",
     "Copy That v1.0 Door: Havoc - Toestaan/Uitsluiten",
     "Copy That v1.0 Av: Havoc - Tillåt/Exkludera",
     "Copy That v1.0 Av: Havoc - Tillat/Ekskluder",
     "Copy That v1.0 Af: Havoc - Tillad/Ekskluder",
     "Copy That v1.0 Tekijä: Havoc - Salli/Sulje pois",
     "Copy That v1.0 Autor: Havoc - Zezwól/Wyklucz",
     "Copy That v1.0 Od: Havoc - Povolit/Vyloučit",
     "Copy That v1.0 Készítő: Havoc - Engedélyez/Kizár",
     "Copy That v1.0 De: Havoc - Permite/Exclude"),

                    ["Copy That v1.0 Pro By: Havoc - Skipped Files/Dirs."] =
    ("Copy That v1.0 Pro Par: Havoc - Fichiers/Dossiers ignorés",
     "Copy That v1.0 Pro Von: Havoc - Übersprungene Dateien/Ordner",
     "Copy That v1.0 Pro Por: Havoc - Archivos/Carpetas omitidos",
     "Copy That v1.0 Pro Di: Havoc - File/Cartelle saltati",
     "Copy That v1.0 Pro Por: Havoc - Ficheiros/Pastas ignorados",
     "Copy That v1.0 Pro Por: Havoc - Arquivos/Pastas ignorados",
     "Copy That v1.0 Pro Door: Havoc - Overgeslagen bestanden/mappen",
     "Copy That v1.0 Pro Av: Havoc - Överhoppade filer/mappar",
     "Copy That v1.0 Pro Av: Havoc - Hoppet over filer/mapper",
     "Copy That v1.0 Pro Af: Havoc - Oversprungne filer/mapper",
     "Copy That v1.0 Pro Tekijä: Havoc - Ohitetut tiedostot/kansiot",
     "Copy That v1.0 Pro Autor: Havoc - Pominięte pliki/katalogi",
     "Copy That v1.0 Pro Od: Havoc - Přeskočené soubory/složky",
     "Copy That v1.0 Pro Készítő: Havoc - Kihagyott fájlok/mappák",
     "Copy That v1.0 Pro De: Havoc - Fișiere/Directoare omise"),

                    ["Copy That v1.0 By: Havoc - Skipped Files/Dirs."] =
    ("Copy That v1.0 Par: Havoc - Fichiers/Dossiers ignorés",
     "Copy That v1.0 Von: Havoc - Übersprungene Dateien/Ordner",
     "Copy That v1.0 Por: Havoc - Archivos/Carpetas omitidos",
     "Copy That v1.0 Di: Havoc - File/Cartelle saltati",
     "Copy That v1.0 Por: Havoc - Ficheiros/Pastas ignorados",
     "Copy That v1.0 Por: Havoc - Arquivos/Pastas ignorados",
     "Copy That v1.0 Door: Havoc - Overgeslagen bestanden/mappen",
     "Copy That v1.0 Av: Havoc - Överhoppade filer/mappar",
     "Copy That v1.0 Av: Havoc - Hoppet over filer/mapper",
     "Copy That v1.0 Af: Havoc - Oversprungne filer/mapper",
     "Copy That v1.0 Tekijä: Havoc - Ohitetut tiedostot/kansiot",
     "Copy That v1.0 Autor: Havoc - Pominięte pliki/katalogi",
     "Copy That v1.0 Od: Havoc - Přeskočené soubory/složky",
     "Copy That v1.0 Készítő: Havoc - Kihagyott fájlok/mappák",
     "Copy That v1.0 De: Havoc - Fișiere/Directoare omise"),

                    ["Copy That v1.0 Pro By: Havoc - Settings"] =
    ("Copy That v1.0 Pro Par: Havoc - Paramètres",
     "Copy That v1.0 Pro Von: Havoc - Einstellungen",
     "Copy That v1.0 Pro Por: Havoc - Ajustes",
     "Copy That v1.0 Pro Di: Havoc - Impostazioni",
     "Copy That v1.0 Pro Por: Havoc - Definições",
     "Copy That v1.0 Pro Por: Havoc - Configurações",
     "Copy That v1.0 Pro Door: Havoc - Instellingen",
     "Copy That v1.0 Pro Av: Havoc - Inställningar",
     "Copy That v1.0 Pro Av: Havoc - Innstillinger",
     "Copy That v1.0 Pro Af: Havoc - Indstillinger",
     "Copy That v1.0 Pro Tekijä: Havoc - Asetukset",
     "Copy That v1.0 Pro Autor: Havoc - Ustawienia",
     "Copy That v1.0 Pro Od: Havoc - Nastavení",
     "Copy That v1.0 Pro Készítő: Havoc - Beállítások",
     "Copy That v1.0 Pro De: Havoc - Setări"),

                    ["Copy That v1.0 By: Havoc - Settings"] =
    ("Copy That v1.0 Par: Havoc - Paramètres",
     "Copy That v1.0 Von: Havoc - Einstellungen",
     "Copy That v1.0 Por: Havoc - Ajustes",
     "Copy That v1.0 Di: Havoc - Impostazioni",
     "Copy That v1.0 Por: Havoc - Definições",
     "Copy That v1.0 Por: Havoc - Configurações",
     "Copy That v1.0 Door: Havoc - Instellingen",
     "Copy That v1.0 Av: Havoc - Inställningar",
     "Copy That v1.0 Av: Havoc - Innstillinger",
     "Copy That v1.0 Af: Havoc - Indstillinger",
     "Copy That v1.0 Tekijä: Havoc - Asetukset",
     "Copy That v1.0 Autor: Havoc - Ustawienia",
     "Copy That v1.0 Od: Havoc - Nastavení",
     "Copy That v1.0 Készítő: Havoc - Beállítások",
     "Copy That v1.0 De: Havoc - Setări"),

                    ["Copy That v1.0 Pro By: Havoc - History"] =
    ("Copy That v1.0 Pro Par: Havoc - Historique",
     "Copy That v1.0 Pro Von: Havoc - Verlauf",
     "Copy That v1.0 Pro Por: Havoc - Historial",
     "Copy That v1.0 Pro Di: Havoc - Cronologia",
     "Copy That v1.0 Pro Por: Havoc - Histórico",
     "Copy That v1.0 Pro Por: Havoc - Histórico",
     "Copy That v1.0 Pro Door: Havoc - Geschiedenis",
     "Copy That v1.0 Pro Av: Havoc - Historik",
     "Copy That v1.0 Pro Av: Havoc - Historikk",
     "Copy That v1.0 Pro Af: Havoc - Historik",
     "Copy That v1.0 Pro Tekijä: Havoc - Historia",
     "Copy That v1.0 Pro Autor: Havoc - Historia",
     "Copy That v1.0 Pro Od: Havoc - Historie",
     "Copy That v1.0 Pro Készítő: Havoc - Előzmények",
     "Copy That v1.0 Pro De: Havoc - Istoric"),

                    ["Copy That v1.0 By: Havoc - History"] =
    ("Copy That v1.0 Par: Havoc - Historique",
     "Copy That v1.0 Von: Havoc - Verlauf",
     "Copy That v1.0 Por: Havoc - Historial",
     "Copy That v1.0 Di: Havoc - Cronologia",
     "Copy That v1.0 Por: Havoc - Histórico",
     "Copy That v1.0 Por: Havoc - Histórico",
     "Copy That v1.0 Door: Havoc - Geschiedenis",
     "Copy That v1.0 Av: Havoc - Historik",
     "Copy That v1.0 Av: Havoc - Historikk",
     "Copy That v1.0 Af: Havoc - Historik",
     "Copy That v1.0 Tekijä: Havoc - Historia",
     "Copy That v1.0 Autor: Havoc - Historia",
     "Copy That v1.0 Od: Havoc - Historie",
     "Copy That v1.0 Készítő: Havoc - Előzmények",
     "Copy That v1.0 De: Havoc - Istoric"),

                    ["Copy That v1.0 Pro By: Havoc - About"] =
    ("Copy That v1.0 Pro Par: Havoc - À propos",
     "Copy That v1.0 Pro Von: Havoc - Über",
     "Copy That v1.0 Pro Por: Havoc - Acerca de",
     "Copy That v1.0 Pro Di: Havoc - Informazioni",
     "Copy That v1.0 Pro Por: Havoc - Acerca de",
     "Copy That v1.0 Pro Por: Havoc - Sobre",
     "Copy That v1.0 Pro Door: Havoc - Over",
     "Copy That v1.0 Pro Av: Havoc - Om",
     "Copy That v1.0 Pro Av: Havoc - Om",
     "Copy That v1.0 Pro Af: Havoc - Om",
     "Copy That v1.0 Pro Tekijä: Havoc - Tietoja",
     "Copy That v1.0 Pro Autor: Havoc - O programie",
     "Copy That v1.0 Pro Od: Havoc - O aplikaci",
     "Copy That v1.0 Pro Készítő: Havoc - Névjegy",
     "Copy That v1.0 Pro De: Havoc - Despre"),

                    ["Copy That v1.0 By: Havoc - About"] =
    ("Copy That v1.0 Par: Havoc - À propos",
     "Copy That v1.0 Von: Havoc - Über",
     "Copy That v1.0 Por: Havoc - Acerca de",
     "Copy That v1.0 Di: Havoc - Informazioni",
     "Copy That v1.0 Por: Havoc - Acerca de",
     "Copy That v1.0 Por: Havoc - Sobre",
     "Copy That v1.0 Door: Havoc - Over",
     "Copy That v1.0 Av: Havoc - Om",
     "Copy That v1.0 Av: Havoc - Om",
     "Copy That v1.0 Af: Havoc - Om",
     "Copy That v1.0 Tekijä: Havoc - Tietoja",
     "Copy That v1.0 Autor: Havoc - O programie",
     "Copy That v1.0 Od: Havoc - O aplikaci",
     "Copy That v1.0 Készítő: Havoc - Névjegy",
     "Copy That v1.0 De: Havoc - Despre"),

                    // MESSAGE BOXES
                    ["Skip Error"] =
    ("Erreur de saut",
     "Skip-Fehler",
     "Error de omisión",
     "Errore di salto",
     "Erro ao ignorar",
     "Erro ao ignorar",
     "Overslafout",
     "Hoppfel",
     "Hopp over-feil",
     "Spring over-fejl",
     "Ohitusvirhe",
     "Błąd pominięcia",
     "Chyba přeskočení",
     "Kihagyási hiba",
     "Eroare de omitere"),

                    ["No destination folder selected. Cannot skip and log file with intended destination."] =
    ("Aucun dossier de destination sélectionné. Impossible de sauter et journaliser le fichier avec la destination prévue.",
     "Kein Zielordner ausgewählt. Datei kann nicht übersprungen und mit dem beabsichtigten Ziel protokolliert werden.",
     "No se ha seleccionado carpeta de destino. No se puede omitir y registrar el archivo con el destino previsto.",
     "Nessuna cartella di destinazione selezionata. Impossibile saltare e registrare il file con la destinazione prevista.",
     "Nenhuma pasta de destino selecionada. Não é possível ignorar e registar o ficheiro com o destino pretendido.",
     "Nenhuma pasta de destino selecionada. Não é possível ignorar e registrar o arquivo com o destino pretendido.",
     "Geen doelmap geselecteerd. Kan bestand niet overslaan en loggen met beoogde bestemming.",
     "Ingen målmapp vald. Kan inte hoppa över och logga fil med avsedd destination.",
     "Ingen destinasjonsmappe valgt. Kan ikke hoppe over og logge fil med tiltenkt destinasjon.",
     "Ingen destinationsmappe valgt. Kan ikke springe over og logge fil med tilsigtet destination.",
     "Kohdehakemistoa ei valittu. Ei voida ohittaa ja kirjata tiedostoa aiotulla kohteella.",
     "Nie wybrano folderu docelowego. Nie można pominąć i zarejestrować pliku z zamierzonym miejscem docelowym.",
     "Nebyla vybrána cílová složka. Nelze přeskočit a zaznamenat soubor s zamýšleným cílem.",
     "Nincs célmappa kiválasztva. Nem lehet kihagyni és naplózni a fájlt a kívánt céllal.",
     "Niciun folder de destinație selectat. Nu se poate omite și înregistra fișierul cu destinația dorită."),

                    // GENERIC/SMALL MESSAGE BOX LITERALS
                    ["Error"] =
    ("Erreur", "Fehler", "Error", "Errore", "Erro", "Erro", "Fout", "Fel", "Feil", "Fejl", "Virhe", "Błąd", "Chyba", "Hiba", "Eroare"),

                    ["Warning"] =
    ("Avertissement", "Warnung", "Advertencia", "Avviso", "Aviso", "Aviso", "Waarschuwing", "Varning", "Advarsel", "Advarsel", "Varoitus", "Ostrzeżenie", "Varování", "Figyelmeztetés", "Avertisment"),

                    ["Information"] =
    ("Information", "Information", "Información", "Informazione", "Informação", "Informação", "Informatie", "Information", "Informasjon", "Information", "Tieto", "Informacja", "Informace", "Információ", "Informație"),

                    ["Question"] =
    ("Question", "Frage", "Pregunta", "Domanda", "Pergunta", "Pergunta", "Vraag", "Fråga", "Spørsmål", "Spørgsmål", "Kysymys", "Pytanie", "Otázka", "Kérdés", "Întrebare"),

                    ["Confirm Reset"] =
    ("Confirmer la réinitialisation", "Zurücksetzen bestätigen", "Confirmar reinicio", "Conferma ripristino", "Confirmar reinicialização", "Confirmar reinicialização", "Bevestig reset", "Bekräfta återställning", "Bekreft tilbakestilling", "Bekræft nulstilling", "Vahvista nollaus", "Potwierdź reset", "Potvrdit reset", "Visszaállítás megerősítése", "Confirmă resetarea"),

                    ["Updater"] =
    ("Mise à jour", "Updater", "Actualizador", "Aggiornamento", "Atualizador", "Atualizador", "Updater", "Uppdaterare", "Oppdaterer", "Opdaterer", "Päivittäjä", "Aktualizator", "Aktualizátor", "Frissítő", "Actualizator"),

                    ["Invalid Selection"] =
    ("Sélection invalide", "Ungültige Auswahl", "Selección inválida", "Selezione non valida", "Seleção inválida", "Seleção inválida", "Ongeldige selectie", "Ogiltigt val", "Ugyldig valg", "Ugyldigt valg", "Virheellinen valinta", "Nieprawidłowy wybór", "Neplatný výběr", "Érvénytelen kiválasztás", "Selecție invalidă"),

                    ["Duplicate folder"] =
    ("Dossier en double", "Doppelter Ordner", "Carpeta duplicada", "Cartella duplicata", "Pasta duplicada", "Pasta duplicada", "Dubbele map", "Duplicerad mapp", "Duplisert mappe", "Duplikeret mappe", "Kaksoiskappaleen kansio", "Zduplikowany folder", "Duplicitní složka", "Duplikált mappa", "Folder duplicat"),

                    ["Scan Not Allowed"] =
    ("Analyse non autorisée", "Scan nicht erlaubt", "Escaneo no permitido", "Scansione non consentita", "Análise não permitida", "Escaneamento não permitido", "Scannen niet toegestaan", "Skanning inte tillåten", "Skanning ikke tillatt", "Scanning ikke tilladt", "Skannaus ei sallittu", "Skanowanie niedozwolone", "Skenování není povoleno", "Vizsgálat nem engedélyezett", "Scanare nepermisă"),

                    ["Scan Error"] =
    ("Erreur d'analyse", "Scan-Fehler", "Error de escaneo", "Errore di scansione", "Erro de análise", "Erro de escaneamento", "Scanfout", "Skannfel", "Skanningsfeil", "Scanningsfejl", "Skannausvirhe", "Błąd skanowania", "Chyba skenování", "Vizsgálati hiba", "Eroare de scanare"),

                    ["Operation Complete"] =
    ("Opération terminée", "Operation abgeschlossen", "Operación completada", "Operazione completata", "Operação concluída", "Operação concluída", "Bewerking voltooid", "Operation slutförd", "Operasjon fullført", "Operation fuldført", "Toiminto valmis", "Operacja ukończona", "Operace dokončena", "Művelet befejezve", "Operație completă"),

                    ["Operation Canceled"] =
    ("Opération annulée", "Operation abgebrochen", "Operación cancelada", "Operazione annullata", "Operação cancelada", "Operação cancelada", "Bewerking geannuleerd", "Operation avbruten", "Operasjon avbrutt", "Operation annulleret", "Toiminto peruutettu", "Operacja anulowana", "Operace zrušena", "Művelet megszakítva", "Operație anulată"),

                    // FULL SENTENCES
                    ["Error changing language: {0}"] =
    ("Erreur lors du changement de langue : {0}",
     "Fehler beim Ändern der Sprache: {0}",
     "Error al cambiar el idioma: {0}",
     "Errore durante il cambio lingua: {0}",
     "Erro ao alterar o idioma: {0}",
     "Erro ao alterar o idioma: {0}",
     "Fout bij het wijzigen van de taal: {0}",
     "Fel vid byte av språk: {0}",
     "Feil ved endring av språk: {0}",
     "Fejl ved ændring af sprog: {0}",
     "Virhe kieltä vaihdettaessa: {0}",
     "Błąd podczas zmiany języka: {0}",
     "Chyba při změně jazyka: {0}",
     "Hiba a nyelv módosításakor: {0}",
     "Eroare la schimbarea limbii: {0}"),

                    ["Error exporting data: {0}"] =
    ("Erreur lors de l'exportation des données : {0}",
     "Fehler beim Exportieren der Daten: {0}",
     "Error al exportar datos: {0}",
     "Errore durante l'esportazione dei dati: {0}",
     "Erro ao exportar dados: {0}",
     "Erro ao exportar dados: {0}",
     "Fout bij het exporteren van gegevens: {0}",
     "Fel vid export av data: {0}",
     "Feil ved eksport av data: {0}",
     "Fejl ved eksport af data: {0}",
     "Virhe tietoja vietäessä: {0}",
     "Błąd podczas eksportowania danych: {0}",
     "Chyba při exportu dat: {0}",
     "Hiba az adatok exportálásakor: {0}",
     "Eroare la exportarea datelor: {0}"),

                    ["Exported successfully to: {0}"] =
    ("Exportation réussie vers : {0}",
     "Erfolgreich exportiert nach: {0}",
     "Exportado con éxito a: {0}",
     "Esportato con successo in: {0}",
     "Exportado com sucesso para: {0}",
     "Exportado com sucesso para: {0}",
     "Succesvol geëxporteerd naar: {0}",
     "Exporterades framgångsrikt till: {0}",
     "Eksportert vellykket til: {0}",
     "Eksporteret med succes til: {0}",
     "Viety onnistuneesti kohteeseen: {0}",
     "Pomyślnie wyeksportowano do: {0}",
     "Úspěšně exportováno do: {0}",
     "Sikeresen exportálva ide: {0}",
     "Exportat cu succes în: {0}"),

                    ["Unsupported file type."] =
    ("Type de fichier non pris en charge.",
     "Nicht unterstützter Dateityp.",
     "Tipo de archivo no admitido.",
     "Tipo di file non supportato.",
     "Tipo de ficheiro não suportado.",
     "Tipo de arquivo não suportado.",
     "Niet-ondersteund bestandstype.",
     "Filtyp stöds inte.",
     "Filtype støttes ikke.",
     "Filtype understøttes ikke.",
     "Tiedostotyyppiä ei tueta.",
     "Nieobsługiwany typ pliku.",
     "Nepodporovaný typ souboru.",
     "Nem támogatott fájltípus.",
     "Tip de fișier neacceptat."),

                    ["Please check either Full Paths or Only Names before exporting."] =
    ("Veuillez cocher soit Chemins complets soit Noms seulement avant l'exportation.",
     "Bitte vor dem Exportieren entweder Vollständige Pfade oder Nur Namen aktivieren.",
     "Marque Rutas completas o Solo nombres antes de exportar.",
     "Si prega di selezionare Percorsi completi o Solo nomi prima dell'esportazione.",
     "Por favor, selecione Caminhos completos ou Apenas nomes antes de exportar.",
     "Por favor, marque Caminhos completos ou Apenas nomes antes de exportar.",
     "Selecteer Volledige paden of Alleen namen voordat u exporteert.",
     "Markera antingen Fullständiga sökvägar eller Endast namn före export.",
     "Vennligst merk enten Fullstendige stier eller Kun navn før eksport.",
     "Marker venligst enten Fulde stier eller Kun navne før eksport.",
     "Valitse joko Täydelliset polut tai Vain nimet ennen vientiä.",
     "Zaznacz Pełne ścieżki lub Tylko nazwy przed eksportem.",
     "Před exportem prosím zaškrtněte buď Úplné cesty nebo Pouze názvy.",
     "Kérjük, jelölje be a Teljes elérési utak vagy a Csak nevek opciót exportálás előtt.",
     "Vă rugăm să bifați fie Căi complete, fie Doar nume înainte de export."),

                    ["Cancel the copy?\n\nChoosing 'Yes' will finish the current file and then stop."] =
    ("Annuler la copie ?\n\nChoisir Oui terminera le fichier actuel puis s'arrêtera.",
     "Kopie abbrechen?\n\nWenn Ja gewählt wird, wird die aktuelle Datei fertiggestellt und dann gestoppt.",
     "¿Cancelar la copia?\n\nElegir Sí terminará el archivo actual y luego se detendrá.",
     "Annullare la copia?\n\nScegliendo Sì, il file corrente verrà completato e poi si interromperà.",
     "Cancelar a cópia?\n\nEscolher Sim terminará o ficheiro atual e depois irá parar.",
     "Cancelar a cópia?\n\nEscolher Sim terminará o arquivo atual e depois irá parar.",
     "Kopiëren annuleren?\n\nJa kiezen zal het huidige bestand voltooien en dan stoppen.",
     "Avbryta kopieringen?\n\nAtt välja Ja kommer att slutföra den aktuella filen och sedan stoppa.",
     "Avbryte kopieringen?\n\nÅ velge Ja vil fullføre den gjeldende filen og deretter stoppe.",
     "Annuller kopieringen?\n\nAt vælge Ja vil afslutte den aktuelle fil og derefter stoppe.",
     "Peruuta kopiointi?\n\nKyllä-valinta viimeistelee nykyisen tiedoston ja pysäyttää sitten.",
     "Anulować kopiowanie?\n\nWybranie Tak zakończy bieżący plik, a następnie zatrzyma operację.",
     "Zrušit kopírování?\n\nVolba Ano dokončí aktuální soubor a poté se zastaví.",
     "Másolás megszakítása?\n\nAz Igen választása befejezi az aktuális fájlt, majd leáll.",
     "Anulați copierea?\n\nAlegerea Da va finaliza fișierul curent și apoi se va opri."),

                    ["Confirm cancel"] =
    ("Confirmer l'annulation",
     "Kopie abbrechen bestätigen",
     "Confirmar cancelación",
     "Conferma annullamento",
     "Confirmar cancelamento",
     "Confirmar cancelamento",
     "Bevestig annulering",
     "Bekräfta avbryt",
     "Bekreft avbryt",
     "Bekræft annuller",
     "Vahvista peruutus",
     "Potwierdź anulowanie",
     "Potvrdit zrušení",
     "Megszakítás megerősítése",
     "Confirmă anularea"),

                    ["Previous operation state found. Do you want to resume?"] =
    ("État d'opération précédent trouvé. Voulez-vous reprendre ?",
     "Vorheriger Operationsstatus gefunden. Möchten Sie fortsetzen?",
     "Se encontró estado de operación anterior. ¿Desea reanudar?",
     "Stato dell'operazione precedente trovato. Desidera riprendere?",
     "Estado de operação anterior encontrado. Deseja retomar?",
     "Estado de operação anterior encontrado. Deseja retomar?",
     "Vorige bewerkingsstatus gevonden. Wilt u hervatten?",
     "Tidigare operationsstatus hittades. Vill du återuppta?",
     "Tidligere operasjonsstatus funnet. Vil du gjenoppta?",
     "Tidligere operationsstatus fundet. Vil du genoptage?",
     "Aiempi toimintatila löytyi. Haluatko jatkaa?",
     "Znaleziono poprzedni stan operacji. Czy chcesz wznowić?",
     "Nalezen předchozí stav operace. Chcete pokračovat?",
     "Előző műveleti állapot található. Szeretné folytatni?",
     "Stare de operație anterioară găsită. Doriți să reluați?"),

                    ["Resume Operation"] =
    ("Reprendre l'opération",
     "Operation fortsetzen",
     "Reanudar operación",
     "Riprendi operazione",
     "Retomar operação",
     "Retomar operação",
     "Bewerking hervatten",
     "Återuppta operation",
     "Gjenoppta operasjon",
     "Genoptag operation",
     "Jatka toimintoa",
     "Wznów operację",
     "Pokračovat v operaci",
     "Művelet folytatása",
     "Reia operația"),

                    ["File verification completed."] =
    ("Vérification de fichier terminée.",
     "Dateiüberprüfung abgeschlossen.",
     "Verificación de archivo completada.",
     "Verifica file completata.",
     "Verificação de ficheiro concluída.",
     "Verificação de arquivo concluída.",
     "Bestandsverificatie voltooid.",
     "Filverifiering slutförd.",
     "Filverifisering fullført.",
     "Filverificering fuldført.",
     "Tiedoston varmennus valmis.",
     "Weryfikacja pliku zakończona.",
     "Ověření souboru dokončeno.",
     "Fájlellenőrzés befejezve.",
     "Verificarea fișierului completă."),

                    ["Verification Complete"] =
    ("Vérification terminée",
     "Überprüfung abgeschlossen",
     "Verificación completada",
     "Verifica completata",
     "Verificação concluída",
     "Verificação concluída",
     "Verificatie voltooid",
     "Verifiering slutförd",
     "Verifisering fullført",
     "Verificering fuldført",
     "Varmennus valmis",
     "Weryfikacja zakończona",
     "Ověření dokončeno",
     "Ellenőrzés befejezve",
     "Verificare completă"),

                    ["File verification cancelled."] =
    ("Vérification de fichier annulée.",
     "Dateiüberprüfung abgebrochen.",
     "Verificación de archivo cancelada.",
     "Verifica file annullata.",
     "Verificação de ficheiro cancelada.",
     "Verificação de arquivo cancelada.",
     "Bestandsverificatie geannuleerd.",
     "Filverifiering avbruten.",
     "Filverifisering avbrutt.",
     "Filverificering annulleret.",
     "Tiedoston varmennus peruutettu.",
     "Weryfikacja pliku anulowana.",
     "Ověření souboru zrušeno.",
     "Fájlellenőrzés megszakítva.",
     "Verificarea fișierului anulată."),

                    ["Verification Cancelled"] =
    ("Vérification annulée",
     "Überprüfung abgebrochen",
     "Verificación cancelada",
     "Verifica annullata",
     "Verificação cancelada",
     "Verificação cancelada",
     "Verificatie geannuleerd",
     "Verifiering avbruten",
     "Verifisering avbrutt",
     "Verificering annulleret",
     "Varmennus peruutettu",
     "Weryfikacja anulowana",
     "Ověření zrušeno",
     "Ellenőrzés megszakítva",
     "Verificare anulată"),

                    ["File verification completed with errors: {0}"] =
    ("Vérification de fichier terminée avec des erreurs : {0}",
     "Dateiüberprüfung mit Fehlern abgeschlossen: {0}",
     "Verificación de archivo completada con errores: {0}",
     "Verifica file completata con errori: {0}",
     "Verificação de ficheiro concluída com erros: {0}",
     "Verificação de arquivo concluída com erros: {0}",
     "Bestandsverificatie voltooid met fouten: {0}",
     "Filverifiering slutförd med fel: {0}",
     "Filverifisering fullført med feil: {0}",
     "Filverificering fuldført med fejl: {0}",
     "Tiedoston varmennus valmis virheillä: {0}",
     "Weryfikacja pliku zakończona z błędami: {0}",
     "Ověření souboru dokončeno s chybami: {0}",
     "Fájlellenőrzés befejezve hibákkal: {0}",
     "Verificarea fișierului completă cu erori: {0}"),

                    ["Verification Error"] =
    ("Erreur de vérification",
     "Überprüfungsfehler",
     "Error de verificación",
     "Errore di verifica",
     "Erro de verificação",
     "Erro de verificação",
     "Verificatiefout",
     "Verifieringsfel",
     "Verifiseringsfeil",
     "Verificeringsfejl",
     "Varmennusvirhe",
     "Błąd weryfikacji",
     "Chyba ověření",
     "Ellenőrzési hiba",
     "Eroare de verificare"),

                    ["No destination folder selected. Cannot verify files."] =
    ("Aucun dossier de destination sélectionné. Impossible de vérifier les fichiers.",
     "Kein Zielordner ausgewählt. Dateien können nicht überprüft werden.",
     "No se ha seleccionado carpeta de destino. No se pueden verificar los archivos.",
     "Nessuna cartella di destinazione selezionata. Impossibile verificare i file.",
     "Nenhuma pasta de destino selecionada. Não é possível verificar os ficheiros.",
     "Nenhuma pasta de destino selecionada. Não é possível verificar os arquivos.",
     "Geen doelmap geselecteerd. Kan bestanden niet verifiëren.",
     "Ingen målmapp vald. Kan inte verifiera filer.",
     "Ingen destinasjonsmappe valgt. Kan ikke verifisere filer.",
     "Ingen destinationsmappe valgt. Kan ikke verificere filer.",
     "Kohdehakemistoa ei valittu. Tiedostoja ei voida varmennettaa.",
     "Nie wybrano folderu docelowego. Nie można zweryfikować plików.",
     "Nebyla vybrána cílová složka. Nelze ověřit soubory.",
     "Nincs célmappa kiválasztva. A fájlok nem ellenőrizhetők.",
     "Niciun folder de destinație selectat. Nu se pot verifica fișierele."),

                    // MULTI-THREAD SUMMARY
                    ["{0} Operation Summary ({1}) -\n\nFiles Copied: {2:N0}\nFiles Skipped: {3:N0}\nFiles Failed: {4:N0}\nTotal Files Processed: {5:N0} / {6:N0}\nTotal Bytes Processed: {7} / {8}"] =
    ("Résumé de l'opération {0} ({1}) -\n\nFichiers copiés : {2:N0}\nFichiers ignorés : {3:N0}\nFichiers en échec : {4:N0}\nFichiers traités au total : {5:N0} / {6:N0}\nOctets traités au total : {7} / {8}",
     "{0} Operation-Zusammenfassung ({1}) -\n\nKopierte Dateien: {2:N0}\nÜbersprungene Dateien: {3:N0}\nFehlgeschlagene Dateien: {4:N0}\nGesamt bearbeitete Dateien: {5:N0} / {6:N0}\nGesamt bearbeitete Bytes: {7} / {8}",
     "Resumen de operación {0} ({1}) -\n\nArchivos copiados: {2:N0}\nArchivos omitidos: {3:N0}\nArchivos fallidos: {4:N0}\nTotal archivos procesados: {5:N0} / {6:N0}\nTotal bytes procesados: {7} / {8}",
     "Riepilogo operazione {0} ({1}) -\n\nFile copiati: {2:N0}\nFile saltati: {3:N0}\nFile falliti: {4:N0}\nTotale file elaborati: {5:N0} / {6:N0}\nTotale byte elaborati: {7} / {8}",
     "Resumo da operação {0} ({1}) -\n\nFicheiros copiados: {2:N0}\nFicheiros ignorados: {3:N0}\nFicheiros falhados: {4:N0}\nTotal de ficheiros processados: {5:N0} / {6:N0}\nTotal de bytes processados: {7} / {8}",
     "Resumo da operação {0} ({1}) -\n\nArquivos copiados: {2:N0}\nArquivos ignorados: {3:N0}\nArquivos falhados: {4:N0}\nTotal de arquivos processados: {5:N0} / {6:N0}\nTotal de bytes processados: {7} / {8}",
     "{0} Bewerkingssamenvatting ({1}) -\n\nBestanden gekopieerd: {2:N0}\nBestanden overgeslagen: {3:N0}\nBestanden mislukt: {4:N0}\nTotaal verwerkte bestanden: {5:N0} / {6:N0}\nTotaal verwerkte bytes: {7} / {8}",
     "{0} Operationssammanfattning ({1}) -\n\nKopierade filer: {2:N0}\nÖverhoppade filer: {3:N0}\nMisslyckade filer: {4:N0}\nTotalt bearbetade filer: {5:N0} / {6:N0}\nTotalt bearbetade bytes: {7} / {8}",
     "{0} Operasjonssammendrag ({1}) -\n\nKopierte filer: {2:N0}\nHoppet over filer: {3:N0}\nMislykket filer: {4:N0}\nTotalt behandlede filer: {5:N0} / {6:N0}\nTotalt behandlede bytes: {7} / {8}",
     "{0} Operationssammenfatning ({1}) -\n\nKopierede filer: {2:N0}\nOversprungne filer: {3:N0}\nMislykkedes filer: {4:N0}\nSamlet behandlede filer: {5:N0} / {6:N0}\nSamlet behandlede bytes: {7} / {8}",
     "{0} Toiminnon yhteenveto ({1}) -\n\nKopioituja tiedostoja: {2:N0}\nOhitettuja tiedostoja: {3:N0}\nEpäonnistuneita tiedostoja: {4:N0}\nKäsiteltyjä tiedostoja yhteensä: {5:N0} / {6:N0}\nKäsiteltyjä tavuja yhteensä: {7} / {8}",
     "{0} Podsumowanie operacji ({1}) -\n\nSkopiowane pliki: {2:N0}\nPominięte pliki: {3:N0}\nNieudane pliki: {4:N0}\nŁącznie przetworzonych plików: {5:N0} / {6:N0}\nŁącznie przetworzonych bajtów: {7} / {8}",
     "{0} Souhrn operace ({1}) -\n\nZkopírované soubory: {2:N0}\nPřeskočené soubory: {3:N0}\nNeúspěšné soubory: {4:N0}\nCelkem zpracovaných souborů: {5:N0} / {6:N0}\nCelkem zpracovaných bajtů: {7} / {8}",
     "{0} Művelet összefoglalása ({1}) -\n\nMásolt fájlok: {2:N0}\nKihagyott fájlok: {3:N0}\nSikertelen fájlok: {4:N0}\nÖsszes feldolgozott fájl: {5:N0} / {6:N0}\nÖsszes feldolgozott bájt: {7} / {8}",
     "{0} Rezumat operație ({1}) -\n\nFișiere copiate: {2:N0}\nFișiere omise: {3:N0}\nFișiere eșuate: {4:N0}\nTotal fișiere procesate: {5:N0} / {6:N0}\nTotal octeți procesați: {7} / {8}"),

                    ["Operation {0}"] =
    ("Opération {0}",
     "Operation {0}",
     "Operación {0}",
     "Operazione {0}",
     "Operação {0}",
     "Operação {0}",
     "Bewerking {0}",
     "Operation {0}",
     "Operasjon {0}",
     "Operation {0}",
     "Toiminto {0}",
     "Operacja {0}",
     "Operace {0}",
     "Művelet {0}",
     "Operație {0}"),

                    // COPY/MOVE/SECURE-DELETE
                    ["Copy operation cancelled by user."] =
    ("Opération de copie annulée par l'utilisateur.",
     "Kopie-Operation vom Benutzer abgebrochen.",
     "Operación de copia cancelada por el usuario.",
     "Operazione di copia annullata dall'utente.",
     "Operação de cópia cancelada pelo utilizador.",
     "Operação de cópia cancelada pelo usuário.",
     "Kopieerbewerking geannuleerd door gebruiker.",
     "Kopieringsoperation avbruten av användare.",
     "Kopieringsoperasjon avbrutt av bruker.",
     "Kopieringsoperation annulleret af bruger.",
     "Kopiointitoiminto peruutettu käyttäjän toimesta.",
     "Operacja kopiowania anulowana przez użytkownika.",
     "Operace kopírování zrušena uživatelem.",
     "Másolási művelet megszakítva a felhasználó által.",
     "Operație de copiere anulată de utilizator."),

                    ["Operation Cancelled"] =
    ("Opération annulée",
     "Operation abgebrochen",
     "Operación cancelada",
     "Operazione annullata",
     "Operação cancelada",
     "Operação cancelada",
     "Bewerking geannuleerd",
     "Operation avbruten",
     "Operasjon avbrutt",
     "Operation annulleret",
     "Toiminto peruutettu",
     "Operacja anulowana",
     "Operace zrušena",
     "Művelet megszakítva",
     "Operație anulată"),

                    ["Copy operation completed with errors: {0}"] =
    ("Opération de copie terminée avec des erreurs : {0}",
     "Kopie-Operation mit Fehlern abgeschlossen: {0}",
     "Operación de copia completada con errores: {0}",
     "Operazione di copia completata con errori: {0}",
     "Operação de cópia concluída com erros: {0}",
     "Operação de cópia concluída com erros: {0}",
     "Kopieerbewerking voltooid met fouten: {0}",
     "Kopieringsoperation slutförd med fel: {0}",
     "Kopieringsoperasjon fullført med feil: {0}",
     "Kopieringsoperation fuldført med fejl: {0}",
     "Kopiointitoiminto valmis virheillä: {0}",
     "Operacja kopiowania zakończona z błędami: {0}",
     "Operace kopírování dokončena s chybami: {0}",
     "Másolási művelet befejezve hibákkal: {0}",
     "Operație de copiere completă cu erori: {0}"),

                    ["Copy Error"] =
    ("Erreur de copie",
     "Kopie-Fehler",
     "Error de copia",
     "Errore di copia",
     "Erro de cópia",
     "Erro de cópia",
     "Kopieerfout",
     "Kopieringsfel",
     "Kopieringsfeil",
     "Kopieringsfejl",
     "Kopiointivirhe",
     "Błąd kopiowania",
     "Chyba kopírování",
     "Másolási hiba",
     "Eroare de copiere"),

                    ["Secure Delete operation cancelled by user."] =
    ("Suppression sécurisée annulée par l'utilisateur.",
     "Sicheres Löschen vom Benutzer abgebrochen.",
     "Borrado seguro cancelado por el usuario.",
     "Eliminazione sicura annullata dall'utente.",
     "Eliminação segura cancelada pelo utilizador.",
     "Exclusão segura cancelada pelo usuário.",
     "Veilig verwijderen geannuleerd door gebruiker.",
     "Säker radering avbruten av användare.",
     "Sikker sletting avbrutt av bruker.",
     "Sikker sletning annulleret af bruger.",
     "Turvallinen poisto peruutettu käyttäjän toimesta.",
     "Bezpieczne usuwanie anulowane przez użytkownika.",
     "Bezpečné mazání zrušeno uživatelem.",
     "Biztonságos törlés megszakítva a felhasználó által.",
     "Ștergere securizată anulată de utilizator."),

                    ["Secure Delete operation completed with errors: {0}"] =
    ("Suppression sécurisée terminée avec des erreurs : {0}",
     "Sicheres Löschen mit Fehlern abgeschlossen: {0}",
     "Borrado seguro completado con errores: {0}",
     "Eliminazione sicura completata con errori: {0}",
     "Eliminação segura concluída com erros: {0}",
     "Exclusão segura concluída com erros: {0}",
     "Veilig verwijderen voltooid met fouten: {0}",
     "Säker radering slutförd med fel: {0}",
     "Sikker sletting fullført med feil: {0}",
     "Sikker sletning fuldført med fejl: {0}",
     "Turvallinen poisto valmis virheillä: {0}",
     "Bezpieczne usuwanie zakończone z błędami: {0}",
     "Bezpečné mazání dokončeno s chybami: {0}",
     "Biztonságos törlés befejezve hibákkal: {0}",
     "Ștergere securizată completă cu erori: {0}"),

                    ["Secure Delete Error"] =
    ("Erreur de suppression sécurisée",
     "Fehler beim sicheren Löschen",
     "Error de borrado seguro",
     "Errore di eliminazione sicura",
     "Erro de eliminação segura",
     "Erro de exclusão segura",
     "Fout bij veilig verwijderen",
     "Säker raderingsfel",
     "Sikker slettingsfeil",
     "Sikker sletningsfejl",
     "Turvallisen poiston virhe",
     "Błąd bezpiecznego usuwania",
     "Chyba bezpečného mazání",
     "Biztonságos törlési hiba",
     "Eroare de ștergere securizată"),

                    ["Move operation cancelled by user."] =
    ("Déplacement annulé par l'utilisateur.",
     "Verschieben vom Benutzer abgebrochen.",
     "Operación de mover cancelada por el usuario.",
     "Operazione di spostamento annullata dall'utente.",
     "Operação de movimentação cancelada pelo utilizador.",
     "Operação de movimentação cancelada pelo usuário.",
     "Verplaatsbewerking geannuleerd door gebruiker.",
     "Flyttoperation avbruten av användare.",
     "Flyttoperasjon avbrutt av bruker.",
     "Flytoperation annulleret af bruger.",
     "Siirtotoiminto peruutettu käyttäjän toimesta.",
     "Operacja przenoszenia anulowana przez użytkownika.",
     "Operace přesunu zrušena uživatelem.",
     "Áthelyezési művelet megszakítva a felhasználó által.",
     "Operație de mutare anulată de utilizator."),

                    ["Move operation completed with errors: {0}"] =
    ("Déplacement terminé avec des erreurs : {0}",
     "Verschieben mit Fehlern abgeschlossen: {0}",
     "Operación de mover completada con errores: {0}",
     "Operazione di spostamento completata con errori: {0}",
     "Operação de movimentação concluída com erros: {0}",
     "Operação de movimentação concluída com erros: {0}",
     "Verplaatsbewerking voltooid met fouten: {0}",
     "Flyttoperation slutförd med fel: {0}",
     "Flyttoperasjon fullført med feil: {0}",
     "Flytoperation fuldført med fejl: {0}",
     "Siirtotoiminto valmis virheillä: {0}",
     "Operacja przenoszenia zakończona z błędami: {0}",
     "Operace přesunu dokončena s chybami: {0}",
     "Áthelyezési művelet befejezve hibákkal: {0}",
     "Operație de mutare completă cu erori: {0}"),

                    ["Move Error"] =
    ("Erreur de déplacement",
     "Verschiebe-Fehler",
     "Error de mover",
     "Errore di spostamento",
     "Erro de movimentação",
     "Erro de movimentação",
     "Verplaatsfout",
     "Flyttfel",
     "Flyttfeil",
     "Flytfejl",
     "Siirtovirhe",
     "Błąd przenoszenia",
     "Chyba přesunu",
     "Áthelyezési hiba",
     "Eroare de mutare"),

                    // CONFIRMATIONS/WARNINGS
                    ["Secure deletion is about to take place on folder:\n\n{0}\n\nWould you like to continue?"] =
    ("Une suppression sécurisée va avoir lieu sur le dossier :\n\n{0}\n\nVoulez-vous continuer ?",
     "Sicheres Löschen wird für Ordner ausgeführt:\n\n{0}\n\nMöchten Sie fortfahren?",
     "El borrado seguro se realizará en la carpeta:\n\n{0}\n\n¿Desea continuar?",
     "L'eliminazione sicura sta per essere eseguita sulla cartella:\n\n{0}\n\nDesidera continuare?",
     "A eliminação segura está prestes a ser efetuada na pasta:\n\n{0}\n\nDeseja continuar?",
     "A exclusão segura está prestes a ser efetuada na pasta:\n\n{0}\n\nDeseja continuar?",
     "Veilig verwijderen gaat plaatsvinden op map:\n\n{0}\n\nWilt u doorgaan?",
     "Säker radering kommer att utföras på mapp:\n\n{0}\n\nVill du fortsätta?",
     "Sikker sletting er i ferd med å finne sted på mappe:\n\n{0}\n\nVil du fortsette?",
     "Sikker sletning er ved at finde sted på mappe:\n\n{0}\n\nVil du fortsætte?",
     "Turvallinen poisto on tapahtumassa kansiolle:\n\n{0}\n\nHaluatko jatkaa?",
     "Bezpieczne usuwanie ma nastąpić w folderze:\n\n{0}\n\nCzy chcesz kontynuować?",
     "Bezpečné mazání se chystá provést ve složce:\n\n{0}\n\nChcete pokračovat?",
     "Biztonságos törlés hamarosan végrehajtásra kerül a mappában:\n\n{0}\n\nSzeretné folytatni?",
     "Ștergerea securizată urmează să aibă loc în folderul:\n\n{0}\n\nDoriți să continuați?"),

                    ["Confirm Secure Delete"] =
    ("Confirmer la suppression sécurisée",
     "Sicheres Löschen bestätigen",
     "Confirmar borrado seguro",
     "Conferma eliminazione sicura",
     "Confirmar eliminação segura",
     "Confirmar exclusão segura",
     "Bevestig veilig verwijderen",
     "Bekräfta säker radering",
     "Bekreft sikker sletting",
     "Bekræft sikker sletning",
     "Vahvista turvallinen poisto",
     "Potwierdź bezpieczne usuwanie",
     "Potvrdit bezpečné mazání",
     "Biztonságos törlés megerősítése",
     "Confirmă ștergerea securizată"),

                    ["Directory not found in the file list:\n{0}"] =
    ("Répertoire non trouvé dans la liste de fichiers :\n{0}",
     "Verzeichnis in Dateiliste nicht gefunden:\n{0}",
     "Directorio no encontrado en la lista de archivos:\n{0}",
     "Cartella non trovata nell'elenco file:\n{0}",
     "Diretório não encontrado na lista de ficheiros:\n{0}",
     "Diretório não encontrado na lista de arquivos:\n{0}",
     "Map niet gevonden in bestandenlijst:\n{0}",
     "Mapp hittades inte i fillistan:\n{0}",
     "Mappe ikke funnet i fillisten:\n{0}",
     "Mappe ikke fundet i fillisten:\n{0}",
     "Kansiota ei löytynyt tiedostoluettelosta:\n{0}",
     "Katalog nie znaleziony na liście plików:\n{0}",
     "Složka nebyla nalezena v seznamu souborů:\n{0}",
     "Mappa nem található a fájllistában:\n{0}",
     "Director negăsit în lista de fișiere:\n{0}"),

                    ["Directory Not Found"] =
    ("Répertoire non trouvé",
     "Verzeichnis nicht gefunden",
     "Directorio no encontrado",
     "Cartella non trovata",
     "Diretório não encontrado",
     "Diretório não encontrado",
     "Map niet gevonden",
     "Mapp hittades inte",
     "Mappe ikke funnet",
     "Mappe ikke fundet",
     "Kansiota ei löytynyt",
     "Katalog nie znaleziony",
     "Složka nenalezena",
     "Mappa nem található",
     "Director negăsit"),

                    ["Failed to create directory:\n{0}\n\nPlease try a different name."] =
    ("Échec de création du répertoire :\n{0}\n\nVeuillez essayer un autre nom.",
     "Verzeichnis erstellen fehlgeschlagen:\n{0}\n\nBitte einen anderen Namen versuchen.",
     "Error al crear directorio:\n{0}\n\nPruebe con otro nombre.",
     "Impossibile creare la cartella:\n{0}\n\nSi prega di provare un nome diverso.",
     "Falha ao criar o diretório:\n{0}\n\nPor favor, tente um nome diferente.",
     "Falha ao criar o diretório:\n{0}\n\nPor favor, tente um nome diferente.",
     "Kan map niet maken:\n{0}\n\nProbeer een andere naam.",
     "Misslyckades med att skapa mapp:\n{0}\n\nFörsök med ett annat namn.",
     "Kunne ikke opprette mappe:\n{0}\n\nVennligst prøv et annet navn.",
     "Kunne ikke oprette mappe:\n{0}\n\nPrøv venligst et andet navn.",
     "Kansion luominen epäonnistui:\n{0}\n\nYritä toista nimeä.",
     "Nie udało się utworzyć katalogu:\n{0}\n\nSpróbuj innej nazwy.",
     "Nepodařilo se vytvořit složku:\n{0}\n\nZkuste jiný název.",
     "Nem sikerült létrehozni a mappát:\n{0}\n\nKérjük, próbáljon másik nevet.",
     "Eșec la crearea directorului:\n{0}\n\nVă rugăm să încercați un nume diferit."),

                    ["Directory Creation Failed"] =
    ("Échec de création du répertoire",
     "Verzeichnis-Erstellung fehlgeschlagen",
     "Error al crear directorio",
     "Creazione cartella fallita",
     "Falha na criação do diretório",
     "Falha na criação do diretório",
     "Map aanmaken mislukt",
     "Mappskapande misslyckades",
     "Opprettelse av mappe mislyktes",
     "Mappeoprettelse mislykkedes",
     "Kansion luominen epäonnistui",
     "Tworzenie katalogu nieudane",
     "Vytvoření složky selhalo",
     "Mappa létrehozása sikertelen",
     "Crearea directorului eșuată"),

                    ["Directory name contains invalid characters. Please try again."] =
    ("Le nom du répertoire contient des caractères invalides. Veuillez réessayer.",
     "Verzeichnisname enthält ungültige Zeichen. Bitte erneut versuchen.",
     "El nombre del directorio contiene caracteres inválidos. Inténtelo de nuevo.",
     "Il nome della cartella contiene caratteri non validi. Si prega di riprovare.",
     "O nome do diretório contém caracteres inválidos. Por favor, tente novamente.",
     "O nome do diretório contém caracteres inválidos. Por favor, tente novamente.",
     "Mapnaam bevat ongeldige tekens. Probeer het opnieuw.",
     "Mappnamn innehåller ogiltiga tecken. Försök igen.",
     "Mappenavn inneholder ugyldige tegn. Vennligst prøv igjen.",
     "Mappenavn indeholder ugyldige tegn. Prøv venligst igen.",
     "Kansion nimi sisältää virheellisiä merkkejä. Yritä uudelleen.",
     "Nazwa katalogu zawiera nieprawidłowe znaki. Spróbuj ponownie.",
     "Název složky obsahuje neplatné znaky. Zkuste to prosím znovu.",
     "A mappa neve érvénytelen karaktereket tartalmaz. Kérjük, próbálja újra.",
     "Numele directorului conține caractere invalide. Vă rugăm să încercați din nou."),

                    ["Invalid Directory Name"] =
    ("Nom de répertoire invalide",
     "Ungültiger Verzeichnisname",
     "Nombre de directorio inválido",
     "Nome cartella non valido",
     "Nome de diretório inválido",
     "Nome de diretório inválido",
     "Ongeldige mapnaam",
     "Ogiltigt mappnamn",
     "Ugyldig mappenavn",
     "Ugyldigt mappenavn",
     "Virheellinen kansion nimi",
     "Nieprawidłowa nazwa katalogu",
     "Neplatný název složky",
     "Érvénytelen mappanév",
     "Nume de director invalid"),






                    // Languages: English (original), French (fr), German (de), Spanish (es), 
                    // Italian (it), Portuguese Portugal (pt-PT), Portuguese Brazil (pt-BR), 
                    // Dutch (nl), Swedish (sv), Norwegian (no), Danish (da), Finnish (fi), 
                    // Polish (pl), Czech (cs), Hungarian (hu), Romanian (ro)

                    ["No target paths available for custom directory creation."] =
    ("Aucun chemin cible disponible pour la création de répertoire personnalisé.",
    "Keine Zielpfade für benutzerdefinierte Verzeichnis-Erstellung verfügbar.",
    "No hay rutas de destino disponibles para crear directorio personalizado.",
    "Nessun percorso di destinazione disponibile per la creazione di directory personalizzata.",
    "Nenhum caminho de destino disponível para criação de diretório personalizado.",
    "Nenhum caminho de destino disponível para criação de diretório personalizado.",
    "Geen doelpaden beschikbaar voor het maken van aangepaste mappen.",
    "Inga målsökvägar tillgängliga för att skapa anpassad katalog.",
    "Ingen målstier tilgjengelig for tilpasset katalogoppretting.",
    "Ingen destinationsstier tilgængelige for oprettelse af brugerdefinerede mapper.",
    "Ei kohdekansioita saatavilla mukautetun hakemiston luomiseen.",
    "Brak dostępnych ścieżek docelowych do tworzenia niestandardowych katalogów.",
    "Nejsou k dispozici žádné cílové cesty pro vytvoření vlastního adresáře.",
    "Nincsenek célútvonalak elérhetőek egyéni könyvtár létrehozásához.",
    "Niciun drum țintă disponibil pentru crearea directorului personalizat."),

                    ["No data to export."] =
    ("Aucune donnée à exporter.",
    "Keine Daten zum Exportieren.",
    "No hay datos para exportar.",
    "Nessun dato da esportare.",
    "Nenhum dado para exportar.",
    "Nenhum dado para exportar.",
    "Geen gegevens om te exporteren.",
    "Ingen data att exportera.",
    "Ingen data å eksportere.",
    "Ingen data at eksportere.",
    "Ei vientiä varten tietoja.",
    "Brak danych do eksportu.",
    "Žádná data k exportu.",
    "Nincsenek adatok az exportáláshoz.",
    "Niciun date de exportat."),

                    ["Failed to update startup setting: {0}"] =
    ("Échec de mise à jour du paramètre de démarrage : {0}",
    "Fehler beim Aktualisieren der Start-Einstellung: {0}",
    "Error al actualizar configuración de inicio: {0}",
    "Impossibile aggiornare l'impostazione di avvio: {0}",
    "Falha ao atualizar a configuração de inicialização: {0}",
    "Falha ao atualizar a configuração de inicialização: {0}",
    "Bijwerken van opstartinstelling mislukt: {0}",
    "Misslyckades att uppdatera startinställning: {0}",
    "Kunne ikke oppdatere oppstartsinnstilling: {0}",
    "Kunne ikke opdatere startindstilling: {0}",
    "Käynnistysasetuksen päivitys epäonnistui: {0}",
    "Nie udało się zaktualizować ustawienia startowego: {0}",
    "Selhalo aktualizování nastavení spuštění: {0}",
    "Nem sikerült frissíteni az indítási beállítást: {0}",
    "Nu s-a putut actualiza setarea de pornire: {0}"),

                    ["Startup sync failed: {0}"] =
    ("Échec de synchronisation au démarrage : {0}",
    "Start-Sync fehlgeschlagen: {0}",
    "Error de sincronización al inicio: {0}",
    "Sincronizzazione all'avvio non riuscita: {0}",
    "Falha na sincronização de inicialização: {0}",
    "Falha na sincronização de inicialização: {0}",
    "Opstartsynchronisatie mislukt: {0}",
    "Startsynkronisering misslyckades: {0}",
    "Oppstartssynkronisering mislyktes: {0}",
    "Startsynkronisering mislykkedes: {0}",
    "Käynnistyssynkronointi epäonnistui: {0}",
    "Synchronizacja startowa nie powiodła się: {0}",
    "Spouštěcí synchronizace selhala: {0}",
    "Indítási szinkronizáció sikertelen: {0}",
    "Sincronizarea la pornire a eșuat: {0}"),

                    ["You may not have this form always on top if you add the context menu item."] =
    ("Vous ne pouvez pas garder cette fenêtre toujours au premier plan si vous ajoutez l'élément du menu contextuel.",
    "Sie können dieses Fenster nicht immer im Vordergrund halten, wenn Sie das Kontextmenü-Element hinzufügen.",
    "No puede mantener este formulario siempre encima si agrega el elemento del menú contextual.",
    "Potresti non avere questa finestra sempre in primo piano se aggiungi la voce del menu contestuale.",
    "Pode não ter este formulário sempre no topo se adicionar o item do menu de contexto.",
    "Você pode não ter este formulário sempre no topo se adicionar o item do menu de contexto.",
    "U kunt dit formulier mogelijk niet altijd bovenaan houden als u het contextmenu-item toevoegt.",
    "Du kanske inte kan ha detta formulär alltid överst om du lägger till kontextmenyalternativet.",
    "Du kan ikke ha dette skjemaet alltid øverst hvis du legger til kontekstmenyelementet.",
    "Du kan muligvis ikke have denne form altid øverst, hvis du tilføjer kontekstmenupunktet.",
    "Et voi pitää tätä lomaketta aina päällimmäisenä, jos lisäät kontekstivalikkokohteen.",
    "Możesz nie mieć tego formularza zawsze na wierzchu, jeśli dodasz element menu kontekstowego.",
    "Toto okno nemusí zůstat vždy navrchu, pokud přidáte položku kontextové nabídky.",
    "Lehet, hogy nem tudja ezt az űrlapot mindig legfelül tartani, ha hozzáadja a helyi menü elemet.",
    "S-ar putea să nu puteți avea acest formular întotdeauna deasupra dacă adăugați elementul din meniul contextual."),

                    ["Error applying skin: {0}"] =
    ("Erreur lors de l'application du thème : {0}",
    "Fehler beim Anwenden des Skins: {0}",
    "Error al aplicar tema: {0}",
    "Errore durante l'applicazione della skin: {0}",
    "Erro ao aplicar o tema: {0}",
    "Erro ao aplicar o tema: {0}",
    "Fout bij toepassen van skin: {0}",
    "Fel vid tillämpning av utseende: {0}",
    "Feil ved påføring av drakt: {0}",
    "Fejl ved anvendelse af udseende: {0}",
    "Virhe asetetta käyttöönottaessa: {0}",
    "Błąd podczas stosowania skórki: {0}",
    "Chyba při aplikování vzhledu: {0}",
    "Hiba a kinézet alkalmazásakor: {0}",
    "Eroare la aplicarea temei: {0}"),

                    ["Cannot display the file: ({0}). You may not have permission to read the file, or it may be corrupt.\n\nReported error: {1}"] =
    ("Impossible d'afficher le fichier : ({0}). Vous n'avez peut-être pas la permission de le lire, ou il est corrompu.\n\nErreur signalée : {1}",
    "Datei kann nicht angezeigt werden: ({0}). Möglicherweise fehlt die Leseberechtigung oder die Datei ist beschädigt.\n\nGemeldeter Fehler: {1}",
    "No se puede mostrar el archivo: ({0}). Es posible que no tenga permiso para leerlo o esté dañado.\n\nError reportado: {1}",
    "Impossibile visualizzare il file: ({0}). Potresti non avere il permesso di leggere il file o potrebbe essere corrotto.\n\nErrore segnalato: {1}",
    "Não é possível exibir o ficheiro: ({0}). Pode não ter permissão para ler o ficheiro ou este pode estar corrompido.\n\nErro reportado: {1}",
    "Não é possível exibir o arquivo: ({0}). Você pode não ter permissão para ler o arquivo ou ele pode estar corrompido.\n\nErro reportado: {1}",
    "Kan bestand niet weergeven: ({0}). Mogelijk heeft u geen toestemming om het bestand te lezen of het is beschadigd.\n\nGemelde fout: {1}",
    "Kan inte visa filen: ({0}). Du kanske inte har behörighet att läsa filen, eller så kan den vara korrupt.\n\nRapporterat fel: {1}",
    "Kan ikke vise filen: ({0}). Du har kanskje ikke tillatelse til å lese filen, eller den kan være skadet.\n\nRapportert feil: {1}",
    "Kan ikke vise filen: ({0}). Du har muligvis ikke tilladelse til at læse filen, eller den kan være beskadiget.\n\nRapporteret fejl: {1}",
    "Tiedostoa ei voi näyttää: ({0}). Sinulla ei ehkä ole oikeutta lukea tiedostoa tai se voi olla vioittunut.\n\nIlmoitettu virhe: {1}",
    "Nie można wyświetlić pliku: ({0}). Możesz nie mieć uprawnień do odczytu pliku lub plik może być uszkodzony.\n\nZgłoszony błąd: {1}",
    "Soubor nelze zobrazit: ({0}). Možná nemáte oprávnění ke čtení souboru nebo může být poškozen.\n\nNahlášená chyba: {1}",
    "A fájl nem jeleníthető meg: ({0}). Lehet, hogy nincs jogosultsága a fájl olvasásához, vagy a fájl sérült.\n\nJelentett hiba: {1}",
    "Nu se poate afișa fișierul: ({0}). S-ar putea să nu aveți permisiunea de a citi fișierul sau acesta poate fi corupt.\n\nEroare raportată: {1}"),

                    ["Security error!\n\nError message: {0}\n\nDetails:\n\n{1}"] =
    ("Erreur de sécurité !\n\nMessage d'erreur : {0}\n\nDétails :\n\n{1}",
    "Sicherheitsfehler!\n\nFehlermeldung: {0}\n\nDetails:\n\n{1}",
    "¡Error de seguridad!\n\nMensaje de error: {0}\n\nDetalles:\n\n{1}",
    "Errore di sicurezza!\n\nMessaggio di errore: {0}\n\nDettagli:\n\n{1}",
    "Erro de segurança!\n\nMensagem de erro: {0}\n\nDetalhes:\n\n{1}",
    "Erro de segurança!\n\nMensagem de erro: {0}\n\nDetalhes:\n\n{1}",
    "Beveiligingsfout!\n\nFoutmelding: {0}\n\nDetails:\n\n{1}",
    "Säkerhetsfel!\n\nFelmeddelande: {0}\n\nDetaljer:\n\n{1}",
    "Sikkerhetsfeil!\n\nFeilmelding: {0}\n\nDetaljer:\n\n{1}",
    "Sikkerhedsfejl!\n\nFejlmeddelelse: {0}\n\nDetaljer:\n\n{1}",
    "Turvallisuusvirhe!\n\nVirheilmoitus: {0}\n\nYksityiskohdat:\n\n{1}",
    "Błąd zabezpieczeń!\n\nKomunikat o błędzie: {0}\n\nSzczegóły:\n\n{1}",
    "Chyba zabezpečení!\n\nChybová zpráva: {0}\n\nPodrobnosti:\n\n{1}",
    "Biztonsági hiba!\n\nHibaüzenet: {0}\n\nRészletek:\n\n{1}",
    "Eroare de securitate!\n\nMesaj de eroare: {0}\n\nDetalii:\n\n{1}"),

                    ["File/Folder was already added to the file/folder list!"] =
    ("Fichier/Dossier déjà ajouté à la liste !",
    "Datei/Ordner wurde bereits zur Liste hinzugefügt!",
    "¡El archivo/carpeta ya fue agregado a la lista!",
    "File/Cartella già aggiunto all'elenco file/cartelle!",
    "Ficheiro/Pasta já foi adicionado à lista de ficheiros/pastas!",
    "Arquivo/Pasta já foi adicionado à lista de arquivos/pastas!",
    "Bestand/Map is al toegevoegd aan de bestand/map-lijst!",
    "Fil/Mapp var redan tillagd i fil/mapp-listan!",
    "Fil/Mappe var allerede lagt til i fil/mappe-listen!",
    "Fil/Mappe var allerede tilføjet til fil/mappe-listen!",
    "Tiedosto/Kansio on jo lisätty tiedosto/kansio-listaan!",
    "Plik/Folder został już dodany do listy plików/folderów!",
    "Soubor/Složka již byl přidán do seznamu souborů/složek!",
    "A fájl/mappa már hozzáadásra került a fájl/mappa listához!",
    "Fișierul/Directorul a fost deja adăugat la lista de fișiere/directoare!"),

                    ["You cannot copy/move/delete the root directory!"] =
    ("Vous ne pouvez pas copier/déplacer/supprimer le répertoire racine !",
    "Sie können das Stammverzeichnis nicht kopieren/verschieben/löschen!",
    "¡No puede copiar/mover/eliminar el directorio raíz!",
    "Non puoi copiare/spostare/eliminare la directory radice!",
    "Não pode copiar/mover/eliminar o diretório raiz!",
    "Você não pode copiar/mover/excluir o diretório raiz!",
    "U kunt de hoofdmap niet kopiëren/verplaatsen/verwijderen!",
    "Du kan inte kopiera/flytta/radera rotkatalogen!",
    "Du kan ikke kopiere/flytte/slette rotkatalogen!",
    "Du kan ikke kopiere/flytte/slette rodmappen!",
    "Et voi kopioida/siirtää/poistaa pääkansiota!",
    "Nie możesz kopiować/przenosić/usuwać katalogu głównego!",
    "Nelze kopírovat/přesouvat/mazat kořenový adresář!",
    "Nem másolhat/áthelyezhet/törölhet gyökérmappát!",
    "Nu puteți copia/muta/șterge directorul rădăcină!"),

                    ["Failed to load icon: {0}"] =
    ("Échec du chargement de l'icône : {0}",
    "Fehler beim Laden des Symbols: {0}",
    "Error al cargar el icono: {0}",
    "Impossibile caricare l'icona: {0}",
    "Falha ao carregar o ícone: {0}",
    "Falha ao carregar o ícone: {0}",
    "Laden van pictogram mislukt: {0}",
    "Misslyckades att ladda ikon: {0}",
    "Kunne ikke laste ikon: {0}",
    "Kunne ikke indlæse ikon: {0}",
    "Kuvakkeen lataus epäonnistui: {0}",
    "Nie udało się załadować ikony: {0}",
    "Načtení ikony selhalo: {0}",
    "Nem sikerült betölteni az ikont: {0}",
    "Nu s-a putut încărca pictograma: {0}"),

                    ["You cannot scan an entire drive."] =
    ("Vous ne pouvez pas analyser un lecteur entier.",
    "Sie können kein ganzes Laufwerk scannen.",
    "No puede escanear una unidad completa.",
    "Non puoi scansionare un'intera unità.",
    "Não pode analisar uma unidade inteira.",
    "Você não pode escanear uma unidade inteira.",
    "U kunt een volledige schijf niet scannen.",
    "Du kan inte skanna en hel enhet.",
    "Du kan ikke skanne en hel stasjon.",
    "Du kan ikke scanne en hel drev.",
    "Et voi skannata koko asemaa.",
    "Nie możesz przeskanować całego dysku.",
    "Nelze skenovat celou jednotku.",
    "Nem tud letölteni egy teljes meghajtót.",
    "Nu puteți scana un întreg disc."),

                    ["Invalid folder: {0}"] =
    ("Dossier invalide : {0}",
    "Ungültiger Ordner: {0}",
    "Carpeta inválida: {0}",
    "Cartella non valida: {0}",
    "Pasta inválida: {0}",
    "Pasta inválida: {0}",
    "Ongeldige map: {0}",
    "Ogiltig mapp: {0}",
    "Ugyldig mappe: {0}",
    "Ugyldig mappe: {0}",
    "Virheellinen kansio: {0}",
    "Nieprawidłowy folder: {0}",
    "Neplatná složka: {0}",
    "Érvénytelen mappa: {0}",
    "Director invalid: {0}"),

                    ["Error: {0}"] =
    ("Erreur : {0}",
    "Fehler: {0}",
    "Error: {0}",
    "Errore: {0}",
    "Erro: {0}",
    "Erro: {0}",
    "Fout: {0}",
    "Fel: {0}",
    "Feil: {0}",
    "Fejl: {0}",
    "Virhe: {0}",
    "Błąd: {0}",
    "Chyba: {0}",
    "Hiba: {0}",
    "Eroare: {0}"),

                    ["Please select a valid operation."] =
    ("Veuillez sélectionner une opération valide.",
    "Bitte einen gültigen Vorgang auswählen.",
    "Seleccione una operación válida.",
    "Seleziona un'operazione valida.",
    "Selecione uma operação válida.",
    "Selecione uma operação válida.",
    "Selecteer een geldige bewerking.",
    "Välj en giltig åtgärd.",
    "Velg en gyldig operasjon.",
    "Vælg en gyldig handling.",
    "Valitse kelvollinen toiminto.",
    "Wybierz prawidłową operację.",
    "Vyberte platnou operaci.",
    "Válasszon érvényes műveletet.",
    "Vă rugăm să selectați o operație validă."),

                    ["Only one overwrite behaviour may be selected."] =
    ("Un seul comportement d'écrasement peut être sélectionné.",
    "Nur ein Überschreibverhalten kann ausgewählt werden.",
    "Solo se puede seleccionar un comportamiento de sobrescritura.",
    "Può essere selezionato solo un comportamento di sovrascrittura.",
    "Apenas um comportamento de sobrescrita pode ser selecionado.",
    "Apenas um comportamento de sobrescrita pode ser selecionado.",
    "Er kan maar één overschrijfgedrag worden geselecteerd.",
    "Endast ett skrivbeteende kan väljas.",
    "Bare én overskrivingsatferd kan velges.",
    "Kun én overskrivningsadfærd kan vælges.",
    "Vain yksi ylikirjoituskäyttäytyminen voidaan valita.",
    "Można wybrać tylko jedno zachowanie nadpisywania.",
    "Lze vybrat pouze jedno chování přepsání.",
    "Csak egy felülírási viselkedés választható ki.",
    "Poate fi selectat un singur comportament de suprascriere."),

                    ["When creating a custom directory, you must select at least one directory structure option (Keep Directory Structure, Copy Files Only, Keep Only Files, or Keep Empty Folders)."] =
    ("Lors de la création d'un répertoire personnalisé, vous devez sélectionner au moins une option de structure (Garder la structure, Copier uniquement les fichiers, Garder uniquement les fichiers ou Garder les dossiers vides).",
    "Beim Erstellen eines benutzerdefinierten Verzeichnisses muss mindestens eine Strukturoption ausgewählt werden (Verzeichnisstruktur beibehalten, Nur Dateien kopieren, Nur Dateien behalten oder Leere Ordner behalten).",
    "Al crear un directorio personalizado, debe seleccionar al menos una opción de estructura (Mantener estructura de directorios, Copiar solo archivos, Mantener solo archivos o Mantener carpetas vacías).",
    "Quando si crea una directory personalizzata, è necessario selezionare almeno un'opzione di struttura della directory (Mantieni struttura directory, Copia solo file, Mantieni solo file o Mantieni cartelle vuote).",
    "Ao criar um diretório personalizado, deve selecionar pelo menos uma opção de estrutura de diretório (Manter Estrutura de Diretório, Copiar Apenas Ficheiros, Manter Apenas Ficheiros ou Manter Pastas Vazias).",
    "Ao criar um diretório personalizado, você deve selecionar pelo menos uma opção de estrutura de diretório (Manter Estrutura de Diretório, Copiar Apenas Arquivos, Manter Apenas Arquivos ou Manter Pastas Vazias).",
    "Bij het maken van een aangepaste map moet u ten minste één mapstructuuromtie selecteren (Mapstructuur behouden, Alleen bestanden kopiëren, Alleen bestanden behouden of Lege mappen behouden).",
    "När du skapar en anpassad katalog måste du välja minst ett katalogstrukturalternativ (Behåll katalogstruktur, Kopiera endast filer, Behåll endast filer eller Behåll tomma mappar).",
    "Når du oppretter en tilpasset katalog, må du velge minst én katalogstrukturalternativ (Behold katalogstruktur, Kopier bare filer, Behold bare filer eller Behold tomme mapper).",
    "Når du opretter en brugerdefineret mappe, skal du vælge mindst én mappestrukturoption (Behold mappestruktur, Kopier kun filer, Behold kun filer eller Behold tomme mapper).",
    "Kun luot mukautetun hakemiston, sinun on valittava vähintään yksi hakemistorakennenvaihtoehto (Säilytä hakemistorakenne, Kopioi vain tiedostot, Säilytä vain tiedostot tai Säilytä tyhjät kansiot).",
    "Podczas tworzenia niestandardowego katalogu należy wybrać co najmniej jedną opcję struktury katalogu (Zachowaj strukturę katalogu, Kopiuj tylko pliki, Zachowaj tylko pliki lub Zachowaj puste foldery).",
    "Při vytváření vlastního adresáře musíte vybrat alespoň jednu možnost struktury adresáře (Zachovat strukturu adresáře, Kopírovat pouze soubory, Zachovat pouze soubory nebo Zachovat prázdné složky).",
    "Egyéni könyvtár létrehozásakor legalább egy könyvtárszerkezeti opciót ki kell választania (Tartson meg könyvtárszerkezetet, Csak fájlokat másoljon, Csak fájlokat tartson meg vagy Tartson meg üres mappákat).",
    "Când creați un director personalizat, trebuie să selectați cel puțin o opțiune de structură a directorului (Păstrați structura directorului, Copiați doar fișiere, Păstrați doar fișiere sau Păstrați foldere goale)."),

                    ["When creating a custom directory, you must select an overwrite option (Overwrite All, Do Not Overwrite, or Overwrite If Newer)."] =
    ("Lors de la création d'un répertoire personnalisé, vous devez sélectionner une option d'écrasement (Remplacer tout, Ne pas remplacer ou Remplacer si plus récent).",
    "Beim Erstellen eines benutzerdefinierten Verzeichnisses muss eine Überschreiboption ausgewählt werden (Alles überschreiben, Nicht überschreiben oder Überschreiben wenn neuer).",
    "Al crear un directorio personalizado, debe seleccionar una opción de sobrescritura (Sobrescribir todo, No sobrescribir o Sobrescribir si es más reciente).",
    "Quando si crea una directory personalizzata, è necessario selezionare un'opzione di sovrascrittura (Sovrascrivi tutto, Non sovrascrivere o Sovrascrivi se più recente).",
    "Ao criar um diretório personalizado, deve selecionar uma opção de sobrescrita (Substituir Tudo, Não Substituir ou Substituir Se Mais Recente).",
    "Ao criar um diretório personalizado, você deve selecionar uma opção de sobrescrita (Substituir Tudo, Não Substituir ou Substituir Se Mais Recente).",
    "Bij het maken van een aangepaste map moet u een overschrijfoptie selecteren (Alles overschrijven, Niet overschrijven of Overschrijven indien nieuwer).",
    "När du skapar en anpassad katalog måste du välja ett skrivalternativ (Skriv över allt, Skriv inte över eller Skriv över om nyare).",
    "Når du oppretter en tilpasset katalog, må du velge en overskrivingsalternativ (Overskriv alle, Ikke overskriv eller Overskriv hvis nyere).",
    "Når du opretter en brugerdefineret mappe, skal du vælge en overskrivningsindstilling (Overskriv alt, Overskriv ikke eller Overskriv hvis nyere).",
    "Kun luot mukautetun hakemiston, sinun on valittava ylikirjoitusvaihtoehto (Korvaa kaikki, Älä korvaa tai Korvaa, jos uudempi).",
    "Podczas tworzenia niestandardowego katalogu należy wybrać opcję nadpisywania (Nadpisz wszystko, Nie nadpisuj lub Nadpisz jeśli nowszy).",
    "Při vytváření vlastního adresáře musíte vybrat možnost přepsání (Přepsat vše, Nepřepisovat nebo Přepsat, pokud je novější).",
    "Egyéni könyvtár létrehozásakor ki kell választania egy felülírási opciót (Felülír mindent, Ne írjon felül vagy Felülír, ha újabb).",
    "Când creați un director personalizat, trebuie să selectați o opțiune de suprascriere (Suprascrie tot, Nu suprascrie sau Suprascrie dacă este mai nou)."),

                    ["'Keep Empty Folders Only' must be used with either 'Keep Directory Structure' or 'Copy Files Only'."] = (
    "« Garder uniquement les dossiers vides » doit être utilisé avec « Garder la structure des dossiers » ou « Copier uniquement les fichiers ».",
    "\"Nur leere Ordner behalten\" muss mit \"Verzeichnisstruktur beibehalten\" oder \"Nur Dateien kopieren\" verwendet werden.",
    "«Mantener solo carpetas vacías» debe usarse con «Mantener estructura de directorios» o «Copiar solo archivos».",
    "'Mantieni solo cartelle vuote' deve essere utilizzato con 'Mantieni struttura directory' o 'Copia solo file'.",
    "'Manter Apenas Pastas Vazias' deve ser usado com 'Manter Estrutura de Diretórios' ou 'Copiar Apenas Ficheiros'.",
    "'Manter Apenas Pastas Vazias' deve ser usado com 'Manter Estrutura de Diretórios' ou 'Copiar Apenas Arquivos'.",
    "'Alleen lege mappen behouden' moet worden gebruikt met 'Mapstructuur behouden' of 'Alleen bestanden kopiëren'.",
    "'Behåll endast tomma mappar' måste användas med antingen 'Behåll katalogstruktur' eller 'Kopiera endast filer'.",
    "'Behold bare tomme mapper' må brukes med enten 'Behold katalogstruktur' eller 'Kopier bare filer'.",
    "'Behold kun tomme mapper' skal bruges med enten 'Behold mappestruktur' eller 'Kopier kun filer'.",
    "'Säilytä vain tyhjät kansiot' on käytettävä joko vaihtoehdon 'Säilytä hakemistorakenne' tai 'Kopioi vain tiedostot' kanssa.",
    "'Zachowuj tylko puste foldery' musi być używane z 'Zachowaj strukturę katalogów' lub 'Kopiuj tylko pliki'.",
    "'Zachovat pouze prázdné složky' musí být použito s 'Zachovat strukturu adresářů' nebo 'Kopírovat pouze soubory'.",
    "'Csak üres mappák megtartása' beállítást a 'Könyvtárszerkezet megtartása' vagy a 'Csak fájlok másolása' beállítással együtt kell használni.",
    "'Păstrați doar dosare goale' trebuie utilizat fie cu 'Păstrați structura directoarelor', fie cu 'Copiați doar fișiere'."
),

                    ["{0}"] =
    ("{0}", "{0}", "{0}", "{0}", "{0}", "{0}", "{0}", "{0}", "{0}", "{0}", "{0}", "{0}", "{0}", "{0}", "{0}"),

                    ["Invalid Options"] =
    ("Options invalides",
    "Ungültige Optionen",
    "Opciones inválidas",
    "Opzioni non valide",
    "Opções Inválidas",
    "Opções Inválidas",
    "Ongeldige opties",
    "Ogiltiga alternativ",
    "Ugyldige alternativer",
    "Ugyldige indstillinger",
    "Virheelliset asetukset",
    "Nieprawidłowe opcje",
    "Neplatné možnosti",
    "Érvénytelen beállítások",
    "Opțiuni invalide"),

                    ["Low disk space"] =
    ("Espace disque faible",
    "Wenig Speicherplatz",
    "Poco espacio en disco",
    "Spazio disco insufficiente",
    "Espaço em disco baixo",
    "Espaço em disco baixo",
    "Weinig schijfruimte",
    "Lågt diskutrymme",
    "Lite diskplass",
    "Lav diskplads",
    "Vähän levytilaa",
    "Mało miejsca na dysku",
    "Nízký místo na disku",
    "Alacsony lemezterület",
    "Spațiu pe disc redus"),

                    ["Drive {0} will have less than 100 MB free.\n\nOnly {1} will be copied so that around {2} remain.\n\nContinue?"] =
    ("Le lecteur {0} aura moins de 100 Mo libres.\n\nSeulement {1} seront copiés afin qu'environ {2} restent.\n\nContinuer ?",
    "Laufwerk {0} wird weniger als 100 MB frei haben.\n\nEs werden nur {1} kopiert, damit etwa {2} verbleiben.\n\nFortfahren?",
    "La unidad {0} tendrá menos de 100 MB libres.\n\nSolo se copiarán {1} para que queden aproximadamente {2}.\n\n¿Continuar?",
    "L'unità {0} avrà meno di 100 MB liberi.\n\nVerranno copiati solo {1} in modo che rimangano circa {2}.\n\nContinuare?",
    "A unidade {0} terá menos de 100 MB livres.\n\nApenas {1} serão copiados para que restem cerca de {2}.\n\nContinuar?",
    "A unidade {0} terá menos de 100 MB livres.\n\nApenas {1} serão copiados para que restem cerca de {2}.\n\nContinuar?",
    "Station {0} heeft minder dan 100 MB vrij.\n\nAlleen {1} wordt gekopieerd zodat ongeveer {2} overblijft.\n\nDoorgaan?",
    "Enhet {0} kommer att ha mindre än 100 MB ledigt.\n\nEndast {1} kommer att kopieras så att cirka {2} återstår.\n\nFortsätta?",
    "Stasjon {0} vil ha mindre enn 100 MB ledig.\n\nBare {1} vil bli kopiert slik at omtrent {2} gjenstår.\n\nFortsette?",
    "Drev {0} vil have mindre end 100 MB ledig.\n\nKun {1} vil blive kopieret, så der er omkring {2} tilbage.\n\nFortsætte?",
    "Asema {0}:lla on alle 100 Mt vapaata tilaa.\n\nVain {1} kopioidaan, jotta noin {2} jää jäljelle.\n\nJatketaanko?",
    "Dysk {0} będzie miał mniej niż 100 MB wolnego miejsca.\n\nTylko {1} zostanie skopiowane, aby pozostało około {2}.\n\nKontynuować?",
    "Jednotka {0} bude mít méně než 100 MB volného místa.\n\nBudou zkopírovány pouze {1}, takže zůstane přibližně {2}.\n\nPokračovat?",
    "A {0} meghajtón kevesebb mint 100 MB szabad terület lesz.\n\nCsak {1} másolódik, így körülbelül {2} marad.\n\nFolytatja?",
    "Unitatea {0} va avea mai puțin de 100 MB liberi.\n\nDoar {1} vor fi copiați, astfel încât să rămână aproximativ {2}.\n\nContinuați?"),

                    ["Not enough space left on drive {0}."] =
    ("Espace insuffisant sur le lecteur {0}.",
    "Nicht genügend Speicherplatz auf Laufwerk {0}.",
    "No hay suficiente espacio en la unidad {0}.",
    "Spazio insufficiente sull'unità {0}.",
    "Espaço insuficiente na unidade {0}.",
    "Espaço insuficiente na unidade {0}.",
    "Niet genoeg ruimte op station {0}.",
    "Inte tillräckligt med utrymme kvar på enhet {0}.",
    "Ikke nok plass på stasjon {0}.",
    "Ikke nok plads tilbage på drev {0}.",
    "Ei tarpeeksi tilaa asemalla {0}.",
    "Niewystarczająca ilość miejsca na dysku {0}.",
    "Na jednotce {0} není dostatek místa.",
    "Nincs elég hely a {0} meghajtóon.",
    "Spațiu insuficient pe unitatea {0}."),

                    ["Out of space"] =
    ("Plus d'espace",
    "Kein Speicherplatz",
    "Sin espacio",
    "Spazio esaurito",
    "Sem espaço",
    "Sem espaço",
    "Geen ruimte",
    "Slut på utrymme",
    "Tom for plass",
    "Ikke mere plads",
    "Tila loppu",
    "Brak miejsca",
    "Došlo místo",
    "Nincs hely",
    "Spațiu insuficient"),

                    ["Please select at least one destination folder."] =
    ("Veuillez sélectionner au moins un dossier de destination.",
    "Bitte mindestens einen Zielordner auswählen.",
    "Seleccione al menos una carpeta de destino.",
    "Seleziona almeno una cartella di destinazione.",
    "Selecione pelo menos uma pasta de destino.",
    "Selecione pelo menos uma pasta de destino.",
    "Selecteer ten minste één doelmap.",
    "Välj minst en målmapp.",
    "Velg minst én målmappe.",
    "Vælg mindst én destinationsmappe.",
    "Valitse vähintään yksi kohdekansio.",
    "Wybierz co najmniej jeden folder docelowy.",
    "Vyberte alespoň jeden cílový adresář.",
    "Válasszon ki legalább egy célmappát.",
    "Vă rugăm să selectați cel puțin un folder destinație."),

                    ["Operation cancelled: Custom directory not specified."] =
    ("Opération annulée : répertoire personnalisé non spécifié.",
    "Operation abgebrochen: Benutzerdefiniertes Verzeichnis nicht angegeben.",
    "Operación cancelada: directorio personalizado no especificado.",
    "Operazione annullata: directory personalizzata non specificata.",
    "Operação cancelada: diretório personalizado não especificado.",
    "Operação cancelada: diretório personalizado não especificado.",
    "Bewerking geannuleerd: Aangepaste map niet opgegeven.",
    "Åtgärd avbruten: Anpassad katalog inte angiven.",
    "Operasjon avbrutt: Tilpasset katalog ikke spesifisert.",
    "Handling annulleret: Brugerdefineret mappe ikke angivet.",
    "Toiminto peruttu: Mukautettua hakemistoa ei ole määritetty.",
    "Operacja anulowana: Niestandardowy katalog nie został określony.",
    "Operace zrušena: Vlastní adresář nebyl zadán.",
    "Művelet megszakítva: Egyéni könyvtár nincs megadva.",
    "Operație anulată: Directorul personalizat nu este specificat."),

                    ["You must select files or folders to Copy/Move/Delete!"] =
    ("Vous devez sélectionner des fichiers ou dossiers à copier/déplacer/supprimer !",
    "Sie müssen Dateien oder Ordner zum Kopieren/Verschieben/Löschen auswählen!",
    "¡Debe seleccionar archivos o carpetas para Copiar/Mover/Eliminar!",
    "Devi selezionare file o cartelle da Copiare/Spostare/Eliminare!",
    "Deve selecionar ficheiros ou pastas para Copiar/Mover/Eliminar!",
    "Você deve selecionar arquivos ou pastas para Copiar/Mover/Excluir!",
    "U moet bestanden of mappen selecteren om te Kopiëren/Verplaatsen/Verwijderen!",
    "Du måste välja filer eller mappar att Kopiera/Flytta/Radera!",
    "Du må velge filer eller mapper å Kopiere/Flytte/Slette!",
    "Du skal vælge filer eller mapper at Kopiere/Flytte/Slette!",
    "Sinun on valittava tiedostoja tai kansioita Kopioitavaksi/Siirrettäväksi/Poistettavaksi!",
    "Musisz wybrać pliki lub foldery do Kopiowania/Przenoszenia/Usuwania!",
    "Musíte vybrat soubory nebo složky ke Kopírování/Přesunutí/Smazání!",
    "Válassza ki a másoláshoz/áthelyezéshez/törléshez szükséges fájlokat vagy mappákat!",
    "Trebuie să selectați fișiere sau foldere pentru a Copia/Muta/Șterge!"),

                    ["Do you want to add {0} file(s) to copy?"] =
    ("Voulez-vous ajouter {0} fichier(s) à copier ?",
    "Möchten Sie {0} Datei(en) zum Kopieren hinzufügen?",
    "¿Desea agregar {0} archivo(s) para copiar?",
    "Vuoi aggiungere {0} file da copiare?",
    "Deseja adicionar {0} ficheiro(s) para copiar?",
    "Deseja adicionar {0} arquivo(s) para copiar?",
    "Wilt u {0} bestand(en) toevoegen om te kopiëren?",
    "Vill du lägga till {0} fil(er) att kopiera?",
    "Vil du legge til {0} fil(er) å kopiere?",
    "Vil du tilføje {0} fil(er) at kopiere?",
    "Haluatko lisätä {0} tiedosto(a) kopioitavaksi?",
    "Czy chcesz dodać {0} plik(i) do skopiowania?",
    "Chcete přidat {0} soubor(y) ke kopírování?",
    "Hozzá szeretne adni {0} fájlt a másoláshoz?",
    "Doriți să adăugați {0} fișier(e) pentru copiere?"),

                    ["Confirm Drag and Drop"] =
    ("Confirmer le glisser-déposer",
    "Drag & Drop bestätigen",
    "Confirmar arrastrar y soltar",
    "Conferma Trascina e Rilascia",
    "Confirmar Arrastar e Largar",
    "Confirmar Arrastar e Soltar",
    "Bevestig Drag and Drop",
    "Bekräfta Drag and Drop",
    "Bekreft Drag and Drop",
    "Bekræft Drag and Drop",
    "Vahvista Vedä ja Pudota",
    "Potwierdź Przeciągnij i Upuść",
    "Potvrdit Přetažení",
    "Erősítse meg a Drag and Drop műveletet",
    "Confirmați Drag and Drop"),

                    ["You dropped{0}"] =
    ("Vous avez déposé{0}",
    "Sie haben{0} abgelegt",
    "Solto{0}",
    "Hai rilasciato{0}",
    "Largou{0}",
    "Você soltou{0}",
    "U hebt{0} neergezet",
    "Du släppte{0}",
    "Du slapp{0}",
    "Du slipede{0}",
    "Pudotit{0}",
    "Upuściłeś{0}",
    "Pustil jste{0}",
    "Elengedte{0}",
    "Ați eliberat{0}"),

                    ["Sorry, but the directory or file couldn't be added."] =
    ("Désolé, mais le répertoire ou le fichier n'a pas pu être ajouté.",
    "Es tut uns leid, aber das Verzeichnis oder die Datei konnte nicht hinzugefügt werden.",
    "Lo sentimos, pero no se pudo agregar el directorio o el archivo.",
    "Spiacenti, ma la directory o il file non può essere aggiunto.",
    "Desculpe, mas o diretório ou ficheiro não pôde ser adicionado.",
    "Desculpe, mas o diretório ou arquivo não pôde ser adicionado.",
    "Sorry, maar de map of het bestand kon niet worden toegevoegd.",
    "Tyvärr, men katalogen eller filen kunde inte läggas till.",
    "Beklager, men katalogen eller filen kunne ikke legges til.",
    "Beklager, men mappen eller filen kunne ikke tilføjes.",
    "Valitettavasti hakemistoa tai tiedostoa ei voitu lisätä.",
    "Przepraszamy, ale katalog lub plik nie mógł zostać dodany.",
    "Je nám líto, ale adresář nebo soubor nelze přidat.",
    "Sajnáljuk, de a könyvtár vagy a fájl nem adható hozzá.",
    "Ne pare rău, dar directorul sau fișierul nu a putut fi adăugat."),

                    ["Copy That v1.0 By: Havoc - Error!"] =
    ("Copy That v1.0 Par : Havoc - Erreur !",
    "Copy That v1.0 Von : Havoc - Fehler!",
    "Copy That v1.0 Por : Havoc - ¡Error!",
    "Copy That v1.0 Di: Havoc - Errore!",
    "Copy That v1.0 Por: Havoc - Erro!",
    "Copy That v1.0 Por: Havoc - Erro!",
    "Copy That v1.0 Door: Havoc - Fout!",
    "Copy That v1.0 Av: Havoc - Fel!",
    "Copy That v1.0 Av: Havoc - Feil!",
    "Copy That v1.0 Af: Havoc - Fejl!",
    "Copy That v1.0 Tekijä: Havoc - Virhe!",
    "Copy That v1.0 Autor: Havoc - Błąd!",
    "Copy That v1.0 Od: Havoc - Chyba!",
    "Copy That v1.0 Készítette: Havoc - Hiba!",
    "Copy That v1.0 De: Havoc - Eroare!"),

                    ["Dropping Drives is Not Allowed."] =
    ("Le dépôt de lecteurs n'est pas autorisé.",
    "Das Ablegen von Laufwerken ist nicht erlaubt.",
    "No se permite soltar unidades.",
    "Il rilascio di unità non è consentito.",
    "Largar unidades não é permitido.",
    "Soltar unidades não é permitido.",
    "Het neerzetten van stations is niet toegestaan.",
    "Att släppa enheter är inte tillåtet.",
    "Å slippe stasjoner er ikke tillatt.",
    "At slippe drev er ikke tilladt.",
    "Asemien pudottaminen ei ole sallittua.",
    "Upuszczanie napędów jest niedozwolone.",
    "Pouštění jednotek není povoleno.",
    "Meghajtók ejtése nem megengedett.",
    "Eliberarea unităților nu este permisă."),

                    /* ----------  O P E R A T I O N   S U M M A R Y   T E M P L A T E S  ---------- */

                    ["----- {0} Operation Summary ({1}) -----\n\nTotal files considered: {2:N0}\nFiles copied: {3:N0} / {4:N0}\nFiles skipped (by filter/user): {5:N0}\nFiles failed (due to error): {6:N0}\n\nTotal bytes processed: {7}\n\nTotal bytes to process (estimated): {8}\n\n{0} {1}!"] =
    ("----- Résumé de l'opération {0} ({1}) -----\n\nFichiers considérés au total : {2:N0}\nFichiers copiés : {3:N0} / {4:N0}\nFichiers ignorés (par filtre/utilisateur) : {5:N0}\nFichiers en échec (erreur) : {6:N0}\n\nOctets traités au total : {7}\n\nOctets à traiter (estimé) : {8}\n\n{0} {1} !",
     "----- {0} Operation-Zusammenfassung ({1}) -----\n\nGesamt berücksichtigte Dateien: {2:N0}\nKopierte Dateien: {3:N0} / {4:N0}\nÜbersprungene Dateien (durch Filter/Benutzer): {5:N0}\nFehlgeschlagene Dateien (Fehler): {6:N0}\n\nGesamtverarbeitete Bytes: {7}\n\nZu verarbeitende Bytes (geschätzt): {8}\n\n{0} {1}!",
     "----- Resumen de operación {0} ({1}) -----\n\nArchivos considerados en total: {2:N0}\nArchivos copiados: {3:N0} / {4:N0}\nArchivos omitidos (por filtro/usuario): {5:N0}\nArchivos fallidos (por error): {6:N0}\n\nBytes procesados en total: {7}\n\nBytes a procesar (estimado): {8}\n\n¡{0} {1}!",
     "----- Riepilogo operazione {0} ({1}) -----\n\nFile totali considerati: {2:N0}\nFile copiati: {3:N0} / {4:N0}\nFile saltati (da filtro/utente): {5:N0}\nFile non riusciti (a causa di errore): {6:N0}\n\nByte totali elaborati: {7}\n\nByte totali da elaborare (stimati): {8}\n\n{0} {1}!",
     "----- Resumo da Operação {0} ({1}) -----\n\nTotal de ficheiros considerados: {2:N0}\nFicheiros copiados: {3:N0} / {4:N0}\nFicheiros ignorados (por filtro/utilizador): {5:N0}\nFicheiros falhados (devido a erro): {6:N0}\n\nTotal de bytes processados: {7}\n\nTotal de bytes a processar (estimado): {8}\n\n{0} {1}!",
     "----- Resumo da Operação {0} ({1}) -----\n\nTotal de arquivos considerados: {2:N0}\nArquivos copiados: {3:N0} / {4:N0}\nArquivos ignorados (por filtro/usuário): {5:N0}\nArquivos com falha (devido a erro): {6:N0}\n\nTotal de bytes processados: {7}\n\nTotal de bytes a processar (estimado): {8}\n\n{0} {1}!",
     "----- {0} Operation Samenvatting ({1}) -----\n\nTotaal bestanden overwogen: {2:N0}\nBestanden gekopieerd: {3:N0} / {4:N0}\nBestanden overgeslagen (door filter/gebruiker): {5:N0}\nBestanden mislukt (door fout): {6:N0}\n\nTotaal verwerkte bytes: {7}\n\nTotaal te verwerken bytes (geschat): {8}\n\n{0} {1}!",
     "----- {0} Operationssammanfattning ({1}) -----\n\nTotalt antal filer beaktade: {2:N0}\nFiler kopierade: {3:N0} / {4:N0}\nFiler hoppades över (av filter/användare): {5:N0}\nFiler misslyckades (på grund av fel): {6:N0}\n\nTotalt antal bearbetade byte: {7}\n\nTotalt antal byte att bearbeta (uppskattat): {8}\n\n{0} {1}!",
     "----- {0} Operasjonssammendrag ({1}) -----\n\nTotalt antall filer vurdert: {2:N0}\nFiler kopiert: {3:N0} / {4:N0}\nFiler hoppet over (av filter/bruker): {5:N0}\nFiler mislyktes (på grunn av feil): {6:N0}\n\nTotalt antall bytes behandlet: {7}\n\nTotalt antall bytes å behandle (estimert): {8}\n\n{0} {1}!",
     "----- {0} Operation Resume ({1}) -----\n\nTotale filer overvejet: {2:N0}\nFiler kopieret: {3:N0} / {4:N0}\nFiler sprunget over (af filter/bruger): {5:N0}\nFiler mislykkedes (på grund af fejl): {6:N0}\n\nTotale bytes behandlet: {7}\n\nTotale bytes at behandle (estimeret): {8}\n\n{0} {1}!",
     "----- {0} Toiminnon Yhteenveto ({1}) -----\n\nTiedostoja yhteensä harkittu: {2:N0}\nTiedostoja kopioitu: {3:N0} / {4:N0}\nTiedostoja ohitettu (suodattimen/käyttäjän toimesta): {5:N0}\nTiedostoja epäonnistui (virheen vuoksi): {6:N0}\n\nKäsiteltyjä tavuja yhteensä: {7}\n\nKäsiteltäviä tavuja yhteensä (arvio): {8}\n\n{0} {1}!",
     "----- {0} Podsumowanie operacji ({1}) -----\n\nŁącznie rozpatrzonych plików: {2:N0}\nPliki skopiowane: {3:N0} / {4:N0}\nPliki pominięte (przez filtr/użytkownika): {5:N0}\nPliki nieudane (z powodu błędu): {6:N0}\n\nŁącznie przetworzonych bajtów: {7}\n\nŁącznie bajtów do przetworzenia (szacunkowo): {8}\n\n{0} {1}!",
     "----- {0} Souhrn operace ({1}) -----\n\nCelkem zvažovaných souborů: {2:N0}\nZkopírované soubory: {3:N0} / {4:N0}\nPřeskočené soubory (filtrem/uživatelem): {5:N0}\nNeúspěšné soubory (kvůli chybě): {6:N0}\n\nCelkem zpracovaných bajtů: {7}\n\nCelkem bajtů ke zpracování (odhad): {8}\n\n{0} {1}!",
     "----- {0} Művelet Összefoglaló ({1}) -----\n\nÖsszesen figyelembe vett fájl: {2:N0}\nMásolt fájlok: {3:N0} / {4:N0}\nKihagyott fájlok (szűrő/felhasználó által): {5:N0}\nSikertelen fájlok (hiba miatt): {6:N0}\n\nÖsszesen feldolgozott bájt: {7}\n\nFeldolgozandó bájtok összesen (becsült): {8}\n\n{0} {1}!",
     "----- {0} Rezumat Operație ({1}) -----\n\nTotal fișiere luate în considerare: {2:N0}\nFișiere copiate: {3:N0} / {4:N0}\nFișiere omise (de filtru/utilizator): {5:N0}\nFișiere eșuate (din cauza erorii): {6:N0}\n\nTotal bytes procesați: {7}\n\nTotal bytes de procesat (estimat): {8}\n\n{0} {1}!"),

                    ["- {0} Operation Summary ({1}) -\n\nFiles Copied: {2:N0}\nFiles Skipped: {3:N0}\nFiles Failed: {4:N0}\nTotal Files Processed: {5:N0} / {6:N0}\nTotal Bytes Processed: {7} / {8}"] =
    ("- Résumé de l'opération {0} ({1}) -\n\nFichiers copiés : {2:N0}\nFichiers ignorés : {3:N0}\nFichiers en échec : {4:N0}\nFichiers traités au total : {5:N0} / {6:N0}\nOctets traités au total : {7} / {8}",
     "- {0} Operation-Zusammenfassung ({1}) -\n\nKopierte Dateien: {2:N0}\nÜbersprungene Dateien: {3:N0}\nFehlgeschlagene Dateien: {4:N0}\nGesamt bearbeitete Dateien: {5:N0} / {6:N0}\nGesamt bearbeitete Bytes: {7} / {8}",
     "- Resumen de operación {0} ({1}) -\n\nArchivos copiados: {2:N0}\nArchivos omitidos: {3:N0}\nArchivos fallidos: {4:N0}\nTotal archivos procesados: {5:N0} / {6:N0}\nTotal bytes procesados: {7} / {8}",
     "- Riepilogo operazione {0} ({1}) -\n\nFile copiati: {2:N0}\nFile saltati: {3:N0}\nFile non riusciti: {4:N0}\nFile totali elaborati: {5:N0} / {6:N0}\nByte totali elaborati: {7} / {8}",
     "- Resumo da Operação {0} ({1}) -\n\nFicheiros Copiados: {2:N0}\nFicheiros Ignorados: {3:N0}\nFicheiros Falhados: {4:N0}\nTotal de Ficheiros Processados: {5:N0} / {6:N0}\nTotal de Bytes Processados: {7} / {8}",
     "- Resumo da Operação {0} ({1}) -\n\nArquivos Copiados: {2:N0}\nArquivos Ignorados: {3:N0}\nArquivos com Falha: {4:N0}\nTotal de Arquivos Processados: {5:N0} / {6:N0}\nTotal de Bytes Processados: {7} / {8}",
     "- {0} Operation Samenvatting ({1}) -\n\nBestanden Gekopieerd: {2:N0}\nBestanden Overgeslagen: {3:N0}\nBestanden Mislukt: {4:N0}\nTotaal Bestanden Verwerkt: {5:N0} / {6:N0}\nTotaal Bytes Verwerkt: {7} / {8}",
     "- {0} Operationssammanfattning ({1}) -\n\nFiler Kopierade: {2:N0}\nFiler Hoppades Över: {3:N0}\nFiler Misslyckades: {4:N0}\nTotalt Antal Filer Bearbetade: {5:N0} / {6:N0}\nTotalt Antal Byte Bearbetade: {7} / {8}",
     "- {0} Operasjonssammendrag ({1}) -\n\nFiler Kopiert: {2:N0}\nFiler Hoppet Over: {3:N0}\nFiler Mislyktes: {4:N0}\nTotalt Antall Filer Behandlet: {5:N0} / {6:N0}\nTotalt Antall Bytes Behandlet: {7} / {8}",
     "- {0} Operation Resume ({1}) -\n\nFiler Kopieret: {2:N0}\nFiler Sprunget Over: {3:N0}\nFiler Mislykkedes: {4:N0}\nTotale Filer Behandlet: {5:N0} / {6:N0}\nTotale Bytes Behandlet: {7} / {8}",
     "- {0} Toiminnon Yhteenveto ({1}) -\n\nKopioidut Tiedostot: {2:N0}\nOhitetut Tiedostot: {3:N0}\nEpäonnistuneet Tiedostot: {4:N0}\nKäsiteltyjä Tiedostoja Yhteensä: {5:N0} / {6:N0}\nKäsiteltyjä Tavuja Yhteensä: {7} / {8}",
     "- {0} Podsumowanie operacji ({1}) -\n\nPliki Skopiowane: {2:N0}\nPliki Pominięte: {3:N0}\nPliki Nieudane: {4:N0}\nŁącznie Przetworzonych Plików: {5:N0} / {6:N0}\nŁącznie Przetworzonych Bajtów: {7} / {8}",
     "- {0} Souhrn operace ({1}) -\n\nZkopírované soubory: {2:N0}\nPřeskočené soubory: {3:N0}\nNeúspěšné soubory: {4:N0}\nCelkem zpracovaných souborů: {5:N0} / {6:N0}\nCelkem zpracovaných bajtů: {7} / {8}",
     "- {0} Művelet Összefoglaló ({1}) -\n\nMásolt fájlok: {2:N0}\nKihagyott fájlok: {3:N0}\nSikertelen fájlok: {4:N0}\nÖsszesen feldolgozott fájl: {5:N0} / {6:N0}\nÖsszesen feldolgozott bájt: {7} / {8}",
     "- {0} Rezumat Operație ({1}) -\n\nFișiere Copiate: {2:N0}\nFișiere Omitse: {3:N0}\nFișiere Eșuate: {4:N0}\nTotal Fișiere Procesate: {5:N0} / {6:N0}\nTotal Bytes Procesați: {7} / {8}"),

                    ["Operation {0}"] =
    ("Opération {0}",
    "Operation {0}",
    "Operación {0}",
    "Operazione {0}",
    "Operação {0}",
    "Operação {0}",
    "Bewerking {0}",
    "Operation {0}",
    "Operasjon {0}",
    "Handling {0}",
    "Toiminto {0}",
    "Operacja {0}",
    "Operace {0}",
    "Művelet {0}",
    "Operație {0}"),

                    ["The source folder cannot be added twice."] =
    ("Le dossier source ne peut pas être ajouté deux fois.",
     "Der Quellordner kann nicht zweimal hinzugefügt werden.",
     "La carpeta de origen no puede agregarse dos veces.",
     "La cartella di origine non può essere aggiunta due volte.",
     "A pasta de origem não pode ser adicionada duas vezes.",
     "A pasta de origem não pode ser adicionada duas vezes.",
     "De bronmap kan niet twee keer worden toegevoegd.",
     "Källmappen kan inte läggas till två gånger.",
     "Kildemappen kan ikke legges til to ganger.",
     "Kildemappen kan ikke tilføjes to gange.",
     "Lähdekansiota ei voi lisätä kahdesti.",
     "Folder źródłowy nie może być dodany dwa razy.",
     "Zdrojová složka nemůže být přidána dvakrát.",
     "A forrásmappa nem adható hozzá kétszer.",
     "Folderul sursă nu poate fi adăugat de două ori."),

                    ["The source folder cannot be the same as one of the target folders."] =
    ("Le dossier source ne peut pas être identique à l'un des dossiers cibles.",
     "Der Quellordner darf nicht mit einem der Zielordner identisch sein.",
     "La carpeta de origen no puede ser igual a una de las carpetas de destino.",
     "La cartella di origine non può essere la stessa di una delle cartelle di destinazione.",
     "A pasta de origem não pode ser a mesma que uma das pastas de destino.",
     "A pasta de origem não pode ser a mesma que uma das pastas de destino.",
     "De bronmap kan niet hetzelfde zijn als een van de doelmappen.",
     "Källmappen får inte vara samma som en av målmapparna.",
     "Kildemappen kan ikke være den samme som en av målmappene.",
     "Kildemappen må ikke være den samme som en af destinationsmapperne.",
     "Lähdekansio ei voi olla sama kuin yksi kohdekansioista.",
     "Folder źródłowy nie może być taki sam jak jeden z folderów docelowych.",
     "Zdrojová složka nemůže být stejná jako jedna z cílových složek.",
     "A forrásmappa nem lehet ugyanaz, mint az egyik célmappa.",
     "Folderul sursă nu poate fi același cu unul dintre folderele destinație."),

                    ["The target folder cannot be the same as one of the source folders."] =
    ("Le dossier cible ne peut pas être identique à l'un des dossiers sources.",
     "Der Zielordner darf nicht mit einem der Quellordner identisch sein.",
     "La carpeta de destino no puede ser igual a una de las carpetas de origen.",
     "La cartella di destinazione non può essere la stessa di una delle cartelle di origine.",
     "A pasta de destino não pode ser a mesma que uma das pastas de origem.",
     "A pasta de destino não pode ser a mesma que uma das pastas de origem.",
     "De doelmap kan niet hetzelfde zijn als een van de bronmappen.",
     "Målmappen får inte vara samma som en av källmapparna.",
     "Målmappen kan ikke være den samme som en av kildemappene.",
     "Destinationsmappen må ikke være den samme som en af kildefolderne.",
     "Kohdekansio ei voi olla sama kuin yksi lähdekansioista.",
     "Folder docelowy nie może być taki sam jak jeden z folderów źródłowych.",
     "Cílová složka nemůže být stejná jako jedna ze zdrojových složek.",
     "A célmappa nem lehet ugyanaz, mint az egyik forrásmappa.",
     "Folderul destinație nu poate fi același cu unul dintre folderele sursă."),

                    ["The target folder cannot be added twice."] =
    ("Le dossier cible ne peut pas être ajouté deux fois.",
     "Der Zielordner kann nicht zweimal hinzugefügt werden.",
     "La carpeta de destino no puede agregarse dos veces.",
     "La cartella di destinazione non può essere aggiunta due volte.",
     "A pasta de destino não pode ser adicionada duas vezes.",
     "A pasta de destino não pode ser adicionada duas vezes.",
     "De doelmap kan niet twee keer worden toegevoegd.",
     "Målmappen kan inte läggas till två gånger.",
     "Målmappen kan ikke legges til to ganger.",
     "Destinationsmappen kan ikke tilføjes to gange.",
     "Kohdekansiota ei voi lisätä kahdesti.",
     "Folder docelowy nie może być dodany dwa razy.",
     "Cílová složka nemůže být přidána dvakrát.",
     "A célmappa nem adható hozzá kétszer.",
     "Folderul destinație nu poate fi adăugat de două ori."),



                    ["Update Group Box: This group box contains settings related to the application's update preferences."] =
("Groupe de mise à jour : ce groupe contient les paramètres liés aux préférences de mise à jour de l'application.",
 "Update-Gruppenfeld: Diese Gruppe enthält Einstellungen bezüglich der Update-Präferenzen der Anwendung.",
 "Grupo Actualización: este grupo de opciones contiene configuraciones relacionadas con las preferencias de actualización de la aplicación.",
 "Gruppo Aggiornamento: questo gruppo di opzioni contiene impostazioni relative alle preferenze di aggiornamento dell'applicazione.",
 "Grupo Atualização: este grupo de opções contém configurações relacionadas às preferências de atualização da aplicação.",
 "Grupo Atualização: este grupo de opções contém configurações relacionadas às preferências de atualização da aplicação.",
 "Update Groep: deze groep bevat instellingen met betrekking tot de updatevoorkeuren van de applicatie.",
 "Uppdateringsgrupp: den här gruppen innehåller inställningar relaterade till programmets uppdateringsinställningar.",
 "Oppdateringsgruppe: denne gruppen inneholder innstillinger relatert til programmets oppdateringspreferanser.",
 "Opdateringsgruppe: denne gruppe indeholder indstillinger relateret til programmets opdateringspræferencer.",
 "Päivitysryhmä: tämä ryhmä sisältää sovelluksen päivitysasetuksia koskevat asetukset.",
 "Grupa Aktualizacji: ta grupa opcji zawiera ustawienia związane z preferencjami aktualizacji aplikacji.",
 "Skupina Aktualizace: tato skupina obsahuje nastavení týkající se předvoleb aktualizace aplikace.",
 "Frissítési Csoport: ez a csoport tartalmazza az alkalmazás frissítési beállításaira vonatkozó beállításokat.",
 "Grup Actualizare: acest grup conține setări legate de preferințele de actualizare ale aplicației."),

                    ["Sounds Group Box: This group box contains settings related to the application's sound notifications for various events."] =
("Groupe Sons : ce groupe contient les paramètres liés aux notifications sonores de l'application pour différents événements.",
 "Sound-Gruppenfeld: Diese Gruppe enthält Einstellungen für die Tonbenachrichtigungen der Anwendung bei verschiedenen Ereignissen.",
 "Grupo Sonidos: este grupo de opciones contiene configuraciones relacionadas con las notificaciones de sonido de la aplicación para varios eventos.",
 "Gruppo Suoni: questo gruppo di opzioni contiene impostazioni relative alle notifiche sonore dell'applicazione per vari eventi.",
 "Grupo Sons: este grupo de opções contém configurações relacionadas às notificações sonoras da aplicação para vários eventos.",
 "Grupo Sons: este grupo de opções contém configurações relacionadas às notificações sonoras da aplicação para vários eventos.",
 "Geluiden Groep: deze groep bevat instellingen met betrekking tot de geluidsmeldingen van de applicatie voor verschillende gebeurtenissen.",
 "Ljudgrupp: den här gruppen innehåller inställningar relaterade till programmets ljudaviseringar för olika händelser.",
 "Lydgruppe: denne gruppen inneholder innstillinger relatert til programmets lydvarsler for ulike hendelser.",
 "Lydgruppe: denne gruppe indeholder indstillinger relateret til programmets lydmeddelelser for forskellige begivenheder.",
 "Ääniryhmä: tämä ryhmä sisältää sovelluksen äänitiedoituksiin liittyvät asetukset eri tapahtumia varten.",
 "Grupa Dźwięki: ta grupa opcji zawiera ustawienia związane z powiadomieniami dźwiękowymi aplikacji dla różnych zdarzeń.",
 "Skupina Zvuky: tato skupina obsahuje nastavení týkající se zvukových oznámení aplikace pro různé události.",
 "Hang Csoport: ez a csoport tartalmazza az alkalmazás hangértesítéseire vonatkozó beállításokat különböző eseményekhez.",
 "Grup Sunete: acest grup conține setări legate de notificările sonore ale aplicației pentru diverse evenimente."),

                    ["Performance Group Box: This group box contains settings related to the application's performance, such as buffer size and multi-threading options."] =
("Groupe Performance : ce groupe contient les paramètres liés aux performances de l'application, tels que la taille du tampon et les options de multithreading.",
 "Leistungs-Gruppenfeld: Diese Gruppe enthält Einstellungen bezüglich der Leistung der Anwendung, wie Puffergröße und Multi-Threading-Optionen.",
 "Grupo Rendimiento: este grupo de opciones contiene configuraciones relacionadas con el rendimiento de la aplicación, como el tamaño del búfer y las opciones de multi-hilo.",
 "Gruppo Prestazioni: questo gruppo di opzioni contiene impostazioni relative alle prestazioni dell'applicazione, come la dimensione del buffer e le opzioni di multi-threading.",
 "Grupo Desempenho: este grupo de opções contém configurações relacionadas ao desempenho da aplicação, como tamanho do buffer e opções de multi-threading.",
 "Grupo Desempenho: este grupo de opções contém configurações relacionadas ao desempenho da aplicação, como tamanho do buffer e opções de multi-threading.",
 "Prestaties Groep: deze groep bevat instellingen met betrekking tot de prestaties van de applicatie, zoals buffergrootte en multi-threading opties.",
 "Prestandagrupp: den här gruppen innehåller inställningar relaterade till programmets prestanda, såsom buffertstorlek och alternativ för flertrådning.",
 "Ytelsesgruppe: denne gruppen inneholder innstillinger relatert til programmets ytelse, for eksempel bufferstørrelse og flertrådsalternativer.",
 "Ydelsesgruppe: denne gruppe indeholder indstillinger relateret til programmets ydeevne, såsom bufferstørrelse og multi-threading muligheder.",
 "Suorituskykyryhmä: tämä ryhmä sisältää sovelluksen suorituskykyyn liittyviä asetuksia, kuten puskurin koko ja monisäikeisyysvalinnat.",
 "Grupa Wydajność: ta grupa opcji zawiera ustawienia związane z wydajnością aplikacji, takie jak rozmiar bufora i opcje wielowątkowości.",
 "Skupina Výkon: tato skupina obsahuje nastavení týkající se výkonu aplikace, jako je velikost vyrovnávací paměti a možnosti multithreadingu.",
 "Teljesítmény Csoport: ez a csoport tartalmazza az alkalmazás teljesítményével kapcsolatos beállításokat, például a puffer méretét és a többszálúsági lehetőségeket.",
 "Grup Performanță: acest grup conține setări legate de performanța aplicației, cum ar fi dimensiunea buffer-ului și opțiunile de multi-threading."),

                    ["Manual Update Check CheckBox: This checkbox determines whether the application should check for updates only when manually triggered by the user."] =
("Case Vérification manuelle des mises à jour : détermine si l'application doit vérifier les mises à jour uniquement lorsque l'utilisateur le déclenche manuellement.",
 "Manuelle Update-Überprüfung-CheckBox: Legt fest, ob die Anwendung nur dann nach Updates suchen soll, wenn sie manuell vom Benutzer ausgelöst wird.",
 "Casilla Verificación Manual de Actualizaciones: determina si la aplicación debe buscar actualizaciones solo cuando el usuario lo activa manualmente.",
 "Casella Controllo Aggiornamento Manuale: determina se l'applicazione deve controllare gli aggiornamenti solo quando attivato manualmente dall'utente.",
 "Caixa Verificação Manual de Atualização: determina se a aplicação deve verificar atualizações apenas quando acionada manualmente pelo usuário.",
 "Caixa Verificação Manual de Atualização: determina se a aplicação deve verificar atualizações apenas quando acionada manualmente pelo usuário.",
 "Handmatige Update Controle Selectievakje: bepaalt of de applicatie alleen op updates moet controleren wanneer handmatig geactiveerd door de gebruiker.",
 "Manuell uppdateringskontroll kryssruta: avgör om applikationen endast ska söka efter uppdateringar när den utlöses manuellt av användaren.",
 "Manuell oppdateringskontroll avmerkingsboks: avgjør om programmet bare skal søke etter oppdateringer når det utløses manuelt av brukeren.",
 "Manuel opdateringstjek afkrydsningsfelt: bestemmer om applikationen kun skal tjekke for opdateringer, når den udløses manuelt af brugeren.",
 "Manuaalinen päivitysten tarkistus -valintaruutu: määrittää, tarkistaako sovellus päivitykset vain, kun käyttäjä käynnistää sen manuaalisesti.",
 "Pole wyboru Ręczne sprawdzanie aktualizacji: określa, czy aplikacja ma sprawdzać aktualizacje tylko po ręcznym uruchomieniu przez użytkownika.",
 "Zaškrtávací políčko Ruční kontrola aktualizací: určuje, zda má aplikace kontrolovat aktualizace pouze při ručním spuštění uživatelem.",
 "Kézi Frissítés Ellenőrzés jelölőnégyzet: meghatározza, hogy az alkalmazás csak akkor ellenőrizze-e a frissítéseket, ha a felhasználó manuálisan indítja el.",
 "Casetă Verificare Manuală Actualizare: determină dacă aplicația trebuie să verifice actualizările doar când este declanșată manual de utilizator."),

                    ["Restart Program CheckBox: This checkbox determines whether to automatically close the application when an error occurs."] =
("Case Redémarrer le programme : détermine si l'application doit se fermer automatiquement lorsqu'une erreur se produit.",
 "Programm neu starten-CheckBox: Legt fest, ob die Anwendung automatisch geschlossen werden soll, wenn ein Fehler auftritt.",
 "Casilla Reiniciar Programa: determina si la aplicación debe cerrarse automáticamente cuando ocurre un error.",
 "Casella Riavvia Programma: determina se l'applicazione deve chiudersi automaticamente quando si verifica un errore.",
 "Caixa Reiniciar Programa: determina se a aplicação deve fechar automaticamente quando ocorre um erro.",
 "Caixa Reiniciar Programa: determina se a aplicação deve fechar automaticamente quando ocorre um erro.",
 "Programma Herstarten Selectievakje: bepaalt of de applicatie automatisch moet sluiten wanneer een fout optreedt.",
 "Starta om program kryssruta: avgör om programmet automatiskt ska stängas när ett fel uppstår.",
 "Start program på nytt avmerkingsboks: avgjør om programmet automatisk skal lukkes når en feil oppstår.",
 "Genstart program afkrydsningsfelt: bestemmer om programmet automatisk skal lukkes, når der opstår en fejl.",
 "Käynnistä ohjelma uudelleen -valintaruutu: määrittää, sulkeutuuko sovellus automaattisesti virheen sattuessa.",
 "Pole wyboru Uruchom ponownie program: określa, czy aplikacja ma być automatycznie zamykana po wystąpieniu błędu.",
 "Zaškrtávací políčko Restartovat program: určuje, zda se má aplikace automaticky zavřít při výskytu chyby.",
 "Program Újraindítása jelölőnégyzet: meghatározza, hogy az alkalmazás automatikusan bezárul-e, ha hiba történik.",
 "Casetă Repornește Programul: determină dacă aplicația trebuie să se închidă automat atunci când apare o eroare."),






















                    ["Check for Updates Button: This button manually checks for updates to the application."] =
("Bouton Vérifier les mises à jour : permet de rechercher manuellement les mises à jour de l’application.",
 "Schaltfläche „Auf Updates prüfen“: prüft manuell, ob Anwendungs-Updates vorliegen.",
 "Botón Buscar actualizaciones: busca manualmente actualizaciones de la aplicación.",
 "Pulsante Verifica aggiornamenti: controlla manualmente la presenza di aggiornamenti dell’applicazione.",
 "Botão Verificar Atualizações: pesquisa manualmente por atualizações da aplicação.",
 "Botão Verificar Atualizações: pesquisa manualmente por atualizações do aplicativo.",
 "Knop Updates controleren: controleert handmatig op updates voor de toepassing.",
 "Knappen Sök efter uppdateringar: söker manuellt efter uppdateringar till programmet.",
 "Knapp Sjekk for oppdateringer: sjekker manuelt etter oppdateringer til programmet.",
 "Knap Tjek for opdateringer: tjekker manuelt for opdateringer til programmet.",
 "Päivitä-painike: tarkistaa manuaalisesti sovelluksen päivitykset.",
 "Przycisk Sprawdź aktualizacje: ręcznie sprawdza dostępność aktualizacji aplikacji.",
 "Tlačítko Zkontrolovat aktualizace: ručně zkontroluje aktualizace aplikace.",
 "Frissítések gomb: manuálisan ellenőrzi az alkalmazás frissítéseit.",
 "Buton Verifică actualizări: verifică manual existența actualizărilor pentru aplicație."),

                    ["Include Beta Versions CheckBox: This checkbox determines whether to include beta versions when checking for updates."] =
("Case à cocher Inclure les versions bêta : détermine si les versions bêta sont incluses lors de la recherche de mises à jour.",
 "Kontrollkästchen Beta-Versionen einbeziehen: legt fest, ob Beta-Versionen bei der Update-Suche berücksichtigt werden.",
 "Casilla Incluir versiones beta: determina si se incluyen versiones beta al buscar actualizaciones.",
 "Check-box Includi versioni beta: determina se includere le versioni beta durante il controllo degli aggiornamenti.",
 "Caixa de verificação Incluir Versões Beta: determina se incluir versões beta ao verificar atualizações.",
 "Caixa de seleção Incluir versões beta: determina se incluir versões beta ao verificar atualizações.",
 "Selectievakje Betaversies opnemen: bepaalt of bètaversies worden meegenomen bij het controleren op updates.",
 "Kryssrutan Inkludera betaversioner: avgör om betaversioner ska ingå vid sökning efter uppdateringar.",
 "Avkrysningsboksen Inkluder betaversjoner: bestemmer om betaversjoner skal inkluderes ved sjekk etter oppdateringer.",
 "Checkboksen Inkluder betaversioner: bestemmer, om betaversioner skal inkluderes ved tjek for opdateringer.",
 "Beta-versiot -valintaruutu: määrittää, otetaanko beetakohteet mukaan päivityksiä tarkistettaessa.",
 "Pole wyboru Uwzględnij wersje beta: określa, czy podczas sprawdzania aktualizacji mają być uwzględniane wersje beta.",
 "Zaškrtávací pole Zahrnout beta verze: určuje, zda se při kontrole aktualizací zahrnou beta verze.",
 "Béta-verziók jelölőnégyzet: meghatározza, hogy a frissítések ellenőrzésekor béta verziók is szerepeljenek-e.",
 "Caseta de selectare Includere versiuni beta: determină dacă se includ versiunile beta la verificarea actualizărilor."),

                    ["Clear Settings Button: This button clears all user-defined settings, reverting the application to its default configuration."] =
("Bouton Effacer les paramètres : supprime tous les réglages utilisateur et rétablit la configuration par défaut de l’application.",
 "Schaltfläche „Einstellungen löschen“: löscht alle benutzerdefinierten Einstellungen und stellt die Standardkonfiguration wieder her.",
 "Botón Borrar configuración: borra todos los ajustes definidos por el usuario y devuelve la aplicación a su configuración predeterminada.",
 "Pulsante Cancella impostazioni: cancella tutte le impostazioni definite dall’utente e ripristina la configurazione predefinita dell’applicazione.",
 "Botão Limpar Definições: apaga todas as definições definidas pelo utilizador e regressa à configuração predefinida da aplicação.",
 "Botão Limpar configurações: limpa todas as configurações definidas pelo usuário e restaura a configuração padrão do aplicativo.",
 "Knop Instellingen wissen: wist alle door de gebruiker gedefinieerde instellingen en herstelt de standaardconfiguratie van de toepassing.",
 "Knappen Rensa inställningar: tar bort alla användardefinierade inställningar och återställer programmets standardkonfiguration.",
 "Knapp Tøm innstillinger: sletter alle brukerdefinerte innstillinger og gjenoppretter programmets standardkonfigurasjon.",
 "Knap Ryd indstillinger: sletter alle brugerdefinerede indstillinger og gendanner programmets standardkonfiguration.",
 "Tyhjennä asetukset -painike: poistaa kaikki käyttäjän määrittämät asetukset ja palauttaa sovelluksen oletusasetukset.",
 "Przycisk Wyczyść ustawienia: usuwa wszystkie ustawienia zdefiniowane przez użytkownika i przywraca domyślną konfigurację aplikacji.",
 "Tlačítko Vymazat nastavení: smaže všechna uživatelem definovaná nastavení a vrátí aplikaci do výchozí konfigurace.",
 "Beállítások törlése gomb: törli az összes felhasználói beállítást, és visszaállítja az alkalmazás alapértelmezett konfigurációját.",
 "Buton Ștergere setări: șterge toate setările definite de utilizator și restabilește configurația implicită a aplicației."),

                    ["Save Settings Button: This button saves the current settings, ensuring that any changes made are retained for future sessions."] =
("Bouton Enregistrer les paramètres : enregistre les réglages actuels afin que les modifications soient conservées pour les prochaines sessions.",
 "Schaltfläche „Einstellungen speichern“: speichert die aktuellen Einstellungen, damit Änderungen für zukünftige Sitzungen beibehalten werden.",
 "Botón Guardar configuración: guarda la configuración actual para que los cambios se conserven en futuras sesiones.",
 "Pulsante Salva impostazioni: salva le impostazioni correnti in modo che le modifiche vengano mantenute nelle sessioni future.",
 "Botão Guardar Definições: guarda as definições atuais, garantindo que as alterações sejam mantidas para sessões futuras.",
 "Botão Salvar configurações: salva as configurações atuais, garantindo que as alterações sejam mantidas para sessões futuras.",
 "Knop Instellingen opslaan: slaat de huidige instellingen op, zodat wijzigingen behouden blijven voor toekomstige sessies.",
 "Knappen Spara inställningar: sparar de aktuella inställningarna så att ändringar behålls för framtida sessioner.",
 "Knapp Lagre innstillinger: lagrer de gjeldende innstillingene, slik at endringer beholdes for fremtidige økter.",
 "Knap Gem indstillinger: gemmer de aktuelle indstillinger, så ændringer bevares til fremtidige sessioner.",
 "Asetusten tallennus -painike: tallentaa nykyiset asetukset, jotta muutokset säilyvät tulevia istuntoja varten.",
 "Przycisk Zapisz ustawienia: zapisuje bieżące ustawienia, aby wprowadzone zmiany były zachowane na przyszłe sesje.",
 "Tlačítko Uložit nastavení: uloží aktuální nastavení, aby byly všechny změny zachovány pro budoucí relace.",
 "Beállítások mentése gomb: elmenti a jelenlegi beállításokat, így a végrehajtott módosítások megmaradnak a későbbi munkamenetekhez.",
 "Buton Salvare setări: salvează setările curente, asigurându-se că modificările sunt păstrate pentru sesiunile viitoare."),

                    ["Under MB CheckBox: This checkbox determines whether to apply multi-threading only to files smaller than the specified size in megabytes."] =
("Case à cocher Sous Mo : détermine si le multi-threading est appliqué uniquement aux fichiers plus petits que la taille spécifiée en mégaoctets.",
 "Kontrollkästchen Unter MB: legt fest, ob Multi-Threading nur auf Dateien angewendet wird, die kleiner als die angegebene Größe in Megabyte sind.",
 "Casilla Bajo MB: determina si se aplica multi-hilo sólo a archivos más pequeños que el tamaño especificado en megabytes.",
 "Check-box Sotto MB: determina se applicare il multi-threading solo ai file più piccoli della dimensione specificata in megabyte.",
 "Caixa de verificação Under MB: determina se o multi-threading é aplicado apenas a ficheiros menores do que o tamanho especificado em megabytes.",
 "Caixa de seleção Abaixo de MB: determina se o multithreading é aplicado apenas a arquivos menores que o tamanho especificado em megabytes.",
 "Selectievakje Onder MB: bepaalt of multi-threading alleen wordt toegepast op bestanden die kleiner zijn dan de opgegeven grootte in megabytes.",
 "Kryssrutan Under MB: avgör om multi-threading endast ska tillämpas på filer som är mindre än den angivna storleken i megabyte.",
 "Avkrysningsboksen Under MB: bestemmer om multi-tråding kun skal brukes på filer som er mindre enn den angitte størrelsen i megabyte.",
 "Checkboksen Under MB: bestemmer, om multi-threading kun skal anvendes på filer, der er mindre end den angivne størrelse i megabyte.",
 "Alle MB -valintaruutu: määrittää, käytetäänkö monisäikeisyyttä vain tiedostoille, jotka ovat pienempiä kuin määritetty koko megatavuina.",
 "Pole wyboru Poniżej MB: określa, czy wielowątkowość ma być stosowana tylko do plików mniejszych niż określony rozmiar w megabajtach.",
 "Zaškrtávací pole Pod MB: určuje, zda se má multi-threading použít pouze na soubory menší než zadaná velikost v megabajtech.",
 "MB alatti jelölőnégyzet: meghatározza, hogy a többszálúság csak a megadott méretnél kisebb, megabájtban megadott fájlokra vonatkozzon.",
 "Caseta de selectare Sub MB: determină dacă multi-threadingul se aplică numai fișierelor mai mici decât dimensiunea specificată în megabytes."),

                    ["Over MB CheckBox: This checkbox determines whether to apply multi-threading only to files larger than the specified size in megabytes."] =
("Case à cocher Au-dessus de Mo : détermine si le multi-threading est appliqué uniquement aux fichiers plus grands que la taille spécifiée en mégaoctets.",
 "Kontrollkästchen Über MB: legt fest, ob Multi-Threading nur auf Dateien angewendet wird, die größer als die angegebene Größe in Megabyte sind.",
 "Casilla Sobre MB: determina si se aplica multi-hilo sólo a archivos más grandes que el tamaño especificado en megabytes.",
 "Check-box Sopra MB: determina se applicare il multi-threading solo ai file più grandi della dimensione specificata in megabyte.",
 "Caixa de verificação Over MB: determina se o multi-threading é aplicado apenas a ficheiros maiores do que o tamanho especificado em megabytes.",
 "Caixa de seleção Acima de MB: determina se o multithreading é aplicado apenas a arquivos maiores que o tamanho especificado em megabytes.",
 "Selectievakje Over MB: bepaalt of multi-threading alleen wordt toegepast op bestanden die groter zijn dan de opgegeven grootte in megabytes.",
 "Kryssrutan Över MB: avgör om multi-threading endast ska tillämpas på filer som är större än den angivna storleken i megabyte.",
 "Avkrysningsboksen Over MB: bestemmer om multi-tråding kun skal brukes på filer som er større enn den angitte størrelsen i megabyte.",
 "Checkboksen Over MB: bestemmer, om multi-threading kun skal anvendes på filer, der er større end den angivne størrelse i megabyte.",
 "Yli MB -valintaruutu: määrittää, käytetäänkö monisäikeisyyttä vain tiedostoille, jotka ovat suurempia kuin määritetty koko megatavuina.",
 "Pole wyboru Powyżej MB: określa, czy wielowątkowość ma być stosowana tylko do plików większych niż określony rozmiar w megabajtach.",
 "Zaškrtávací pole Nad MB: určuje, zda se má multi-threading použít pouze na soubory větší než zadaná velikost v megabajtech.",
 "MB feletti jelölőnégyzet: meghatározza, hogy a többszálúság csak a megadott méretnél nagyobb, megabájtban megadott fájlokra vonatkozzon.",
 "Caseta de selectare Peste MB: determină dacă multi-threadingul se aplică numai fișierelor mai mari decât dimensiunea specificată în megabytes."),

                    ["Skins ComboBox: This dropdown combobox allows you to select different skins or themes for the application's appearance."] =
("ComboBox Skins : permet de sélectionner différents skins ou thèmes pour l’apparence de l’application.",
 "Skins-ComboBox: ermöglicht die Auswahl verschiedener Skins oder Designs für das Erscheinungsbild der Anwendung.",
 "ComboBox Skins: permite seleccionar diferentes skins o temas para el aspecto de la aplicación.",
 "ComboBox Skins: consente di selezionare diversi skin o temi per l’aspetto dell’applicazione.",
 "ComboBox Skins: permite selecionar diferentes skins ou temas para a aparência da aplicação.",
 "ComboBox Skins: permite selecionar diferentes skins ou temas para a aparência do aplicativo.",
 "Skins-ComboBox: stelt u in staat verschillende skins of thema’s voor het uiterlijk van de toepassing te selecteren.",
 "Skins ComboBox: låter dig välja olika skal eller teman för programmets utseende.",
 "Skins ComboBox: lar deg velge forskjellige skall eller temaer for programmets utseende.",
 "Skins ComboBox: lader dig vælge forskellige skins eller temaer til programmets udseende.",
 "Skins-valintaruutu: mahdollistaa eri ulkoasujen tai teemojen valitsemisen sovelluksen näyttämiseksi.",
 "ComboBox Skór: pozwala wybrać różne skórki lub motywy wyglądu aplikacji.",
 "ComboBox Skins: umožňuje vybrat různé skiny nebo motivy vzhledu aplikace.",
 "Skins ComboBox: lehetővé teszi különböző skinek vagy témák kiválasztását az alkalmazás megjelenéséhez.",
 "ComboBox Skins: permite selectarea diferitelor skin-uri sau teme pentru aspectul aplicației."),

                    ["On Finish CheckBox: This checkbox determines whether to play a sound notification when the file operation finishes."] =
("Case à cocher À la fin : détermine si une notification sonore est jouée lorsque l’opération sur les fichiers se termine.",
 "Kontrollkästchen Bei Fertigstellung: legt fest, ob eine Tonbenachrichtigung beim Abschluss der Dateioperation wiedergegeben wird.",
 "Casilla Al finalizar: determina si se reproduce una notificación sonora cuando finaliza la operación de archivos.",
 "Check-box Al termine: determina se riprodurre una notifica sonora al termine dell’operazione sui file.",
 "Caixa de verificação Ao Terminar: determina se é reproduzida uma notificação sonora quando a operação de ficheiros termina.",
 "Caixa de seleção Ao finalizar: determina se uma notificação sonora será reproduzida quando a operação de arquivos for concluída.",
 "Selectievakje Bij voltooien: bepaalt of een geluidsmelding wordt afgespeeld wanneer de bestandsbewerking is voltooid.",
 "Kryssrutan Vid slutförande: avgör om ett ljudmeddelande ska spelas upp när filåtgärden avslutas.",
 "Avkrysningsboksen Ved ferdigstillelse: bestemmer om det skal spilles av en lydvarsling når filoperasjonen er fullført.",
 "Checkboksen Ved færdiggørelse: bestemmer, om der skal afspilles en lydmeddelelse, når filhandlingen afsluttes.",
 "Valmis-valintaruutu: määrittää, toistetaanko äänimerkki, kun tiedostotoiminto päättyy.",
 "Pole wyboru Po zakończeniu: określa, czy ma być odtwarzane powiadomienie dźwiękowe po zakończeniu operacji na plikach.",
 "Zaškrtávací pole Při dokončení: určuje, zda se při dokončení operace se soubory přehraje zvukové upozornění.",
 "Befejezéskor jelölőnégyzet: meghatározza, hogy a fájlművelet befejezésekor lejátszódik-e hangértesítés.",
 "Caseta de selectare La finalizare: determină dacă se redă o notificare sonoră când operațiunea de fișiere se finalizează."),

                    ["On Cancel CheckBox: This checkbox determines whether to play a sound notification when the file operation is canceled."] =
("Case à cocher À l’annulation : détermine si une notification sonore est jouée lorsque l’opération sur les fichiers est annulée.",
 "Kontrollkästchen Bei Abbruch: legt fest, ob eine Tonbenachrichtigung beim Abbrechen der Dateioperation wiedergegeben wird.",
 "Casilla Al cancelar: determina si se reproduce una notificación sonora cuando se cancela la operación de archivos.",
 "Check-box All’annullamento: determina se riprodurre una notifica sonora quando l’operazione sui file viene annullata.",
 "Caixa de verificação Ao Cancelar: determina se é reproduzida uma notificação sonora quando a operação de ficheiros é cancelada.",
 "Caixa de seleção Ao cancelar: determina se uma notificação sonora será reproduzida quando a operação de arquivos for cancelada.",
 "Selectievakje Bij annuleren: bepaalt of een geluidsmelding wordt afgespeeld wanneer de bestandsbewerking wordt geannuleerd.",
 "Kryssrutan Vid avbrytande: avgör om ett ljudmeddelande ska spelas upp när filåtgärden avbryts.",
 "Avkrysningsboksen Ved avbryting: bestemmer om det skal spilles av en lydvarsling når filoperasjonen avbrytes.",
 "Checkboksen Ved annullering: bestemmer, om der skal afspilles en lydmeddelelse, når filhandlingen annulleres.",
 "Peruutus-valintaruutu: määrittää, toistetaanko äänimerkki, kun tiedostotoiminto peruutetaan.",
 "Pole wyboru Po anulowaniu: określa, czy ma być odtwarzane powiadomienie dźwiękowe po anulowaniu operacji na plikach.",
 "Zaškrtávací pole Při zrušení: určuje, zda se při zrušení operace se soubory přehraje zvukové upozornění.",
 "Törléskor jelölőnégyzet: meghatározza, hogy a fájlművelet törlésekor lejátszódik-e hangértesítés.",
 "Caseta de selectare La anulare: determină dacă se redă o notificare sonoră când operațiunea de fișiere este anulată."),

                    ["On Add Files CheckBox: This checkbox determines whether to play a sound notification when files are added to the operation list."] =
("Case à cocher À l’ajout de fichiers : détermine si une notification sonore est jouée lorsque des fichiers sont ajoutés à la liste d’opérations.",
 "Kontrollkästchen Beim Hinzufügen von Dateien: legt fest, ob eine Tonbenachrichtigung wiedergegeben wird, wenn Dateien zur Vorgangsliste hinzugefügt werden.",
 "Casilla Al añadir archivos: determina si se reproduce una notificación sonora cuando se añaden archivos a la lista de operaciones.",
 "Check-box All’aggiunta di file: determina se riprodurre una notifica sonora quando i file vengono aggiunti all’elenco delle operazioni.",
 "Caixa de verificação Ao Adicionar Ficheiros: determina se é reproduzida uma notificação sonora quando ficheiros são adicionados à lista de operações.",
 "Caixa de seleção Ao adicionar arquivos: determina se uma notificação sonora será reproduzida quando arquivos forem adicionados à lista de operações.",
 "Selectievakje Bij toevoegen bestanden: bepaalt of een geluidsmelding wordt afgespeeld wanneer bestanden aan de bewerkingslijst worden toegevoegd.",
 "Kryssrutan Vid tillägg av filer: avgör om ett ljudmeddelande ska spelas upp när filer läggs till i åtgärdslistan.",
 "Avkrysningsboksen Ved legg til filer: bestemmer om det skal spilles av en lydvarsling når filer legges til i operasjonslisten.",
 "Checkboksen Ved tilføjelse af filer: bestemmer, om der skal afspilles en lydmeddelelse, når filer føjes til handlingslisten.",
 "Tiedostojen lisäys -valintaruutu: määrittää, toistetaanko äänimerkki, kun tiedostoja lisätään toimintolistalle.",
 "Pole wyboru Po dodaniu plików: określa, czy ma być odtwarzane powiadomienie dźwiękowe po dodaniu plików do listy operacji.",
 "Zaškrtávací pole Při přidání souborů: určuje, zda se při přidání souborů do seznamu operací přehraje zvukové upozornění.",
 "Fájlok hozzáadása jelölőnégyzet: meghatározza, hogy a fájlok a műveleti listához való hozzáadásakor lejátszódik-e hangértesítés.",
 "Caseta de selectare La adăugarea fișierelor: determină dacă va fi redată o notificare sonoră când fișierele sunt adăugate la lista de operații."),

                    ["On Finish CheckBox: This checkbox determines whether to play a sound notification when the file operation finishes."] =
("Case à cocher À la fin : détermine si une notification sonore est jouée à la fin de l’opération sur les fichiers.",
 "Kontrollkästchen Bei Fertigstellung: legt fest, ob ein Sound gespielt wird, wenn die Dateioperation beendet ist.",
 "Casilla Al finalizar: determina si se reproduce una notificación sonora cuando finaliza la operación de archivos.",
 "Check-box Al termine: determina se riprodurre una notifica sonora al termine dell’operazione sui file.",
 "Caixa de verificação On Finish: determina se é reproduzida uma notificação sonora quando a operação de ficheiros termina.",
 "Caixa de seleção Ao Finalizar: determina se uma notificação sonora será reproduzida ao finalizar a operação de arquivos.",
 "Selectievakje Bij Voltooien: bepaalt of een geluidsmelding wordt afgespeeld wanneer de bestandsbewerking is voltooid.",
 "Kryssrutan Vid slutförande: avgör om ett ljud ska spelas upp när filoperationen avslutas.",
 "Avkrysningsboksen Ved ferdigstillelse: bestemmer om det skal spilles av en lydvarsling når filoperasjonen er fullført.",
 "Checkboksen Ved færdiggørelse: bestemmer, om der skal afspilles en lydmeddelelse, når filoperationen er afsluttet.",
 "Valmiina-valintaruutu: määrittää, toistetaanko äänimerkki, kun tiedostotoiminto päättyy.",
 "Pole wyboru Po zakończeniu: określa, czy ma być odtwarzane powiadomienie dźwiękowe po zakończeniu operacji na plikach.",
 "Zaškrtávací pole Při dokončení: určuje, zda se má při dokončení operace se soubory přehrát zvukové upozornění.",
 "Befejezéskor jelölőnégyzet: meghatározza, hogy a fájlművelet befejezésekor lejátszódik-e hangértesítés.",
 "Caseta de selectare La finalizare: determină dacă va fi redată o notificare sonoră când operația de fișiere se finalizează."),

                    ["On Cancel CheckBox: This checkbox determines whether to play a sound notification when the file operation is canceled."] =
("Case à cocher À l’annulation : détermine si une notification sonore est jouée lorsque l’opération est annulée.",
 "Kontrollkästchen Bei Abbruch: legt fest, ob ein Sound gespielt wird, wenn die Dateioperation abgebrochen wird.",
 "Casilla Al cancelar: determina si se reproduce una notificación sonora cuando se cancela la operación de archivos.",
 "Check-box All’annullamento: determina se riprodurre una notifica sonora quando l’operazione sui file viene annullata.",
 "Caixa de verificação On Cancel: determina se é reproduzida uma notificação sonora quando a operação de ficheiros é cancelada.",
 "Caixa de seleção Ao Cancelar: determina se uma notificação sonora será reproduzida ao cancelar a operação de arquivos.",
 "Selectievakje Bij Annuleren: bepaalt of een geluidsmelding wordt afgespeeld wanneer de bestandsbewerking wordt geannuleerd.",
 "Kryssrutan Vid avbrytning: avgör om ett ljud ska spelas upp när filoperationen avbryts.",
 "Avkrysningsboksen Ved avbrytelse: bestemmer om det skal spilles av en lydvarsling når filoperasjonen avbrytes.",
 "Checkboksen Ved annullering: bestemmer, om der skal afspilles en lydmeddelelse, når filoperationen annulleres.",
 "Peruuta-valintaruutu: määrittää, toistetaanko äänimerkki, kun tiedostotoiminto peruutetaan.",
 "Pole wyboru Po anulowaniu: określa, czy ma być odtwarzane powiadomienie dźwiękowe po anulowaniu operacji na plikach.",
 "Zaškrtávací pole Při zrušení: určuje, zda se má při zrušení operace se soubory přehrát zvukové upozornění.",
 "Mégse jelölőnégyzet: meghatározza, hogy a fájlművelet megszakításakor lejátszódik-e hangértesítés.",
 "Caseta de selectare La anulare: determină dacă va fi redată o notificare sonoră când operația de fișiere este anulată."),

                    ["On Add Files CheckBox: This checkbox determines whether to play a sound notification when files are added to the operation list."] =
("Case à cocher À l’ajout : détermine si une notification sonore est jouée quand des fichiers sont ajoutés à la liste.",
 "Kontrollkästchen Bei Hinzufügen: legt fest, ob ein Sound gespielt wird, wenn Dateien zur Liste hinzugefügt werden.",
 "Casilla Al añadir: determina si se reproduce una notificación sonora cuando se añaden archivos a la lista.",
 "Check-box All’aggiunta: determina se riprodurre una notifica sonora quando i file vengono aggiunti all’elenco.",
 "Caixa de verificação On Add Files: determina se é reproduzida uma notificação sonora quando ficheiros são adicionados à lista.",
 "Caixa de seleção Ao Adicionar Arquivos: determina se uma notificação sonora será reproduzida ao adicionar arquivos à lista.",
 "Selectievakje Bij Toevoegen: bepaalt of een geluidsmelding wordt afgespeeld wanneer bestanden aan de lijst worden toegevoegd.",
 "Kryssrutan Vid tillägg: avgör om ett ljud ska spelas upp när filer läggs till i listan.",
 "Avkrysningsboksen Ved legg til filer: bestemmer om det skal spilles av en lydvarsling når filer legges til i listen.",
 "Checkboksen Ved tilføjelse: bestemmer, om der skal afspilles en lydmeddelelse, når filer tilføjes til listen.",
 "Lisää tiedostot -valintaruutu: määrittää, toistetaanko äänimerkki, kun tiedostoja lisätään luetteloon.",
 "Pole wyboru Po dodaniu plików: określa, czy ma być odtwarzane powiadomienie dźwiękowe po dodaniu plików do listy.",
 "Zaškrtávací pole Při přidání souborů: určuje, zda se má při přidání souborů do seznamu přehrát zvukové upozornění.",
 "Fájlok hozzáadása jelölőnégyzet: meghatározza, hogy a fájlok listához adásakor lejátszódik-e hangértesítés.",
 "Caseta de selectare La adăugare fișiere: determină dacă va fi redată o notificare sonoră când fișierele sunt adăugate la listă."),

                    ["On Error CheckBox: This checkbox determines whether to play a sound notification when an error occurs during the file operation."] =
("Case à cocher En cas d’erreur : détermine si une notification sonore est jouée en cas d’erreur pendant l’opération.",
 "Kontrollkästchen Bei Fehler: legt fest, ob ein Sound gespielt wird, wenn während der Dateioperation ein Fehler auftritt.",
 "Casilla En caso de error: determina si se reproduce una notificación sonora cuando ocurre un error durante la operación.",
 "Check-box In caso di errore: determina se riprodurre una notifica sonora quando si verifica un errore durante l’operazione.",
 "Caixa de verificação On Error: determina se é reproduzida uma notificação sonora quando ocorre um erro durante a operação.",
 "Caixa de seleção Em Caso de Erro: determina se uma notificação sonora será reproduzida quando ocorrer um erro durante a operação.",
 "Selectievakje Bij Fout: bepaalt of een geluidsmelding wordt afgespeeld wanneer er een fout optreedt tijdens de bestandsbewerking.",
 "Kryssrutan Vid fel: avgör om ett ljud ska spelas upp när ett fel inträffar under filoperationen.",
 "Avkrysningsboksen Ved feil: bestemmer om det skal spilles av en lydvarsling når det oppstår en feil under filoperasjonen.",
 "Checkboksen Ved fejl: bestemmer, om der skal afspilles en lydmeddelelse, når der opstår en fejl under filoperationen.",
 "Virhe-valintaruutu: määrittää, toistetaanko äänimerkki, kun tiedostotoiminnon aikana tapahtuu virhe.",
 "Pole wyboru Przy błędzie: określa, czy ma być odtwarzane powiadomienie dźwiękowe, gdy podczas operacji na plikach wystąpi błąd.",
 "Zaškrtávací pole Při chybě: určuje, zda se má při výskytu chyby během operace se soubory přehrát zvukové upozornění.",
 "Hiba jelölőnégyzet: meghatározza, hogy a fájlművelet során fellépő hiba esetén lejátszódik-e hangértesítés.",
 "Caseta de selectare La eroare: determină dacă va fi redată o notificare sonoră când apare o eroare în timpul operației de fișiere."),

                    ["Export Files Data Grid View: This area displays the list of files to be processed, along with their details such as source and destination."] =
("Grille d’export des fichiers : affiche la liste des fichiers à traiter ainsi que leurs détails (source et destination).",
 "Export-Dateien-DataGridView: zeigt die Liste der zu verarbeitenden Dateien mit Details wie Quelle und Ziel an.",
 "Vista de cuadrícula de exportación de archivos: muestra la lista de archivos a procesar junto con detalles como origen y destino.",
 "Esporta file DataGridView: mostra l’elenco dei file da elaborare con dettagli come origine e destinazione.",
 "Grelha de dados de exportação de ficheiros: apresenta a lista de ficheiros a processar, com detalhes como origem e destino.",
 "Grade de dados de exportação de arquivos: exibe a lista de arquivos a serem processados, com detalhes como origem e destino.",
 "Exportbestanden-DataGridView: geeft de lijst met te verwerken bestanden weer, inclusief details zoals bron en bestemming.",
 "Exportfiler DataGridView: visar listan över filer som ska bearbetas, tillsammans med detaljer som källa och mål.",
 "Eksporter filer DataGridView: viser listen over filer som skal behandles, med detaljer som kilde og destinasjon.",
 "Eksportér filer DataGridView: viser listen over filer, der skal behandles, sammen med detaljer som kilde og destination.",
 "Vie tiedostot -DataGridView: näyttää käsiteltävien tiedostojen luettelon yksityiskohtineen, kuten lähde ja kohde.",
 "DataGridView eksportu plików: wyświetla listę plików do przetworzenia wraz z szczegółami, takimi jak źródło i miejsce docelowe.",
 "Exportovat soubory DataGridView: zobrazuje seznam souborů k zpracování spolu s podrobnostmi, jako je zdroj a cíl.",
 "Fájlok exportálása DataGridView: megjeleníti a feldolgozandó fájlok listáját forrás és cél részleteivel együtt.",
 "Vizualizare date export fișiere: afișează lista fișierelor care urmează să fie procesate, împreună cu detalii precum sursa și destinația."),

                    ["Register Button: This button allows you to register the application with a license key to unlock full features."] =
("Bouton Enregistrer : permet d’enregistrer l’application avec une clé de licence pour débloquer toutes les fonctionnalités.",
 "Registrieren-Schaltfläche: ermöglicht die Registrierung der Anwendung mit einem Lizenzschlüssel, um alle Funktionen freizuschalten.",
 "Botón Registrar: permite registrar la aplicación con una clave de licencia para desbloquear todas las funciones.",
 "Pulsante Registra: consente di registrare l’applicazione con un codice di licenza per sbloccare tutte le funzionalità.",
 "Botão Registar: permite registar a aplicação com uma chave de licença para desbloquear todas as funcionalidades.",
 "Botão Registrar: permite registrar o aplicativo com uma chave de licença para desbloquear todos os recursos.",
 "Registreren-knop: stelt u in staat de toepassing met een licentiesleutel te registreren om alle functies vrij te geven.",
 "Registrera-knapp: låter dig registrera programmet med en licensnyckel för att låsa upp alla funktioner.",
 "Registrer-knapp: lar deg registrere applikasjonen med en lisensnøkkel for å låse opp alle funksjoner.",
 "Registrér-knap: lader dig registrere programmet med en licensnøgle for at låse alle funktioner op.",
 "Rekisteröi-painike: mahdollistaa sovelluksen rekisteröinnin lisenssiavaimella, jolloin kaikki ominaisuudet avautuvat.",
 "Przycisk Zarejestruj: pozwala zarejestrować aplikację za pomocą klucza licencyjnego, aby odblokować pełne funkcje.",
 "Tlačítko Registrovat: umožňuje zaregistrovat aplikaci pomocí licenčního klíče a odemknout tak všechny funkce.",
 "Regisztráció gomb: lehetővé teszi az alkalmazás regisztrálását licenckulccsal, hogy a teljes funkcionalitás feloldódjon.",
 "Buton Înregistrare: permite înregistrarea aplicației cu o cheie de licență pentru a debloca toate funcționalitățile."),

                    ["File Progress Bar: Shows the current percentage of the file being processed"] =
("Barre de progression du fichier : affiche le pourcentage actuel du fichier en cours de traitement.",
 "Datei-Fortschrittsbalken: zeigt den aktuellen Prozentsatz der verarbeiteten Datei an.",
 "Barra de progreso de archivo: muestra el porcentaje actual del archivo que se está procesando.",
 "Barra di avanzamento file: mostra la percentuale attuale del file in elaborazione.",
 "Barra de progresso do ficheiro: mostra a percentagem atual do ficheiro a ser processado.",
 "Barra de progresso do arquivo: mostra a porcentagem atual do arquivo sendo processado.",
 "Voortgangsbalk Bestand: toont het huidige percentage van het bestand dat wordt verwerkt.",
 "Filförloppsindikator: visar den aktuella procentandelen av filen som bearbetas.",
 "Filfremdriftslinje: viser den gjeldende prosentandelen av filen som behandles.",
 "Filfremdriftslinje: viser den aktuelle procentdel af filen, der behandles.",
 "Tiedoston edistymispalkki: näyttää parhaillaan käsiteltävän tiedoston nykyisen prosenttiosuuden.",
 "Pasek postępu pliku: wyświetla bieżący procent pliku, który jest przetwarzany.",
 "Ukazatel průběhu souboru: zobrazuje aktuální procento zpracovávaného souboru.",
 "Fájlfolyamat-sáv: megjeleníti a feldolgozás alatt álló fájl jelenlegi százalékát.",
 "Bară de progres fișier: arată procentul curent al fișierului care este procesat."),

                    ["On Finish CheckBox: This checkbox determines whether to play a sound notification when the file operation finishes."] =
("Case à cocher À la fin : détermine si une notification sonore est jouée à la fin de l’opération sur les fichiers.",
 "Kontrollkästchen Bei Fertigstellung: legt fest, ob ein Ton abgespielt wird, wenn die Dateioperation beendet ist.",
 "Casilla Al finalizar: determina si se reproduce una notificación sonora cuando finaliza la operación de archivos.",
 "Check-box Al termine: determina se riprodurre un suono di notifica al termine dell’operazione sui file.",
 "Caixa de verificação Ao terminar: determina se é reproduzida uma notificação sonora ao terminar a operação de ficheiros.",
 "Caixa de seleção Ao concluir: determina se uma notificação sonora será reproduzida ao concluir a operação de arquivos.",
 "Selectievakje Bij voltooien: bepaalt of een geluidsmelding wordt afgespeeld wanneer de bestandsbewerking is voltooid.",
 "Kryssrutan Vid slutförande: avgör om ett ljud ska spelas upp när filåtgärden är klar.",
 "Avkrysningsboksen Ved ferdigstillelse: bestemmer om det skal spilles av en lydvarsling når filoperasjonen er fullført.",
 "Checkboksen Ved færdiggørelse: bestemmer, om der skal afspilles en lydmeddelelse, når filoperationen er afsluttet.",
 "Valmiina-valintaruutu: määrittää, toistetaanko äänimerkki, kun tiedostotoiminto on valmis.",
 "Pole wyboru Po zakończeniu: określa, czy ma być odtwarzany dźwięk powiadomienia po zakończeniu operacji na plikach.",
 "Zaškrtávací pole Při dokončení: určuje, zda se má při dokončení operace se soubory přehrát zvukové upozornění.",
 "Befejezéskor jelölőnégyzet: meghatározza, hogy a fájlművelet befejezésekor lejátszódik-e hangértesítés.",
 "Caseta de selectare La finalizare: determină dacă va fi redată o notificare sonoră când operațiunea de fișiere se finalizează."),

                    ["On Cancel CheckBox: This checkbox determines whether to play a sound notification when the file operation is canceled."] =
("Case à cocher À l’annulation : détermine si une notification sonore est jouée lorsque l’opération sur les fichiers est annulée.",
 "Kontrollkästchen Bei Abbruch: legt fest, ob ein Ton abgespielt wird, wenn die Dateioperation abgebrochen wird.",
 "Casilla Al cancelar: determina si se reproduce una notificación sonora cuando se cancela la operación de archivos.",
 "Check-box All’annullamento: determina se riprodurre un suono di notifica all’annullamento dell’operazione sui file.",
 "Caixa de verificação Ao cancelar: determina se é reproduzida uma notificação sonora ao cancelar a operação de ficheiros.",
 "Caixa de seleção Ao cancelar: determina se uma notificação sonora será reproduzida ao cancelar a operação de arquivos.",
 "Selectievakje Bij annuleren: bepaalt of een geluidsmelding wordt afgespeeld wanneer de bestandsbewerking wordt geannuleerd.",
 "Kryssrutan Vid avbrytning: avgör om ett ljud ska spelas upp när filåtgärden avbryts.",
 "Avkrysningsboksen Ved avbrudd: bestemmer om det skal spilles av en lydvarsling når filoperasjonen avbrytes.",
 "Checkboksen Ved annullering: bestemmer, om der skal afspilles en lydmeddelelse, når filoperationen annulleres.",
 "Peruuta-valintaruutu: määrittää, toistetaanko äänimerkki, kun tiedostotoiminto peruutetaan.",
 "Pole wyboru Przy anulowaniu: określa, czy ma być odtwarzany dźwięk powiadomienia po anulowaniu operacji na plikach.",
 "Zaškrtávací pole Při zrušení: určuje, zda se má při zrušení operace se soubory přehrát zvukové upozornění.",
 "Megszakításkor jelölőnégyzet: meghatározza, hogy a fájlművelet megszakításakor lejátszódik-e hangértesítés.",
 "Caseta de selectare La anulare: determină dacă va fi redată o notificare sonoră când operațiunea de fișiere este anulată."),

                    ["On Add Files CheckBox: This checkbox determines whether to play a sound notification when files are added to the operation list."] =
("Case à cocher À l’ajout de fichiers : détermine si une notification sonore est jouée quand des fichiers sont ajoutés à la liste d’opérations.",
 "Kontrollkästchen Bei Dateien hinzufügen: legt fest, ob ein Ton abgespielt wird, wenn Dateien zur Vorgangsliste hinzugefügt werden.",
 "Casilla Al añadir archivos: determina si se reproduce una notificación sonora cuando se añaden archivos a la lista de operaciones.",
 "Check-box All’aggiunta file: determina se riprodurre un suono di notifica quando i file vengono aggiunti all’elenco operazioni.",
 "Caixa de verificação Ao adicionar ficheiros: determina se é reproduzida uma notificação sonora ao adicionar ficheiros à lista de operações.",
 "Caixa de seleção Ao adicionar arquivos: determina se uma notificação sonora será reproduzida ao adicionar arquivos à lista de operações.",
 "Selectievakje Bij toevoegen bestanden: bepaalt of een geluidsmelding wordt afgespeeld wanneer bestanden aan de bewerkingslijst worden toegevoegd.",
 "Kryssrutan Vid tillägg av filer: avgör om ett ljud ska spelas upp när filer läggs till i åtgärdslistan.",
 "Avkrysningsboksen Ved legg til filer: bestemmer om det skal spilles av en lydvarsling når filer legges til i operasjonslisten.",
 "Checkboksen Ved tilføjelse af filer: bestemmer, om der skal afspilles en lydmeddelelse, når filer tilføjes til handlingslisten.",
 "Lisää tiedostot -valintaruutu: määrittää, toistetaanko äänimerkki, kun tiedostoja lisätään toimintolistalle.",
 "Pole wyboru Podczas dodawania plików: określa, czy ma być odtwarzany dźwięk powiadomienia po dodaniu plików do listy operacji.",
 "Zaškrtávací pole Při přidání souborů: určuje, zda se má při přidání souborů do seznamu operací přehrát zvukové upozornění.",
 "Fájlok hozzáadásakor jelölőnégyzet: meghatározza, hogy a műveleti listához fájlok hozzáadásakor lejátszódik-e hangértesítés.",
 "Caseta de selectare La adăugarea fișierelor: determină dacă va fi redată o notificare sonoră când fișierele sunt adăugate la lista de operațiuni."),

                    ["On Error CheckBox: This checkbox determines whether to play a sound notification when an error occurs during the file operation."] =
("Case à cocher En cas d’erreur : détermine si une notification sonore est jouée en cas d’erreur pendant l’opération sur les fichiers.",
 "Kontrollkästchen Bei Fehler: legt fest, ob ein Ton abgespielt wird, wenn während der Dateioperation ein Fehler auftritt.",
 "Casilla En caso de error: determina si se reproduce una notificación sonora cuando ocurre un error durante la operación de archivos.",
 "Check-box In caso di errore: determina se riprodurre un suono di notifica quando si verifica un errore durante l’operazione sui file.",
 "Caixa de verificação Em caso de erro: determina se é reproduzida uma notificação sonora quando ocorre um erro durante a operação de ficheiros.",
 "Caixa de seleção Em caso de erro: determina se uma notificação sonora será reproduzida quando ocorrer um erro durante a operação de arquivos.",
 "Selectievakje Bij fout: bepaalt of een geluidsmelding wordt afgespeeld wanneer er een fout optreedt tijdens de bestandsbewerking.",
 "Kryssrutan Vid fel: avgör om ett ljud ska spelas upp när ett fel inträffar under filåtgärden.",
 "Avkrysningsboksen Ved feil: bestemmer om det skal spilles av en lydvarsling når det oppstår en feil under filoperasjonen.",
 "Checkboksen Ved fejl: bestemmer, om der skal afspilles en lydmeddelelse, når der opstår en fejl under filoperationen.",
 "Virhe-valintaruutu: määrittää, toistetaanko äänimerkki, kun tiedostotoiminnon aikana tapahtuu virhe.",
 "Pole wyboru Przy błędzie: określa, czy ma być odtwarzany dźwięk powiadomienia, gdy podczas operacji na plikach wystąpi błąd.",
 "Zaškrtávací pole Při chybě: určuje, zda se má při výskytu chyby během operace se soubory přehrát zvukové upozornění.",
 "Hiba esetén jelölőnégyzet: meghatározza, hogy a fájlművelet során hiba történtekor lejátszódik-e hangértesítés.",
 "Caseta de selectare La eroare: determină dacă va fi redată o notificare sonoră când apare o eroare în timpul operațiunii de fișiere."),

                    ["Export Files Data Grid View: This area displays the list of files to be processed, along with their details such as source and destination."] =
("Grille de données d’exportation des fichiers : affiche la liste des fichiers à traiter ainsi que leurs détails, comme la source et la destination.",
 "Export-Dateigrid-Ansicht: zeigt die Liste der zu verarbeitenden Dateien mit Details wie Quelle und Ziel an.",
 "Vista de cuadrícula de datos de exportación de archivos: muestra la lista de archivos a procesar junto con detalles como origen y destino.",
 "Esporta griglia dati file: visualizza l’elenco dei file da elaborare con dettagli come origine e destinazione.",
 "Grelha de dados de exportação de ficheiros: apresenta a lista de ficheiros a processar, com detalhes como origem e destino.",
 "Grade de dados de exportação de arquivos: exibe a lista de arquivos a serem processados, com detalhes como origem e destino.",
 "Exportbestanden-DataGridView: toont de lijst met te verwerken bestanden inclusief details zoals bron en bestemming.",
 "Exportfiler DataGridView: visar listan över filer som ska bearbetas, tillsammans med detaljer som källa och mål.",
 "Eksporter filer DataGridView: viser listen over filer som skal behandles, med detaljer som kilde og destinasjon.",
 "Eksportér filer DataGridView: viser listen over filer, der skal behandles, sammen med detaljer som kilde og destination.",
 "Vie tiedostot -DataGridView: näyttää käsiteltävien tiedostojen luettelon yhdessä yksityiskohtien, kuten lähde ja kohde, kanssa.",
 "DataGridView eksportu plików: wyświetla listę plików do przetworzenia wraz z szczegółami takimi jak źródło i cel.",
 "Exportovat soubory DataGridView: zobrazuje seznam souborů k zpracování spolu s podrobnostmi, jako je zdroj a cíl.",
 "Fájlok exportálása DataGridView: megjeleníti a feldolgozandó fájlok listáját forrás és cél részleteivel együtt.",
 "Vizualizare tabel date export fișiere: afișează lista fișierelor care urmează a fi procesate, împreună cu detalii precum sursa și destinația."),

                    ["Register Button: This button allows you to register the application with a license key to unlock full features."] =
("Bouton Enregistrer : permet d’enregistrer l’application avec une clé de licence pour débloquer toutes les fonctionnalités.",
 "Registrieren-Schaltfläche: ermöglicht es, die Anwendung mit einem Lizenzschlüssel zu registrieren, um alle Funktionen freizuschalten.",
 "Botón Registrar: permite registrar la aplicación con una clave de licencia para desbloquear todas las funciones.",
 "Pulsante Registra: consente di registrare l’applicazione con un codice di licenza per sbloccare tutte le funzionalità.",
 "Botão Registar: permite registar a aplicação com uma chave de licença para desbloquear todas as funcionalidades.",
 "Botão Registrar: permite registrar o aplicativo com uma chave de licença para desbloquear todos os recursos.",
 "Registreren-knop: stelt u in staat de toepassing met een licentiesleutel te registreren om alle functies te ontgrendelen.",
 "Registrera-knappen: låter dig registrera programmet med en licensnyckel för att låsa upp alla funktioner.",
 "Registrer-knappen: lar deg registrere programmet med en lisensnøkkel for å låse opp alle funksjoner.",
 "Registreringsknappen: lader dig registrere programmet med en licensnøgle for at låse alle funktioner op.",
 "Rekisteröi-painike: mahdollistaa sovelluksen rekisteröinnin lisenssiavaimella, jolloin kaikki ominaisuudet avautuvat.",
 "Przycisk Zarejestruj: pozwala zarejestrować aplikację za pomocą klucza licencyjnego, aby odblokować pełne funkcje.",
 "Tlačítko Registrovat: umožňuje zaregistrovat aplikaci pomocí licenčního klíče a odemknout tak všechny funkce.",
 "Regisztráció gomb: lehetővé teszi az alkalmazás regisztrálását licenckulccsal, hogy a teljes funkcionalitás feloldódjon.",
 "Buton Înregistrare: permite înregistrarea aplicației cu o cheie de licență pentru a debloca toate funcționalitățile."),

                    ["File Progress Bar: Shows the current percentage of the file being processed"] =
("Barre de progression du fichier : affiche le pourcentage actuel du fichier en cours de traitement.",
 "Datei-Fortschrittsbalken: zeigt den aktuellen Prozentsatz der verarbeiteten Datei an.",
 "Barra de progreso de archivo: muestra el porcentaje actual del archivo que se está procesando.",
 "Barra di avanzamento del file: mostra la percentuale attuale del file in elaborazione.",
 "Barra de progresso do ficheiro: mostra a percentagem atual do ficheiro a ser processado.",
 "Barra de progresso do arquivo: mostra a porcentagem atual do arquivo sendo processado.",
 "Voortgangsbalk Bestand: toont het huidige percentage van het bestand dat wordt verwerkt.",
 "Filförloppsindikator: visar den aktuella procentandelen av filen som bearbetas.",
 "Filfremdriftslinje: viser den gjeldende prosentandelen av filen som behandles.",
 "Filfremdriftslinje: viser den aktuelle procentdel af filen, der behandles.",
 "Tiedoston edistymispalkki: näyttää parhaillaan käsiteltävän tiedoston nykyisen prosenttiosuuden.",
 "Pasek postępu pliku: wyświetla bieżący procent pliku, który jest przetwarzany.",
 "Ukazatel průběhu souboru: zobrazuje aktuální procento zpracovávaného souboru.",
 "Fájlfolyamat-sáv: megjeleníti a feldolgozás alatt álló fájl jelenlegi százalékát.",
 "Bară de progres fișier: arată procentul curent al fișierului care este procesat."),

                    ["On Finish CheckBox: This checkbox determines whether to play a sound notification when the file operation finishes."] =
("Case à cocher À la fin : détermine si une notification sonore est jouée lorsque l’opération sur les fichiers se termine.",
 "Kontrollkästchen Bei Fertigstellung: legt fest, ob eine Tonbenachrichtigung abgespielt wird, wenn die Dateioperation beendet ist.",
 "Casilla Al finalizar: determina si se reproduce una notificación sonora cuando finaliza la operación de archivos.",
 "Check-box Al termine: determina se riprodurre una notifica sonora al termine dell’operazione sui file.",
 "Caixa de verificação Ao terminar: determina se é reproduzida uma notificação sonora quando a operação de ficheiros termina.",
 "Caixa de seleção Ao finalizar: determina se uma notificação sonora será reproduzida quando a operação de arquivos for concluída.",
 "Selectievakje Bij voltooien: bepaalt of er een geluidsmelding wordt afgespeeld wanneer de bestandsbewerking is voltooid.",
 "Kryssrutan Vid slutförande: avgör om ett ljud ska spelas upp när filoperationen avslutas.",
 "Avkrysningsboksen Ved ferdigstillelse: bestemmer om det skal spilles av en lydvarsling når filoperasjonen er fullført.",
 "Checkboksen Ved afslutning: bestemmer, om der skal afspilles en lydmeddelelse, når filoperationen er afsluttet.",
 "Valmiina-valintaruutu: määrittää, toistetaanko äänimerkki, kun tiedosto-operaatio päättyy.",
 "Pole wyboru Po zakończeniu: określa, czy ma być odtwarzane powiadomienie dźwiękowe po zakończeniu operacji plików.",
 "Zaškrtávací pole Při dokončení: určuje, zda se má při dokončení operace se soubory přehrát zvukové upozornění.",
 "Befejezéskor jelölőnégyzet: meghatározza, hogy a fájlművelet befejezésekor lejátszódik-e hangértesítés.",
 "Caseta de selectare La finalizare: determină dacă va fi redată o notificare sonoră când operația de fișiere se finalizează."),

                    ["On Cancel CheckBox: This checkbox determines whether to play a sound notification when the file operation is canceled."] =
("Case à cocher À l’annulation : détermine si une notification sonore est jouée lorsque l’opération sur les fichiers est annulée.",
 "Kontrollkästchen Bei Abbruch: legt fest, ob eine Tonbenachrichtigung abgespielt wird, wenn die Dateioperation abgebrochen wird.",
 "Casilla Al cancelar: determina si se reproduce una notificación sonora cuando se cancela la operación de archivos.",
 "Check-box All’annullamento: determina se riprodurre una notifica sonora quando l’operazione sui file viene annullata.",
 "Caixa de verificação Ao cancelar: determina se é reproduzida uma notificação sonora quando a operação de ficheiros é cancelada.",
 "Caixa de seleção Ao cancelar: determina se uma notificação sonora será reproduzida quando a operação de arquivos for cancelada.",
 "Selectievakje Bij annuleren: bepaalt of er een geluidsmelding wordt afgespeeld wanneer de bestandsbewerking wordt geannuleerd.",
 "Kryssrutan Vid avbrytande: avgör om ett ljud ska spelas upp när filoperationen avbryts.",
 "Avkrysningsboksen Ved avbrytelse: bestemmer om det skal spilles av en lydvarsling når filoperasjonen avbrytes.",
 "Checkboksen Ved annullering: bestemmer, om der skal afspilles en lydmeddelelse, når filoperationen annulleres.",
 "Peruuta-valintaruutu: määrittää, toistetaanko äänimerkki, kun tiedosto-operaatio peruutetaan.",
 "Pole wyboru Po anulowaniu: określa, czy ma być odtwarzane powiadomienie dźwiękowe po anulowaniu operacji plików.",
 "Zaškrtávací pole Při zrušení: určuje, zda se má při zrušení operace se soubory přehrát zvukové upozornění.",
 "Mégse jelölőnégyzet: meghatározza, hogy a fájlművelet megszakításakor lejátszódik-e hangértesítés.",
 "Caseta de selectare La anulare: determină dacă va fi redată o notificare sonoră când operația de fișiere este anulată."),

                    ["On Add Files CheckBox: This checkbox determines whether to play a sound notification when files are added to the operation list."] =
("Case à cocher À l’ajout de fichiers : détermine si une notification sonore est jouée lorsque des fichiers sont ajoutés à la liste d’opérations.",
 "Kontrollkästchen Bei Hinzufügen von Dateien: legt fest, ob eine Tonbenachrichtigung abgespielt wird, wenn Dateien zur Vorgangsliste hinzugefügt werden.",
 "Casilla Al agregar archivos: determina si se reproduce una notificación sonora cuando se agregan archivos a la lista de operaciones.",
 "Check-box All’aggiunta di file: determina se riprodurre una notifica sonora quando i file vengono aggiunti all’elenco operazioni.",
 "Caixa de verificação Ao adicionar ficheiros: determina se é reproduzida uma notificação sonora quando os ficheiros são adicionados à lista de operações.",
 "Caixa de seleção Ao adicionar arquivos: determina se uma notificação sonora será reproduzida quando arquivos forem adicionados à lista de operações.",
 "Selectievakje Bij toevoegen bestanden: bepaalt of er een geluidsmelding wordt afgespeeld wanneer bestanden aande bewerkingslijst worden toegevoegd.",
"Kryssrutan Vid tillägg av filer: avgör om ett ljud ska spelas upp när filer läggs till i åtgärdslistan.",
"Avkrysningsboksen Ved legg til filer: bestemmer om det skal spilles av en lydvarsling når filer legges til i operasjonslisten.",
"Checkboksen Ved tilføjelse af filer: bestemmer, om der skal afspilles en lydmeddelelse, når filer føjes til handlingslisten.",
"Lisää tiedostot -valintaruutu: määrittää, toistetaanko äänimerkki, kun tiedostoja lisätään toimintolistalle.",
"Pole wyboru Podczas dodawania plików: określa, czy ma być odtwarzany dźwięk powiadomienia po dodaniu plików do listy operacji.",
"Zaškrtávací pole Při přidání souborů: určuje, zda se má při přidání souborů do seznamu operací přehrát zvukové upozornění.",
"Fájlok hozzáadása jelölőnégyzet: meghatározza, hogy a műveleti listához fájlok hozzáadásakor lejátszódik-e hangértesítés.",
"Caseta de selectare La adăugarea fișierelor: determină dacă va fi redată o notificare sonoră când fișierele sunt adăugate la lista de operații."),
                    ["On Error CheckBox: This checkbox determines whether to play a sound notification when an error occurs during the file operation."] =
("Case à cocher En cas d’erreur : détermine si une notification sonore est jouée en cas d’erreur pendant l’opération sur les fichiers.",
"Kontrollkästchen Bei Fehler: legt fest, ob eine Tonbenachrichtigung abgespielt wird, wenn während der Dateioperation ein Fehler auftritt.",
"Casilla En caso de error: determina si se reproduce una notificación sonora cuando ocurre un error durante la operación de archivos.",
"Check-box In caso di errore: determina se riprodurre un suono di notifica quando si verifica un errore durante l’operazione sui file.",
"Caixa de verificação Em caso de erro: determina se é reproduzida uma notificação sonora quando ocorre um erro durante a operação de ficheiros.",
"Caixa de seleção Em caso de erro: determina se uma notificação sonora será reproduzida quando ocorrer um erro durante a operação de arquivos.",
"Selectievakje Bij fout: bepaalt of er een geluidsmelding wordt afgespeeld wanneer er een fout optreedt tijdens de bestandsbewerking.",
"Kryssrutan Vid fel: avgör om ett ljud ska spelas upp när ett fel inträffar under filåtgärden.",
"Avkrysningsboksen Ved feil: bestemmer om det skal spilles av en lydvarsling når det oppstår en feil under filoperasjonen.",
"Checkboksen Ved fejl: bestemmer, om der skal afspilles en lydmeddelelse, når der opstår en fejl under filoperationen.",
"Virhe-valintaruutu: määrittää, toistetaanko äänimerkki, kun tiedostotoiminnon aikana tapahtuu virhe.",
"Pole wyboru Przy błędzie: określa, czy ma być odtwarzany dźwięk powiadomienia, gdy podczas operacji na plikach wystąpi błąd.",
"Zaškrtávací pole Při chybě: určuje, zda se má při výskytu chyby během operace se soubory přehrát zvukové upozornění.",
"Hiba esetén jelölőnégyzet: meghatározza, hogy a fájlművelet során hiba történtekor lejátszódik-e hangértesítés.",
"Caseta de selectare La eroare: determină dacă va fi redată o notificare sonoră când apare o eroare în timpul operației de fișiere."),
                    ["File Progress Bar: Shows the current percentage of the file being processed"] =
("Barre de progression du fichier : affiche le pourcentage actuel du fichier en cours de traitement.",
"Datei-Fortschrittsbalken: zeigt den aktuellen Prozentsatz der verarbeiteten Datei an.",
"Barra de progreso de archivo: muestra el porcentaje actual del archivo que se está procesando.",
"Barra di avanzamento del file: mostra la percentuale attuale del file in elaborazione.",
"Barra de progresso do ficheiro: mostra a percentagem atual do ficheiro a ser processado.",
"Barra de progresso do arquivo: mostra a porcentagem atual do arquivo sendo processado.",
"Voortgangsbalk Bestand: toont het huidige percentage van het bestand dat wordt verwerkt.",
"Filförloppsindikator: visar den aktuella procentandelen av filen som bearbetas.",
"Filfremdriftslinje: viser den gjeldende prosentandelen av filen som behandles.",
"Filfremdriftslinje: viser den aktuelle procentdel af filen, der behandles.",
"Tiedoston edistymispalkki: näyttää parhaillaan käsiteltävän tiedoston nykyisen prosenttiosuuden.",
"Pasek postępu pliku: wyświetla bieżący procent pliku, który jest przetwarzany.",
"Ukazatel průběhu souboru: zobrazuje aktuální procento zpracovávaného souboru.",
"Fájlfolyamat-sáv: megjeleníti a feldolgozás alatt álló fájl jelenlegi százalékát.",
"Bară de progres fișier: arată procentul curent al fișierului care este procesat."),
                    ["Total Progress Bar: Shows the current percentage of the total of all files being processed"] =
("Barre de progression totale : affiche le pourcentage actuel de l’ensemble des fichiers en cours de traitement.",
"Gesamt-Fortschrittsbalken: zeigt den aktuellen Prozentsatz aller verarbeiteten Dateien insgesamt an.",
"Barra de progreso total: muestra el porcentaje actual del total de todos los archivos que se están procesando.",
"Barra di avanzamento totale: mostra la percentuale attuale del totale di tutti i file in elaborazione.",
"Barra de progresso total: mostra a percentagem atual do total de todos os ficheiros a ser processados.",
"Barra de progresso total: mostra a porcentagem atual do total de todos os arquivos sendo processados.",
"Voortgangsbalk Totaal: toont het huidige percentage van het totaal van alle bestanden die worden verwerkt.",
"Total förloppsindikator: visar den aktuella procentandelen av totalen av alla filer som bearbetas.",
"Total fremdriftslinje: viser den gjeldende prosentandelen av totalen av alle filer som behandles.",
"Samlet fremdriftslinje: viser den aktuelle procentdel af totalen af alle filer, der behandles.",
"Yhteensä edistymispalkki: näyttää kaikkien parhaillaan käsiteltävien tiedostojen kokonaisprosentin.",
"Pasek postępu całkowitego: wyświetla bieżący procent wszystkich plików, które są przetwarzane.",
"Ukazatel celkového průběhu: zobrazuje aktuální procento ze všech zpracovávaných souborů.",
"Teljes folyamat-sáv: megjeleníti az összes feldolgozás alatt álló fájl teljes százalékát.",
"Bară de progres total: arată procentul curent din totalul tuturor fișierelor care sunt procesate."),
                    ["Move to Top Button: This button moves the selected file to the top of the list, making it the first file to be processed in the operation."] =
("Bouton Déplacer vers le haut : déplace le fichier sélectionné en haut de la liste, afin qu’il soit traité en premier.",
"Schaltfläche „Nach oben verschieben“: verschiebt die ausgewählte Datei an den Anfang der Liste, sodass sie als erste verarbeitet wird.",
"Botón Mover al principio: mueve el archivo seleccionado al principio de la lista para que sea el primero en procesarse.",
"Pulsante Sposta in alto: sposta il file selezionato in cima all’elenco, in modo che venga elaborato per primo.",
"Botão Mover para o Topo: move o ficheiro selecionado para o topo da lista, tornando-o o primeiro a ser processado.",
"Botão Mover para o Topo: move o arquivo selecionado para o topo da lista, tornando-o o primeiro a ser processado.",
"Knop Naar boven verplaatsen: verplaatst het geselecteerde bestand naar de bovenkant van de lijst, zodat het als eerste wordt verwerkt.",
"Knappen Flytta överst: flyttar den markerade filen till toppen av listan så att den blir den första som bearbetas.",
"Knapp Flytt til toppen: flytter den valgte filen til toppen av listen, slik at den blir den første som behandles.",
"Knap Flyt til toppen: flytter den valgte fil til toppen af listen, så den bliver den første, der behandles.",
"Siirrä alkuun -painike: siirtää valitun tiedoston luettelon alkuun, jolloin se käsitellään ensimmäisenä.",
"Przycisk Przenieś na górę: przenosi wybrany plik na górę listy, aby był pierwszym przetwarzanym plikiem.",
"Tlačítko Přesunout nahoru: přesune vybraný soubor na začátek seznamu, takže bude zpracován jako první.",
"Fájl az elejére gomb: a kijelölt fájlt a lista elejére mozgatja, így az lesz az elsőként feldolgozandó fájl.",
"Buton Mută în vârf: mută fișierul selectat în vârful listei, făcându-l primul fișier care va fi procesat."),
                    ["Move to Bottom Button: This button moves the selected file to the bottom of the list, making it the last file to be processed in the operation."] =
("Bouton Déplacer vers le bas : déplace le fichier sélectionné en bas de la liste, afin qu’il soit traité en dernier.",
"Schaltfläche „Nach unten verschieben“: verschiebt die ausgewählte Datei an das Ende der Liste, sodass sie als letzte verarbeitet wird.",
"Botón Mover al final: mueve el archivo seleccionado al final de la lista para que sea el último en procesarse.",
"Pulsante Sposta in basso: sposta il file selezionato in fondo all’elenco, in modo che venga elaborato per ultimo.",
"Botão Mover para o Fundo: move o ficheiro selecionado para o fundo da lista, tornando-o o último a ser processado.",
"Botão Mover para o Final: move o arquivo selecionado para o final da lista, tornando-o o último a ser processado.",
"Knop Naar beneden verplaatsen: verplaatst het geselecteerde bestand naar de onderkant van de lijst, zodat het als laatste wordt verwerkt.",
"Knappen Flytta nederst: flyttar den markerade filen till botten av listan så att den blir den sista som bearbetas.",
"Knapp Flytt til bunnen: flytter den valgte filen til bunnen av listen, slik at den blir den siste som behandles.",
"Knap Flyt til bunden: flytter den valgte fil til bunden af listen, så den bliver den sidste, der behandles.",
"Siirrä loppuun -painike: siirtää valitun tiedoston luettelon loppuun, jolloin se käsitellään viimeisenä.",
"Przycisk Przenieś na dół: przenosi wybrany plik na koniec listy, aby był ostatnim przetwarzanym plikiem.",
"Tlačítko Přesunout dolů: přesune vybraný soubor na konec seznamu, takže bude zpracován jako poslední.",
"Fájl a végére gomb: a kijelölt fájlt a lista végére mozgatja, így az lesz az utolsóként feldolgozandó fájl.",
"Buton Mută la bază: mută fișierul selectat la baza listei, făcându-l ultimul fișier care va fi procesat."),
                    ["Files Data Grid View: This area displays the list of files to be processed, along with their details such as source and destination."] =
("Grille de données des fichiers : affiche la liste des fichiers à traiter ainsi que leurs détails, comme la source et la destination.",
"Datei-DataGridView: zeigt die Liste der zu verarbeitenden Dateien mit Details wie Quelle und Ziel an.",
"Vista de cuadrícula de datos de archivos: muestra la lista de archivos a procesar junto con detalles como origen y destino.",
"Griglia dati file: visualizza l’elenco dei file da elaborare con dettagli come origine e destinazione.",
"Grelha de dados de ficheiros: apresenta a lista de ficheiros a processar, com detalhes como origem e destino.",
"Grade de dados de arquivos: exibe a lista de arquivos a serem processados, com detalhes como origem e destino.",
"Bestanden-DataGridView: toont de lijst met te verwerken bestanden inclusief details zoals bron en bestemming.",
"Filer DataGridView: visar listan över filer som ska bearbetas, tillsammans med detaljer som källa och mål.",
"Filer DataGridView: viser listen over filer som skal behandles, med detaljer som kilde og destinasjon.",
"Filer DataGridView: viser listen over filer, der skal behandles, sammen med detaljer som kilde og destination.",
"Tiedostot-DataGridView: näyttää käsiteltävien tiedostojen luettelon yhdessä yksityiskohtien, kuten lähde ja kohde, kanssa.",
"DataGridView plików: wyświetla listę plików do przetworzenia wraz z szczegółami takimi jak źródło i miejsce docelowe.",
"DataGridView souborů: zobrazuje seznam souborů k zpracování spolu s podrobnostmi, jako je zdroj a cíl.",
"Fájlok DataGridView: megjeleníti a feldolgozandó fájlok listáját forrás és cél részleteivel együtt.",
"Vizualizare tabel fișiere: afișează lista fișierelor care urmează a fi procesate, împreună cu detalii precum sursa și destinația."),
                    ["Thread 1 Progress Bar: This progress bar shows the progress of the file being processed by thread 1."] =
("Barre de progression du thread 1 : affiche l’avancement du fichier traité par le thread 1.",
"Thread-1-Fortschrittsbalken: zeigt den Fortschritt der Datei an, die von Thread 1 verarbeitet wird.",
"Barra de progreso del subproceso 1: muestra el avance del archivo procesado por el subproceso 1.",
"Barra di avanzamento thread 1: mostra l’avanzamento del file elaborato dal thread 1.",
"Barra de progresso da thread 1: mostra o progresso do ficheiro processado pela thread 1.",
"Barra de progresso da thread 1: mostra o progresso do arquivo processado pela thread 1.",
"Voortgangsbalk Thread 1: toont de voortgang van het bestand dat door thread 1 wordt verwerkt.",
"Thread 1-förloppsindikator: visar framsteg för filen som bearbetas av tråd 1.",
"Tråd 1 fremdriftslinje: viser fremdriften til filen som behandles av tråd 1.",
"Tråd 1-fremdriftslinje: viser fremskridt for filen, der behandles af tråd 1.",
"Säie 1 edistymispalkki: näyttää säikeen 1 käsittelemän tiedoston edistymisen.",
"Pasek postępu wątku 1: pokazuje postęp pliku przetwarzanego przez wątek 1.",
"Ukazatel průběhu vlákna 1: zobrazuje průběh souboru zpracovávaného vláknem 1.",
"1. szál folyamat-sáv: megjeleníti az 1. szál által feldolgozott fájl állapotát.",
"Bară de progres fir 1: arată progresul fișierului procesat de firul 1."),
                    ["Thread 2 Progress Bar: This progress bar shows the progress of the file being processed by thread 2."] =
("Barre de progression du thread 2 : affiche l’avancement du fichier traité par le thread 2.",
"Thread-2-Fortschrittsbalken: zeigt den Fortschritt der Datei an, die von Thread 2 verarbeitet wird.",
"Barra de progreso del subproceso 2: muestra el avance del archivo procesado por el subproceso 2.",
"Barra di avanzamento thread 2: mostra l’avanzamento del file elaborato dal thread 2.",
"Barra de progresso da thread 2: mostra o progresso do ficheiro processado pela thread 2.",
"Barra de progresso da thread 2: mostra o progresso do arquivo processado pela thread 2.",
"Voortgangsbalk Thread 2: toont de voortgang van het bestand dat door thread 2 wordt verwerkt.",
"Thread 2-förloppsindikator: visar framsteg för filen som bearbetas av tråd 2.",
"Tråd 2 fremdriftslinje: viser fremdriften til filen som behandles av tråd 2.",
"Tråd 2-fremdriftslinje: viser fremskridt for filen, der behandles af tråd 2.",
"Säie 2 edistymispalkki: näyttää säikeen 2 käsittelemän tiedoston edistymisen.",
"Pasek postępu wątku 2: pokazuje postęp pliku przetwarzanego przez wątek 2.",
"Ukazatel průběhu vlákna 2: zobrazuje průběh souboru zpracovávaného vláknem 2.",
"2. szál folyamat-sáv: megjeleníti az 2. szál által feldolgozott fájl állapotát.",
"Bară de progres fir 2: arată progresul fișierului procesat de firul 2."),
                    ["Thread 3 Progress Bar: This progress bar shows the progress of the file being processed by thread 3."] =
("Barre de progression du thread 3 : affiche l’avancement du fichier traité par le thread 3.",
"Thread-3-Fortschrittsbalken: zeigt den Fortschritt der Datei an, die von Thread 3 verarbeitet wird.",
"Barra de progreso del subproceso 3: muestra el avance del archivo procesado por el subproceso 3.",
"Barra di avanzamento thread 3: mostra l’avanzamento del file elaborato dal thread 3.",
"Barra de progresso da thread 3: mostra o progresso do ficheiro processado pela thread 3.",
"Barra de progresso da thread 3: mostra o progresso do arquivo processado pela thread 3.",
"Voortgangsbalk Thread 3: toont de voortgang van het bestand dat door thread 3 wordt verwerkt.",
"Thread 3-förloppsindikator: visar framsteg för filen som bearbetas av tråd 3.",
"Tråd 3 fremdriftslinje: viser fremdriften til filen som behandles av tråd 3.",
"Tråd 3-fremdriftslinje: viser fremskridt for filen, der behandles af tråd 3.",
"Säie 3 edistymispalkki: näyttää säikeen 3 käsittelemän tiedoston edistymisen.",
"Pasek postępu wątku 3: pokazuje postęp pliku przetwarzanego przez wątek 3.",
"Ukazatel průběhu vlákna 3: zobrazuje průběh souboru zpracovávaného vláknem 3.",
"3. szál folyamat-sáv: megjeleníti az 3. szál által feldolgozott fájl állapotát.",
"Bară de progres fir 3: arată progresul fișierului procesat de firul 3."),
                    ["Thread 4 Progress Bar: This progress bar shows the progress of the file being processed by thread 4."] =
("Barre de progression du thread 4 : affiche l’avancement du fichier traité par le thread 4.",
"Thread-4-Fortschrittsbalken: zeigt den Fortschritt der Datei an, die von Thread 4 verarbeitet wird.",
"Barra de progreso del subproceso 4: muestra el avance del archivo procesado por el subproceso 4.",
"Barra di avanzamento thread 4: mostra l’avanzamento del file elaborato dal thread 4.",
"Barra de progresso da thread 4: mostra o progresso do ficheiro processado pela thread 4.",
"Barra de progresso da thread 4: mostra o progresso do arquivo processado pela thread 4.",
"Voortgangsbalk Thread 4: toont de voortgang van het bestand dat door thread 4 wordt verwerkt.",
"Thread 4-förloppsindikator: visar framsteg för filen som bearbetas av tråd 4.",
"Tråd 4 fremdriftslinje: viser fremdriften til filen som behandles av tråd 4.",
"Tråd 4-fremdriftslinje: viser fremskridt for filen, der behandles af tråd 4.",
"Säie 4 edistymispalkki: näyttää säikeen 4 käsittelemän tiedoston edistymisen.",
"Pasek postępu wątku 4: pokazuje postęp pliku przetwarzanego przez wątek 4.",
"Ukazatel průběhu vlákna 4: zobrazuje průběh souboru zpracovávaného vláknem 4.",
"4. szál folyamat-sáv: megjeleníti az 4. szál által feldolgozott fájl állapotát.",
"Bară de progres fir 4: arată progresul fișierului procesat de firul 4."),
                    ["Total Multi-Threaded Progress Bar: This progress bar shows the overall progress of all files being processed in the multi-threaded operation."] =
("Barre de progression multithread totale : affiche la progression globale de tous les fichiers traités dans l’opération multithread.",
"Gesamt-Multi-Thread-Fortschrittsbalken: zeigt den Gesamtfortschritt aller Dateien an, die in der Multi-Thread-Operation verarbeitet werden.",
"Barra de progreso multi-hilo total: muestra el progreso general de todos los archivos procesados en la operación multi-hilo.",
"Barra di avanzamento totale multi-thread: mostra l’avanzamento complessivo di tutti i file elaborati nell’operazione multi-thread.",
"Barra de progresso total multi-thread: mostra o progresso geral de todos os ficheiros processados na operação multi-thread.",
"Barra de progresso total multithread: mostra o progresso geral de todos os arquivos sendo processados na operação multithread.",
"Totale multi-thread voortgangsbalk: toont de algehele voortgang van 1: toont de voortgang van het bestand dat door thread 1 wordt verwerkt.",
"Förloppsindikator Tråd 1: visar framstegen för filen som bearbetas av tråd 1.",
"Fremdriftslinje Tråd 1: viser fremdriften til filen som behandles av tråd 1.",
"Fremdriftslinje Tråd 1: viser fremskridtet for den fil, der behandles af tråd 1.",
"Säikeen 1 edistymispalkki: näyttää säikeen 1 käsittelemän tiedoston edistymisen.",
"Pasek postępu wątku 1: pokazuje postęp przetwarzania pliku przez wątek 1.",
"Ukazatel průběhu vlákna 1: zobrazuje průběh zpracování souboru vláknem 1.",
"1. szál előrehaladás-sáv: megjeleníti az 1. szál által feldolgozott fájl előrehaladását.",
"Bară de progres Thread 1: arată progresul fișierului procesat de Thread 1."),
                    ["Roll Up Button: This button scrolls the form up, allowing you to view files that are currently not visible in the data grid view."] =
("Bouton Dérouler vers le haut : fait défiler le formulaire vers le haut afin de visualiser les fichiers non visibles dans la grille de données.",
"Schaltfläche „Nach oben rollen“: scrollt das Formular nach oben, sodass Dateien sichtbar werden, die derzeit nicht in der Datenrasteransicht angezeigt werden.",
"Botón Desplazar hacia arriba: desplaza el formulario hacia arriba para permitir ver archivos que no son visibles actualmente en la vista de cuadrícula de datos.",
"Pulsante Arrotola su: scorre il form verso l’alto, consentendo di visualizzare i file attualmente non visibili nella griglia di dati.",
"Botão Enrolar para Cima: faz scroll do formulário para cima, permitindo visualizar ficheiros que não estão visíveis na grelha de dados.",
"Botão Rolar para Cima: faz rolagem do formulário para cima, permitindo visualizar arquivos que não estão visíveis na grade de dados.",
"Knop Omhoog rollen: scrolt het formulier omhoog, zodat u bestanden kunt bekijken die momenteel niet zichtbaar zijn in de gegevensrasterweergave.",
"Knappen Rulla upp: rullar formuläret uppåt så att du kan se filer som för närvarande inte är synliga i datavyns rutnät.",
"Knapp Rull opp: ruller skjemaet opp, slik at du kan se filer som for øyeblikket ikke er synlige i dataene i rutenettvisningen.",
"Knap Rul op: ruller formularen op, så du kan se filer, der i øjeblikket ikke er synlige i gittervisningen.",
"Rullaa ylös -painike: vierittää lomaketta ylöspäin, jolloin voit tarkastella tiedostoja, jotka eivät tällä hetkellä näy ruudukkonäkymässä.",
"Przycisk Zwijaj: przewija formularz w górę, umożliwiając wyświetlenie plików, które nie są obecnie widoczne w widoku siatki danych.",
"Tlačítko Sbalit nahoru: posune formulář nahoru, takže můžete zobrazit soubory, které nejsou v současnosti viditelné v zobrazení datové mřížky.",
"Felgörgetés gomb: felfelé görgeti az űrlapot, így megtekintheti azokat a fájlokat, amelyek jelenleg nem láthatók a rácsnézetben.",
"Buton Derulează în sus: derulează formularul în sus, permițând vizualizarea fișierelor care nu sunt vizibile în prezent în vizualizarea tabelară."),
                    ["Roll Down Button: This button scrolls the form down, allowing you to view files that are currently not visible in the data grid view."] =
("Bouton Dérouler vers le bas : fait défiler le formulaire vers le bas afin de visualiser les fichiers non visibles dans la grille de données.",
"Schaltfläche „Nach unten rollen“: scrollt das Formular nach unten, sodass Dateien sichtbar werden, die derzeit nicht in der Datenrasteransicht angezeigt werden.",
"Botón Desplazar hacia abajo: desplaza el formulario hacia abajo para permitir ver archivos que no son visibles actualmente en la vista de cuadrícula de datos.",
"Pulsante Arrotola giù: scorre il form verso il basso, consentendo di visualizzare i file attualmente non visibili nella griglia di dati.",
"Botão Enrolar para Baixo: faz scroll do formulário para baixo, permitindo visualizar ficheiros que não estão visíveis na grelha de dados.",
"Botão Rolar para Baixo: faz rolagem do formulário para baixo, permitindo visualizar arquivos que não estão visíveis na grade de dados.",
"Knop Omlaag rollen: scrolt het formulier omlaag, zodat u bestanden kunt bekijken die momenteel niet zichtbaar zijn in de gegevensrasterweergave.",
"Knappen Rulla ned: rullar formuläret nedåt så att du kan se filer som för närvarande inte är synliga i datavyns rutnät.",
"Knapp Rull ned: ruller skjemaet ned, slik at du kan se filer som for øyeblikket ikke er synlige i dataene i rutenettvisningen.",
"Knap Rul ned: ruller formularen ned, så du kan se filer, der i øjeblikket ikke er synlige i gittervisningen.",
"Rullaa alas -painike: vierittää lomaketta alaspäin, jolloin voit tarkastella tiedostoja, jotka eivät tällä hetkellä näy ruudukkonäkymässä.",
"Przycisk Rozwiń: przewija formularz w dół, umożliwiając wyświetlenie plików, które nie są obecnie widoczne w widoku siatki danych.",
"Tlačítko Sbalit dolů: posune formulář dolů, takže můžete zobrazit soubory, které nejsou v současnosti viditelné v zobrazení datové mřížky.",
"Legörgetés gomb: lefelé görgeti az űrlapot, így megtekintheti azokat a fájlokat, amelyek jelenleg nem láthatók a rácsnézetben.",
"Buton Derulează în jos: derulează formularul în jos, permițând vizualizarea fișierelor care nu sunt vizibile în prezent în vizualizarea tabelară."),





                    ["Settings Button: This button opens the settings dialog, allowing you to configure various options for the application, such as buffer size, multi-threading, and operation preferences."] =
("Bouton Paramètres : ouvre la boîte de dialogue des paramètres, permettant de configurer diverses options de l’application, telles que la taille du tampon, le multi-threading et les préférences d’opération.",
 "Schaltfläche „Einstellungen“: öffnet den Einstellungsdialog, in dem Sie verschiedene Optionen für die Anwendung konfigurieren können, z. B. Puffergröße, Multi-Threading und Betriebspräferenzen.",
 "Botón Configuración: abre el cuadro de diálogo de configuración, permitiéndole definir opciones varias de la aplicación, como tamaño de búfer, multi-hilo y preferencias de operación.",
 "Pulsante Impostazioni: apre la finestra di dialogo delle impostazioni, consentendo di configurare varie opzioni dell’applicazione, quali dimensione del buffer, multi-threading e preferenze di operazione.",
 "Botão Definições: abre a caixa de diálogo de definições, permitindo configurar várias opções da aplicação, como tamanho do buffer, multi-threading e preferências de operação.",
 "Botão Configurações: abre a caixa de diálogo de configurações, permitindo configurar várias opções do aplicativo, como tamanho do buffer, multithreading e preferências de operação.",
 "Knop Instellingen: opent het instellingendialoog, zodat u verschillende opties voor de toepassing kunt configureren, zoals buffergrootte, multi-threading en bedrijfsvoorkeuren.",
 "Knappen Inställningar: öppnar inställningsdialogen och låter dig konfigurera olika alternativ för programmet, t.ex. bufferstorlek, multi-threading och åtgärdspreferenser.",
 "Knapp Innstillinger: åpner innstillingsdialogen og lar deg konfigurere ulike alternativer for applikasjonen, som bufferstørrelse, multi-tråding og operasjonspreferanser.",
 "Knap Indstillinger: åbner indstillingsdialogen og lader dig konfigurere forskellige indstillinger for programmet, såsom bufferstørrelse, multi-threading og handlingspræferencer.",
 "Asetukset-painike: avaa asetusvalintaikkunan, jolloin voit määrittää sovelluksen eri asetuksia, kuten puskurin koon, monisäikeisyyden ja toiminta-asetukset.",
 "Przycisk Ustawienia: otwiera okno dialogowe ustawień, pozwalając skonfigurować różne opcje aplikacji, takie jak rozmiar bufora, wielowątkowość i preferencje operacji.",
 "Tlačítko Nastavení: otevře dialog nastavení a umožní vám nakonfigurovat různé možnosti aplikace, např. velikost vyrovnávací paměti, vícevláknovost a preference operací.",
 "Beállítások gomb: megnyitja a beállítások párbeszédpanelt, lehetővé téve az alkalmazás különféle beállításainak – például pufferméret, többszálúság és műveleti beállítások – konfigurálását.",
 "Buton Setări: deschide fereastra de dialog setări, permițându-vă să configurați diverse opțiuni ale aplicației, cum ar fi dimensiunea buffer-ului, multi-threading-ul și preferințele de operare."),

                    ["About Button: This button opens the 'About' dialog, providing information about the application, its version, and the developer."] =
("Bouton À propos : ouvre la boîte de dialogue « À propos », fournissant des informations sur l’application, sa version et le développeur.",
 "Schaltfläche „Info“: öffnet den Dialog „Info“, der Informationen über die Anwendung, ihre Version und den Entwickler liefert.",
 "Botón Acerca de: abre el cuadro de diálogo 'Acerca de', proporcionando información sobre la aplicación, su versión y el desarrollador.",
 "Pulsante Informazioni: apre la finestra di dialogo 'Informazioni', fornendo informazioni sull’applicazione, la sua versione e lo sviluppatore.",
 "Botão Acerca de: abre a caixa de diálogo 'Acerca de', fornecendo informações sobre a aplicação, a sua versão e o programador.",
 "Botão Sobre: abre a caixa de diálogo 'Sobre', fornecendo informações sobre o aplicativo, sua versão e o desenvolvedor.",
 "Knop Over: opent het dialoogvenster 'Over', met informatie over de toepassing, de versie en de ontwikkelaar.",
 "Knappen Om: öppnar dialogrutan 'Om' och ger information om programmet, dess version och utvecklaren.",
 "Knapp Om: åpner dialogboksen 'Om' og gir informasjon om applikasjonen, dens versjon og utvikleren.",
 "Knap Om: åbner dialogboksen 'Om' og giver oplysninger om programmet, dets version og udvikleren.",
 "Tietoja-painike: avaa Tietoja-valintaikkunan, joka näyttää tietoja sovelluksesta, sen versiosta ja kehittäjästä.",
 "Przycisk O programie: otwiera okno dialogowe 'O programie', zawierające informacje o aplikacji, jej wersji i deweloperze.",
 "Tlačítko O aplikaci: otevře dialog 'O aplikaci', který poskytuje informace o aplikaci, její verzi a vývojáři.",
 "Névjegy gomb: megnyitja a 'Névjegy' párbeszédpanelt, amely információkat nyújt az alkalmazásról, annak verziójáról és a fejlesztőről.",
 "Buton Despre: deschide fereastra de dialog 'Despre', oferind informații despre aplicație, versiunea sa și dezvoltator."),

                    ["Minimize Button: This button minimizes the application to the taskbar or the system tray, allowing you to keep it running in the background without closing it."] =
("Bouton Réduire : réduit l’application dans la barre des tâches ou la zone de notification, vous permettant de la laisser s’exécuter en arrière-plan sans la fermer.",
 "Schaltfläche „Minimieren“: minimiert die Anwendung in die Taskleiste oder das Benachrichtigungsfeld, sodass Sie sie im Hintergrund weiter ausführen können, ohne sie zu schließen.",
 "Botón Minimizar: minimiza la aplicación en la barra de tareas o la bandeja del sistema, permitiéndole mantenerla ejecutándose en segundo plano sin cerrarla.",
 "Pulsante Minimizza: riduce l’applicazione nella barra delle applicazioni o nell’area di notifica, consentendovi di lasciarla in esecuzione in background senza chiuderla.",
 "Botão Minimizar: minimiza a aplicação na barra de tarefas ou na bandeja do sistema, permitindo que continue a ser executada em segundo plano sem a fechar.",
 "Botão Minimizar: minimiza o aplicativo na barra de tarefas ou na bandeja do sistema, permitindo que ele continue sendo executado em segundo plano sem ser fechado.",
 "Knop Minimaliseren: minimaliseert de toepassing naar de taakbalk of het systeemvak, zodat u deze op de achtergrond kunt laten uitvoeren zonder deze te sluiten.",
 "Knappen Minimera: minimerar programmet till aktivitetsfältet eller meddelandefältet, så att du kan låta det köras i bakgrunden utan att stänga det.",
 "Knapp Minimer: minimerer applikasjonen til oppgavelinjen eller systemkurven, slik at du kan la den kjøre i bakgrunnen uten å lukke den.",
 "Knap Minimér: minimerer programmet til proceslinjen eller systembakken, så du kan lade det køre i baggrunden uden at lukke det.",
 "Pienennä-painike: pienentää sovelluksen tehtäväpalkkiin tai ilmoitusalueelle, jolloin se voi jäädä taustalle käyntiin sulkematta.",
 "Przycisk Minimalizuj: minimalizuje aplikację do paska zadań lub zasobnika systemowego, pozwalając zachować jej działanie w tle bez zamykania.",
 "Tlačítko Minimalizovat: minimalizuje aplikaci do hlavního panelu nebo oznamovací oblasti, což vám umožní ponechat ji spuštěnou na pozadí bez zavírání.",
 "Kis méret gomb: minimalizálja az alkalmazást a tálcára vagy az értesítési területre, így a háttérben futtathatja anélkül, hogy bezárná.",
 "Buton Minimizare: minimizează aplicația în bara de activități sau în zona de notificare, permițându-vă să o lăsați să ruleze în fundal fără a o închide."),

                    ["Exit Button: This button closes the application. If the 'Minimize to System Tray' option is enabled, it will minimize the application instead of closing it."] =
("Bouton Quitter : ferme l’application. Si l’option « Réduire dans la barre des tâches » est activée, l’application sera minimisée au lieu d’être fermée.",
 "Schaltfläche „Beenden“: schließt die Anwendung. Wenn die Option „In die Taskleiste minimieren“ aktiviert ist, wird die Anwendung minimiert anstatt sie zu schließen.",
 "Botón Salir: cierra la aplicación. Si la opción 'Minimizar a la bandeja del sistema' está habilitada, minimizará la aplicación en lugar de cerrarla.",
 "Pulsante Esci: chiude l’applicazione. Se l’opzione 'Minimizza nell’area di notifica' è abilitata, l’applicazione verrà minimizzata invece di essere chiusa.",
 "Botão Sair: fecha a aplicação. Se a opção 'Minimizar para a Bandeja do Sistema' estiver ativada, a aplicação será minimizada em vez de ser fechada.",
 "Botão Sair: fecha o aplicativo. Se a opção 'Minimizar para a Bandeja do Sistema' estiver ativada, o aplicativo será minimizado em vez de ser fechado.",
 "Knop Afsluiten: sluit de toepassing. Als de optie 'Minimaliseren naar systeemvak' is ingeschakeld, wordt de toepassing geminimaliseerd in plaats van afgesloten.",
 "Knappen Avsluta: stänger programmet. Om alternativet 'Minimera till meddelandefältet' är aktiverat minimeras programmet i stället för att stängas.",
 "Knapp Avslutt: lukker applikasjonen. Hvis alternativet 'Minimer til systemkurven' er aktivert, minimeres applikasjonen i stedet for å lukkes.",
 "Knap Afslut: lukker programmet. Hvis indstillingen 'Minimér til systembakken' er aktiveret, minimeres programmet i stedet for at blive lukket.",
 "Lopeta-painike: sulkee sovelluksen. Jos 'Pienennä ilmoitusalueelle' -asetus on käytössä, sovellus pienennetään sen sulkemisen sijaan.",
 "Przycisk Zakończ: zamyka aplikację. Jeśli opcja 'Minimalizuj do zasobnika systemowego' jest włączona, aplikacja zostanie zminimalizowana zamiast zamknięta.",
 "Tlačítko Ukončit: ukončí aplikaci. Pokud je povolena možnost 'Minimalizovat do oznamovací oblasti', aplikace se minimalizuje místo toho, aby se zavřela.",
 "Kilépés gomb: bezárja az alkalmazást. Ha a 'Kis méret a rendszertálcára' beállítás engedélyezve van, az alkalmazás kis méretre lesz állítva bezárás helyett.",
 "Buton Ieșire: închide aplicația. Dacă opțiunea 'Minimizare în zona de notificare' este activată, aplicația va fi minimizată în loc să fie închisă."),

                    ["Copy History Tab: This tab shows the history of file operations performed by the application, allowing you to review past activities."] =
("Onglet Historique des copies : affiche l’historique des opérations sur les fichiers effectuées par l’application, vous permettant de consulter les activités passées.",
 "Registerkarte Kopieverlauf: zeigt den Verlauf der von der Anwendung durchgeführten Dateioperationen an, sodass Sie frühere Aktivitäten überprüfen können.",
 "Pestaña Historial de copias: muestra el historial de operaciones de archivos realizadas por la aplicación, permitiéndole revisar actividades pasadas.",
 "Scheda Cronologia copie: mostra la cronologia delle operazioni sui file eseguite dall’applicazione, consentendovi di rivedere le attività passate.",
 "Separador Histórico de Cópias: apresenta o histórico das operações de ficheiros efetuadas pela aplicação, permitindo rever atividades anteriores.",
 "Aba Histórico de Cópias: exibe o histórico das operações de arquivos realizadas pelo aplicativo, permitindo revisar atividades passadas.",
 "Tabblad Kopiegeschiedenis: toont de geschiedenis van bestandsbewerkingen die door de toepassing zijn uitgevoerd, zodat u eerdere activiteiten kunt bekijken.",
 "Flik Kopieringshistorik: visar historiken över filåtgärder som utförts av programmet och låter dig granska tidigare aktiviteter.",
 "Fane Kopieringshistorikk: viser historikken over filoperasjoner utført av applikasjonen, slik at du kan se gjennom tidligere aktiviteter.",
 "Fane Kopiéringshistorik: viser historikken over filhandlinger, der er udført af programmet, så du kan gennemgå tidligere aktiviteter.",
 "Kopioinnin historia -välilehti: näyttää sovelluksen suorittamien tiedostotoimintojen historian, jolloin voit tarkastella aiempia toimia.",
 "Karta Historia kopiowania: wyświetla historię operacji na plikach wykonanych przez aplikację, pozwalając przeglądać wcześniejsze działania.",
 "Karta Historie kopírování: zobrazuje historii operací se soubory provedených aplikací, což vám umožní zkontrolovat dřívější aktivity.",
 "Másolás előzményei lap: megjeleníti az alkalmazás által végrehajtott fájlműveletek előzményeit, így áttekintheti a korábbi tevékenységeket.",
 "Filă Istoric copiere: afișează istoricul operațiunilor de fișiere efectuate de aplicație, permițându-vă să revizuiți activitățile trecute."),

                    ["Totals Tab: This tab provides a summary of the total files processed, total data transferred, and other relevant statistics for the operation."] =
("Onglet Totaux : fournit un résumé du nombre total de fichiers traités, du volume total de données transférées et d’autres statistiques pertinentes de l’opération.",
 "Registerkarte Summen: bietet eine Zusammenfassung der insgesamt verarbeiteten Dateien, der übertragenen Gesamtdaten und anderer relevanter Statistiken für den Vorgang.",
 "Pestaña Totales: proporciona un resumen del total de archivos procesados, datos totales transferidos y otras estadísticas relevantes de la operación.",
 "Scheda Totali: fornisce un riepilogo del numero totale di file elaborati, dei dati totali trasferiti e di altre statistiche pertinenti per l’operazione.",
 "Separador Totais: fornece um resumo do total de ficheiros processados, dados totais transferidos e outras estatísticas relevantes da operação.",
 "Aba Totais: fornece um resumo do total de arquivos processados, dados totais transferidos e outras estatísticas relevantes da operação.",
 "Tabblad Totalen: biedt een overzicht van het totaal aantal verwerkte bestanden, de totaal overgedragen gegevens en andere relevante statistieken voor de bewerking.",
 "Flik Totaler: ger en sammanfattning av totalt antal bearbetade filer, total överförd data och annan relevant statistik för åtgärden.",
 "Fane Totaler: gir en oppsummering av totalt antall behandlede filer, total overført data og annen relevant statistikk for operasjonen.",
 "Fane Totaler: giver et resumé af det samlede antal behandlede filer, de samlede overførte data og anden relevant statistik for handlingen.",
 "Yhteenveto-välilehti: antaa yhteenvedon käsitellyistä tiedostoista yhteensä, siirretyistä tiedoista ja muista toimintoa koskevista tilastoista.",
 "Karta Sumy: zawiera podsumowanie całkowitej liczby przetworzonych plików, całkowitej ilości przesłanych danych oraz innych istotnych statystyk operacji.",
 "Karta Součty: poskytuje souhrn celkového počtu zpracovaných souborů, celkových přenesených dat a dalších relevantních statistik operace.",
 "Összesítés lap: áttekintést nyújt az összes feldolgozott fájlról, az átivitt adatokról és a művelet egyéb fontos statisztikáiról.",
 "Filă Totaluri: oferă un rezumat al fișierelor procesate în total, al datelor transferate și al altor statistici relevante pentru operațiune."),


                    ["Copy That v1.0 Pro By: Havoc"] =
("Copy That v1.0 Pro par Havoc",
 "Copy That v1.0 Pro von Havoc",
 "Copy That v1.0 Pro por Havoc",
 "Copy That v1.0 Pro di Havoc",
 "Copy That v1.0 Pro por Havoc",
 "Copy That v1.0 Pro por Havoc",
 "Copy That v1.0 Pro door Havoc",
 "Copy That v1.0 Pro av Havoc",
 "Copy That v1.0 Pro av Havoc",
 "Copy That v1.0 Pro af Havoc",
 "Copy That v1.0 Pro – Havoc",
 "Copy That v1.0 Pro autorstwa Havoc",
 "Copy That v1.0 Pro od Havoc",
 "Copy That v1.0 Pro – készítette: Havoc",
 "Copy That v1.0 Pro de Havoc"),



                    ["Current tab page: Copy History Page."] =
("Page d’onglet actuelle : Page Historique des copies.",
 "Aktuelle Registerkarte: Kopieverlauf-Seite.",
 "Página de pestaña actual: Página Historial de copias.",
 "Pagina di scheda attuale: Pagina Cronologia copie.",
 "Página de separador atual: Página Histórico de Cópias.",
 "Página de aba atual: Página Histórico de Cópias.",
 "Huidige tabbladpagina: Kopiegeschiedenis-pagina.",
 "Aktuellt fliksidor: Kopieringshistoriksida.",
 "Gjeldende fane side: Kopieringshistorikkside.",
 "Aktuel fane side: Kopiéringshistorikside.",
 "Nykyinen välilehti: Kopiointihistoriasivu.",
 "Bieżąca strona karty: Strona Historia kopiowania.",
 "Aktuální stránka karty: Stránka Historie kopírování.",
 "Jelenlegi lap oldal: Másolás előzményei oldal.",
 "Pagina curentă filă: Pagina Istoric copiere."),

                    ["Current tab page: Exclusions Page."] =
("Page d’onglet actuelle : Page Exclusions.",
 "Aktuelle Registerkarte: Ausschlüsse-Seite.",
 "Página de pestaña actual: Página Exclusiones.",
 "Pagina di scheda attuale: Pagina Esclusioni.",
 "Página de separador atual: Página Exclusões.",
 "Página de aba atual: Página Exclusões.",
 "Huidige tabbladpagina: Uitsluitingen-pagina.",
 "Aktuellt fliksidor: Undantagssida.",
 "Gjeldende fane side: Ekskluderingside.",
 "Aktuel fane side: Ekskluderingsside.",
 "Nykyinen välilehti: Poikkeukset-sivu.",
 "Bieżąca strona karty: Strona Wykluczenia.",
 "Aktuální stránka karty: Stránka Vyloučení.",
 "Jelenlegi lap oldal: Kizárások oldal.",
 "Pagina curentă filă: Pagina Excluderi."),

                    ["Current tab page: Home Page."] =
("Page d’onglet actuelle : Page d’accueil.",
 "Aktuelle Registerkarte: Startseite.",
 "Página de pestaña actual: Página Inicio.",
 "Pagina di scheda attuale: Pagina Home.",
 "Página de separador atual: Página Inicial.",
 "Página de aba atual: Página Inicial.",
 "Huidige tabbladpagina: Startpagina.",
 "Aktuellt fliksidor: Startsida.",
 "Gjeldende fane side: Hjemmeside.",
 "Aktuel fane side: Hjemmeside.",
 "Nykyinen välilehti: Aloitussivu.",
 "Bieżąca strona karty: Strona główna.",
 "Aktuální stránka karty: Domovská stránka.",
 "Jelenlegi lap oldal: Főoldal.",
 "Pagina curentă filă: Pagina Principală."),

                    ["Current tab page: Settings Page."] =
("Page d’onglet actuelle : Page Paramètres.",
 "Aktuelle Registerkarte: Einstellungsseite.",
 "Página de pestaña actual: Página Configuración.",
 "Pagina di scheda attuale: Pagina Impostazioni.",
 "Página de separador atual: Página Definições.",
 "Página de aba atual: Página Configurações.",
 "Huidige tabbladpagina: Instellingen-pagina.",
 "Aktuellt fliksidor: Inställningssida.",
 "Gjeldende fane side: Innstillinger-side.",
 "Aktuel fane side: Indstillinger-side.",
 "Nykyinen välilehti: Asetukset-sivu.",
 "Bieżąca strona karty: Strona ustawień.",
 "Aktuální stránka karty: Stránka nastavení.",
 "Jelenlegi lap oldal: Beállítások oldal.",
 "Pagina curentă filă: Pagina Setări."),

                    ["Current tab page: Skipped Files Page."] =
("Page d’onglet actuelle : Page Fichiers ignorés.",
 "Aktuelle Registerkarte: Übersprungene Dateien-Seite.",
 "Página de pestaña actual: Página Archivos omitidos.",
 "Pagina di scheda attuale: Pagina File saltati.",
 "Página de separador atual: Página Ficheiros Ignorados.",
 "Página de aba atual: Página Arquivos Ignorados.",
 "Huidige tabbladpagina: Overgeslagen bestanden-pagina.",
 "Aktuellt fliksidor: Överhoppade filer-sida.",
 "Gjeldende fane side: Hoppet over filer-side.",
 "Aktuel fane side: Ignorerede filer-side.",
 "Nykyinen välilehti: Ohitetut tiedostot -sivu.",
 "Bieżąca strona karty: Strona Pominięte pliki.",
 "Aktuální stránka karty: Stránka Přeskočené soubory.",
 "Jelenlegi lap oldal: Kihagyott fájlok oldal.",
 "Pagina curentă filă: Pagina Fișiere ignorate."),

                    ["Current tab page: Multi-Thread Page."] =
("Page d’onglet actuelle : Page Multi-thread.",
 "Aktuelle Registerkarte: Multi-Thread-Seite.",
 "Página de pestaña actual: Página Multi-hilo.",
 "Pagina di scheda attuale: Pagina Multi-thread.",
 "Página de separador atual: Página Multi-thread.",
 "Página de aba atual: Página Multi-thread.",
 "Huidige tabbladpagina: Multi-thread-pagina.",
 "Aktuellt fliksidor: Multi-thread-sida.",
 "Gjeldende fane side: Multi-tråd-side.",
 "Aktuel fane side: Multi-thread-side.",
 "Nykyinen välilehti: Monisäikeinen-sivu.",
 "Bieżąca strona karty: Strona Wielowątkowe.",
 "Aktuální stránka karty: Stránka Vícevlákno.",
 "Jelenlegi lap oldal: Többszálúság oldal.",
 "Pagina curentă filă: Pagina Multi-thread."),

                    ["Current tab page: Allowed/Excluded Page."] =
("Page d’onglet actuelle : Page Autorisés/Exclus.",
 "Aktuelle Registerkarte: Zulässige/Ausgeschlossene-Seite.",
 "Página de pestaña actual: Página Permitidos/Excluidos.",
 "Pagina di scheda attuale: Pagina Consentiti/Esclusi.",
 "Página de separador atual: Página Permitidos/Excluídos.",
 "Página de aba atual: Página Permitidos/Excluídos.",
 "Huidige tabbladpagina: Toegestaan/Uitgesloten-pagina.",
 "Aktuellt fliksidor: Tillåtna/Exkluderade-sida.",
 "Gjeldende fane side: Tillatte/Ekskluderte-side.",
 "Aktuel fane side: Tilladte/Ekskluderede-side.",
 "Nykyinen välilehti: Sallitut/Poissuljetut-sivu.",
 "Bieżąca strona karty: Strona Dozwane/Wykluczone.",
 "Aktuální stránka karty: Stránka Povolené/Vyloučené.",
 "Jelenlegi lap oldal: Engedélyezettek/Kizártak oldal.",
 "Pagina curentă filă: Pagina Permise/Excluse."),
                };


            // somewhere in your static Translator class
            public static string Title(bool pro, string suffix)
            {
                string en = pro
                    ? $"Copy That v1.0 Pro By: Havoc - {suffix}"
                    : $"Copy That v1.0 By: Havoc - {suffix}";

                return CurrentLanguage switch
                {
                    "fr" => pro
                        ? $"Copy That v1.0 Pro Par : Havoc - {suffix}"
                        : $"Copy That v1.0 Par : Havoc - {suffix}",
                    "de" => pro
                        ? $"Copy That v1.0 Pro Von : Havoc - {suffix}"
                        : $"Copy That v1.0 Von : Havoc - {suffix}",
                    "es" => pro
                        ? $"Copy That v1.0 Pro Por : Havoc - {suffix}"
                        : $"Copy That v1.0 Por : Havoc - {suffix}",
                    "it" => pro ? $"Copy That v1.0 Pro Di: Havoc - {suffix}" : $"Copy That v1.0 Di: Havoc - {suffix}",
                    "pt-PT" => pro ? $"Copy That v1.0 Pro Por: Havoc - {suffix}" : $"Copy That v1.0 Por: Havoc - {suffix}",
                    "pt-BR" => pro ? $"Copy That v1.0 Pro Por: Havoc - {suffix}" : $"Copy That v1.0 Por: Havoc - {suffix}",
                    "nl" => pro ? $"Copy That v1.0 Pro Door: Havoc - {suffix}" : $"Copy That v1.0 Door: Havoc - {suffix}",
                    "sv" => pro ? $"Copy That v1.0 Pro Av: Havoc - {suffix}" : $"Copy That v1.0 Av: Havoc - {suffix}",
                    "no" => pro ? $"Copy That v1.0 Pro Av: Havoc - {suffix}" : $"Copy That v1.0 Av: Havoc - {suffix}",
                    "da" => pro ? $"Copy That v1.0 Pro Af: Havoc - {suffix}" : $"Copy That v1.0 Af: Havoc - {suffix}",
                    "fi" => pro ? $"Copy That v1.0 Pro Tekijä: Havoc - {suffix}" : $"Copy That v1.0 Tekijä: Havoc - {suffix}",
                    "pl" => pro ? $"Copy That v1.0 Pro Przez: Havoc - {suffix}" : $"Copy That v1.0 Przez: Havoc - {suffix}",
                    "cs" => pro ? $"Copy That v1.0 Pro Od: Havoc - {suffix}" : $"Copy That v1.0 Od: Havoc - {suffix}",
                    "hu" => pro ? $"Copy That v1.0 Pro Készítette: Havoc - {suffix}" : $"Copy That v1.0 Készítette: Havoc - {suffix}",
                    "ro" => pro ? $"Copy That v1.0 Pro De: Havoc - {suffix}" : $"Copy That v1.0 De: Havoc - {suffix}",
                    _ => en
                };
            }


            public static string Get(string english)
            {
                System.Diagnostics.Debug.WriteLine($"=== Translator.Get Debug ===");
                System.Diagnostics.Debug.WriteLine($"Input: '{english ?? "NULL"}'");
                System.Diagnostics.Debug.WriteLine($"CurrentLanguage: '{CurrentLanguage ?? "NULL"}'");

                if (string.IsNullOrEmpty(english))
                {
                    System.Diagnostics.Debug.WriteLine("ERROR: Input is null or empty!");
                    return string.Empty;
                }

                if (string.IsNullOrEmpty(CurrentLanguage) || CurrentLanguage == "en")
                {
                    System.Diagnostics.Debug.WriteLine("Returning English (default)");
                    return english;
                }

                if (!_map.TryGetValue(english, out var t))
                {
                    System.Diagnostics.Debug.WriteLine("ERROR: Key not found in dictionary!");
                    return english;
                }

                System.Diagnostics.Debug.WriteLine($"Found translation: fr='{t.fr}', de='{t.de}', es='{t.es}'");

                var result = CurrentLanguage switch
                {
                    "fr" => t.fr ?? english,
                    "de" => t.de ?? english,
                    "es" => t.es ?? english,
                    "it" => t.it ?? english,
                    "pt-PT" => t.pt ?? english,   // Portugal
                    "pt-BR" => t.ptBR ?? english, // Brazil
                    "nl" => t.nl ?? english,
                    "sv" => t.sv ?? english,
                    "no" => t.no ?? english,
                    "da" => t.da ?? english,
                    "fi" => t.fi ?? english,
                    "pl" => t.pl ?? english,
                    "cs" => t.cs ?? english,
                    "hu" => t.hu ?? english,
                    "ro" => t.ro ?? english,
                    _ => english
                };


                System.Diagnostics.Debug.WriteLine($"Returning: '{result ?? "NULL"}'");
                return result ?? english;  // ← Extra safety
            }
        };




        private void languageComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (_isUpdatingLanguage || _isLoadingForm) return;
            _isUpdatingLanguage = true;

            try
            {
                string key, culture;
                switch (languageComboBox.SelectedIndex)
                {
                    case 1: key = "French"; culture = "fr-FR"; break;
                    case 2: key = "German"; culture = "de-DE"; break;
                    case 3: key = "Spanish"; culture = "es-ES"; break;
                    case 4: key = "Italian"; culture = "it-IT"; break;
                    case 5: key = "Portuguese - Portugal"; culture = "pt-PT"; break;
                    case 6: key = "Portuguese - Brazil"; culture = "pt-BR"; break;
                    case 7: key = "Dutch"; culture = "nl-NL"; break;
                    case 8: key = "Swedish"; culture = "sv-SE"; break;
                    case 9: key = "Norwegian"; culture = "no"; break; // Use "no" instead of "nb-NO"
                    case 10: key = "Danish"; culture = "da-DK"; break;
                    case 11: key = "Finnish"; culture = "fi-FI"; break;
                    case 12: key = "Polish"; culture = "pl-PL"; break;
                    case 13: key = "Czech"; culture = "cs-CZ"; break;
                    case 14: key = "Hungarian"; culture = "hu-HU"; break;
                    case 15: key = "Romanian"; culture = "ro-RO"; break;
                    default: key = "English"; culture = "en-US"; break;
                }

                CopyThatProgram.Properties.Settings.Default.Language = key;
                CopyThatProgram.Properties.Settings.Default.Save();

                // 3️⃣ Set current culture
                Thread.CurrentThread.CurrentUICulture = new CultureInfo(culture);
                Thread.CurrentThread.CurrentCulture = new CultureInfo(culture);

                this.SuspendLayout();

                languageComboBox.SelectedIndexChanged -= languageComboBox_SelectedIndexChanged;

                string[] items = key switch
                {
                    "Spanish" => new[] { "Inglés", "Francés", "Deutsch", "Español", "Italiano", "Portugués (Portugal)", "Portugués (Brasil)", "Holandés", "Sueco", "Noruego", "Danés", "Finlandés", "Polaco", "Checo", "Húngaro", "Rumano" },
                    "French" => new[] { "Anglais", "Français", "Allemand", "Espagnol", "Italien", "Portugais (Portugal)", "Portugais (Brésil)", "Néerlandais", "Suédois", "Norvégien", "Danois", "Finnois", "Polonais", "Tchèque", "Hongrois", "Roumain" },
                    "German" => new[] { "Englisch", "Französisch", "Deutsch", "Spanisch", "Italienisch", "Portugiesisch (Portugal)", "Portugiesisch (Brasilien)", "Niederländisch", "Schwedisch", "Norwegisch", "Dänisch", "Finnisch", "Polnisch", "Tschechisch", "Ungarisch", "Rumänisch" },
                    "Italian" => new[] { "Inglese", "Francese", "Tedesco", "Spagnolo", "Italiano", "Portoghese (Portogallo)", "Portoghese (Brasile)", "Olandese", "Svedese", "Norvegese", "Danese", "Finlandese", "Polacco", "Ceco", "Ungherese", "Rumeno" },
                    "Portuguese - Portugal" => new[] { "Inglês", "Francês", "Alemão", "Espanhol", "Italiano", "Português (Portugal)", "Português (Brasil)", "Holandês", "Sueco", "Norueguês", "Dinamarquês", "Finlandês", "Polaco", "Checo", "Húngaro", "Romeno" },
                    "Portuguese - Brazil" => new[] { "Inglês", "Francês", "Alemão", "Espanhol", "Italiano", "Português (Portugal)", "Português (Brasil)", "Holandês", "Sueco", "Norueguês", "Dinamarquês", "Finlandês", "Polonês", "Tcheco", "Húngaro", "Romeno" },
                    "Dutch" => new[] { "Engels", "Frans", "Duits", "Spaans", "Italiaans", "Portugees (Portugal)", "Portugees (Brazilië)", "Nederlands", "Zweeds", "Noors", "Deens", "Fins", "Pools", "Tsjechisch", "Hongaars", "Roemeens" },
                    "Swedish" => new[] { "Engelska", "Franska", "Tyska", "Spanska", "Italienska", "Portugisiska (Portugal)", "Portugisiska (Brasilien)", "Nederländska", "Svenska", "Norska", "Danska", "Finska", "Polska", "Tjeckiska", "Ungerska", "Rumänska" },
                    "Norwegian" => new[] { "Engelsk", "Fransk", "Tysk", "Spansk", "Italiensk", "Portugisisk (Portugal)", "Portugisisk (Brasil)", "Nederlandsk", "Svensk", "Norsk", "Dansk", "Finsk", "Polsk", "Tsjekkisk", "Ungarsk", "Rumensk" },
                    "Danish" => new[] { "Engelsk", "Fransk", "Tysk", "Spansk", "Italiensk", "Portugisisk (Portugal)", "Portugisisk (Brasilien)", "Hollandsk", "Svensk", "Norsk", "Dansk", "Finsk", "Polsk", "Tjekkisk", "Ungarsk", "Rumænsk" },
                    "Finnish" => new[] { "Englanti", "Ranska", "Saksa", "Espanja", "Italia", "Portugali (Portugali)", "Portugali (Brasilia)", "Hollanti", "Ruotsi", "Norja", "Tanska", "Suomi", "Puola", "Tšekki", "Unkari", "Romania" },
                    "Polish" => new[] { "Angielski", "Francuski", "Niemiecki", "Hiszpański", "Włoski", "Portugalski (Portugalia)", "Portugalski (Brazylia)", "Holenderski", "Szwedzki", "Norweski", "Duński", "Fiński", "Polski", "Czeski", "Węgierski", "Rumuński" },
                    "Czech" => new[] { "Angličtina", "Francouzština", "Němčina", "Španělština", "Italština", "Portugalština (Portugalsko)", "Portugalština (Brazílie)", "Nizozemština", "Švédština", "Norština", "Dánština", "Finština", "Polština", "Čeština", "Maďarština", "Rumunština" },
                    "Hungarian" => new[] { "Angol", "Francia", "Német", "Spanyol", "Olasz", "Portugál (Portugália)", "Portugál (Brazília)", "Holland", "Svéd", "Norvég", "Dán", "Finn", "Lengyel", "Cseh", "Magyar", "Román" },
                    "Romanian" => new[] { "Engleză", "Franceză", "Germană", "Spaniolă", "Italiană", "Portugheză (Portugalia)", "Portugheză (Brazilia)", "Olandeză", "Suedeză", "Norvegiană", "Daneză", "Finlandeză", "Poloneză", "Cehă", "Maghiară", "Română" },
                    _ => new[] { "English", "French", "German", "Spanish", "Italian", "Portuguese - Portugal", "Portuguese - Brazil", "Dutch", "Swedish", "Norwegian", "Danish", "Finnish", "Polish", "Czech", "Hungarian", "Romanian" }
                };
                languageComboBox.Items.Clear();
                languageComboBox.Items.AddRange(items);

                languageComboBox.SelectedIndex = Array.IndexOf(items, items.FirstOrDefault(i =>
                    (key == "English" && i == "English") ||
                    (key == "French" && i == "Français") ||
                    (key == "German" && i == "Deutsch") ||
                    (key == "Spanish" && i == "Español") ||
                    (key == "Italian" && i == "Italiano") ||
                    (key == "Portuguese - Portugal" && i == "Português (Portugal)") ||
                    (key == "Portuguese - Brazil" && i == "Português (Brasil)") ||
                    (key == "Dutch" && i == "Nederlands") ||
                    (key == "Swedish" && i == "Svenska") ||
                    (key == "Norwegian" && i == "Norsk") ||
                    (key == "Danish" && i == "Dansk") ||
                    (key == "Finnish" && i == "Suomi") ||
                    (key == "Polish" && i == "Polski") ||
                    (key == "Czech" && i == "Čeština") ||
                    (key == "Hungarian" && i == "Magyar") ||
                    (key == "Romanian" && i == "Română")
                ));

                Translator.CurrentLanguage = key switch
                {
                    "French" => "fr",
                    "German" => "de",
                    "Spanish" => "es",
                    "Italian" => "it",
                    "Portuguese - Portugal" => "pt-PT",
                    "Portuguese - Brazil" => "pt-BR",
                    "Dutch" => "nl",
                    "Swedish" => "sv",
                    "Norwegian" => "no",
                    "Danish" => "da",
                    "Finnish" => "fi",
                    "Polish" => "pl",
                    "Czech" => "cs",
                    "Hungarian" => "hu",
                    "Romanian" => "ro",
                    _ => "en"
                };
                var resMan = new ComponentResourceManager(typeof(mainForm));
                ApplyAllResources(resMan);

                switch (key)
                {
                    case "Spanish": ApplyManualSpanishUpdates(); break;
                    case "French": ApplyManualFrenchUpdates(); break;
                    case "German": ApplyManualGermanUpdates(); break;
                    case "Italian": ApplyManualItalianUpdates(); break;
                    case "Portuguese - Portugal": ApplyManualPortuguesePortugalUpdates(); break;
                    case "Portuguese - Brazil": ApplyManualPortugueseBrazilUpdates(); break;
                    case "Dutch": ApplyManualDutchUpdates(); break;
                    case "Swedish": ApplyManualSwedishUpdates(); break;
                    case "Norwegian": ApplyManualNorwegianUpdates(); break;
                    case "Danish": ApplyManualDanishUpdates(); break;
                    case "Finnish": ApplyManualFinnishUpdates(); break;
                    case "Polish": ApplyManualPolishUpdates(); break;
                    case "Czech": ApplyManualCzechUpdates(); break;
                    case "Hungarian": ApplyManualHungarianUpdates(); break;
                    case "Romanian": ApplyManualRomanianUpdates(); break;
                    default: ApplyManualEnglishUpdates(); break;
                }

                _savedSkinName = CopyThatProgram.Properties.Settings.Default.Skin ?? "Light Mode";
                UpdateSkinsComboBoxItems(key);
                SelectSkinInCombo(_savedSkinName);

                if (_savedSkinName == "Custom Color")
                {
                    var savedBack = CopyThatProgram.Properties.Settings.Default.CustomBackColor;
                    var savedFore = CopyThatProgram.Properties.Settings.Default.CustomForeColor;
                    ApplySkin(savedFore != Color.Empty && savedBack != Color.Empty
                              ? "Custom Color"
                              : "Light Mode",
                              savedFore, savedBack);
                }
                else
                {
                    ApplySkin(_savedSkinName);
                }

                languageLabel.Left = skinsLabel.Right - languageLabel.Width;
                fromLabel.Left = fileNameLabel.Right - fromLabel.Width;
                targetLabel.Left = fromLabel.Right - targetLabel.Width;

                this.ResumeLayout(true);

                languageComboBox.SelectedIndexChanged += languageComboBox_SelectedIndexChanged;
            }
            catch (Exception ex)
            {
                MessageBox.Show(Translator.Get($"Error changing language: {ex.Message}"), Translator.Get("Error"),
                                MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                _isUpdatingLanguage = false;
            }
        }
        private void ApplyAllResources(ComponentResourceManager resMan)
        {
            foreach (TabPage page in tabControl1.TabPages)
            {
                ApplyResourcesToControl(resMan, page);
            }
            resMan.ApplyResources(this, "$this");
        }

        // ==================  SPANISH  ==================
        private void ApplyManualSpanishUpdates()
        {
            try
            {
                /* ---------- grid headers ---------- */
                dataGridView1.Columns[0].HeaderText = "Nombre del Archivo";
                dataGridView1.Columns[1].HeaderText = "Ruta del Archivo";
                dataGridView1.Columns[2].HeaderText = "Tipo";
                dataGridView1.Columns[3].HeaderText = "Tamaño del Archivo";
                dataGridView1.Columns[4].HeaderText = "Estado";

                //dataGridView2.Columns[0].HeaderText = "Nombre del Archivo";
                //dataGridView2.Columns[1].HeaderText = "Ruta del Archivo";
                //dataGridView2.Columns[2].HeaderText = "Tipo";
                //dataGridView2.Columns[3].HeaderText = "Tamaño del Archivo";
                //dataGridView2.Columns[4].HeaderText = "Estado";

                copyHistoryDGV.Columns[0].HeaderText = "Tipo de operación";
                copyHistoryDGV.Columns[1].HeaderText = "Ruta(s) de archivo de origen";
                copyHistoryDGV.Columns[2].HeaderText = "Ruta(s) de archivo de destino";
                copyHistoryDGV.Columns[3].HeaderText = "Tamaño total de carpeta(s)";

                skippedDataGridView.Columns[0].HeaderText = "Estado";
                skippedDataGridView.Columns[1].HeaderText = "Ruta del archivo de origen";
                skippedDataGridView.Columns[2].HeaderText = "Ruta del archivo de destino";
                skippedDataGridView.Columns[3].HeaderText = "Nombre del archivo";
                skippedDataGridView.Columns[4].HeaderText = "Tamaño del archivo";

                filesDataGridView.Columns[0].HeaderText = "Nombre";
                filesDataGridView.Columns[1].HeaderText = "Ruta";
                filesDataGridView.Columns[2].HeaderText = "Tipo";
                filesDataGridView.Columns[3].HeaderText = "Tamaño";
                filesDataGridView.Columns[4].HeaderText = "Estado";

                /* ---------- other controls ---------- */
                searchTextBox.PlaceholderText = "Ingrese el nombre del archivo o carpeta a buscar...";

                onFinishComboBox.Items.Clear();
                onFinishMultiComboBox.Items.Clear();
                onFinishComboBox.Items.AddRange(new[]{ "No hacer nada", "Suspender", "Cerrar sesión",
                                      "Salir del programa", "Apagar" });

                onFinishMultiComboBox.Items.AddRange(new[]{ "No hacer nada", "Suspender", "Cerrar sesión",
                                      "Salir del programa", "Apagar" });
                if (onFinishComboBox.SelectedIndex == -1) onFinishComboBox.SelectedIndex = 0;
                if (onFinishMultiComboBox.SelectedIndex == -1) onFinishMultiComboBox.SelectedIndex = 0;
                copyMoveDeleteComboBox.Items.Clear();
                copyMoveDeleteComboBox.Items.AddRange(new[] { "Copiar archivos", "Mover archivos", "Borrado seguro" });
                if (copyMoveDeleteComboBox.SelectedIndex == -1) copyMoveDeleteComboBox.SelectedIndex = 0;
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error updating Spanish UI: {ex.Message}");
            }
        }

        // ==================  ENGLISH  ==================
        private void ApplyManualEnglishUpdates()
        {
            try
            {
                /* ---------- grid headers ---------- */
                dataGridView1.Columns[0].HeaderText = "File's Name";
                dataGridView1.Columns[1].HeaderText = "File's Path";
                dataGridView1.Columns[2].HeaderText = "Type";
                dataGridView1.Columns[3].HeaderText = "File's Size";
                dataGridView1.Columns[4].HeaderText = "Status";

                //dataGridView2.Columns[0].HeaderText = "File's Name";
                //dataGridView2.Columns[1].HeaderText = "File's Path";
                //dataGridView2.Columns[2].HeaderText = "Type";
                //dataGridView2.Columns[3].HeaderText = "File's Size";
                //dataGridView2.Columns[4].HeaderText = "Status";

                copyHistoryDGV.Columns[0].HeaderText = "Operation Type";
                copyHistoryDGV.Columns[1].HeaderText = "Source File Path(s)";
                copyHistoryDGV.Columns[2].HeaderText = "Destination File Path(s)";
                copyHistoryDGV.Columns[3].HeaderText = "Total Size of Dir(s)";

                skippedDataGridView.Columns[0].HeaderText = "Status";
                skippedDataGridView.Columns[1].HeaderText = "Source File's Path";
                skippedDataGridView.Columns[2].HeaderText = "Destination File's Path";
                skippedDataGridView.Columns[3].HeaderText = "File's Name";
                skippedDataGridView.Columns[4].HeaderText = "File's Size";

                filesDataGridView.Columns[0].HeaderText = "Name";
                filesDataGridView.Columns[1].HeaderText = "Path";
                filesDataGridView.Columns[2].HeaderText = "Type";
                filesDataGridView.Columns[3].HeaderText = "Size";
                filesDataGridView.Columns[4].HeaderText = "Status";

                /* ---------- other controls ---------- */
                searchTextBox.PlaceholderText = "Enter File/Folder Name to Search For...";

                onFinishComboBox.Items.Clear();
                onFinishComboBox.Items.AddRange(new[] { "Do Nothing", "Sleep", "Log Off", "Exit Program", "Shut Down" });
                if (onFinishComboBox.SelectedIndex == -1) onFinishComboBox.SelectedIndex = 0;

                onFinishMultiComboBox.Items.Clear();
                onFinishMultiComboBox.Items.AddRange(new[] { "Do Nothing", "Sleep", "Log Off", "Exit Program", "Shut Down" });
                if (onFinishMultiComboBox.SelectedIndex == -1) onFinishMultiComboBox.SelectedIndex = 0;

                copyMoveDeleteComboBox.Items.Clear();
                copyMoveDeleteComboBox.Items.AddRange(new[] { "Copy Files", "Move Files", "Secure Delete" });
                if (copyMoveDeleteComboBox.SelectedIndex == -1) copyMoveDeleteComboBox.SelectedIndex = 0;

            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error updating English UI: {ex.Message}");
            }
        }


        // ==================  ENGLISH  ==================
        private void ApplyManualFrenchUpdates()
        {
            try
            {
                /* ---------- grid headers ---------- */
                dataGridView1.Columns[0].HeaderText = "Nom du fichier";
                dataGridView1.Columns[1].HeaderText = "Chemin du fichier";
                dataGridView1.Columns[2].HeaderText = "Type";
                dataGridView1.Columns[3].HeaderText = "Taille du fichier";
                dataGridView1.Columns[4].HeaderText = "État";

                //dataGridView2.Columns[0].HeaderText = "Nom du fichier";
                //dataGridView2.Columns[1].HeaderText = "Chemin du fichier";
                //dataGridView2.Columns[2].HeaderText = "Type";
                //dataGridView2.Columns[3].HeaderText = "Taille du fichier";
                //dataGridView2.Columns[4].HeaderText = "État";

                copyHistoryDGV.Columns[0].HeaderText = "Type d'opération";
                copyHistoryDGV.Columns[1].HeaderText = "Chemin(s) source(s)";
                copyHistoryDGV.Columns[2].HeaderText = "Chemin(s) de destination";
                copyHistoryDGV.Columns[3].HeaderText = "Taille totale des répertoires";

                skippedDataGridView.Columns[0].HeaderText = "État";
                skippedDataGridView.Columns[1].HeaderText = "Chemin du fichier source";
                skippedDataGridView.Columns[2].HeaderText = "Chemin du fichier de destination";
                skippedDataGridView.Columns[3].HeaderText = "Nom du fichier";
                skippedDataGridView.Columns[4].HeaderText = "Taille du fichier";

                filesDataGridView.Columns[0].HeaderText = "Nom";
                filesDataGridView.Columns[1].HeaderText = "Chemin";
                filesDataGridView.Columns[2].HeaderText = "Type";
                filesDataGridView.Columns[3].HeaderText = "Taille";
                filesDataGridView.Columns[4].HeaderText = "État";

                /* ---------- other controls ---------- */
                searchTextBox.PlaceholderText = "Rechercher un fichier ou un dossier…";

                onFinishComboBox.Items.Clear();
                onFinishComboBox.Items.AddRange(new[] { "Ne rien faire", "Mettre en veille", "Se déconnecter", "Quitter le programme", "Arrêter l'ordinateur" });
                if (onFinishComboBox.SelectedIndex == -1) onFinishComboBox.SelectedIndex = 0;

                onFinishMultiComboBox.Items.Clear();
                onFinishMultiComboBox.Items.AddRange(new[] { "Ne rien faire", "Mettre en veille", "Se déconnecter", "Quitter le programme", "Arrêter l'ordinateur" });
                if (onFinishMultiComboBox.SelectedIndex == -1) onFinishMultiComboBox.SelectedIndex = 0;

                copyMoveDeleteComboBox.Items.Clear();
                copyMoveDeleteComboBox.Items.AddRange(new[] { "Copier les fichiers", "Déplacer les fichiers", "Suppression sécurisée" });
                if (copyMoveDeleteComboBox.SelectedIndex == -1) copyMoveDeleteComboBox.SelectedIndex = 0;

            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error updating English UI: {ex.Message}");
            }
        }


        // ==================  ENGLISH  ==================
        private void ApplyManualGermanUpdates()
        {
            try
            {
                /* ---------- grid headers ---------- */
                dataGridView1.Columns[0].HeaderText = "Dateiname";
                dataGridView1.Columns[1].HeaderText = "Dateipfad";
                dataGridView1.Columns[2].HeaderText = "Typ";
                dataGridView1.Columns[3].HeaderText = "Dateigröße";
                dataGridView1.Columns[4].HeaderText = "Status";

                //dataGridView2.Columns[0].HeaderText = "Dateiname";
                //dataGridView2.Columns[1].HeaderText = "Dateipfad";
                //dataGridView2.Columns[2].HeaderText = "Typ";
                //dataGridView2.Columns[3].HeaderText = "Dateigröße";
                //dataGridView2.Columns[4].HeaderText = "Status";

                copyHistoryDGV.Columns[0].HeaderText = "Vorgangstyp";
                copyHistoryDGV.Columns[1].HeaderText = "Quellpfad(e)";
                copyHistoryDGV.Columns[2].HeaderText = "Zielpfad(e)";
                copyHistoryDGV.Columns[3].HeaderText = "Gesamtgröße der Ordner";

                skippedDataGridView.Columns[0].HeaderText = "Status";
                skippedDataGridView.Columns[1].HeaderText = "Quellpfad";
                skippedDataGridView.Columns[2].HeaderText = "Zielpfad";
                skippedDataGridView.Columns[3].HeaderText = "Dateiname";
                skippedDataGridView.Columns[4].HeaderText = "Dateigröße";

                filesDataGridView.Columns[0].HeaderText = "Name";
                filesDataGridView.Columns[1].HeaderText = "Pfad";
                filesDataGridView.Columns[2].HeaderText = "Typ";
                filesDataGridView.Columns[3].HeaderText = "Größe";
                filesDataGridView.Columns[4].HeaderText = "Status";

                /* ---------- other controls ---------- */
                searchTextBox.PlaceholderText = "Datei-/Ordnernamen suchen…";

                onFinishComboBox.Items.Clear();
                onFinishComboBox.Items.AddRange(new[] { "Nichts tun", "Ruhezustand", "Abmelden", "Programm beenden", "Herunterfahren" });
                if (onFinishComboBox.SelectedIndex == -1) onFinishComboBox.SelectedIndex = 0;

                onFinishMultiComboBox.Items.Clear();
                onFinishMultiComboBox.Items.AddRange(new[] { "Nichts tun", "Ruhezustand", "Abmelden", "Programm beenden", "Herunterfahren" });
                if (onFinishMultiComboBox.SelectedIndex == -1) onFinishMultiComboBox.SelectedIndex = 0;

                copyMoveDeleteComboBox.Items.Clear();
                copyMoveDeleteComboBox.Items.AddRange(new[] { "Dateien kopieren", "Dateien verschieben", "Sicher löschen" });
                if (copyMoveDeleteComboBox.SelectedIndex == -1) copyMoveDeleteComboBox.SelectedIndex = 0;

            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error updating English UI: {ex.Message}");
            }
        }


        // ==================  ITALIAN  ==================
        private void ApplyManualItalianUpdates()
        {
            try
            {
                /* ---------- grid headers ---------- */
                dataGridView1.Columns[0].HeaderText = "Nome del file";
                dataGridView1.Columns[1].HeaderText = "Percorso del file";
                dataGridView1.Columns[2].HeaderText = "Tipo";
                dataGridView1.Columns[3].HeaderText = "Dimensione del file";
                dataGridView1.Columns[4].HeaderText = "Stato";

                copyHistoryDGV.Columns[0].HeaderText = "Tipo di operazione";
                copyHistoryDGV.Columns[1].HeaderText = "Percorso(i) file sorgente";
                copyHistoryDGV.Columns[2].HeaderText = "Percorso(i) file destinazione";
                copyHistoryDGV.Columns[3].HeaderText = "Dimensione totale directory";

                skippedDataGridView.Columns[0].HeaderText = "Stato";
                skippedDataGridView.Columns[1].HeaderText = "Percorso file sorgente";
                skippedDataGridView.Columns[2].HeaderText = "Percorso file destinazione";
                skippedDataGridView.Columns[3].HeaderText = "Nome del file";
                skippedDataGridView.Columns[4].HeaderText = "Dimensione del file";

                filesDataGridView.Columns[0].HeaderText = "Nome";
                filesDataGridView.Columns[1].HeaderText = "Percorso";
                filesDataGridView.Columns[2].HeaderText = "Tipo";
                filesDataGridView.Columns[3].HeaderText = "Dimensione";
                filesDataGridView.Columns[4].HeaderText = "Stato";

                /* ---------- other controls ---------- */
                searchTextBox.PlaceholderText = "Inserisci il nome del file o della cartella da cercare...";

                onFinishComboBox.Items.Clear();
                onFinishComboBox.Items.AddRange(new[] { "Non fare nulla", "Sospendi", "Disconnetti", "Esci dal programma", "Spegni" });
                if (onFinishComboBox.SelectedIndex == -1) onFinishComboBox.SelectedIndex = 0;

                onFinishMultiComboBox.Items.Clear();
                onFinishMultiComboBox.Items.AddRange(new[] { "Non fare nulla", "Sospendi", "Disconnetti", "Esci dal programma", "Spegni" });
                if (onFinishMultiComboBox.SelectedIndex == -1) onFinishMultiComboBox.SelectedIndex = 0;

                copyMoveDeleteComboBox.Items.Clear();
                copyMoveDeleteComboBox.Items.AddRange(new[] { "Copia file", "Sposta file", "Eliminazione sicura" });
                if (copyMoveDeleteComboBox.SelectedIndex == -1) copyMoveDeleteComboBox.SelectedIndex = 0;
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error updating Italian UI: {ex.Message}");
            }
        }

        // ==================  PORTUGUESE - PORTUGAL  ==================
        private void ApplyManualPortuguesePortugalUpdates()
        {
            try
            {
                /* ---------- grid headers ---------- */
                dataGridView1.Columns[0].HeaderText = "Nome do ficheiro";
                dataGridView1.Columns[1].HeaderText = "Caminho do ficheiro";
                dataGridView1.Columns[2].HeaderText = "Tipo";
                dataGridView1.Columns[3].HeaderText = "Tamanho do ficheiro";
                dataGridView1.Columns[4].HeaderText = "Estado";

                copyHistoryDGV.Columns[0].HeaderText = "Tipo de operação";
                copyHistoryDGV.Columns[1].HeaderText = "Caminho(s) de origem";
                copyHistoryDGV.Columns[2].HeaderText = "Caminho(s) de destino";
                copyHistoryDGV.Columns[3].HeaderText = "Tamanho total das pastas";

                skippedDataGridView.Columns[0].HeaderText = "Estado";
                skippedDataGridView.Columns[1].HeaderText = "Caminho do ficheiro de origem";
                skippedDataGridView.Columns[2].HeaderText = "Caminho do ficheiro de destino";
                skippedDataGridView.Columns[3].HeaderText = "Nome do ficheiro";
                skippedDataGridView.Columns[4].HeaderText = "Tamanho do ficheiro";

                filesDataGridView.Columns[0].HeaderText = "Nome";
                filesDataGridView.Columns[1].HeaderText = "Caminho";
                filesDataGridView.Columns[2].HeaderText = "Tipo";
                filesDataGridView.Columns[3].HeaderText = "Tamanho";
                filesDataGridView.Columns[4].HeaderText = "Estado";

                /* ---------- other controls ---------- */
                searchTextBox.PlaceholderText = "Introduza o nome do ficheiro ou pasta a pesquisar...";

                onFinishComboBox.Items.Clear();
                onFinishComboBox.Items.AddRange(new[] { "Não fazer nada", "Suspender", "Terminar sessão", "Sair do programa", "Desligar" });
                if (onFinishComboBox.SelectedIndex == -1) onFinishComboBox.SelectedIndex = 0;

                onFinishMultiComboBox.Items.Clear();
                onFinishMultiComboBox.Items.AddRange(new[] { "Não fazer nada", "Suspender", "Terminar sessão", "Sair do programa", "Desligar" });
                if (onFinishMultiComboBox.SelectedIndex == -1) onFinishMultiComboBox.SelectedIndex = 0;

                copyMoveDeleteComboBox.Items.Clear();
                copyMoveDeleteComboBox.Items.AddRange(new[] { "Copiar ficheiros", "Mover ficheiros", "Eliminação segura" });
                if (copyMoveDeleteComboBox.SelectedIndex == -1) copyMoveDeleteComboBox.SelectedIndex = 0;
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error updating Portuguese Portugal UI: {ex.Message}");
            }
        }

        // ==================  PORTUGUESE - BRAZIL  ==================
        private void ApplyManualPortugueseBrazilUpdates()
        {
            try
            {
                /* ---------- grid headers ---------- */
                dataGridView1.Columns[0].HeaderText = "Nome do arquivo";
                dataGridView1.Columns[1].HeaderText = "Caminho do arquivo";
                dataGridView1.Columns[2].HeaderText = "Tipo";
                dataGridView1.Columns[3].HeaderText = "Tamanho do arquivo";
                dataGridView1.Columns[4].HeaderText = "Status";

                copyHistoryDGV.Columns[0].HeaderText = "Tipo de operação";
                copyHistoryDGV.Columns[1].HeaderText = "Caminho(s) de origem";
                copyHistoryDGV.Columns[2].HeaderText = "Caminho(s) de destino";
                copyHistoryDGV.Columns[3].HeaderText = "Tamanho total das pastas";

                skippedDataGridView.Columns[0].HeaderText = "Status";
                skippedDataGridView.Columns[1].HeaderText = "Caminho do arquivo de origem";
                skippedDataGridView.Columns[2].HeaderText = "Caminho do arquivo de destino";
                skippedDataGridView.Columns[3].HeaderText = "Nome do arquivo";
                skippedDataGridView.Columns[4].HeaderText = "Tamanho do arquivo";

                filesDataGridView.Columns[0].HeaderText = "Nome";
                filesDataGridView.Columns[1].HeaderText = "Caminho";
                filesDataGridView.Columns[2].HeaderText = "Tipo";
                filesDataGridView.Columns[3].HeaderText = "Tamanho";
                filesDataGridView.Columns[4].HeaderText = "Status";

                /* ---------- other controls ---------- */
                searchTextBox.PlaceholderText = "Digite o nome do arquivo ou pasta para pesquisar...";

                onFinishComboBox.Items.Clear();
                onFinishComboBox.Items.AddRange(new[] { "Não fazer nada", "Suspender", "Fazer logoff", "Sair do programa", "Desligar" });
                if (onFinishComboBox.SelectedIndex == -1) onFinishComboBox.SelectedIndex = 0;

                onFinishMultiComboBox.Items.Clear();
                onFinishMultiComboBox.Items.AddRange(new[] { "Não fazer nada", "Suspender", "Fazer logoff", "Sair do programa", "Desligar" });
                if (onFinishMultiComboBox.SelectedIndex == -1) onFinishMultiComboBox.SelectedIndex = 0;

                copyMoveDeleteComboBox.Items.Clear();
                copyMoveDeleteComboBox.Items.AddRange(new[] { "Copiar arquivos", "Mover arquivos", "Exclusão segura" });
                if (copyMoveDeleteComboBox.SelectedIndex == -1) copyMoveDeleteComboBox.SelectedIndex = 0;
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error updating Portuguese Brazil UI: {ex.Message}");
            }
        }

        // ==================  DUTCH  ==================
        private void ApplyManualDutchUpdates()
        {
            try
            {
                /* ---------- grid headers ---------- */
                dataGridView1.Columns[0].HeaderText = "Bestandsnaam";
                dataGridView1.Columns[1].HeaderText = "Bestandspad";
                dataGridView1.Columns[2].HeaderText = "Type";
                dataGridView1.Columns[3].HeaderText = "Bestandsgrootte";
                dataGridView1.Columns[4].HeaderText = "Status";

                copyHistoryDGV.Columns[0].HeaderText = "Bewerkingstype";
                copyHistoryDGV.Columns[1].HeaderText = "Bronbestandspad(pen)";
                copyHistoryDGV.Columns[2].HeaderText = "Doelbestandspad(pen)";
                copyHistoryDGV.Columns[3].HeaderText = "Totale mapgrootte";

                skippedDataGridView.Columns[0].HeaderText = "Status";
                skippedDataGridView.Columns[1].HeaderText = "Bronbestandspad";
                skippedDataGridView.Columns[2].HeaderText = "Doelbestandspad";
                skippedDataGridView.Columns[3].HeaderText = "Bestandsnaam";
                skippedDataGridView.Columns[4].HeaderText = "Bestandsgrootte";

                filesDataGridView.Columns[0].HeaderText = "Naam";
                filesDataGridView.Columns[1].HeaderText = "Pad";
                filesDataGridView.Columns[2].HeaderText = "Type";
                filesDataGridView.Columns[3].HeaderText = "Grootte";
                filesDataGridView.Columns[4].HeaderText = "Status";

                /* ---------- other controls ---------- */
                searchTextBox.PlaceholderText = "Voer bestands- of mapnaam in om te zoeken...";

                onFinishComboBox.Items.Clear();
                onFinishComboBox.Items.AddRange(new[] { "Niets doen", "Slaapstand", "Afmelden", "Programma afsluiten", "Afsluiten" });
                if (onFinishComboBox.SelectedIndex == -1) onFinishComboBox.SelectedIndex = 0;

                onFinishMultiComboBox.Items.Clear();
                onFinishMultiComboBox.Items.AddRange(new[] { "Niets doen", "Slaapstand", "Afmelden", "Programma afsluiten", "Afsluiten" });
                if (onFinishMultiComboBox.SelectedIndex == -1) onFinishMultiComboBox.SelectedIndex = 0;

                copyMoveDeleteComboBox.Items.Clear();
                copyMoveDeleteComboBox.Items.AddRange(new[] { "Bestanden kopiëren", "Bestanden verplaatsen", "Veilig verwijderen" });
                if (copyMoveDeleteComboBox.SelectedIndex == -1) copyMoveDeleteComboBox.SelectedIndex = 0;
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error updating Dutch UI: {ex.Message}");
            }
        }

        // ==================  SWEDISH  ==================
        private void ApplyManualSwedishUpdates()
        {
            try
            {
                /* ---------- grid headers ---------- */
                dataGridView1.Columns[0].HeaderText = "Filnamn";
                dataGridView1.Columns[1].HeaderText = "Filsökväg";
                dataGridView1.Columns[2].HeaderText = "Typ";
                dataGridView1.Columns[3].HeaderText = "Filstorlek";
                dataGridView1.Columns[4].HeaderText = "Status";

                copyHistoryDGV.Columns[0].HeaderText = "Operationstyp";
                copyHistoryDGV.Columns[1].HeaderText = "Källfilsökväg(ar)";
                copyHistoryDGV.Columns[2].HeaderText = "Målfilsökväg(ar)";
                copyHistoryDGV.Columns[3].HeaderText = "Total mappstorlek";

                skippedDataGridView.Columns[0].HeaderText = "Status";
                skippedDataGridView.Columns[1].HeaderText = "Källfilsökväg";
                skippedDataGridView.Columns[2].HeaderText = "Målfilsökväg";
                skippedDataGridView.Columns[3].HeaderText = "Filnamn";
                skippedDataGridView.Columns[4].HeaderText = "Filstorlek";

                filesDataGridView.Columns[0].HeaderText = "Namn";
                filesDataGridView.Columns[1].HeaderText = "Sökväg";
                filesDataGridView.Columns[2].HeaderText = "Typ";
                filesDataGridView.Columns[3].HeaderText = "Storlek";
                filesDataGridView.Columns[4].HeaderText = "Status";

                /* ---------- other controls ---------- */
                searchTextBox.PlaceholderText = "Ange fil- eller mappnamn att söka efter...";

                onFinishComboBox.Items.Clear();
                onFinishComboBox.Items.AddRange(new[] { "Gör ingenting", "Viloläge", "Logga ut", "Avsluta program", "Stäng av" });
                if (onFinishComboBox.SelectedIndex == -1) onFinishComboBox.SelectedIndex = 0;

                onFinishMultiComboBox.Items.Clear();
                onFinishMultiComboBox.Items.AddRange(new[] { "Gör ingenting", "Viloläge", "Logga ut", "Avsluta program", "Stäng av" });
                if (onFinishMultiComboBox.SelectedIndex == -1) onFinishMultiComboBox.SelectedIndex = 0;

                copyMoveDeleteComboBox.Items.Clear();
                copyMoveDeleteComboBox.Items.AddRange(new[] { "Kopiera filer", "Flytta filer", "Säker radering" });
                if (copyMoveDeleteComboBox.SelectedIndex == -1) copyMoveDeleteComboBox.SelectedIndex = 0;
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error updating Swedish UI: {ex.Message}");
            }
        }

        // ==================  NORWEGIAN  ==================
        private void ApplyManualNorwegianUpdates()
        {
            try
            {
                /* ---------- grid headers ---------- */
                dataGridView1.Columns[0].HeaderText = "Filnavn";
                dataGridView1.Columns[1].HeaderText = "Filbane";
                dataGridView1.Columns[2].HeaderText = "Type";
                dataGridView1.Columns[3].HeaderText = "Filstørrelse";
                dataGridView1.Columns[4].HeaderText = "Status";

                copyHistoryDGV.Columns[0].HeaderText = "Operasjonstype";
                copyHistoryDGV.Columns[1].HeaderText = "Kilde filbane(r)";
                copyHistoryDGV.Columns[2].HeaderText = "Mål filbane(r)";
                copyHistoryDGV.Columns[3].HeaderText = "Total mappestørrelse";

                skippedDataGridView.Columns[0].HeaderText = "Status";
                skippedDataGridView.Columns[1].HeaderText = "Kilde filbane";
                skippedDataGridView.Columns[2].HeaderText = "Mål filbane";
                skippedDataGridView.Columns[3].HeaderText = "Filnavn";
                skippedDataGridView.Columns[4].HeaderText = "Filstørrelse";

                filesDataGridView.Columns[0].HeaderText = "Navn";
                filesDataGridView.Columns[1].HeaderText = "Bane";
                filesDataGridView.Columns[2].HeaderText = "Type";
                filesDataGridView.Columns[3].HeaderText = "Størrelse";
                filesDataGridView.Columns[4].HeaderText = "Status";

                /* ---------- other controls ---------- */
                searchTextBox.PlaceholderText = "Skriv inn fil- eller mappenavn for å søke...";

                onFinishComboBox.Items.Clear();
                onFinishComboBox.Items.AddRange(new[] { "Gjør ingenting", "Hvilemodus", "Logg av", "Avslutt program", "Slå av" });
                if (onFinishComboBox.SelectedIndex == -1) onFinishComboBox.SelectedIndex = 0;

                onFinishMultiComboBox.Items.Clear();
                onFinishMultiComboBox.Items.AddRange(new[] { "Gjør ingenting", "Hvilemodus", "Logg av", "Avslutt program", "Slå av" });
                if (onFinishMultiComboBox.SelectedIndex == -1) onFinishMultiComboBox.SelectedIndex = 0;

                copyMoveDeleteComboBox.Items.Clear();
                copyMoveDeleteComboBox.Items.AddRange(new[] { "Kopier filer", "Flytt filer", "Sikker sletting" });
                if (copyMoveDeleteComboBox.SelectedIndex == -1) copyMoveDeleteComboBox.SelectedIndex = 0;
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error updating Norwegian UI: {ex.Message}");
            }
        }

        // ==================  DANISH  ==================
        private void ApplyManualDanishUpdates()
        {
            try
            {
                /* ---------- grid headers ---------- */
                dataGridView1.Columns[0].HeaderText = "Filnavn";
                dataGridView1.Columns[1].HeaderText = "Filsti";
                dataGridView1.Columns[2].HeaderText = "Type";
                dataGridView1.Columns[3].HeaderText = "Filstørrelse";
                dataGridView1.Columns[4].HeaderText = "Status";

                copyHistoryDGV.Columns[0].HeaderText = "Operationstype";
                copyHistoryDGV.Columns[1].HeaderText = "Kilde filsti(e)";
                copyHistoryDGV.Columns[2].HeaderText = "Destinations filsti(e)";
                copyHistoryDGV.Columns[3].HeaderText = "Total mappestørrelse";

                skippedDataGridView.Columns[0].HeaderText = "Status";
                skippedDataGridView.Columns[1].HeaderText = "Kilde filsti";
                skippedDataGridView.Columns[2].HeaderText = "Destinations filsti";
                skippedDataGridView.Columns[3].HeaderText = "Filnavn";
                skippedDataGridView.Columns[4].HeaderText = "Filstørrelse";

                filesDataGridView.Columns[0].HeaderText = "Navn";
                filesDataGridView.Columns[1].HeaderText = "Sti";
                filesDataGridView.Columns[2].HeaderText = "Type";
                filesDataGridView.Columns[3].HeaderText = "Størrelse";
                filesDataGridView.Columns[4].HeaderText = "Status";

                /* ---------- other controls ---------- */
                searchTextBox.PlaceholderText = "Indtast fil- eller mappenavn for at søge...";

                onFinishComboBox.Items.Clear();
                onFinishComboBox.Items.AddRange(new[] { "Gør intet", "Dvale", "Log af", "Afslut program", "Sluk" });
                if (onFinishComboBox.SelectedIndex == -1) onFinishComboBox.SelectedIndex = 0;

                onFinishMultiComboBox.Items.Clear();
                onFinishMultiComboBox.Items.AddRange(new[] { "Gør intet", "Dvale", "Log af", "Afslut program", "Sluk" });
                if (onFinishMultiComboBox.SelectedIndex == -1) onFinishMultiComboBox.SelectedIndex = 0;

                copyMoveDeleteComboBox.Items.Clear();
                copyMoveDeleteComboBox.Items.AddRange(new[] { "Kopier filer", "Flyt filer", "Sikker sletning" });
                if (copyMoveDeleteComboBox.SelectedIndex == -1) copyMoveDeleteComboBox.SelectedIndex = 0;
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error updating Danish UI: {ex.Message}");
            }
        }

        // ==================  FINNISH  ==================
        private void ApplyManualFinnishUpdates()
        {
            try
            {
                /* ---------- grid headers ---------- */
                dataGridView1.Columns[0].HeaderText = "Tiedoston nimi";
                dataGridView1.Columns[1].HeaderText = "Tiedoston polku";
                dataGridView1.Columns[2].HeaderText = "Tyyppi";
                dataGridView1.Columns[3].HeaderText = "Tiedoston koko";
                dataGridView1.Columns[4].HeaderText = "Tila";

                copyHistoryDGV.Columns[0].HeaderText = "Toimintotyyppi";
                copyHistoryDGV.Columns[1].HeaderText = "Lähdetiedostopolku(t)";
                copyHistoryDGV.Columns[2].HeaderText = "Kohdetiedostopolku(t)";
                copyHistoryDGV.Columns[3].HeaderText = "Kansioiden kokonaiskoko";

                skippedDataGridView.Columns[0].HeaderText = "Tila";
                skippedDataGridView.Columns[1].HeaderText = "Lähdetiedoston polku";
                skippedDataGridView.Columns[2].HeaderText = "Kohdetiedoston polku";
                skippedDataGridView.Columns[3].HeaderText = "Tiedoston nimi";
                skippedDataGridView.Columns[4].HeaderText = "Tiedoston koko";

                filesDataGridView.Columns[0].HeaderText = "Nimi";
                filesDataGridView.Columns[1].HeaderText = "Polku";
                filesDataGridView.Columns[2].HeaderText = "Tyyppi";
                filesDataGridView.Columns[3].HeaderText = "Koko";
                filesDataGridView.Columns[4].HeaderText = "Tila";

                /* ---------- other controls ---------- */
                searchTextBox.PlaceholderText = "Syötä etsittävän tiedoston tai kansion nimi...";

                onFinishComboBox.Items.Clear();
                onFinishComboBox.Items.AddRange(new[] { "Älä tee mitään", "Lepotila", "Kirjaudu ulos", "Lopeta ohjelma", "Sammuta" });
                if (onFinishComboBox.SelectedIndex == -1) onFinishComboBox.SelectedIndex = 0;

                onFinishMultiComboBox.Items.Clear();
                onFinishMultiComboBox.Items.AddRange(new[] { "Älä tee mitään", "Lepotila", "Kirjaudu ulos", "Lopeta ohjelma", "Sammuta" });
                if (onFinishMultiComboBox.SelectedIndex == -1) onFinishMultiComboBox.SelectedIndex = 0;

                copyMoveDeleteComboBox.Items.Clear();
                copyMoveDeleteComboBox.Items.AddRange(new[] { "Kopioi tiedostot", "Siirrä tiedostot", "Turvallinen poisto" });
                if (copyMoveDeleteComboBox.SelectedIndex == -1) copyMoveDeleteComboBox.SelectedIndex = 0;
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error updating Finnish UI: {ex.Message}");
            }
        }

        // ==================  POLISH  ==================
        private void ApplyManualPolishUpdates()
        {
            try
            {
                /* ---------- grid headers ---------- */
                dataGridView1.Columns[0].HeaderText = "Nazwa pliku";
                dataGridView1.Columns[1].HeaderText = "Ścieżka pliku";
                dataGridView1.Columns[2].HeaderText = "Typ";
                dataGridView1.Columns[3].HeaderText = "Rozmiar pliku";
                dataGridView1.Columns[4].HeaderText = "Status";

                copyHistoryDGV.Columns[0].HeaderText = "Typ operacji";
                copyHistoryDGV.Columns[1].HeaderText = "Ścieżka(i) pliku źródłowego";
                copyHistoryDGV.Columns[2].HeaderText = "Ścieżka(i) pliku docelowego";
                copyHistoryDGV.Columns[3].HeaderText = "Całkowity rozmiar folderów";

                skippedDataGridView.Columns[0].HeaderText = "Status";
                skippedDataGridView.Columns[1].HeaderText = "Ścieżka pliku źródłowego";
                skippedDataGridView.Columns[2].HeaderText = "Ścieżka pliku docelowego";
                skippedDataGridView.Columns[3].HeaderText = "Nazwa pliku";
                skippedDataGridView.Columns[4].HeaderText = "Rozmiar pliku";

                filesDataGridView.Columns[0].HeaderText = "Nazwa";
                filesDataGridView.Columns[1].HeaderText = "Ścieżka";
                filesDataGridView.Columns[2].HeaderText = "Typ";
                filesDataGridView.Columns[3].HeaderText = "Rozmiar";
                filesDataGridView.Columns[4].HeaderText = "Status";

                /* ---------- other controls ---------- */
                searchTextBox.PlaceholderText = "Wprowadź nazwę pliku lub folderu do wyszukania...";

                onFinishComboBox.Items.Clear();
                onFinishComboBox.Items.AddRange(new[] { "Nie rób nic", "Uśpij", "Wyloguj", "Zamknij program", "Wyłącz" });
                if (onFinishComboBox.SelectedIndex == -1) onFinishComboBox.SelectedIndex = 0;

                onFinishMultiComboBox.Items.Clear();
                onFinishMultiComboBox.Items.AddRange(new[] { "Nie rób nic", "Uśpij", "Wyloguj", "Zamknij program", "Wyłącz" });
                if (onFinishMultiComboBox.SelectedIndex == -1) onFinishMultiComboBox.SelectedIndex = 0;

                copyMoveDeleteComboBox.Items.Clear();
                copyMoveDeleteComboBox.Items.AddRange(new[] { "Kopiuj pliki", "Przenieś pliki", "Bezpieczne usuwanie" });
                if (copyMoveDeleteComboBox.SelectedIndex == -1) copyMoveDeleteComboBox.SelectedIndex = 0;
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error updating Polish UI: {ex.Message}");
            }
        }

        // ==================  CZECH  ==================
        private void ApplyManualCzechUpdates()
        {
            try
            {
                /* ---------- grid headers ---------- */
                dataGridView1.Columns[0].HeaderText = "Název souboru";
                dataGridView1.Columns[1].HeaderText = "Cesta k souboru";
                dataGridView1.Columns[2].HeaderText = "Typ";
                dataGridView1.Columns[3].HeaderText = "Velikost souboru";
                dataGridView1.Columns[4].HeaderText = "Stav";

                copyHistoryDGV.Columns[0].HeaderText = "Typ operace";
                copyHistoryDGV.Columns[1].HeaderText = "Cesta(y) ke zdrojovému souboru";
                copyHistoryDGV.Columns[2].HeaderText = "Cesta(y) k cílovému souboru";
                copyHistoryDGV.Columns[3].HeaderText = "Celková velikost složek";

                skippedDataGridView.Columns[0].HeaderText = "Stav";
                skippedDataGridView.Columns[1].HeaderText = "Cesta ke zdrojovému souboru";
                skippedDataGridView.Columns[2].HeaderText = "Cesta k cílovému souboru";
                skippedDataGridView.Columns[3].HeaderText = "Název souboru";
                skippedDataGridView.Columns[4].HeaderText = "Velikost souboru";

                filesDataGridView.Columns[0].HeaderText = "Název";
                filesDataGridView.Columns[1].HeaderText = "Cesta";
                filesDataGridView.Columns[2].HeaderText = "Typ";
                filesDataGridView.Columns[3].HeaderText = "Velikost";
                filesDataGridView.Columns[4].HeaderText = "Stav";

                /* ---------- other controls ---------- */
                searchTextBox.PlaceholderText = "Zadejte název souboru nebo složky k hledání...";

                onFinishComboBox.Items.Clear();
                onFinishComboBox.Items.AddRange(new[] { "Nedělat nic", "Režim spánku", "Odhlásit", "Ukončit program", "Vypnout" });
                if (onFinishComboBox.SelectedIndex == -1) onFinishComboBox.SelectedIndex = 0;

                onFinishMultiComboBox.Items.Clear();
                onFinishMultiComboBox.Items.AddRange(new[] { "Nedělat nic", "Režim spánku", "Odhlásit", "Ukončit program", "Vypnout" });
                if (onFinishMultiComboBox.SelectedIndex == -1) onFinishMultiComboBox.SelectedIndex = 0;

                copyMoveDeleteComboBox.Items.Clear();
                copyMoveDeleteComboBox.Items.AddRange(new[] { "Kopírovat soubory", "Přesunout soubory", "Bezpečné mazání" });
                if (copyMoveDeleteComboBox.SelectedIndex == -1) copyMoveDeleteComboBox.SelectedIndex = 0;
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error updating Czech UI: {ex.Message}");
            }
        }

        // ==================  HUNGARIAN  ==================
        private void ApplyManualHungarianUpdates()
        {
            try
            {
                /* ---------- grid headers ---------- */
                dataGridView1.Columns[0].HeaderText = "Fájl neve";
                dataGridView1.Columns[1].HeaderText = "Fájl elérési útja";
                dataGridView1.Columns[2].HeaderText = "Típus";
                dataGridView1.Columns[3].HeaderText = "Fájl mérete";
                dataGridView1.Columns[4].HeaderText = "Állapot";

                copyHistoryDGV.Columns[0].HeaderText = "Művelet típusa";
                copyHistoryDGV.Columns[1].HeaderText = "Forrás fájl elérési út(jai)";
                copyHistoryDGV.Columns[2].HeaderText = "Cél fájl elérési út(jai)";
                copyHistoryDGV.Columns[3].HeaderText = "Mappák teljes mérete";

                skippedDataGridView.Columns[0].HeaderText = "Állapot";
                skippedDataGridView.Columns[1].HeaderText = "Forrás fájl elérési útja";
                skippedDataGridView.Columns[2].HeaderText = "Cél fájl elérési útja";
                skippedDataGridView.Columns[3].HeaderText = "Fájl neve";
                skippedDataGridView.Columns[4].HeaderText = "Fájl mérete";

                filesDataGridView.Columns[0].HeaderText = "Név";
                filesDataGridView.Columns[1].HeaderText = "Elérési út";
                filesDataGridView.Columns[2].HeaderText = "Típus";
                filesDataGridView.Columns[3].HeaderText = "Méret";
                filesDataGridView.Columns[4].HeaderText = "Állapot";

                /* ---------- other controls ---------- */
                searchTextBox.PlaceholderText = "Adja meg a keresendő fájl vagy mappa nevét...";

                onFinishComboBox.Items.Clear();
                onFinishComboBox.Items.AddRange(new[] { "Ne csináljon semmit", "Alvó üzemmód", "Kijelentkezés", "Program bezárása", "Leállítás" });
                if (onFinishComboBox.SelectedIndex == -1) onFinishComboBox.SelectedIndex = 0;

                onFinishMultiComboBox.Items.Clear();
                onFinishMultiComboBox.Items.AddRange(new[] { "Ne csináljon semmit", "Alvó üzemmód", "Kijelentkezés", "Program bezárása", "Leállítás" });
                if (onFinishMultiComboBox.SelectedIndex == -1) onFinishMultiComboBox.SelectedIndex = 0;

                copyMoveDeleteComboBox.Items.Clear();
                copyMoveDeleteComboBox.Items.AddRange(new[] { "Fájlok másolása", "Fájlok áthelyezése", "Biztonságos törlés" });
                if (copyMoveDeleteComboBox.SelectedIndex == -1) copyMoveDeleteComboBox.SelectedIndex = 0;
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error updating Hungarian UI: {ex.Message}");
            }
        }

        // ==================  ROMANIAN  ==================
        private void ApplyManualRomanianUpdates()
        {
            try
            {
                /* ---------- grid headers ---------- */
                dataGridView1.Columns[0].HeaderText = "Numele fișierului";
                dataGridView1.Columns[1].HeaderText = "Calea fișierului";
                dataGridView1.Columns[2].HeaderText = "Tip";
                dataGridView1.Columns[3].HeaderText = "Dimensiunea fișierului";
                dataGridView1.Columns[4].HeaderText = "Stare";

                copyHistoryDGV.Columns[0].HeaderText = "Tipul operației";
                copyHistoryDGV.Columns[1].HeaderText = "Calea(ile) fișierului sursă";
                copyHistoryDGV.Columns[2].HeaderText = "Calea(ile) fișierului destinație";
                copyHistoryDGV.Columns[3].HeaderText = "Dimensiunea totală a dosarelor";

                skippedDataGridView.Columns[0].HeaderText = "Stare";
                skippedDataGridView.Columns[1].HeaderText = "Calea fișierului sursă";
                skippedDataGridView.Columns[2].HeaderText = "Calea fișierului destinație";
                skippedDataGridView.Columns[3].HeaderText = "Numele fișierului";
                skippedDataGridView.Columns[4].HeaderText = "Dimensiunea fișierului";

                filesDataGridView.Columns[0].HeaderText = "Nume";
                filesDataGridView.Columns[1].HeaderText = "Cale";
                filesDataGridView.Columns[2].HeaderText = "Tip";
                filesDataGridView.Columns[3].HeaderText = "Dimensiune";
                filesDataGridView.Columns[4].HeaderText = "Stare";

                /* ---------- other controls ---------- */
                searchTextBox.PlaceholderText = "Introduceți numele fișierului sau dosarului pentru căutare...";

                onFinishComboBox.Items.Clear();
                onFinishComboBox.Items.AddRange(new[] { "Nu face nimic", "Suspenda", "Deconectați", "Închideți programul", "Opriți" });
                if (onFinishComboBox.SelectedIndex == -1) onFinishComboBox.SelectedIndex = 0;

                onFinishMultiComboBox.Items.Clear();
                onFinishMultiComboBox.Items.AddRange(new[] { "Nu face nimic", "Suspenda", "Deconectați", "Închideți programul", "Opriți" });
                if (onFinishMultiComboBox.SelectedIndex == -1) onFinishMultiComboBox.SelectedIndex = 0;

                copyMoveDeleteComboBox.Items.Clear();
                copyMoveDeleteComboBox.Items.AddRange(new[] { "Copiați fișiere", "Mutați fișiere", "Ștergere sigură" });
                if (copyMoveDeleteComboBox.SelectedIndex == -1) copyMoveDeleteComboBox.SelectedIndex = 0;
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error updating Romanian UI: {ex.Message}");
            }
        }

        /// <summary>
        /// Recursively applies localized resources to a control and all of its child controls.
        /// Uses the control's <see cref="Control.Name"/> as the resource key so that
        /// properties like text, size, and other localizable settings are updated
        /// according to the current culture.
        /// </summary>
        /// <param name="res">
        /// The <see cref="ComponentResourceManager"/> that provides localized resources.
        /// </param>
        /// <param name="ctrl">
        /// The root <see cref="System.Windows.Forms.Control"/> to which resources will be applied.
        /// </param>
        private static void ApplyResourcesToControl(ComponentResourceManager res, System.Windows.Forms.Control ctrl)
        {
            // Apply resources to the current control using its name as the key
            res.ApplyResources(ctrl, ctrl.Name);

            // Recursively apply resources to all child controls to ensure
            // every nested control on the form is localized
            foreach (System.Windows.Forms.Control child in ctrl.Controls)
                ApplyResourcesToControl(res, child);
        }

        private void rollUpLabel_MouseEnter(object sender, EventArgs e)
        {
            // This event handler is triggered when the mouse pointer enters the area of the 'rollUpLabel'.
            // It updates the text of multiple ToolStripStatusLabels to provide a tooltip description.
            statusLabel.Text = Translator.Get("Roll Up Button: This button scrolls the form up, allowing you to view files that are currently not visible in the data grid view.");
            toolStripCopyHistory.Text = Translator.Get("Roll Up Button: This button scrolls the form up, allowing you to view files that are currently not visible in the data grid view.");
            toolStripExclusions.Text = Translator.Get("Roll Up Button: This button scrolls the form up, allowing you to view files that are currently not visible in the data grid view.");
            toolStripMulti.Text = Translator.Get("Roll Up Button: This button scrolls the form up, allowing you to view files that are currently not visible in the data grid view.");
            statsBarSettingsLabel.Text = Translator.Get("Roll Up Button: This button scrolls the form up, allowing you to view files that are currently not visible in the data grid view.");
            toolStripSkipped.Text = Translator.Get("Roll Up Button: This button scrolls the form up, allowing you to view files that are currently not visible in the data grid view.");
        }

        private void rollUpLabel_Click(object sender, EventArgs e)
        {
            // This event handler is triggered when the 'rollUpLabel' is clicked.
            // It calls the ToggleRollUp() method, which likely handles the form's scrolling functionality.
            ToggleRollUp();
        }

        private void rollDownLabel_MouseEnter(object sender, EventArgs e)
        {
            // This event handler is triggered when the mouse pointer enters the 'rollDownLabel'.
            // It updates the text of multiple ToolStripStatusLabels with a tooltip description for the roll-down button.
            statusLabel.Text = Translator.Get("Roll Down Button: This button scrolls the form down, allowing you to view files that are currently not visible in the data grid view.");
            toolStripCopyHistory.Text = Translator.Get("Roll Down Button: This button scrolls the form down, allowing you to view files that are currently not visible in the data grid view.");
            toolStripExclusions.Text = Translator.Get("Roll Down Button: This button scrolls the form down, allowing you to view files that are currently not visible in the data grid view.");
            toolStripMulti.Text = Translator.Get("Roll Down Button: This button scrolls the form down, allowing you to view files that are currently not visible in the data grid view.");
            statsBarSettingsLabel.Text = Translator.Get("Roll Down Button: This button scrolls the form down, allowing you to view files that are currently not visible in the data grid view.");
            toolStripSkipped.Text = Translator.Get("Roll Down Button: This button scrolls the form down, allowing you to view files that are currently not visible in the data grid view.");
        }

        private void rollDownLabel_Click(object sender, EventArgs e)
        {
            // This event handler is triggered when the 'rollDownLabel' is clicked.
            // It calls the ToggleRollDown() method, which likely handles the form's scrolling.
            ToggleRollDown();
        }

        private void settingsLabel_Click(object sender, EventArgs e)
        {
            try
            {
                // Sets the selected tab in the tab control to the settings page.
                tabControl1.SelectedTab = cmdSettingsPage;
                // If the auto-save checkbox is checked, it saves the application settings.
                if (saveAutoCheckBox.Checked)
                {
                    Properties.Settings.Default.Save();
                }

                // Calls a method to update the saved checkboxes based on settings.
                editSavedCheckBoxes();


                // Updates the form's title label based on whether it's the "Pro" version or not.
                titleLabel.Text = Translator.Get(proVersion
                    ? "Copy That v1.0 Pro By: Havoc - Settings"
                    : "Copy That v1.0 By: Havoc - Settings");

                // Enables all controls on the form.
                EnableAllControls(this);
                // Disables specific buttons related to ongoing operations.
                pauseResumeButton.Enabled = false;
                cancelButton.Enabled = false;
                skipButton.Enabled = false;
            }
            catch { } // Catches and ignores any exceptions that occur. This is generally not good practice but is present in the code.
        }

        private void settingsLabel_MouseEnter(object sender, EventArgs e)
        {
            // This event handler is triggered when the mouse pointer enters the 'settingsLabel'.
            // It updates the text of multiple ToolStripStatusLabels with a tooltip description for the settings button.
            statusLabel.Text = Translator.Get("Settings Button: This button opens the settings dialog, allowing you to configure various options for the application, such as buffer size, multi-threading, and operation preferences.");
            toolStripCopyHistory.Text = Translator.Get("Settings Button: This button opens the settings dialog, allowing you to configure various options for the application, such as buffer size, multi-threading, and operation preferences.");
            toolStripExclusions.Text = Translator.Get("Settings Button: This button opens the settings dialog, allowing you to configure various options for the application, such as buffer size, multi-threading, and operation preferences.");
            toolStripMulti.Text = Translator.Get("Settings Button: This button opens the settings dialog, allowing you to configure various options for the application, such as buffer size, multi-threading, and operation preferences.");
            statsBarSettingsLabel.Text = Translator.Get("Settings Button: This button opens the settings dialog, allowing you to configure various options for the application, such as buffer size, multi-threading, and operation preferences.");
            toolStripSkipped.Text = Translator.Get("Settings Button: This button opens the settings dialog, allowing you to configure various options for the application, such as buffer size, multi-threading, and operation preferences.");
        }

        private void ScrollTimer_Tick(object sender, EventArgs e)
        {
            // This event handler is triggered by the 'ScrollTimer' at regular intervals.
            // It decrements the Top property of several controls, causing them to move up the form.
            copyThatPB.Top -= scrollSpeed;
            havocSoftwarePB.Top -= scrollSpeed;
            aboutCTLabel.Top -= scrollSpeed;

            // Checks if the 'aboutCTLabel' has scrolled completely out of view (its bottom is at or above the top of the form).
            if (aboutCTLabel.Bottom <= 0)
            {
                // Resets the position of the controls to the bottom of the about panel, creating a continuous scroll effect.
                int resetTop = aboutPanel.Height;
                copyThatPB.Top = resetTop;
                havocSoftwarePB.Top = resetTop;
                aboutCTLabel.Top = resetTop + copyThatPB.Height + 10;
            }
        }

        private void allAboutLabel_Click(object sender, EventArgs e)
        {
            // This event handler is triggered when the 'allAboutLabel' is clicked.
            // Stops and disposes of the existing scroll timer if it exists.
            scrollTimer?.Stop();
            if (scrollTimer != null)
            {
                scrollTimer.Tick -= ScrollTimer_Tick;
            }
            scrollTimer?.Dispose();

            // Creates a new Timer object for scrolling.
            scrollTimer = new Timer();
            // Sets the timer's interval to 25 milliseconds.
            scrollTimer.Interval = 25;
            // Attaches the ScrollTimer_Tick method to the timer's Tick event.
            scrollTimer.Tick += ScrollTimer_Tick;
            // Starts the timer.
            scrollTimer.Start();

            // Changes the selected tab to the "About" page.
            tabControl1.SelectedTab = cmdAboutPage;

            // Updates the title label based on whether it's the "Pro" version or not.
            titleLabel.Text = Translator.Get(proVersion
        ? "Copy That v1.0 Pro By: Havoc - About"
        : "Copy That v1.0 By: Havoc - About");

            // Defines constants for logo size and padding.
            int logoWidth = 300;
            int logoHeight = 300;
            int logoPadding = 10;

            // Sets the size and picture box mode for the logo picture boxes.
            copyThatPB.Width = logoWidth;
            copyThatPB.Height = logoHeight;
            copyThatPB.SizeMode = PictureBoxSizeMode.Zoom;

            havocSoftwarePB.Width = logoWidth;
            havocSoftwarePB.Height = logoHeight;
            havocSoftwarePB.SizeMode = PictureBoxSizeMode.Zoom;

            // Calculates the total width of the logos and the starting X position to center them.
            int totalLogoWidth = (logoWidth * 2) + logoPadding;
            int startX = (aboutPanel.Width - totalLogoWidth) / 2;

            // Sets the initial position of the logo picture boxes.
            copyThatPB.Left = startX;
            copyThatPB.Top = aboutPanel.Height;

            havocSoftwarePB.Left = startX + logoWidth + logoPadding;
            havocSoftwarePB.Top = aboutPanel.Height;


            // Configures the "About" label's properties for auto-sizing and alignment.
            aboutCTLabel.AutoSize = true;
            aboutCTLabel.MaximumSize = new Size(aboutPanel.Width - 20, 0);
            aboutCTLabel.TextAlign = ContentAlignment.TopCenter;

            // Sets the position of the "About" label relative to the logos.
            aboutCTLabel.Left = (aboutPanel.Width - aboutCTLabel.Width) / 2;
            aboutCTLabel.Top = copyThatPB.Top + logoHeight + 10;

            // Checks if the controls are already on the "aboutPanel" and adds them if they aren't.
            if (!aboutPanel.Controls.Contains(copyThatPB))
                aboutPanel.Controls.Add(copyThatPB);
            if (!aboutPanel.Controls.Contains(havocSoftwarePB))
                aboutPanel.Controls.Add(havocSoftwarePB);
            if (!aboutPanel.Controls.Contains(aboutCTLabel))
                aboutPanel.Controls.Add(aboutCTLabel);
        }

        private void minimizeLabel_Click(object sender, EventArgs e)
        {
            // This event handler is triggered when the 'minimizeLabel' is clicked.
            // Checks if the "Minimize to System Tray" checkbox is checked.
            if (minimizeSystemTrayCheckBox.Checked == true)
            {
                // Re-checks the checkbox state from application settings.
                minimizeSystemTrayCheckBox.Checked = CopyThatProgram.Properties.Settings.Default.MinimizeToTray;
                // Makes the notify icon in the system tray visible.
                notifyIcon1.Visible = true;
                // Minimizes the form window.
                this.WindowState = FormWindowState.Minimized;

                // Updates the text of the system tray icon based on the application version and minimize setting.
                if (proVersion)
                {
                    if (minimizeSystemTrayCheckBox.Checked)
                    {
                        notifyIcon1.Text = Translator.Get("Copy That v1.0 Pro By: Havoc || Double-Click To Open");
                    }
                    else
                    {
                        notifyIcon1.Text = Translator.Get("Copy That v1.0 Pro By: Havoc");
                    }
                }
                else
                {
                    if (minimizeSystemTrayCheckBox.Checked)
                    {
                        notifyIcon1.Text = Translator.Get("Copy That v1.0 By: Havoc || Double-Click To Open");
                    }
                    else
                    {
                        notifyIcon1.Text = Translator.Get("Copy That v1.0 By: Havoc");
                    }
                }
            }
            else
            {
                // If the "Minimize to System Tray" checkbox is not checked, it performs a standard minimize.
                // The following lines are redundant as they are the same as the 'if' block.
                minimizeSystemTrayCheckBox.Checked = CopyThatProgram.Properties.Settings.Default.MinimizeToTray;
                notifyIcon1.Visible = false;
                this.WindowState = FormWindowState.Minimized;

                // The logic below is identical to the 'if' block, which is also redundant.
                if (proVersion)
                {
                    if (minimizeSystemTrayCheckBox.Checked)
                    {
                        notifyIcon1.Text = Translator.Get("Copy That v1.0 Pro By: Havoc || Double-Click To Open");
                    }
                    else
                    {
                        notifyIcon1.Text = Translator.Get("Copy That v1.0 Pro By: Havoc");
                    }
                }
                else
                {
                    if (minimizeSystemTrayCheckBox.Checked)
                    {
                        notifyIcon1.Text = Translator.Get("Copy That v1.0 By: Havoc || Double-Click To Open");
                    }
                    else
                    {
                        notifyIcon1.Text = Translator.Get("Copy That v1.0 By: Havoc");
                    }
                }
            }
        }

        private void minimizeLabel_MouseEnter(object sender, EventArgs e)
        {
            // This event handler is triggered when the mouse pointer enters the 'minimizeLabel'.
            // It updates the text of multiple ToolStripStatusLabels with a tooltip description.
            statusLabel.Text = Translator.Get("Minimize Button: This button minimizes the application to the taskbar or the system tray, allowing you to keep it running in the background without closing it.");
            toolStripCopyHistory.Text = Translator.Get("Minimize Button: This button minimizes the application to the taskbar or the system tray, allowing you to keep it running in the background without closing it.");
            toolStripExclusions.Text = Translator.Get("Minimize Button: This button minimizes the application to the taskbar or the system tray, allowing you to keep it running in the background without closing it.");
            toolStripMulti.Text = Translator.Get("Minimize Button: This button minimizes the application to the taskbar or the system tray, allowing you to keep it running in the background without closing it.");
            statsBarSettingsLabel.Text = Translator.Get("Minimize Button: This button minimizes the application to the taskbar or the system tray, allowing you to keep it running in the background without closing it.");
            toolStripSkipped.Text = Translator.Get("Minimize Button: This button minimizes the application to the taskbar or the system tray, allowing you to keep it running in the background without closing it.");
        }

        private async void exitLabel_Click(object sender, EventArgs e)
        {
            // Check if the "Minimize to System Tray" checkbox is checked
            if (minimizeSystemTrayCheckBox.Checked)
            {
                WindowState = FormWindowState.Minimized;
                return;
            }

            // Debug output (remove these after testing)
            // MessageBox.Show(skinsComboBox.SelectedItem.ToString());
            // MessageBox.Show(languageComboBox.SelectedItem.ToString());

            // Convert the display name back to the key we really want to store
            string skinKey = ToEn(skinsComboBox.SelectedItem.ToString());
            CopyThatProgram.Properties.Settings.Default.Skin = skinKey;

            // Save language
            CopyThatProgram.Properties.Settings.Default.Language = LangKeyToDisplay.FirstOrDefault(
                                                                        x => x.Value.Equals(languageComboBox.SelectedItem.ToString(),
                                                                                            StringComparison.OrdinalIgnoreCase))
                                                                        .Key ?? "English";

            // If custom color is selected, ensure the colors are saved
            if (skinKey == "Custom Color")
            {
                // Save current form colors as custom colors
                CopyThatProgram.Properties.Settings.Default.CustomBackColor = this.BackColor;
                CopyThatProgram.Properties.Settings.Default.CustomForeColor = this.ForeColor;

                // Debug output
                System.Diagnostics.Debug.WriteLine($"[EXIT] Saving Custom Color - Fore: {this.ForeColor}, Back: {this.BackColor}");
                // MessageBox.Show(Translator.Get($"Saving: Back={this.BackColor}, Fore={this.ForeColor}");

                // ALWAYS save custom colors immediately, regardless of auto-save setting
                Properties.Settings.Default.Save();
            }
            else
            {
                // For non-custom skins, respect the auto-save setting
                if (saveAutoCheckBox.Checked)
                    Properties.Settings.Default.Save();
            }

            // Handle background workers
            if (_copyWorker?.IsBusy == true)
            {
                if (!ConfirmCancelCopy())
                    return;
                _finishCurrentFileAndQuit = true;
                _pauseEvent.Set();
                _cancelDialogEvent.Set();
                _cancellationTokenSource?.Cancel();
                _copyWorker?.CancelAsync();
                while (_copyWorker.IsBusy)
                    await Task.Delay(50);
            }

            if (_moveWorker?.IsBusy == true)
            {
                if (!ConfirmCancelCopy())
                    return;
                _finishCurrentFileAndQuit = true;
                _pauseEvent.Set();
                _cancelDialogEvent.Set();
                _cancellationTokenSource?.Cancel();
                _moveWorker?.CancelAsync();
                while (_moveWorker.IsBusy)
                    await Task.Delay(50);
            }

            if (_deleteWorker?.IsBusy == true)
            {
                if (!ConfirmCancelCopy())
                    return;
                _finishCurrentFileAndQuit = true;
                _pauseEvent.Set();
                _cancelDialogEvent.Set();
                _cancellationTokenSource?.Cancel();
                _deleteWorker?.CancelAsync();
                while (_deleteWorker.IsBusy)
                    await Task.Delay(50);
            }

            // Exit the application
            System.Windows.Forms.Application.Exit();
        }

        private void exitLabel_MouseEnter(object sender, EventArgs e)
        {
            // This event handler is triggered when the mouse pointer enters the 'exitLabel'.
            // It updates the text of multiple ToolStripStatusLabels with a tooltip description for the exit button.
            statusLabel.Text = Translator.Get("Exit Button: This button closes the application. If the 'Minimize to System Tray' option is enabled, it will minimize the application instead of closing it.");
            toolStripCopyHistory.Text = Translator.Get("Exit Button: This button closes the application. If the 'Minimize to System Tray' option is enabled, it will minimize the application instead of closing it.");
            toolStripExclusions.Text = Translator.Get("Exit Button: This button closes the application. If the 'Minimize to System Tray' option is enabled, it will minimize the application instead of closing it.");
            toolStripMulti.Text = Translator.Get("Exit Button: This button closes the application. If the 'Minimize to System Tray' option is enabled, it will minimize the application instead of closing it.");
            statsBarSettingsLabel.Text = Translator.Get("Exit Button: This button closes the application. If the 'Minimize to System Tray' option is enabled, it will minimize the application instead of closing it.");
            toolStripSkipped.Text = Translator.Get("Exit Button: This button closes the application. If the 'Minimize to System Tray' option is enabled, it will minimize the application instead of closing it.");
        }

        private void allAboutLabel_MouseEnter(object sender, EventArgs e)
        {
            // This event handler is triggered when the mouse pointer enters the 'allAboutLabel'.
            // It updates the text of multiple ToolStripStatusLabels with a tooltip description for the about button.
            statusLabel.Text = Translator.Get("About Button: This button opens the 'About' dialog, providing information about the application, its version, and the developer.");
            toolStripCopyHistory.Text = Translator.Get("About Button: This button opens the 'About' dialog, providing information about the application, its version, and the developer.");
            toolStripExclusions.Text = Translator.Get("About Button: This button opens the 'About' dialog, providing information about the application, its version, and the developer.");
            toolStripMulti.Text = Translator.Get("About Button: This button opens the 'About' dialog, providing information about the application, its version, and the developer.");
            statsBarSettingsLabel.Text = Translator.Get("About Button: This button opens the 'About' dialog, providing information about the application, its version, and the developer.");
            toolStripSkipped.Text = Translator.Get("About Button: This button opens the 'About' dialog, providing information about the application, its version, and the developer.");
        }


        private readonly List<string> _sourcePaths = new();

        private void AddSourceFolder(string fullPath)
        {
            // 1. Duplication check
            if (_sourcePaths.Any(p => p.Equals(fullPath, StringComparison.OrdinalIgnoreCase)))
            {
                MessageBox.Show(Translator.Get("This source folder has already been added."),
                                Translator.Get("Duplicate folder"), MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            _sourcePaths.Add(fullPath);

            fromFilesDirLabel.Text = string.Join(", ",
                _sourcePaths.Select(p => System.IO.Path.GetFileName(p)));

            UpdateDriveSpaceInfo();
        }
        private async void sourceDirectoryLabel_Click(object sender, EventArgs e)
        {
            filesDataGridView.DefaultCellStyle.ForeColor = System.Drawing.Color.Black;
            filesDataGridView.DefaultCellStyle.SelectionForeColor = System.Drawing.Color.White;

            using (FolderBrowserDialog folderDialog = new FolderBrowserDialog())
            {
                folderDialog.Description = Translator.Get("Select a source folder to copy/move/delete from:");
                folderDialog.ShowNewFolderButton = false;

                if (folderDialog.ShowDialog() == DialogResult.OK)
                {
                    string sourceDir = folderDialog.SelectedPath;
                    if (!string.IsNullOrEmpty(targetDirLabel.Text) &&
                       targetPaths.Any(tp => string.Equals(tp, sourceDir, StringComparison.OrdinalIgnoreCase)))
                    {
                        MessageBox.Show(
                            Translator.Get("The source folder cannot be the same as one of the target folders."),
                                        Translator.Get("Invalid Selection"), MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }

                    if (!string.IsNullOrEmpty(targetDirLabel.Text) &&
                       _sourceDirectories.Any(tp => string.Equals(tp, sourceDir, StringComparison.OrdinalIgnoreCase)))
                    {
                        MessageBox.Show(
                            Translator.Get("The source folder cannot be added twice."),
                                        Translator.Get("Invalid Selection"), MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }
                    else
                    {
                        _sourceDirectories.Add(folderDialog.SelectedPath);
                        AddSourceFolder(sourceDir);
                    }



                    startButton.Enabled = false;
                    clearFileListButton.Enabled = false;
                    removeFileButton.Enabled = false;
                    cancelButton.Enabled = false;
                    skipButton.Enabled = false;
                    addFileButton.Enabled = false;

                    filePathLabel.Enabled = true;
                    totalCopiedProgressLabel.Enabled = true;
                    fileCountOnLabel.Enabled = true;
                    totalHDSpaceLeftLabel.Enabled = true;

                    var progress = new Progress<string>(msg => fromFilesDirLabel.Text = msg);

                    try
                    {
                        await ScanDirectoryWithUpdatesAsync(sourceDir, updateIntervalMs: 50);
                        _bindingSource.ResetBindings(false);
                    }
                    catch (Exception ex)
                    {
                        fromFilesDirLabel.Text = string.Format(Translator.Get("Error: {0}"), ex.Message);
                        MessageBox.Show(
                            Translator.Get($"An error occurred during scanning: {ex.Message}"),
                                        Translator.Get("Error"), MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    finally
                    {
                        EnableAllControls(cmdHomePage);

                        startButton.Enabled = true;
                        pauseResumeButton.Enabled = false;
                        cancelButton.Enabled = false;
                        skipButton.Enabled = false;
                        addFileButton.Enabled = true;
                        clearFileListButton.Enabled = true;
                        removeFileButton.Enabled = true;
                        sourceDirectoryLabel.Enabled = true;
                        targetDirectoryLabel.Enabled = true;
                    }

                    PlaySound("FileAdded");
                }

                filePathLabel.Text = Translator.Get("Nothing");
                _bindingSource.ResetBindings(false);
            }
        }

        private void targetDirectoryLabel_Click(object sender, EventArgs e)
        {
            // This event handler is triggered when the targetDirectoryLabel is clicked.
            // It uses a 'using' statement to ensure the FolderBrowserDialog is properly disposed of.
            using FolderBrowserDialog folderDialog = new();
            // Shows the folder selection dialog to the user.
            if (folderDialog.ShowDialog() == DialogResult.OK)
            {
                // Gets the path of the folder selected by the user.
                string selectedPath = folderDialog.SelectedPath;

                // Checks if the selected path is the same as the source directory.
                // It also checks if the source directory label is not empty.

                if (!string.IsNullOrEmpty(targetDirLabel.Text) &&
                         targetPaths.Any(tp => string.Equals(tp, selectedPath, StringComparison.OrdinalIgnoreCase)))
                {
                    MessageBox.Show(
                        Translator.Get("The target folder cannot be added twice."),
                                    Translator.Get("Invalid Selection"), MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                if (!string.IsNullOrEmpty(targetDirLabel.Text) &&
                         _sourceDirectories.Any(tp => string.Equals(tp, selectedPath, StringComparison.OrdinalIgnoreCase)))
                {
                    MessageBox.Show(
                        Translator.Get("The target folder cannot be the same as one of the source folders."),
                                    Translator.Get("Invalid Selection"), MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                // Checks if the targetPaths list is empty.
                if (targetPaths.Count == 0)
                {
                    // If it is, it clears the text of the target directory label.
                    targetDirLabel.Text = string.Empty;
                }

                // Adds the newly selected path to the list of target paths.
                targetPaths.Add(selectedPath);

                // Extracts just the folder name from the full path.
                string folderName = System.IO.Path.GetFileName(selectedPath);

                // If the target directory label already has text, it adds a comma and space.
                if (!string.IsNullOrWhiteSpace(targetDirLabel.Text))
                {
                    targetDirLabel.Text += ", ";
                }

                // Appends the new folder name to the target directory label's text.
                targetDirLabel.Text += folderName;

                // Calls a method to update the displayed drive space information.
                UpdateDriveSpaceInfo();
            }
        }
        private void sourceDirectoryLabel_MouseEnter(object sender, EventArgs e)
        {
            // This event handler is triggered when the mouse enters the sourceDirectoryLabel.
            // It updates the status bar's text to provide a tooltip description for the source directory button.
            statusLabel.Text = Translator.Get("Source Directory Button: This is the button to select your source directory from which files will be copied/moved/securely deleted.");
        }
        private void targetDirectoryLabel_MouseEnter(object sender, EventArgs e)
        {
            // This event handler is triggered when the mouse enters the targetDirectoryLabel.
            // It updates the status bar's text to provide a tooltip description for the target directory button.
            statusLabel.Text = Translator.Get("Target Directory Button: This is the button to select your target directory to which your files will be copied/moved.");
        }
        private void moveFileUpLabel_Click(object sender, EventArgs e)
        {
            // This event handler is triggered when the moveFileUpLabel is clicked.
            try
            {
                // Creates a new DataGridViewRow object (though it isn't used).
                DataGridViewRow row = new DataGridViewRow();
                // Gets the index of the first selected row.
                int index = filesDataGridView.SelectedRows[0].Index;

                // Checks if the selected row is already at the top (index 1 or 0).
                if (index == 1 || index == 0)
                {
                    // If the grid has rows, it ensures the top row is selected and visible.
                    if (filesDataGridView.Rows.Count > 0)
                    {
                        filesDataGridView.Rows[0].Selected = true;
                        filesDataGridView.FirstDisplayedScrollingRowIndex = 0;
                    }
                    // The method returns, as no upward movement is needed.
                    return;
                }
                // Checks if the selected row is at index 2 or 3.
                else if (index == 2 || index == 3)
                {
                    // It clears the current selection.
                    filesDataGridView.ClearSelection();
                    // Selects the row one position up.
                    filesDataGridView.Rows[index - 1].Selected = true;
                    // Scrolls the grid to make the newly selected row visible.
                    filesDataGridView.FirstDisplayedScrollingRowIndex = index - 1;
                }
                else
                {
                    // For any other index, it performs the same move-up operation.
                    filesDataGridView.ClearSelection();
                    filesDataGridView.Rows[index - 1].Selected = true;
                    filesDataGridView.FirstDisplayedScrollingRowIndex = index - 1;
                }
            }
            catch { } // Catches and ignores any exceptions, such as no row being selected.
        }

        private void moveFileUpLabel_MouseEnter(object sender, EventArgs e)
        {
            // This event handler is triggered when the mouse enters the moveFileUpLabel.
            // It updates the status bar with a tooltip describing the button's function.
            statusLabel.Text = Translator.Get("Files Up Button: This button allows you to move the selected file up in the list, changing its order in the operation sequence.");
        }

        private void moveFileDownLabel_Click(object sender, EventArgs e)
        {
            // This event handler is triggered when the moveFileDownLabel is clicked.
            try
            {
                // Creates a new DataGridViewRow object (unused in this logic).
                DataGridViewRow row = new DataGridViewRow();
                // Gets the index of the first selected row.
                int index = filesDataGridView.SelectedRows[0].Index;

                // Checks if the selected row is already the last row.
                if (index == filesDataGridView.Rows.Count - 1)
                {
                    // If it is, the method returns, as no downward movement is possible.
                    return;
                }
                else
                {
                    // Assigns the selected row to the 'row' variable.
                    row = filesDataGridView.SelectedRows[0];

                    // Clears the current selection.
                    filesDataGridView.ClearSelection();
                    // Selects the row one position down.
                    filesDataGridView.Rows[index + 1].Selected = true;
                    // Scrolls the grid to make the newly selected row visible.
                    filesDataGridView.FirstDisplayedScrollingRowIndex = index + 1;
                }
            }
            catch { } // Catches and ignores exceptions, such as no row being selected.
        }

        private void moveFileDownLabel_MouseEnter(object sender, EventArgs e)
        {
            // This event handler is triggered when the mouse enters the moveFileDownLabel.
            // It updates the status bar with a tooltip describing the button's function.
            statusLabel.Text = Translator.Get("Files Down Button: This button allows you to move the selected file down in the list, changing its order in the operation sequence.");
        }

        private void moveToTopLabel_Click(object sender, EventArgs e)
        {
            // This event handler is triggered when the moveToTopLabel is clicked.
            try
            {
                // Gets the index of the first selected row.
                int index = filesDataGridView.SelectedRows[0].Index;
                // Creates a new DataGridViewRow object (unused in this logic).
                DataGridViewRow row = new DataGridViewRow();

                // Checks if the selected row is already at the top (index 0).
                if (index == 0)
                {
                    // If it is, it scrolls the grid to the top and returns.
                    filesDataGridView.FirstDisplayedScrollingRowIndex = 0;
                    return;
                }
                else
                {
                    // Scrolls the grid to display the first row.
                    filesDataGridView.FirstDisplayedScrollingRowIndex = 0;
                    // Defines the index of the first row.
                    int lastRowIndex = 0;
                    // Checks if a valid row exists.
                    if (lastRowIndex >= 0)
                    {
                        // Selects the first row.
                        filesDataGridView.Rows[lastRowIndex].Selected = true;
                    }
                }
            }
            catch
            {
                // Catches and ignores any exceptions.
            }
        }

        private void moveToTopLabel_MouseEnter(object sender, EventArgs e)
        {
            // This event handler is triggered when the mouse enters the moveToTopLabel.
            // It updates the status bar with a tooltip describing the button's function.
            statusLabel.Text = Translator.Get("Move to Top Button: This button moves the selected file to the top of the list, making it the first file to be processed in the operation.");
        }

        private void moveToBottomLabel_Click(object sender, EventArgs e)
        {
            // This event handler is triggered when the moveToBottomLabel is clicked.
            try
            {
                // Gets the index of the first selected row.
                int index = filesDataGridView.SelectedRows[0].Index;
                // Creates a new DataGridViewRow object (unused in this logic).
                DataGridViewRow row = new DataGridViewRow();

                // Checks if the selected row is already the last row.
                if (index == filesDataGridView.Rows.Count - 1)
                {
                    // If it is, the method returns.
                    return;
                }
                else
                {
                    // Scrolls the grid to display the last row.
                    filesDataGridView.FirstDisplayedScrollingRowIndex = filesDataGridView.RowCount - 1;
                    // Defines the index of the last row.
                    int lastRowIndex = filesDataGridView.Rows.Count - 1;
                    // Checks if a valid last row exists.
                    if (lastRowIndex >= 0)
                    {
                        // Selects the last row.
                        filesDataGridView.Rows[lastRowIndex].Selected = true;
                    }
                }
            }
            catch { } // Catches and ignores exceptions.
        }
        private void moveToBottomLabel_MouseEnter(object sender, EventArgs e)
        {
            // This event handler is triggered when the mouse enters the moveToBottomLabel.
            // It updates the status bar with a tooltip describing the button's function.
            statusLabel.Text = Translator.Get("Move to Bottom Button: This button moves the selected file to the bottom of the list, making it the last file to be processed in the operation.");
        }


        /// <summary>
        /// Checks GitHub for a newer version of the program.
        /// If a newer ZIP is found, downloads it and starts the update process.
        /// Shows a message if already up to date.
        /// </summary>
        private async void CheckAndUpdateAsync()
        {
            try
            {
                // Create an HTTP client for web requests
                using var http = new HttpClient();

                // Parse the local version string into a Version object
                var localVer = new Version(_localVersion);

                // Loop through minor versions 0–9 to check for the next available update
                for (int minor = 0; minor <= 9; minor++)
                {
                    var nextVer = $"1.{minor}";
                    // Skip if the next version is not newer than the local version
                    if (new Version(nextVer) <= localVer) continue;

                    // Build the file and URL for the potential update
                    var file = $"CTv{nextVer}.zip";
                    var url = $"{GITHUB_PAGES_BASE}/{file}";

                    // Send a HEAD request to see if the file exists on GitHub
                    using var resp = await http.SendAsync(
                        new HttpRequestMessage(HttpMethod.Head, url));

                    // If the file exists, prepare to download it
                    if (resp.StatusCode == System.Net.HttpStatusCode.OK)
                    {
                        _remoteZip = file;
                        var tempPath = System.IO.Path.Combine(System.IO.Path.GetTempPath(), _remoteZip);

                        // Use WebClient to download the ZIP asynchronously
                        var wc = new WebClient();
                        wc.DownloadFileCompleted += Wc_DownloadFileCompleted;
                        wc.DownloadFileAsync(new Uri(url), tempPath);
                        return; // Exit once a valid update is found
                    }
                }

                // No update found – inform the user
                MessageBox.Show(
                    Translator.Get("The program is up to date."), Translator.Get("Updater"),
                                MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            catch (Exception ex)
            {
                // Show error and exit if update check fails
                MessageBox.Show(
                    Translator.Get($"Update check failed:\n{ex.Message}"), Translator.Get("Updater"),
                                MessageBoxButtons.OK, MessageBoxIcon.Error);
                System.Windows.Forms.Application.Exit();
                return;
            }
        }

        /// <summary>
        /// Deletes any executable or related files in the application folder
        /// that have an older version than the current running executable.
        /// </summary>
        private void CleanupOldVersions()
        {
            try
            {
                // Determine the current application folder
                var appFolder = AppDomain.CurrentDomain.BaseDirectory;
                // Get the current executable name without extension
                var currentExeName = System.IO.Path.GetFileNameWithoutExtension(Application.ExecutablePath);

                // Try to extract version number from current exe name
                var currentVersionString = ExtractVersionFromFileName(currentExeName);
                if (currentVersionString == null)
                {
                    Console.WriteLine("Could not determine current version from exe name");
                    return;
                }

                // Parse the extracted version string
                if (!Version.TryParse(currentVersionString, out var currentVersion))
                {
                    Console.WriteLine($"Could not parse current version: {currentVersionString}");
                    return;
                }

                // Get all files inside the application directory
                var allFiles = Directory.GetFiles(appFolder, "*.*", SearchOption.AllDirectories);

                // Iterate through each file to check its version
                foreach (var file in allFiles)
                {
                    var fileName = System.IO.Path.GetFileNameWithoutExtension(file);

                    // Skip the currently running executable
                    if (fileName.Equals(currentExeName, StringComparison.OrdinalIgnoreCase))
                        continue;

                    // Attempt to extract a version from the filename
                    var fileVersionString = ExtractVersionFromFileName(fileName);
                    if (fileVersionString == null)
                        continue;

                    // Compare file version to current version
                    if (Version.TryParse(fileVersionString, out var fileVersion))
                    {
                        if (fileVersion < currentVersion)
                        {
                            // Delete files with an older version
                            try
                            {
                                File.Delete(file);
                                Console.WriteLine($"Deleted older version: {fileName} (v{fileVersion}) - current is v{currentVersion}");
                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine($"Could not delete {fileName}: {ex.Message}");
                            }
                        }
                        else
                        {
                            Console.WriteLine($"Keeping {fileName} (v{fileVersion}) - not older than v{currentVersion}");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error during cleanup: {ex.Message}");
            }
        }

        /// <summary>
        /// Extracts a version string (e.g. "1.2" or "3.1.4") from a filename
        /// following the pattern "...vX.Y...".
        /// Returns null if no match is found.
        /// </summary>
        private string ExtractVersionFromFileName(string fileName)
        {
            var match = System.Text.RegularExpressions.Regex.Match(fileName, @"v(\d+(\.\d+)+)");
            return match.Success ? match.Groups[1].Value : null;
        }

        /// <summary>
        /// Handles the completion of the update ZIP download.
        /// Extracts files, copies them to the app folder, and launches the new version.
        /// </summary>
        private void Wc_DownloadFileCompleted(object? sender, AsyncCompletedEventArgs e)
        {
            // Exit if the download encountered an error
            if (e.Error != null)
            {
                MessageBox.Show
                    (Translator.Get($"Download failed:\n{e.Error.Message}"), Translator.Get("Updater"),
                                MessageBoxButtons.OK, MessageBoxIcon.Error);
                Application.Exit();
                return;
            }

            try
            {
                var appFolder = AppDomain.CurrentDomain.BaseDirectory;
                var tempZip = System.IO.Path.Combine(System.IO.Path.GetTempPath(), _remoteZip!);

                // Create a temporary extraction folder for the update
                var tempExtractFolder = System.IO.Path.Combine(System.IO.Path.GetTempPath(), Guid.NewGuid().ToString("N"));
                Directory.CreateDirectory(tempExtractFolder);

                try
                {
                    // Extract the downloaded ZIP into the temporary folder
                    ZipFile.ExtractToDirectory(tempZip, tempExtractFolder, true);

                    // Determine the expected name of the new executable
                    var newExeName = System.IO.Path.GetFileNameWithoutExtension(_remoteZip!) + ".exe";
                    var newExePathInTemp = System.IO.Path.Combine(tempExtractFolder, newExeName);

                    // Verify the new executable exists
                    if (!File.Exists(newExePathInTemp))
                        throw new FileNotFoundException(
                            string.Format(Translator.Get("New executable not found: {0}"), newExePathInTemp));

                    // Copy new files into the application folder (overwrite if needed)
                    CopyDirectory(tempExtractFolder, appFolder, true);

                    // Set a flag in settings so the new version can perform cleanup
                    Properties.Settings.Default.Updated = true;
                    Properties.Settings.Default.Save();

                    // Delete temp ZIP and extracted files
                    File.Delete(tempZip);
                    Directory.Delete(tempExtractFolder, true);

                    // Launch the new executable
                    var newExePath = System.IO.Path.Combine(appFolder, newExeName);
                    Process.Start(new ProcessStartInfo
                    {
                        FileName = newExePath,
                        UseShellExecute = true
                    });

                    // Exit the old application
                    Application.Exit();
                }
                finally
                {
                    // Safety cleanup in case of exceptions
                    if (File.Exists(tempZip))
                        File.Delete(tempZip);
                    if (Directory.Exists(tempExtractFolder))
                        Directory.Delete(tempExtractFolder, true);
                }
            }
            catch (Exception ex)
            {
                // Inform user if update process fails
                MessageBox.Show(Translator.Get($"Update failed:\n{ex.Message}"), Translator.Get("Updater"),
                                MessageBoxButtons.OK, MessageBoxIcon.Error);
                Application.Exit();
            }
        }

        /// <summary>
        /// Recursively copies all files and directories from source to target.
        /// Creates target directories as needed.
        /// </summary>
        private void CopyDirectory(string sourceDir, string targetDir, bool overwrite = false)
        {
            var dir = new DirectoryInfo(sourceDir);

            // Ensure target directory exists
            Directory.CreateDirectory(targetDir);

            // Copy all files in the current directory
            foreach (var file in dir.GetFiles())
            {
                var targetFilePath = System.IO.Path.Combine(targetDir, file.Name);
                file.CopyTo(targetFilePath, overwrite);
            }

            // Recursively copy subdirectories
            foreach (var subDir in dir.GetDirectories())
            {
                var targetSubDir = System.IO.Path.Combine(targetDir, subDir.Name);
                CopyDirectory(subDir.FullName, targetSubDir, overwrite);
            }
        }

        /// <summary>
        /// Creates a staging folder and PowerShell script to replace
        /// the old application folder with the new version, then restart.
        /// Used when direct overwrite is not possible.
        /// </summary>
        private void StageReplaceAndRestart(string stagingFolder)
        {
            // Get the current application folder and its parent directory
            var oldFolder = AppDomain.CurrentDomain.BaseDirectory;
            var parentDir = System.IO.Path.GetDirectoryName(oldFolder)!;
            var leafName = System.IO.Path.GetFileName(oldFolder.TrimEnd(System.IO.Path.DirectorySeparatorChar));

            // Determine the new executable name from the ZIP
            var newExeName = System.IO.Path.GetFileNameWithoutExtension(_remoteZip!) + ".exe";

            // Create a temporary mirror folder for staging the replacement
            var mirror = System.IO.Path.Combine(parentDir, Guid.NewGuid().ToString("N"));
            DirectoryCopy(stagingFolder, mirror, true);

            // Build a PowerShell script to replace the old folder once the app exits
            var ps1 = System.IO.Path.Combine(parentDir, "CTupdate.ps1");
            File.WriteAllText(ps1, $$"""
Add-Type -AssemblyName System.Windows.Forms
[System.Windows.Forms.MessageBox]::Show('Waiting for old EXE to exit...','Updater')

$pidOld = {{Process.GetCurrentProcess().Id}}
$proc   = Get-Process -Id $pidOld -ErrorAction SilentlyContinue
while ($proc -and !$proc.HasExited) {
    Start-Sleep -Milliseconds 500
    $proc.Refresh()
}
if ($proc) { $proc.Kill(); $proc.WaitForExit() }
Start-Sleep -Seconds 1

[System.Windows.Forms.MessageBox]::Show('Replacing folder...','Updater')

$old = "{{oldFolder}}"
$new = "{{mirror}}"
$final = Join-Path "{{parentDir}}" "{{leafName}}"

if (!(Test-Path $new)) { throw "New folder missing: $new" }

Remove-Item -Path $old -Recurse -Force
Rename-Item -Path $new -NewName "{{leafName}}"

Start-Process (Join-Path $final "{{newExeName}}")
""");

            // Run the PowerShell script in a separate process
            _ = Task.Run(() =>
            {
                using var ps = Process.Start(new ProcessStartInfo
                {
                    FileName = "powershell",
                    Arguments = $"-NoProfile -ExecutionPolicy Bypass -File \"{ps1}\"",
                    WindowStyle = ProcessWindowStyle.Normal,
                    CreateNoWindow = false,
                    UseShellExecute = false
                });
                ps!.WaitForExit();
            });

            // Exit the current application so the script can proceed
            Application.Exit();
        }

        /// <summary>
        /// Copies a directory recursively to a new location, preserving subdirectories.
        /// Overwrites existing files if necessary.
        /// </summary>
        private static void DirectoryCopy(string sourceDirName, string destDirName, bool copySubDirs)
        {
            var dir = new DirectoryInfo(sourceDirName);
            var dirs = dir.GetDirectories();
            Directory.CreateDirectory(destDirName);

            // Copy all files in the current directory
            foreach (var file in dir.GetFiles())
                file.CopyTo(System.IO.Path.Combine(destDirName, file.Name), true);

            // Copy all subdirectories if requested
            if (copySubDirs)
            {
                foreach (var subDir in dirs)
                    DirectoryCopy(subDir.FullName, System.IO.Path.Combine(destDirName, subDir.Name), true);
            }
        }

        // Event handler for "Check for Updates" button
        private void checkForUpdatesButton_Click(object sender, EventArgs e)
        {
            CheckAndUpdateAsync(); // Trigger the update check process
        }

        // Event handler for "Reset Totals" button
        private void resetTotalsButton_Click(object sender, EventArgs e)
        {
            // Only show confirmation if totals exist
            if (!TotalsManager.HasAnyTotals())
                return;

            // Ask the user for confirmation before resetting
            DialogResult result = MessageBox.Show(
                Translator.Get("Are you sure you want to reset all totals? This action cannot be undone."),
                Translator.Get("Confirm Reset"),
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Question
            );
            // Reset totals if user confirms
            if (result == DialogResult.Yes)
            {
                TotalsManager.ResetTotals(
                    totalCopyOperationsLabel, totalMoveOperationsLabel, totalDeleteOperationsLabel,
                    totalCancelledOperationsLabel, totalCompletedOperationsLabel,
                    totalFilesConsideredLabel, totalFilesCopiedLabel, totalFilesMovedLabel,
                    totalFilesDeletedLabel, totalFilesSkippedLabel, totalFilesFailedLabel,
                    totalBytesProcessedLabel, totalBytesToProcessLabel,
                    totalElapsedTimeLabel, totalTargetTimeLabel,
                    resetTotalsButton // Pass the button reference
                );
            }
        }

        private void updateAutoCheckBox_MouseHover(object sender, EventArgs e)
        {
            statsBarSettingsLabel.Text = Translator.Get("Auto Check for Updates CheckBox: This checkbox determines whether the application should automatically check for updates on startup.");
        }

        private void updateBetaCheckBox_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Include Beta Versions CheckBox: This checkbox determines whether to include beta versions when checking for updates.");
        }

        private void updateManuallyCheckBox_MouseHover(object sender, EventArgs e)
        {
            //Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Manual Update Check CheckBox: This checkbox determines whether the application should check for updates only when manually triggered by the user.");
        }

        private void closeProgramCheckBox_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Close Program CheckBox: This checkbox determines whether to automatically close the application when an error occurs.");
        }

        private void restartCheckBox_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Restart CheckBox: This checkbox determines whether to automatically restart the application when an error occurs.");
        }

        private void startWithWindowsCheckBox_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Start with Windows CheckBox: This checkbox determines whether to launch the application automatically when Windows starts.");
        }

        private void checkForUpdatesButton_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Check for Updates Button: This button manually checks for updates to the application.");
        }

        private void clearSettingsButton_MouseHover(object sender, EventArgs e)
        {
            statsBarSettingsLabel.Text = Translator.Get("Clear Settings Button: This button clears all user-defined settings, reverting the application to its default configuration.");
        }

        private void saveSettingsButton_MouseHover(object sender, EventArgs e)
        {
            statsBarSettingsLabel.Text = Translator.Get("Save Settings Button: This button saves the current settings, ensuring that any changes made are retained for future sessions.");
        }

        private void emailNamesCheckBox_MouseHover(object sender, EventArgs e)
        {
            statsBarSettingsLabel.Text = Translator.Get("Email Names CheckBox: This checkbox determines whether to include only the names of files and directories in the email export.");
        }

        private void emailPathsCheckBox_MouseHover(object sender, EventArgs e)
        {
            statsBarSettingsLabel.Text = Translator.Get("Email Paths CheckBox: This checkbox determines whether to include the full paths of files and directories in the email export.");
        }

        private void zipTogetherCheckBox_MouseHover(object sender, EventArgs e)
        {
            statsBarSettingsLabel.Text = Translator.Get("Zip Together CheckBox: This checkbox determines whether to create a single zip file containing all files and directories before the copy or move operations.");
        }

        private void fullPathsCheckBox_MouseHover(object sender, EventArgs e)
        {
            statsBarSettingsLabel.Text = Translator.Get("Full Paths CheckBox: This checkbox determines whether to export the full paths of files and directories.");
        }

        private void overMBCheckBox_MouseHover(object sender, EventArgs e)
        {
            statsBarSettingsLabel.Text = Translator.Get("Over MB CheckBox: This checkbox determines whether to apply multi-threading only to files larger than the specified size in megabytes.");
        }

        private void underMBCheckBox_MouseHover(object sender, EventArgs e)
        {
            statsBarSettingsLabel.Text = Translator.Get("Under MB CheckBox: This checkbox determines whether to apply multi-threading only to files smaller than the specified size in megabytes.");
        }

        private void multithreadCheckBox_MouseHover(object sender, EventArgs e)
        {

        }

        private void alwaysOnTopCheckBox_MouseHover(object sender, EventArgs e)
        {
            statsBarSettingsLabel.Text = Translator.Get("Always On Top CheckBox: This checkbox determines whether the application window should always stay on top of other windows.");
        }

        private void confirmDragDropCheckBox_MouseHover(object sender, EventArgs e)
        {
            statsBarSettingsLabel.Text = Translator.Get("Confirm Drag & Drop CheckBox: This checkbox determines whether to show a confirmation dialog when files are dragged and dropped into the application.");
        }

        private void contextMenuCheckBox_MouseHover(object sender, EventArgs e)
        {
            statsBarSettingsLabel.Text = Translator.Get("Context Menu CheckBox: This checkbox determines whether to add an option to the Windows context menu for quick access to the application.");
        }

        private void languageComboBox_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Language ComboBox: This dropdown combobox allows you to select the language for the application's user interface.");
        }

        private void skinsComboBox_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Skins ComboBox: This dropdown combobox allows you to select different skins or themes for the application's appearance.");
        }

        private void onFinishCheckBox_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("On Finish CheckBox: This checkbox determines whether to play a sound notification when the file operation finishes.");
        }

        private void onCancelCheckBox_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("On Cancel CheckBox: This checkbox determines whether to play a sound notification when the file operation is canceled.");
        }

        private void onAddFilesCheckBox_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("On Add Files CheckBox: This checkbox determines whether to play a sound notification when files are added to the operation list.");
        }

        private void onErrorCheckBox_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("On Error CheckBox: This checkbox determines whether to play a sound notification when an error occurs during the file operation.");
        }

        private void dataGridView1_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Export Files Data Grid View: This area displays the list of files to be processed, along with their details such as source and destination.");
        }

        private void registerButton_MouseEnter_1(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Register Button: This button allows you to register the application with a license key to unlock full features.");
        }

        private void registerButton_MouseHover(object sender, EventArgs e)
        {
            statsBarSettingsLabel.Text = Translator.Get("Register Button: This button allows you to register the application with a license key to unlock full features.");
        }

        private void addAllowedButton_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripExclusions' to a descriptive message.
            toolStripExclusions.Text = Translator.Get("Add Allowed Button: This button adds a new allowed file or directory to the allowed list.");
        }

        private void removeAllowedButton_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripExclusions' to a descriptive message.
            toolStripExclusions.Text = Translator.Get("Remove Allowed Button: This button removes the selected allowed file or directory from the allowed list.");
        }

        private void clearAllowedButton_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripExclusions' to a descriptive message.
            toolStripExclusions.Text = Translator.Get("Clear Allowed Button: This button clears the entire list of allowed files and directories.");
        }

        private void allowedTextBox_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripExclusions' to a descriptive message.
            toolStripExclusions.Text = Translator.Get("Allowed Text Box: This text box allows you to enter file or directory paths to be added to the allowed list.");
        }

        private void allowedExtListBox_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripExclusions' to a descriptive message.
            toolStripExclusions.Text = Translator.Get("Allowed List Box: This list box displays the list of allowed files and directories that will be included in the operation.");
        }

        private void addExcludedButton_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripExclusions' to a descriptive message.
            toolStripExclusions.Text = Translator.Get("Add Excluded Button: This button adds a new excluded file or directory to the exclusions list.");
        }

        private void removeExcludedButton_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripExclusions' to a descriptive message.
            toolStripExclusions.Text = Translator.Get("Clear Excluded Button: This button clears the entire list of excluded files and directories.");
        }

        private void clearExcludedButton_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripExclusions' to a descriptive message.
            toolStripExclusions.Text = Translator.Get("Clear Excluded Button: This button clears the entire list of excluded files and directories.");
        }

        private void excludedTextBox_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripExclusions' to a descriptive message.
            toolStripExclusions.Text = Translator.Get("Excluded Text Box: This text box allows you to enter file or directory paths to be added to the exclusions list.");
        }

        private void excludedExtListBox_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripExclusions' to a descriptive message.
            toolStripExclusions.Text = Translator.Get("Excluded List Box: This list box displays the list of excluded files and directories that will be skipped during the operation.");
        }

        private void cloneButton_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripCopyHistory' to a descriptive message.
            toolStripCopyHistory.Text = Translator.Get("Clone Button: This button clones the selected operation from the history list, allowing you to quickly repeat a previous operation.");
        }

        private void deleteEntryButton_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripCopyHistory' to a descriptive message.
            toolStripCopyHistory.Text = Translator.Get("Delete Entry Button: This button deletes the selected entry from the operation history list.");
        }

        private void clearHistoryButton_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripCopyHistory' to a descriptive message.
            toolStripCopyHistory.Text = Translator.Get("Clear History Button: This button clears the entire operation history list.");
        }

        private void copyHistoryDGV_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripCopyHistory' to a descriptive message.
            toolStripCopyHistory.Text = Translator.Get("Copy History Data Grid View: This grid displays the history of file operations performed by the application, including details such as source and target paths, operation type, date, and status.");
        }

        private void goToInExplorerButton_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripSkipped' to a descriptive message.
            toolStripSkipped.Text = Translator.Get("Go To In Explorer Button: This button opens the selected file's location in Windows Explorer.");
        }

        private void clearSkippedListButton_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripSkipped' to a descriptive message.
            toolStripSkipped.Text = Translator.Get("Clear Skipped List Button: This button clears the list of skipped files.");
        }

        private void skippedDataGridView_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripSkipped' to a descriptive message.
            toolStripSkipped.Text = Translator.Get("Skipped Data Grid View: This grid displays the list of files that were skipped during the operation, including their names, paths, sizes, and reasons for skipping.");
        }

        private void filesNameLabel1_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripMulti' to a descriptive message.
            toolStripMulti.Text = Translator.Get("Files Name Label 1: This label shows the name of the file being processed by thread 1, along with the percentage and speed.");
        }

        private void filesNameLabel2_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripMulti' to a descriptive message.
            toolStripMulti.Text = Translator.Get("Files Name Label 2: This label shows the name of the file being processed by thread 2, along with the percentage and speed.");
        }

        private void filesNameLabel3_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripMulti' to a descriptive message.
            toolStripMulti.Text = Translator.Get("Files Name Label 3: This label shows the name of the file being processed by thread 3, along with the percentage and speed.");
        }

        private void filesNameLabel4_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripMulti' to a descriptive message.
            toolStripMulti.Text = Translator.Get("Files Name Label 4: This label shows the name of the file being processed by thread 4, along with the percentage and speed.");
        }

        private void fileCountMultiLabel_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripMulti' to a descriptive message.
            toolStripMulti.Text = Translator.Get("File Count Multi Label: This label shows the number of files processed out of the total number of files in the multi-threaded operation.");
        }

        private void speedMultiLabel_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripMulti' to a descriptive message.
            toolStripMulti.Text = Translator.Get("Speed Multi Label: This label shows the current speed of the multi-threaded operation in bytes per second.");
        }

        private void totalTimeMultiLabel_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripMulti' to a descriptive message.
            toolStripMulti.Text = Translator.Get("Total Time Multi Label: This label shows the elapsed time out of the estimated target time for the multi-threaded operation.");
        }

        private void totalCMDMultiLabel_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripMulti' to a descriptive message.
            toolStripMulti.Text = Translator.Get("Total C/M/D Label: This label shows the total space processed out of the total space for all files.");
        }

        private void totalSpaceMultiLabel_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'toolStripMulti' to a descriptive message.
            toolStripMulti.Text = Translator.Get("Total Space Left Label: This label shows the total hard drive used out of the total hard drive space left on the target drive for the multi-threaded operation.");
        }

        private void fileIconPicBox_MouseHover(object sender, EventArgs e)
        {
            // Updates the status label with a description of the file icon picture box.
            statusLabel.Text = Translator.Get("File's Icon PictureBox: The file's icon which reflect the current file will be shown here.");
        }

        private void sourceDirectoryLabel_MouseHover(object sender, EventArgs e)
        {
            // This event handler is triggered when the mouse hovers over the sourceDirectoryLabel.
            // It updates the status bar's text to provide a tooltip description for the source directory button.
            statusLabel.Text = Translator.Get("Source Directory Button: This is the button to select your source directory from which files will be copied/moved/securely deleted.");
        }

        private void targetDirectoryLabel_MouseHover(object sender, EventArgs e)
        {
            // This event handler is triggered when the mouse hoveers over the targetDirectoryLabel.
            // It updates the status bar's text to provide a tooltip description for the target directory button.
            statusLabel.Text = Translator.Get("Target Directory Button: This is the button to select your target directory to which your files will be copied/moved.");
        }

        private void copyMoveDeleteComboBox_MouseHover(object sender, EventArgs e)
        {
            // Updates the status label with a description of the operation dropdown.
            statusLabel.Text = Translator.Get("Copy/Move/Secure Delete ComboBox: This dropdown combobox is to select the operation of Copy/Move/Secure Delete.");
        }

        private void onFinishComboBox_MouseHover(object sender, EventArgs e)
        {
            // Updates the status label with a description of the "on finish" dropdown.
            statusLabel.Text = Translator.Get("On Finish ComboBox: This dropdown combobox is to select the action to perform when the operation finishes.");
        }

        private void startButton_MouseHover(object sender, EventArgs e)
        {
            // Updates the status label with a description of the start button.
            statusLabel.Text = Translator.Get("Start Button: This button starts the operation of Copy/Move/Secure Delete.");
        }

        private void pauseResumeButton_MouseHover(object sender, EventArgs e)
        {
            // Updates the status label with a description of the pause/resume button.
            statusLabel.Text = Translator.Get("Pause/Resume Button: This button pauses/resumes the current operation.");
        }

        private void cancelButton_MouseHover(object sender, EventArgs e)
        {
            // Updates the status label with a description of the cancel button.
            statusLabel.Text = Translator.Get("Cancel Button: This button cancels the current operation.");
        }

        private void skipButton_MouseHover(object sender, EventArgs e)
        {
            // Updates the status label with a description of the skip button.
            statusLabel.Text = Translator.Get("This button skips the current file and moves to the next one in the operation.");
        }

        private void addFileButton_MouseHover(object sender, EventArgs e)
        {
            // Updates the status label with a description of the add file button.
            statusLabel.Text = Translator.Get("Add File Button: This button adds files to the list for the current operation.");
        }

        private void removeFileButton_MouseHover(object sender, EventArgs e)
        {
            // Updates the status label with a description of the remove file button.
            statusLabel.Text = Translator.Get("Remove File Button: This button removes the selected file from the list for the current operation.");
        }

        private void clearFileListButton_MouseHover(object sender, EventArgs e)
        {
            // Updates the status label with a description of the clear file list button.
            statusLabel.Text = Translator.Get("Clear File List Button: This button clears the entire file list for the current operation.");
        }

        private void fileCountOnLabel_MouseHover(object sender, EventArgs e)
        {
            // Updates the status label with a description of the file count label.
            statusLabel.Text = Translator.Get("File Count Label: This label shows the total number of files in the current operation.");
        }

        private void elapsedAndTargetTimeLabel_MouseHover(object sender, EventArgs e)
        {
            // Updates the status label with a description of the elapsed and target time label.
            statusLabel.Text = Translator.Get("Elapsed Out of Target Time Label: This label shows the elapsed time and the estimated target time for the current operation.");
        }

        private void fileProcessedLabel_MouseHover(object sender, EventArgs e)
        {
            // Updates the status label with a description of the file processed label.
            statusLabel.Text = Translator.Get("File Processed Label: This label shows the number of converted bytes that have been processed in the current operation.");
        }

        private void speedLabel_MouseHover(object sender, EventArgs e)
        {
            // Updates the status label with a description of the speed label.
            statusLabel.Text = Translator.Get("Speed Label: This label shows the current speed of the operation in bytes per second.");
        }

        private void totalCopiedProgressLabel_MouseHover(object sender, EventArgs e)
        {
            // Updates the status label with a description of the total copied progress label.
            statusLabel.Text = Translator.Get("Total Copied Progress Label: This label shows the total bytes processed and the total bytes to process in the current operation.");
        }

        private void totalHDSpaceLeftLabel_MouseHover(object sender, EventArgs e)
        {
            // Updates the status label with a description of the total hard drive space left label.
            statusLabel.Text = Translator.Get("Total HD Space Left Label: This label shows the total hard drive space left on the target drive.");
        }

        private void keepDirStructCheckBox_MouseHover(object sender, EventArgs e)
        {
            // Updates the status label with a description of the keep directory structure checkbox.
            statusLabel.Text = Translator.Get("Keep Directory Structure CheckBox: This checkbox determines whether to keep the directory structure of the source files in the target directory.");
        }

        private void overwriteAllCheckBox_MouseHover(object sender, EventArgs e)
        {
            // Updates the status label with a description of the overwrite all checkbox.
            statusLabel.Text = Translator.Get("Overwrite All CheckBox: This checkbox determines whether to overwrite all files in the target directory without checking their timestamps.");
        }

        private void createCustomDirCheckBox_MouseHover(object sender, EventArgs e)
        {
            // Updates the status label with a description of the create custom directory checkbox.
            statusLabel.Text = Translator.Get("Create Custom Directory Prior CheckBox: This checkbox determines whether to create a custom directory structure in the target directory based on the source files.");
        }

        private void doNotOverwriteCheckBox_MouseHover(object sender, EventArgs e)
        {
            // Updates the status label with a description of the do not overwrite checkbox.
            statusLabel.Text = Translator.Get("Do Not Overwrite CheckBox: This checkbox determines whether to skip files that already exist in the target directory.");
        }

        private void copyFilesDirsCheckBox_MouseHover(object sender, EventArgs e)
        {
            // Updates the status label with a description of the copy files and directories checkbox.
            statusLabel.Text = Translator.Get("Copy Only Files CheckBox: This checkbox determines whether to copy files and no directories from the source directory to the target directory.");
        }

        private void keepOnlyFilesCheckBox_MouseHover(object sender, EventArgs e)
        {
            // Updates the status label with a description of the keep only files checkbox.
            statusLabel.Text = Translator.Get("Keep Only Files CheckBox: This checkbox determines whether to keep ONLY files inside the main directory.");
        }

        private void modernFile_MouseHover(object sender, EventArgs e)
        {
            // Updates the status label with a description of the keep only files checkbox.
            statusLabel.Text = Translator.Get("File Progress Bar: Shows the current percentage of the file being processed");
        }

        private void modernTotal_MouseHover(object sender, EventArgs e)
        {
            // Updates the status label with a description of the keep only files checkbox.
            statusLabel.Text = Translator.Get("Total Progress Bar: Shows the current percentage of the total of all files being processed");
        }

        private void searchTextBox_MouseHover(object sender, EventArgs e)
        {
            // Sets the status label to describe the 'searchTextBox'.
            statusLabel.Text = Translator.Get("Search Text Box: This text box allows you to search for specific files in the file list. Type a keyword to filter the displayed files.");
        }

        private void clearTextButton_MouseHover(object sender, EventArgs e)
        {
            // Sets the status label to describe the 'clearTextButton'.
            statusLabel.Text = Translator.Get("Clear Text Button: This button clears the text in the search box, allowing you to reset the search filter and view all files in the list.");
        }

        private void moveFileUpLabel_MouseHover(object sender, EventArgs e)
        {
            // This event handler is triggered when the mouse hovers over the moveFileUpLabel.
            // It updates the status bar with a tooltip describing the button's function.
            statusLabel.Text = Translator.Get("Files Up Button: This button allows you to move the selected file up in the list, changing its order in the operation sequence.");
        }

        private void moveFileDownLabel_MouseHover(object sender, EventArgs e)
        {
            // This event handler is triggered when the mouse hovers over the moveFileDownLabel.
            // It updates the status bar with a tooltip describing the button's function.
            statusLabel.Text = Translator.Get("Files Down Button: This button allows you to move the selected file down in the list, changing its order in the operation sequence.");
        }

        private void moveToTopLabel_MouseHover(object sender, EventArgs e)
        {
            // This event handler is triggered when the mouse hovers over the moveToTopLabel.
            // It updates the status bar with a tooltip describing the button's function.
            statusLabel.Text = Translator.Get("Move to Top Button: This button moves the selected file to the top of the list, making it the first file to be processed in the operation.");
        }

        private void moveToBottomLabel_MouseHover(object sender, EventArgs e)
        {
            // This event handler is triggered when the mouse hovers over the moveToBottomLabel.
            // It updates the status bar with a tooltip describing the button's function.
            statusLabel.Text = Translator.Get("Move to Bottom Button: This button moves the selected file to the bottom of the list, making it the last file to be processed in the operation.");
        }

        private void autoScrollCheckBox_MouseHover(object sender, EventArgs e)
        {
            // Sets the status label to describe the 'autoScrollCheckBox'.
            statusLabel.Text = Translator.Get("Auto-Scroll CheckBox: This checkbox enables or disables automatic scrolling of the files data grid view while files are being processed.");
        }

        private void verifyCheckBox_MouseHover(object sender, EventArgs e)
        {
            // Sets the status label to describe the 'verifyCheckBox'.
            statusLabel.Text = Translator.Get("Verify After Transfer CheckBox: This checkbox determines whether to verify the integrity of files after they have been copied or moved.");
        }

        private void filesDataGridView_MouseHover(object sender, EventArgs e)
        {
            // Sets the status label to describe the 'filesDataGridView'.
            statusLabel.Text = Translator.Get("Files Data Grid View: This area displays the list of files to be processed, along with their details such as source and destination.");
        }

        private void progressBarMulti1_MouseHover(object sender, EventArgs e)
        {
            // Sets the status label to describe the 'progressBarMulti1'.
            statusLabel.Text = Translator.Get("Thread 1 Progress Bar: This progress bar shows the progress of the file being processed by thread 1.");
        }

        private void progressBarMulti2_MouseHover(object sender, EventArgs e)
        {
            // Sets the status label to describe the 'progressBarMulti2'.
            statusLabel.Text = Translator.Get("Thread 2 Progress Bar: This progress bar shows the progress of the file being processed by thread 2.");
        }

        private void progressBarMulti3_MouseHover(object sender, EventArgs e)
        {
            // Sets the status label to describe the 'progressBarMulti3'.
            statusLabel.Text = Translator.Get("Thread 3 Progress Bar: This progress bar shows the progress of the file being processed by thread 3.");
        }

        private void progressBarMulti4_MouseHover(object sender, EventArgs e)
        {
            // Sets the status label to describe the 'progressBarMulti4'.
            statusLabel.Text = Translator.Get("Thread 4 Progress Bar: This progress bar shows the progress of the file being processed by thread 4.");
        }

        private void progressBarMultiTotal_MouseHover(object sender, EventArgs e)
        {
            // Sets the status label to describe the 'progressBarMultiTotal'.
            statusLabel.Text = Translator.Get("Total Multi-Threaded Progress Bar: This progress bar shows the overall progress of all files being processed in the multi-threaded operation.");
        }

        private void rollUpLabel_MouseHover(object sender, EventArgs e)
        {
            // This event handler is triggered when the mouse pointer hovers over the area of the 'rollUpLabel'.
            // It updates the text of multiple ToolStripStatusLabels to provide a tooltip description.
            statusLabel.Text = Translator.Get("Roll Up Button: This button scrolls the form up, allowing you to view files that are currently not visible in the data grid view.");
            toolStripCopyHistory.Text = Translator.Get("Roll Up Button: This button scrolls the form up, allowing you to view files that are currently not visible in the data grid view.");
            toolStripExclusions.Text = Translator.Get("Roll Up Button: This button scrolls the form up, allowing you to view files that are currently not visible in the data grid view.");
            toolStripMulti.Text = Translator.Get("Roll Up Button: This button scrolls the form up, allowing you to view files that are currently not visible in the data grid view.");
            statsBarSettingsLabel.Text = Translator.Get("Roll Up Button: This button scrolls the form up, allowing you to view files that are currently not visible in the data grid view.");
            toolStripSkipped.Text = Translator.Get("Roll Up Button: This button scrolls the form up, allowing you to view files that are currently not visible in the data grid view.");
        }

        private void rollDownLabel_MouseHover(object sender, EventArgs e)
        {
            // This event handler is triggered when the mouse pointer hovers over the 'rollDownLabel'.
            // It updates the text of multiple ToolStripStatusLabels with a tooltip description for the roll-down button.
            statusLabel.Text = Translator.Get("Roll Down Button: This button scrolls the form down, allowing you to view files that are currently not visible in the data grid view.");
            toolStripCopyHistory.Text = Translator.Get("Roll Down Button: This button scrolls the form down, allowing you to view files that are currently not visible in the data grid view.");
            toolStripExclusions.Text = Translator.Get("Roll Down Button: This button scrolls the form down, allowing you to view files that are currently not visible in the data grid view.");
            toolStripMulti.Text = Translator.Get("Roll Down Button: This button scrolls the form down, allowing you to view files that are currently not visible in the data grid view.");
            statsBarSettingsLabel.Text = Translator.Get("Roll Down Button: This button scrolls the form down, allowing you to view files that are currently not visible in the data grid view.");
            toolStripSkipped.Text = Translator.Get("Roll Down Button: This button scrolls the form down, allowing you to view files that are currently not visible in the data grid view.");
        }

        private void settingsLabel_MouseHover(object sender, EventArgs e)
        {
            // This event handler is triggered when the mouse pointer hovers over the 'settingsLabel'.
            // It updates the text of multiple ToolStripStatusLabels with a tooltip description for the settings button.
            statusLabel.Text = Translator.Get("Settings Button: This button opens the settings dialog, allowing you to configure various options for the application, such as buffer size, multi-threading, and operation preferences.");
            toolStripCopyHistory.Text = Translator.Get("Settings Button: This button opens the settings dialog, allowing you to configure various options for the application, such as buffer size, multi-threading, and operation preferences.");
            toolStripExclusions.Text = Translator.Get("Settings Button: This button opens the settings dialog, allowing you to configure various options for the application, such as buffer size, multi-threading, and operation preferences.");
            toolStripMulti.Text = Translator.Get("Settings Button: This button opens the settings dialog, allowing you to configure various options for the application, such as buffer size, multi-threading, and operation preferences.");
            statsBarSettingsLabel.Text = Translator.Get("Settings Button: This button opens the settings dialog, allowing you to configure various options for the application, such as buffer size, multi-threading, and operation preferences.");
            toolStripSkipped.Text = Translator.Get("Settings Button: This button opens the settings dialog, allowing you to configure various options for the application, such as buffer size, multi-threading, and operation preferences.");
        }

        private void allAboutLabel_MouseHover(object sender, EventArgs e)
        {
            // This event handler is triggered when the mouse pointer hovers over the 'allAboutLabel'.
            // It updates the text of multiple ToolStripStatusLabels with a tooltip description for the about button.
            statusLabel.Text = Translator.Get("About Button: This button opens the 'About' dialog, providing information about the application, its version, and the developer.");
            toolStripCopyHistory.Text = Translator.Get("About Button: This button opens the 'About' dialog, providing information about the application, its version, and the developer.");
            toolStripExclusions.Text = Translator.Get("About Button: This button opens the 'About' dialog, providing information about the application, its version, and the developer.");
            toolStripMulti.Text = Translator.Get("About Button: This button opens the 'About' dialog, providing information about the application, its version, and the developer.");
            statsBarSettingsLabel.Text = Translator.Get("About Button: This button opens the 'About' dialog, providing information about the application, its version, and the developer.");
            toolStripSkipped.Text = Translator.Get("About Button: This button opens the 'About' dialog, providing information about the application, its version, and the developer.");
        }

        private void minimizeLabel_MouseHover(object sender, EventArgs e)
        {
            // This event handler is triggered when the mouse pointer hovers over the 'minimizeLabel'.
            // It updates the text of multiple ToolStripStatusLabels with a tooltip description.
            statusLabel.Text = Translator.Get("Minimize Button: This button minimizes the application to the taskbar or the system tray, allowing you to keep it running in the background without closing it.");
            toolStripCopyHistory.Text = Translator.Get("Minimize Button: This button minimizes the application to the taskbar or the system tray, allowing you to keep it running in the background without closing it.");
            toolStripExclusions.Text = Translator.Get("Minimize Button: This button minimizes the application to the taskbar or the system tray, allowing you to keep it running in the background without closing it.");
            toolStripMulti.Text = Translator.Get("Minimize Button: This button minimizes the application to the taskbar or the system tray, allowing you to keep it running in the background without closing it.");
            statsBarSettingsLabel.Text = Translator.Get("Minimize Button: This button minimizes the application to the taskbar or the system tray, allowing you to keep it running in the background without closing it.");
            toolStripSkipped.Text = Translator.Get("Minimize Button: This button minimizes the application to the taskbar or the system tray, allowing you to keep it running in the background without closing it.");
        }

        private void exitLabel_MouseHover(object sender, EventArgs e)
        {
            // This event handler is triggered when the mouse pointer hovers over the 'exitLabel'.
            // It updates the text of multiple ToolStripStatusLabels with a tooltip description for the exit button.
            statusLabel.Text = Translator.Get("Exit Button: This button closes the application. If the 'Minimize to System Tray' option is enabled, it will minimize the application instead of closing it.");
            toolStripCopyHistory.Text = Translator.Get("Exit Button: This button closes the application. If the 'Minimize to System Tray' option is enabled, it will minimize the application instead of closing it.");
            toolStripExclusions.Text = Translator.Get("Exit Button: This button closes the application. If the 'Minimize to System Tray' option is enabled, it will minimize the application instead of closing it.");
            toolStripMulti.Text = Translator.Get("Exit Button: This button closes the application. If the 'Minimize to System Tray' option is enabled, it will minimize the application instead of closing it.");
            statsBarSettingsLabel.Text = Translator.Get("Exit Button: This button closes the application. If the 'Minimize to System Tray' option is enabled, it will minimize the application instead of closing it.");
            toolStripSkipped.Text = Translator.Get("Exit Button: This button closes the application. If the 'Minimize to System Tray' option is enabled, it will minimize the application instead of closing it.");
        }

        private void cmdHomePage_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statusLabel' to a descriptive message when the mouse enters the 'cmdHomePage' button.
            statusLabel.Text = Translator.Get("Home Page Tab: This tab contains the main interface for file operations such as copy, move, and secure delete.");
        }

        private void cmdMultithread_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statusLabel' to a descriptive message.
            statusLabel.Text = Translator.Get("Multi-Thread Tab: This tab allows you to configure and monitor multi-threaded operations for copying or moving files.");
        }

        private void cmdSkipPage_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statusLabel' to a descriptive message.
            statusLabel.Text = Translator.Get("Skipped Tab: This tab displays the list of files that were skipped during the operation, along with options to manage the skipped files.");
        }

        private void cmdCopyHistory_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statusLabel' to a descriptive message.
            statusLabel.Text = Translator.Get("Copy History Tab: This tab shows the history of file operations performed by the application, allowing you to review past activities.");
        }

        private void cmdExclusions_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statusLabel' to a descriptive message.
            statusLabel.Text = Translator.Get("Exclusions Tab: This tab allows you to manage the lists of allowed and excluded files and directories for the operation.");
        }

        private void cmdTotals_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statusLabel' to a descriptive message.
            statusLabel.Text = Translator.Get("Totals Tab: This tab provides a summary of the total files processed, total data transferred, and other relevant statistics for the operation.");
        }

        private void cmdSettingsPage_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statusLabel' to a descriptive message.
            statusLabel.Text = Translator.Get("Settings Tab: This tab allows you to configure various settings for the application, including window behavior, appearance, performance, and other preferences.");
        }

        private void mainForm_MouseHover(object sender, EventArgs e)
        {
            statusLabel.Text = Translator.Get(proVersion
    ? "Copy That v1.0 Pro By: Havoc"
    : "Copy That v1.0 By: Havoc");
        }

        private void pauseResumeButton_Click(object sender, EventArgs e)
        {
            _isPaused = !_isPaused;

            if (_isPaused)
            {
                _pauseEvent.Reset();
                pauseResumeButton.Text = Translator.Get("Resume");
                StopElapsedTimer();
            }
            else
            {
                _pauseEvent.Set();
                pauseResumeButton.Text = Translator.Get("Pause");
                StartElapsedTimer();
            }
        }

        private void logFileCheckBox_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Log File CheckBox: This checkbox determines whether to create a log file that records details of the file operations performed by the application.");
        }

        private void opacityTrackBar_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Opacity Track Bar: This track bar allows you to adjust the opacity level of the application window, making it more or less transparent.");
        }

        private void priorityTrackBar_MouseHover(object sender, EventArgs e)
        {
            // Sets the text of the 'statsBarSettingsLabel' to a descriptive message.
            statsBarSettingsLabel.Text = Translator.Get("Priority Track Bar: This track bar allows you to adjust the priority level of the file operations, affecting how system resources are allocated.");
        }
    }
}